{"version":3,"sources":["integration-test/utils/ClientHistoryRequest.ts"],"names":["ClientHistoryRequest","requestContainer","client","_requestContainer","_client","service","init","on","events","beforeRequest","request","set","url","requestSuccess","response","res","clone","json","requestError","error","console","status","endPoint","rawResponse","forEach","value","key","indexOf","Error","debug","endPoints","callLog","dialingPlan","token","companyPager","sms","conferenceCall"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAqBA,oB;AAUnB,gCAAYC,gBAAZ,EAA8BC,MAA9B,EAAsC;AAAA;;AACpC,SAAKC,iBAAL,GAAyBF,gBAAzB;AACA,SAAKG,OAAL,GAAeF,MAAM,CAACG,OAAP,CAAeH,MAAf,EAAf;AACA,SAAKI,IAAL;AACD;;;;2BAEM;AAAA;;AACL,WAAKF,OAAL,CAAaG,EAAb,CAAgB,KAAKH,OAAL,CAAaI,MAAb,CAAoBC,aAApC,EAAmD,UAACC,OAAD,EAAa;AAC9D,QAAA,KAAI,CAACP,iBAAL,CAAuBQ,GAAvB,CAA2BD,OAAO,CAACE,GAAnC,EAAwC,IAAxC;AACD,OAFD;;AAGA,WAAKR,OAAL,CAAaG,EAAb,CAAgB,KAAKH,OAAL,CAAaI,MAAb,CAAoBK,cAApC;AAAA,2EAAoD,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5CC,kBAAAA,GAD4C,GACtCD,QAAQ,CAACE,KAAT,EADsC;AAAA,gCAElD,KAAI,CAACb,iBAF6C;AAAA,gCAEvBY,GAAG,CAACH,GAFmB;AAAA;AAAA,yBAERG,GAAG,CAACE,IAAJ,EAFQ;;AAAA;AAAA;;AAAA,8BAE3BN,GAF2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApD;;AAAA;AAAA;AAAA;AAAA;;AAIA,WAAKP,OAAL,CAAaG,EAAb,CAAgB,KAAKH,OAAL,CAAaI,MAAb,CAAoBU,YAApC;AAAA,4EAAkD,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAChDC,kBAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACT,OAAN,IAAiBS,KAAK,CAACT,OAAN,CAAcE,GAA7C;AADgD,iCAEhDQ,OAFgD;AAAA,iCAElCD,KAAK,CAACL,QAF4B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAETK,KAAK,CAACL,QAAN,CAAeE,KAAf,GAAuBC,IAAvB,EAFS;;AAAA;AAAA;;AAAA;AAAA;;AAAA,+BAExCE,KAFwC;;AAGhDC,kBAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACL,QAAN,IAAkBK,KAAK,CAACL,QAAN,CAAeO,MAA/C;;AAHgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAlD;;AAAA;AAAA;AAAA;AAAA;AAKD;;;mCAEcC,Q,EAAU;AACvB,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAKpB,iBAAL,CAAuBqB,OAAvB,CAA+B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC7C,YAAIA,GAAG,CAACC,OAAJ,CAAYL,QAAZ,IAAwB,CAAC,CAA7B,EAAgC;AAC9BC,UAAAA,WAAW,GAAGE,KAAd;AACD;AACF,OAJD;;AAKA,UAAIF,WAAW,IAAI,IAAnB,EAAyB;AACvB,cAAM,IAAIK,KAAJ,kDAAoDN,QAApD,OAAN;AACD,OAFD,MAEO;AACL,eAAOC,WAAP;AACD;AACF;;;0CAEqB;AACpB,WAAKpB,iBAAL,CAAuBqB,OAAvB,CAA+B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC7CN,QAAAA,OAAO,CAACS,KAAR,yBAA+BH,GAA/B,yBAAiDD,KAAjD;AACD,OAFD;AAGD;;;wBAEgB;AACf,aAAO,KAAKtB,iBAAZ;AACD;;;;;;;AArDkBH,oB,CACZ8B,S,GAAY;AACjBC,EAAAA,OAAO,EAAE,8CADQ;AAEjBC,EAAAA,WAAW,EAAE,sCAFI;AAGjBC,EAAAA,KAAK,EAAE,sBAHU;AAIjBC,EAAAA,YAAY,EAAE,mDAJG;AAKjBC,EAAAA,GAAG,EAAE,yCALY;AAMjBC,EAAAA,cAAc,EAAE;AANC,C","sourcesContent":["export default class ClientHistoryRequest {\n  static endPoints = {\n    callLog: '/restapi/v1.0/account/~/extension/~/call-log',\n    dialingPlan: '/restapi/v1.0/account/~/dialing-plan',\n    token: '/restapi/oauth/token',\n    companyPager: '/restapi/v1.0/account/~/extension/~/company-pager',\n    sms: '/restapi/v1.0/account/~/extension/~/sms',\n    conferenceCall: '/restapi/v1.0/account/~/telephony/conference',\n  };\n\n  constructor(requestContainer, client) {\n    this._requestContainer = requestContainer;\n    this._client = client.service.client();\n    this.init();\n  }\n\n  init() {\n    this._client.on(this._client.events.beforeRequest, (request) => {\n      this._requestContainer.set(request.url, null);\n    });\n    this._client.on(this._client.events.requestSuccess, async (response) => {\n      const res = response.clone();\n      this._requestContainer.set(res.url, await res.json());\n    });\n    this._client.on(this._client.events.requestError, async (error) => {\n      console.error(error.request && error.request.url);\n      console.error(error.response && (await error.response.clone().json()));\n      console.error(error.response && error.response.status);\n    });\n  }\n\n  getRawResponse(endPoint) {\n    let rawResponse = null;\n    this._requestContainer.forEach((value, key) => {\n      if (key.indexOf(endPoint) > -1) {\n        rawResponse = value;\n      }\n    });\n    if (rawResponse == null) {\n      throw new Error(`Cannot find rawResponse from endPoint:'${endPoint}'`);\n    } else {\n      return rawResponse;\n    }\n  }\n\n  debugHistoryRequest() {\n    this._requestContainer.forEach((value, key) => {\n      console.debug(`Request  URL:'${key}' Response:'${value}'`);\n    });\n  }\n\n  get requestLog() {\n    return this._requestContainer;\n  }\n}\n"],"file":"ClientHistoryRequest.js"}