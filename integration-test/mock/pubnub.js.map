{"version":3,"file":"pubnub.js","names":["_subscription","_interopRequireDefault","require","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","toString","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","RealPubnub","jest","requireActual","pubnubCache","MockedPubNub","_ref","subscribeKey","_subscribeKey","_realPubnub","encrypt","decrypt","_channels","_listeners","push","subscribe","_ref2","channels","addListener","listener","_this","setTimeout","mockedConnected","removeAllListeners","unsubscribeAll","destroy","_iterator","_step","listen","status","category","operation","mockCallMessage","activeCallsBody","encrypted","JSON","stringify","uuid","event","timestamp","Date","toISOString","subscriptionId","body","allowSeeMyPresence","dndStatus","extensionId","meetingsStatus","pickUpCallsOnHold","presenceStatus","ringOnMonitoredCall","sequence","telephonyStatus","userStatus","activeCalls","totalActiveCalls","subscriptionBody","deliveryMode","encryptionKey","encryptKey","keyEncoding","keyLength","mode","mockMessage","msg","pubnubMsg","channel","subscription","actualChannel","subscribedChannel","timetoken","publisher","message","forEach","l","mockPresence","OPERATIONS","CATEGORIES","getLastPubnub","_default","exports"],"sources":["integration-test/mock/pubnub.ts"],"sourcesContent":["import subscriptionBody from './data/subscription.json';\n\nconst RealPubnub = jest.requireActual('pubnub');\n\nconst pubnubCache = [];\n\nclass MockedPubNub {\n  constructor({ subscribeKey }) {\n    this._subscribeKey = subscribeKey;\n    this._realPubnub = new RealPubnub({ subscribeKey });\n    this.encrypt = this._realPubnub.encrypt;\n    this.decrypt = this._realPubnub.decrypt;\n    this._channels = [];\n    this._listeners = [];\n    pubnubCache.push(this);\n  }\n\n  subscribe({ channels }) {\n    this._channels = channels;\n  }\n\n  addListener(listener) {\n    this._listeners.push(listener);\n    setTimeout(() => this.mockedConnected(), 0);\n  }\n\n  removeAllListeners() {\n    this._listeners = [];\n  }\n\n  unsubscribeAll() {}\n\n  destroy() {\n    this._realPubnub = null;\n  }\n\n  // Methods to do mocking operations\n  mockedConnected() {\n    for (const listen of this._listeners) {\n      listen.status({\n        category: 'PNConnectedCategory',\n        operation: 'PNSubscribeOperation',\n      });\n    }\n  }\n\n  mockCallMessage(activeCallsBody) {\n    const encrypted = this._realPubnub.encrypt(\n      JSON.stringify({\n        uuid: '1088719898803550582-8036702296129764',\n        event:\n          '/restapi/v1.0/account/160746006/extension/160751006/presence?detailedTelephonyState=true&sipData=true',\n        timestamp: new Date().toISOString(),\n        subscriptionId: '24dcfdcf-e7d0-4930-9edb-555ec11843b9',\n        body: {\n          allowSeeMyPresence: true,\n          dndStatus: 'TakeAllCalls',\n          extensionId: 160751006,\n          meetingsStatus: 'Disconnected',\n          pickUpCallsOnHold: false,\n          presenceStatus: 'Busy',\n          ringOnMonitoredCall: false,\n          sequence: 368997,\n          telephonyStatus: 'OnHold',\n          userStatus: 'Available',\n          activeCalls: activeCallsBody,\n          totalActiveCalls: activeCallsBody.length,\n        },\n      }),\n      subscriptionBody.deliveryMode.encryptionKey,\n      {\n        encryptKey: false,\n        keyEncoding: 'base64',\n        keyLength: 128,\n        mode: 'ecb',\n      },\n    );\n    this.mockMessage(encrypted);\n  }\n\n  mockMessage(msg) {\n    const pubnubMsg = {\n      channel: this._channels[0],\n      subscription: undefined,\n      actualChannel: null,\n      subscribedChannel: this._channels[0],\n      timetoken: '14933652238078468',\n      publisher: undefined,\n      message: msg,\n    };\n    this._listeners.forEach((l) => l.message(pubnubMsg));\n  }\n\n  mockPresence(msg) {\n    const pubnubMsg = {\n      channel: this._channels[0],\n      subscription: undefined,\n      actualChannel: null,\n      subscribedChannel: this._channels[0],\n      timetoken: '14933652238078468',\n      publisher: undefined,\n      message: msg,\n    };\n    this._listeners.forEach((l) => l.message(pubnubMsg));\n  }\n}\n\nMockedPubNub.OPERATIONS = RealPubnub.OPERATIONS;\nMockedPubNub.CATEGORIES = RealPubnub.CATEGORIES;\nMockedPubNub.getLastPubnub = function getLastPubnub() {\n  return pubnubCache[pubnubCache.length - 1];\n};\n\nexport default MockedPubNub;\n"],"mappings":"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"}