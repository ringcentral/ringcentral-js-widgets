{"version":3,"sources":["integration-test/mock/telephonySessionBuilder.ts"],"names":["sequence","DEFAULT_DIRECTION","callDirections","outbound","DEFAULT_PHONE_NUMBER","DEFAULT_EXTENSION_ID","extensionBody","id","toString","telephonySessionBuildersCache","TelephonySessionBuilder","initParams","_data","_telephonySessionId","_phoneNumber","_direction","_sessionId","_partyStatus","_partyId","_fromNumberData","_toNumberData","_startTime","_isRecording","_init","telephonySessionId","phoneNumber","direction","sessionId","status","PartyStatusCode","proceeding","fromNumberData","toNumberData","startTime","isRecording","toNumber","fromNumber","body","partyId","answered","disconnected","push","data","name","extensionId","active","telephonySessionMessage","uuid","timestamp","format","subscriptionId","serverId","eventTime","Date","accountId","parties","to","numberData","from","code","mobilePickupData","ccMailboxes","sid","srvLvl","srvLvlExt","recordings","missedCall","standAlone","muted","origin","type","createTelephonySession"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { PartyStatusCode } from 'ringcentral-call-control/lib/Session';\nimport { v4 as uuidV4 } from 'uuid';\n\nimport callDirections from '../../enums/callDirections';\nimport extensionBody from './data/extensionInfo.json';\nimport telephonySessionMessage from './data/telephonySessions.json';\n\n/**\n * Telephony session message boy //https://developers.ringcentral.com/api-reference/Extension-Telephony-Sessions-Event\n * supports:\n * 1. create different telephony status's session;\n * 2. update telephony status;\n * 3. custom sessionId, from, to, direction attribute;\n *\n * @class TelephonySession\n */\nexport type PhoneNumber = {\n  name: string;\n  phoneNumber: string;\n};\n\ntype CallDirectionsKeys = keyof typeof callDirections;\n\ntype CallDirections = typeof callDirections[CallDirectionsKeys];\ntype PartyStatusCodeKeys = keyof typeof PartyStatusCode;\ntype recordingsProps = {\n  id?: string;\n  active?: boolean;\n};\n\nexport type Party = {\n  extensionId: string;\n  id: string;\n  direction: CallDirections;\n  to: {\n    phoneNumber: string;\n    name: string;\n    extensionId: string;\n  };\n  from: {\n    phoneNumber: string;\n    name: string;\n    extensionId: string;\n  };\n  status: {\n    code: typeof PartyStatusCode[PartyStatusCodeKeys];\n    mobilePickupData: {\n      ccMailboxes: string[];\n      to: string;\n      sid: string;\n      srvLvl: string;\n      srvLvlExt: string;\n    };\n  };\n  recordings: recordingsProps[];\n  missedCall: boolean;\n  standAlone: boolean;\n  muted: boolean;\n};\n\nexport type Origin = {\n  type: string;\n};\n\nexport type Body = {\n  sequence: number;\n  sessionId: string;\n  telephonySessionId: string;\n  serverId: string;\n  eventTime: string;\n  accountId: string;\n  parties: Party[];\n  origin: Origin;\n  extensionId: string;\n  recordings: recordingsProps[];\n};\n\nlet sequence = 10;\nconst DEFAULT_DIRECTION = callDirections.outbound;\nexport const DEFAULT_PHONE_NUMBER = '+16501234567';\n\nconst DEFAULT_EXTENSION_ID = extensionBody.id.toString();\n\nexport interface TelephonySessionInterface {\n  uuid: string;\n  event: string;\n  timestamp: string;\n  subscriptionId: string;\n  ownerId: string;\n  body: Body;\n}\n\nexport interface NumberData {\n  phoneNumber: string;\n  name: string;\n  extensionId: string;\n}\n\ninterface InitParams {\n  telephonySessionId?: string;\n  phoneNumber?: string;\n  direction?: CallDirections;\n  sessionId?: string;\n  status?: PartyStatusCode;\n  fromNumberData?: NumberData;\n  toNumberData?: NumberData;\n  startTime?: string;\n  isRecording?: boolean;\n}\n\nexport const telephonySessionBuildersCache: TelephonySessionBuilder[] = [];\n\nclass TelephonySessionBuilder {\n  private _data: TelephonySessionInterface;\n  private _telephonySessionId: string;\n  private _phoneNumber: string;\n  private _direction: CallDirections;\n  private _sessionId: string;\n  private _partyStatus: PartyStatusCode;\n  private _partyId: string;\n  private _fromNumberData: NumberData;\n  private _toNumberData: NumberData;\n  private _startTime: string;\n  private _isRecording: boolean;\n\n  constructor(initParams: InitParams = {}) {\n    this._init(initParams);\n  }\n\n  _init({\n    telephonySessionId = uuidV4(),\n    phoneNumber = DEFAULT_PHONE_NUMBER,\n    direction = DEFAULT_DIRECTION,\n    sessionId,\n    status = PartyStatusCode.proceeding,\n    fromNumberData,\n    toNumberData,\n    startTime,\n    isRecording,\n  }: InitParams) {\n    this._telephonySessionId = telephonySessionId;\n    this._sessionId = sessionId || telephonySessionId;\n    this._phoneNumber = phoneNumber;\n    this._direction = direction;\n    this._partyId = `${telephonySessionId}-1`;\n    this._partyStatus = status;\n    this._fromNumberData = fromNumberData;\n    this._toNumberData = toNumberData;\n    this._startTime = startTime;\n    this._isRecording = isRecording;\n  }\n\n  direction(direction: CallDirections) {\n    this._direction = direction;\n    return this;\n  }\n\n  status(status: PartyStatusCode) {\n    this._partyStatus = status;\n    return this;\n  }\n\n  to(toNumber: string) {\n    this._phoneNumber = toNumber;\n    return this;\n  }\n\n  from(fromNumber: string) {\n    this._phoneNumber = fromNumber;\n    return this;\n  }\n\n  sessionId(sessionId: string) {\n    this._sessionId = sessionId;\n    return this;\n  }\n\n  telephonySessionId(telephonySessionId: string) {\n    this._data.body.telephonySessionId = telephonySessionId;\n    return this;\n  }\n\n  partyId(partyId: string) {\n    this._partyId = partyId;\n    return this;\n  }\n\n  setConnected() {\n    return this.status(PartyStatusCode.answered);\n  }\n\n  setDisconnected() {\n    return this.status(PartyStatusCode.disconnected);\n  }\n\n  setInboundCall() {\n    return this.direction('Inbound');\n  }\n\n  setOutboundCall() {\n    return this.direction('Outbound');\n  }\n\n  setNumber(phoneNumber: string) {\n    this._phoneNumber = phoneNumber;\n    return this;\n  }\n\n  done() {\n    telephonySessionBuildersCache.push(this);\n    return this.data;\n  }\n\n  get telephoneSessionId() {\n    return this._telephonySessionId;\n  }\n\n  get numberData() {\n    return {\n      phoneNumber: this._phoneNumber,\n      name: 'Yoda HubSpot',\n      extensionId: DEFAULT_EXTENSION_ID,\n    };\n  }\n\n  get recordings(): recordingsProps[] {\n    return [\n      {\n        id: DEFAULT_EXTENSION_ID,\n        active: this._isRecording,\n      },\n    ];\n  }\n\n  get data(): TelephonySessionInterface {\n    return {\n      ...telephonySessionMessage,\n      uuid: uuidV4(),\n      timestamp: moment().format(),\n      subscriptionId: uuidV4(),\n      body: {\n        ...telephonySessionMessage.body,\n        sequence: sequence++,\n        sessionId: this._sessionId,\n        telephonySessionId: this._telephonySessionId,\n        serverId: '10.62.25.111.TAM',\n        eventTime: this._startTime || Date(),\n        accountId: '400144452008',\n        extensionId: DEFAULT_EXTENSION_ID,\n        parties: [\n          {\n            extensionId: DEFAULT_EXTENSION_ID,\n            id: this._partyId,\n            direction: this._direction,\n            to: this._toNumberData || this.numberData,\n            from: this._fromNumberData || this.numberData,\n            status: {\n              code: this._partyStatus,\n              mobilePickupData: {\n                ccMailboxes: ['400144455008'],\n                to: '#19008@sip-mesdevams.lab.nordigy.ru:5060',\n                sid: '402936472080',\n                srvLvl: '-149699523',\n                srvLvlExt: '390',\n              },\n            },\n            recordings: this.recordings,\n            missedCall: false,\n            standAlone: false,\n            muted: false,\n          },\n        ],\n        recordings: this.recordings,\n        origin: {\n          type: 'Call',\n        },\n      },\n    };\n  }\n}\n\nfunction createTelephonySession(initParams?: InitParams) {\n  return new TelephonySessionBuilder(initParams);\n}\nexport { createTelephonySession, PartyStatusCode, TelephonySessionBuilder };\n"],"file":"telephonySessionBuilder.js"}