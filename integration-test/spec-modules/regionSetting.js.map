{"version":3,"sources":["integration-test/spec-modules/regionSetting.ts"],"names":["auth","client","regionSettings","account","describe","timeout","mock","mockClient","clientHistoryRequest","ClientHistoryRequest","Map","before","mockForLogin","isLoginSuccess","console","error","skip","it","retries","expect","availableCountries","to","have","length","above","countryCode","equal","extensionInfoData","regionalSettings","homeCountry","isoCode","showRegionSettings","dialingPlanData","records"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;eAEe,kBAACA,IAAD,EAAOC,MAAP,EAAeC,cAAf,EAA+BC,OAA/B,EAA2C;AACxDC,EAAAA,QAAQ,CAAC,kBAAD,uEAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3B,YAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAC,YAAAA,IAAI,CAACC,UAAL,CAAgBN,MAAhB;AAEMO,YAAAA,oBAJqB,GAIE,IAAIC,gCAAJ,CAAyB,IAAIC,GAAJ,EAAzB,EAAoCT,MAApC,CAJF,EAM3B;;AACAU,YAAAA,MAAM,uEAAC;AAAA;AAAA;AAAA;AAAA;AACLL,sBAAAA,IAAI,CAACM,YAAL;AADK;AAAA,6BAEkB,2BAAYZ,IAAZ,EAAkBG,OAAlB,CAFlB;;AAAA;AAELU,sBAAAA,cAFK;;AAGL,0BAAI,CAACA,cAAL,EAAqB;AACnBC,wBAAAA,OAAO,CAACC,KAAR,CACE,oDADF,EAEEZ,OAFF;;AAIA,wBAAA,KAAI,CAACa,IAAL;AACD;;AATI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD,GAAN;AAYAC,YAAAA,EAAE,CAAC,0CAAD,uEAA6C;AAAA;AAAA;AAAA;AAAA;AAC7C,sBAAA,KAAI,CAACC,OAAL,CAAa,CAAb;;AAD6C;AAAA,6BAEvC,6BAAc,CAAd,CAFuC;;AAAA;AAG7CC,sBAAAA,MAAM,CAACjB,cAAc,CAACkB,kBAAhB,CAAN,CAA0CC,EAA1C,CAA6CC,IAA7C,CAAkDC,MAAlD,CAAyDC,KAAzD,CAA+D,CAA/D;AACAL,sBAAAA,MAAM,CAACjB,cAAc,CAACuB,WAAhB,CAAN,CAAmCJ,EAAnC,CAAsCK,KAAtC,CACEC,0BAAkBC,gBAAlB,CAAmCC,WAAnC,CAA+CC,OADjD;AAGAX,sBAAAA,MAAM,CAACjB,cAAc,CAAC6B,kBAAhB,CAAN,CAA0CV,EAA1C,CAA6CK,KAA7C,CAAmD,IAAnD;;AAP6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA7C,GAAF;AAUAT,YAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChEE,cAAAA,MAAM,CAACjB,cAAc,CAACkB,kBAAf,CAAkCG,MAAnC,CAAN,CAAiDF,EAAjD,CAAoDK,KAApD,CACEM,wBAAgBC,OAAhB,CAAwBV,MAD1B;AAGD,aAJC,CAAF;;AA7B2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB,GAAR;AAmCD,C","sourcesContent":["import * as mock from '../mock';\nimport dialingPlanData from '../mock/data/dialingPlan';\nimport extensionInfoData from '../mock/data/extensionInfo';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\n\nexport default (auth, client, regionSettings, account) => {\n  describe('Region Settings:', async () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    // eslint-disable-next-line no-undef\n    before(async () => {\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error(\n          'Skip test case as failed to login with credential ',\n          account,\n        );\n        this.skip();\n      }\n    });\n\n    it('should be ready in 2 seconds after login', async () => {\n      this.retries(2);\n      await waitInSeconds(2);\n      expect(regionSettings.availableCountries).to.have.length.above(0);\n      expect(regionSettings.countryCode).to.equal(\n        extensionInfoData.regionalSettings.homeCountry.isoCode,\n      );\n      expect(regionSettings.showRegionSettings).to.equal(true);\n    });\n\n    it('Record fetched from SDK should be the same as RawData', () => {\n      expect(regionSettings.availableCountries.length).to.equal(\n        dialingPlanData.records.length,\n      );\n    });\n  });\n};\n"],"file":"regionSetting.js"}