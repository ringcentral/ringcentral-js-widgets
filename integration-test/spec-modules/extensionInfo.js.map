{"version":3,"sources":["integration-test/spec-modules/extensionInfo.ts"],"names":["auth","client","extensionInfo","account","alert","describe","timeout","mock","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","Map","afterEach","loggedIn","logout","it","restore","mockForLogin","console","error","skip","retries","expect","info","extensionNumber","equal","mockExtensionInfo","mockForbidden","path","login","state","messages","permissionsMessages","insufficientPrivilege","to","not","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;eAEe,kBAACA,IAAD,EAAOC,MAAP,EAAeC,aAAf,EAA8BC,OAA9B,EAAuCC,KAAvC,EAAiD;AAC9DC,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/B,IAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAC,IAAAA,IAAI,CAACC,UAAL,CAAgBP,MAAhB;AAEA,QAAIQ,cAAJ;AACA,QAAMC,oBAAoB,GAAG,IAAIC,gCAAJ,CAAyB,IAAIC,GAAJ,EAAzB,EAAoCX,MAApC,CAA7B;AAEAY,IAAAA,SAAS,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJb,IAAI,CAACc,QADD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEAd,IAAI,CAACe,MAAL,EAFA;;AAAA;AAAA;AAAA,qBAIF,6BAAc,CAAd,CAJE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAT;AAOAC,IAAAA,EAAE,CAAC,+BAAD,uEAAkC;AAAA;AAAA;AAAA;AAAA;AAClCT,cAAAA,IAAI,CAACU,OAAL;AACAV,cAAAA,IAAI,CAACW,YAAL;AAFkC;AAAA,qBAGX,2BAAYlB,IAAZ,EAAkBG,OAAlB,CAHW;;AAAA;AAGlCM,cAAAA,cAHkC;;AAIlC,kBAAI,CAACA,cAAL,EAAqB;AACnBU,gBAAAA,OAAO,CAACC,KAAR,CACE,oDADF,EAEEjB,OAFF;;AAIA,gBAAA,KAAI,CAACkB,IAAL;AACD;;AACD,cAAA,KAAI,CAACC,OAAL,CAAa,CAAb;;AAXkC;AAAA,qBAY5B,6BAAc,CAAd,CAZ4B;;AAAA;AAalCC,cAAAA,MAAM,CAACrB,aAAa,CAACsB,IAAd,CAAmBC,eAApB,CAAN,CAA2CC,KAA3C,CAAiD,KAAjD;;AAbkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC,GAAF;AAgBAV,IAAAA,EAAE,CAAC,gDAAD,uEAAmD;AAAA;AAAA;AAAA;AAAA;AACnDT,cAAAA,IAAI,CAACU,OAAL;AACAV,cAAAA,IAAI,CAACW,YAAL,CAAkB;AAAES,gBAAAA,iBAAiB,EAAE;AAArB,eAAlB;AACApB,cAAAA,IAAI,CAACqB,aAAL,CAAmB;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAAnB;AAHmD;AAAA,qBAI7C7B,IAAI,CAAC8B,KAAL,mBACD3B,OADC,EAJ6C;;AAAA;AAAA;AAAA,qBAO7C,6BAAc,CAAd,CAP6C;;AAAA;AAQnDoB,cAAAA,MAAM,CAACvB,IAAI,CAACc,QAAN,CAAN,CAAsBY,KAAtB,CAA4B,KAA5B;AACAH,cAAAA,MAAM,CACJ,oCACEnB,KAAK,CAAC2B,KAAN,CAAYC,QADd,EAEEC,yCAAoBC,qBAFtB,CADI,CAAN,CAKEC,EALF,CAKKC,GALL,CAKSV,KALT,CAKeW,SALf;;AATmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnD,GAAF;AAgBD,GA9CO,CAAR;AA+CD,C","sourcesContent":["import { permissionsMessages } from '../../enums/permissionsMessages';\nimport * as mock from '../mock';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\n\nexport default (auth, client, extensionInfo, account, alert) => {\n  describe('ExtensionInfo:', () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async () => {\n      if (auth.loggedIn) {\n        await auth.logout();\n      }\n      await waitInSeconds(1);\n    });\n\n    it('Should load info successfully', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error(\n          'Skip test case as failed to login with credential ',\n          account,\n        );\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(extensionInfo.info.extensionNumber).equal('101');\n    });\n\n    it('Should show insufficientPrivilege when get 403', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockExtensionInfo: false });\n      mock.mockForbidden({ path: '/restapi/v1.0/account/~/extension/~' });\n      await auth.login({\n        ...account,\n      });\n      await waitInSeconds(3);\n      expect(auth.loggedIn).equal(false);\n      expect(\n        containsErrorMessage(\n          alert.state.messages,\n          permissionsMessages.insufficientPrivilege,\n        ),\n      ).to.not.equal(undefined);\n    });\n  });\n};\n"],"file":"extensionInfo.js"}