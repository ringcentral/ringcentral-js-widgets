{"version":3,"sources":["integration-test/spec-modules/callingSettings.ts"],"names":["auth","client","alert","account","callingSettings","extensionPhoneNumber","extensionInfo","describe","timeout","mock","mockClient","before","mockForLogin","isLoginSuccess","console","error","skip","it","expect","callWith","to","equals","callingOptions","softphone","callingMode","callingModes","setData","myphone","ringout","otherphone","customphone","myLocation","ringoutPrompt","beforeEach","dismissAll","state","messages","length","isAlertClear","callingSettingsMessages","saveSuccessWithSoftphone","not","equal","undefined","saveSuccess","logout","loginStatus","notLoggedIn","restore","myPhoneNumbers","directNumbers","map","item","phoneNumber","mainCompanyNumber","extensionNumber","push","forEach","number","include","mockAuthzProfile","authzProfile","permissions","authzProfileBody","filter","p","permission","id","callWithOptions","deep","mockExtensionInfo"],"mappings":"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","sourcesContent":["import loginStatus from '../../modules/Auth/loginStatus';\nimport callingModes from '../../modules/CallingSettings/callingModes';\nimport callingOptions from '../../modules/CallingSettings/callingOptions';\nimport callingSettingsMessages from '../../modules/CallingSettings/callingSettingsMessages';\nimport * as mock from '../mock';\nimport authzProfileBody from '../mock/data/authzProfile';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitUntilEqual } from '../utils/WaitUtil';\n\n// TODO: refactor and combine with new IT solutions\n/* global before */\n\nexport default (\n  auth,\n  client,\n  alert,\n  account,\n  callingSettings,\n  extensionPhoneNumber,\n  extensionInfo,\n) => {\n  describe('Calling Settings', async () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n    let isLoginSuccess;\n\n    describe('When has permission', async () => {\n      this.timeout(20000);\n\n      before(async () => {\n        mock.mockForLogin();\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error(\n            'Skip test case as failed to login with credential ',\n            account,\n          );\n          this.skip();\n        }\n      });\n\n      it('Should Be Make Call with Softphone by Default', async () => {\n        expect(callingSettings.callWith).to.equals(callingOptions.softphone);\n        expect(callingSettings.callingMode).to.equals(callingModes.softphone);\n      });\n\n      describe('Should Save Calling Mode', () => {\n        this.timeout(20000);\n        it('Should Save My RingCentral Phone', async () => {\n          callingSettings.setData({\n            callWith: callingOptions.myphone,\n          });\n          expect(callingSettings.callWith).to.equals(callingOptions.myphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n        it('Should Save Other Phone', async () => {\n          callingSettings.setData({\n            callWith: callingOptions.otherphone,\n          });\n          expect(callingSettings.callWith).to.equals(callingOptions.otherphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n        it('Should Save Custom Phone', async () => {\n          callingSettings.setData({\n            callWith: callingOptions.customphone,\n          });\n          expect(callingSettings.callWith).to.equals(\n            callingOptions.customphone,\n          );\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n      });\n\n      describe('Should Save Options in RingOut Mode', () => {\n        this.timeout(20000);\n        it('Should Save From Number', async () => {\n          callingSettings.setData({\n            myLocation: '123',\n          });\n          expect(callingSettings.myLocation).to.equals('123');\n        });\n        it('Should Save RingoutPrompt', async () => {\n          callingSettings.setData({\n            ringoutPrompt: '123',\n          });\n          expect(callingSettings.ringoutPrompt).to.equals('123');\n        });\n      });\n\n      describe('Should Allow Alert', () => {\n        this.timeout(20000);\n        beforeEach(async () => {\n          const isAlertClear = await waitUntilEqual(\n            () => {\n              alert.dismissAll();\n              return alert.state.messages.length;\n            },\n            'Alert',\n            0,\n            5,\n          );\n          if (!isAlertClear) {\n            console.error('Alert is not cleared after dismissAll');\n            this.skip();\n          }\n        });\n        describe('Should Prompt Alerts when withPrompt Equals True', () => {\n          it('Should Prompt Alert of saveSuccessWithSoftphone', async () => {\n            callingSettings.setData(\n              {\n                callWith: callingOptions.softphone,\n              },\n              true,\n            );\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccessWithSoftphone,\n              ),\n            ).to.not.equal(undefined);\n          });\n          it('Should Prompt Alert of saveSuccess when Calling Option is Other Phone', async () => {\n            callingSettings.setData(\n              {\n                callWith: callingOptions.otherphone,\n              },\n              true,\n            );\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccess,\n              ),\n            ).to.not.equal(undefined);\n          });\n          it('Should Prompt Alert of saveSuccess when Calling Option is My RingCentral Phone', async () => {\n            callingSettings.setData(\n              {\n                callWith: callingOptions.myphone,\n              },\n              true,\n            );\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccess,\n              ),\n            ).to.not.equal(undefined);\n          });\n          it('Should Prompt Alert of saveSuccess when Calling Option is Custom Phone', async () => {\n            callingSettings.setData(\n              {\n                callWith: callingOptions.customphone,\n              },\n              true,\n            );\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccess,\n              ),\n            ).to.not.equal(undefined);\n          });\n        });\n        describe('Should Not Prompt Alerts when withPrompt Equals False', function () {\n          it('Should Not Prompt Alert when Calling Option is Softphone', async () => {\n            callingSettings.setData(\n              {\n                callWith: callingOptions.softphone,\n              },\n              false,\n            );\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccess,\n              ),\n            ).to.equal(undefined);\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccessWithSoftphone,\n              ),\n            ).to.equal(undefined);\n          });\n          it('Should Not Prompt Alert when Calling Option is My RingCentral Phone', async () => {\n            callingSettings.setData(\n              {\n                callWith: callingOptions.myphone,\n              },\n              false,\n            );\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccess,\n              ),\n            ).to.equal(undefined);\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccessWithSoftphone,\n              ),\n            ).to.equal(undefined);\n          });\n          it('Should Not Prompt Alert when Calling Option is Other Phone', async () => {\n            callingSettings.setData(\n              {\n                callWith: callingOptions.otherphone,\n              },\n              false,\n            );\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccess,\n              ),\n            ).to.equal(undefined);\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccessWithSoftphone,\n              ),\n            ).to.equal(undefined);\n          });\n          it('Should Not Prompt Alert when Calling Option is Custom Phone', async () => {\n            callingSettings.setData(\n              {\n                callWith: callingOptions.customphone,\n              },\n              false,\n            );\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccess,\n              ),\n            ).to.equal(undefined);\n            expect(\n              containsErrorMessage(\n                alert.state.messages,\n                callingSettingsMessages.saveSuccessWithSoftphone,\n              ),\n            ).to.equal(undefined);\n          });\n        });\n      });\n      describe('Should Remember after Logout', () => {\n        this.timeout(20000);\n        it('Should Remember Calling Settings after Re-login', async () => {\n          this.timeout(20000);\n          callingSettings.setData({\n            callWith: callingOptions.customphone,\n            myLocation: '456',\n            ringoutPrompt: '456',\n          });\n          auth.logout();\n          await waitUntilEqual(\n            () => auth.loginStatus,\n            'LoginStatus',\n            loginStatus.notLoggedIn,\n            3,\n          );\n          mock.restore();\n          mock.mockForLogin();\n          await ensureLogin(auth, account);\n          expect(callingSettings.ringoutPrompt).to.equals('456');\n          expect(callingSettings.myLocation).to.equals('456');\n          expect(callingSettings.callWith).to.equals(\n            callingOptions.customphone,\n          );\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n      });\n      describe('Should Have Required Phone Numbers', () => {\n        this.timeout(20000);\n        it('Should Have My Phone Numbers', async () => {\n          const myPhoneNumbers = extensionPhoneNumber.directNumbers.map(\n            (item) => item.phoneNumber,\n          );\n          const { mainCompanyNumber } = extensionPhoneNumber;\n          const { extensionNumber } = extensionInfo;\n          if (mainCompanyNumber && extensionNumber) {\n            myPhoneNumbers.push(\n              `${mainCompanyNumber.phoneNumber}*${extensionNumber}`,\n            );\n          }\n          expect(callingSettings.myPhoneNumbers.length).to.equal(\n            myPhoneNumbers.length,\n          );\n          callingSettings.myPhoneNumbers.forEach((number) => {\n            expect(myPhoneNumbers).to.include(number);\n          });\n        });\n        // TODO: Add test cases for Other Phone Numbers\n      });\n    });\n\n    it('Should only include softphone when ReadUserPhoneNumbers is false', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(\n          (p) => p.permission.id !== 'ReadUserPhoneNumbers',\n        ),\n      });\n      await ensureLogin(auth, account);\n      expect(callingSettings.callWithOptions).to.deep.equals([\n        callingOptions.softphone,\n      ]);\n      expect(callingSettings.callingMode).to.equals(callingModes.softphone);\n    });\n\n    it('Should only include softphone when ReadUserForwardingFlipNumbers is false', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockExtensionInfo: false });\n      // TODO: refactor to use extensionFeatures, and understand how that's related to \"ReadUserForwardingFlipNumbers\"\n      // mock.extensionInfo({\n      //   serviceFeatures: extensionInfoBody.serviceFeatures\n      //     .filter((p) => p.featureName !== 'WebPhone')\n      //     .concat({\n      //       featureName: 'WebPhone',\n      //       enabled: false,\n      //     }),\n      // });\n      await ensureLogin(auth, account);\n      expect(callingSettings.callWithOptions).to.deep.equals([\n        callingOptions.softphone,\n        callingOptions.myphone,\n        callingOptions.otherphone,\n        callingOptions.customphone,\n      ]);\n    });\n  });\n};\n"],"file":"callingSettings.js"}