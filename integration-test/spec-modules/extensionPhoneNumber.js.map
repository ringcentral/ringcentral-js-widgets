{"version":3,"sources":["integration-test/spec-modules/extensionPhoneNumber.ts"],"names":["auth","client","extensionPhoneNumber","account","describe","timeout","mock","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","Map","before","restore","mockForLogin","console","error","skip","after","logout","it","retries","expect","numbers","length","equal","mainCompanyNumber","usageType","companyNumbers","directNumbers","callerIdNumbers","smsSenderNumbers","mockAuthzProfile","authzProfile","permissions","authzProfileBody","filter","p","permission","id","undefined"],"mappings":"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","sourcesContent":["import { sleep } from '../../lib/sleep';\nimport * as mock from '../mock';\nimport authzProfileBody from '../mock/data/authzProfile';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport { ensureLogin } from '../utils/HelpUtil';\n\nexport default (auth, client, extensionPhoneNumber, account) => {\n  describe('ExtensionPhoneNumber:', () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    describe('When has ReadUserPhoneNumbers permission', () => {\n      before(async () => {\n        mock.restore();\n        mock.mockForLogin();\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error(\n            'Skip test case as failed to login with credential ',\n            account,\n          );\n          this.skip();\n        }\n      });\n\n      after(async () => {\n        await auth.logout();\n\n        await sleep(1000);\n      });\n\n      it('Should load numbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.numbers.length).equal(5);\n      });\n\n      it('Should load mainCompanyNumber', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.mainCompanyNumber.usageType).equal(\n          'MainCompanyNumber',\n        );\n      });\n\n      it('Should load companyNumbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.companyNumbers.length).equal(1);\n      });\n\n      it('Should load directNumbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.directNumbers.length).equal(3);\n      });\n\n      it('Should load callerIdNumbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.callerIdNumbers.length).equal(5);\n      });\n\n      it('Should load smsSenderNumbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.smsSenderNumbers.length).equal(5);\n      });\n    });\n\n    describe(\"When doesn't have ReadUserPhoneNumbers permission\", () => {\n      before(async () => {\n        mock.restore();\n        mock.mockForLogin({ mockAuthzProfile: false });\n        mock.authzProfile({\n          permissions: authzProfileBody.permissions.filter(\n            (p) => p.permission.id !== 'ReadUserPhoneNumbers',\n          ),\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error(\n            'Skip test case as failed to login with credential ',\n            account,\n          );\n          this.skip();\n        }\n      });\n\n      after(async () => {\n        await auth.logout();\n\n        await sleep(1000);\n      });\n\n      it('Should not load numbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.numbers.length).equal(0);\n      });\n\n      it('Should not load mainCompanyNumber', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.mainCompanyNumber).equal(undefined);\n      });\n\n      it('Should not load companyNumbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.companyNumbers.length).equal(0);\n      });\n\n      it('Should not load directNumbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.directNumbers.length).equal(0);\n      });\n\n      it('Should not load callerIdNumbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.callerIdNumbers.length).equal(0);\n      });\n\n      it('Should not load smsSenderNumbers', async () => {\n        this.retries(2);\n\n        await sleep(1000);\n        expect(extensionPhoneNumber.smsSenderNumbers.length).equal(0);\n      });\n    });\n  });\n};\n"],"file":"extensionPhoneNumber.js"}