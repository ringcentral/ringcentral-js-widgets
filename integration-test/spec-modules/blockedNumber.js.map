{"version":3,"sources":["integration-test/spec-modules/blockedNumber.ts"],"names":["auth","client","blockedNumber","account","describe","timeout","mock","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","Map","afterEach","logout","it","restore","mockForLogin","console","error","skip","retries","expect","numbers","length","equal","mockAuthzProfile","authzProfile","permissions","authzProfileBody","filter","p","permission","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;eAEe,kBAACA,IAAD,EAAOC,MAAP,EAAeC,aAAf,EAA8BC,OAA9B,EAA0C;AACvDC,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/B,IAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAC,IAAAA,IAAI,CAACC,UAAL,CAAgBN,MAAhB;AAEA,QAAIO,cAAJ;AACA,QAAMC,oBAAoB,GAAG,IAAIC,gCAAJ,CAAyB,IAAIC,GAAJ,EAAzB,EAAoCV,MAApC,CAA7B;AAEAW,IAAAA,SAAS,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACFZ,IAAI,CAACa,MAAL,EADE;;AAAA;AAAA;AAAA,qBAEF,6BAAc,CAAd,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAT;AAKAC,IAAAA,EAAE,CAAC,iEAAD,uEAAoE;AAAA;AAAA;AAAA;AAAA;AACpER,cAAAA,IAAI,CAACS,OAAL;AACAT,cAAAA,IAAI,CAACU,YAAL;AAFoE;AAAA,qBAG7C,2BAAYhB,IAAZ,EAAkBG,OAAlB,CAH6C;;AAAA;AAGpEK,cAAAA,cAHoE;;AAIpE,kBAAI,CAACA,cAAL,EAAqB;AACnBS,gBAAAA,OAAO,CAACC,KAAR,CACE,oDADF,EAEEf,OAFF;;AAIA,gBAAA,KAAI,CAACgB,IAAL;AACD;;AACD,cAAA,KAAI,CAACC,OAAL,CAAa,CAAb;;AAXoE;AAAA,qBAY9D,6BAAc,CAAd,CAZ8D;;AAAA;AAapEC,cAAAA,MAAM,CAACnB,aAAa,CAACoB,OAAd,CAAsBC,MAAvB,CAAN,CAAqCC,KAArC,CAA2C,CAA3C;;AAboE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApE,GAAF;AAgBAV,IAAAA,EAAE,CAAC,wEAAD,uEAA2E;AAAA;AAAA;AAAA;AAAA;AAC3ER,cAAAA,IAAI,CAACS,OAAL;AACAT,cAAAA,IAAI,CAACU,YAAL,CAAkB;AAAES,gBAAAA,gBAAgB,EAAE;AAApB,eAAlB;AACAnB,cAAAA,IAAI,CAACoB,YAAL,CAAkB;AAChBC,gBAAAA,WAAW,EAAEC,yBAAiBD,WAAjB,CAA6BE,MAA7B,CACX,UAACC,CAAD;AAAA,yBAAOA,CAAC,CAACC,UAAF,CAAaC,EAAb,KAAoB,oBAA3B;AAAA,iBADW;AADG,eAAlB;AAH2E;AAAA,qBAQpD,2BAAYhC,IAAZ,EAAkBG,OAAlB,CARoD;;AAAA;AAQ3EK,cAAAA,cAR2E;;AAS3E,kBAAI,CAACA,cAAL,EAAqB;AACnBS,gBAAAA,OAAO,CAACC,KAAR,CACE,oDADF,EAEEf,OAFF;;AAIA,gBAAA,KAAI,CAACgB,IAAL;AACD;;AACD,cAAA,KAAI,CAACC,OAAL,CAAa,CAAb;;AAhB2E;AAAA,qBAiBrE,6BAAc,CAAd,CAjBqE;;AAAA;AAkB3EC,cAAAA,MAAM,CAACnB,aAAa,CAACoB,OAAd,CAAsBC,MAAvB,CAAN,CAAqCC,KAArC,CAA2C,CAA3C;;AAlB2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3E,GAAF;AAoBD,GAhDO,CAAR;AAiDD,C","sourcesContent":["import * as mock from '../mock';\nimport authzProfileBody from '../mock/data/authzProfile';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\n\nexport default (auth, client, blockedNumber, account) => {\n  describe('BlockedNumber:', () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async () => {\n      await auth.logout();\n      await waitInSeconds(1);\n    });\n\n    it('Should load numbers when there is ReadBlockedNumbers permission', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error(\n          'Skip test case as failed to login with credential ',\n          account,\n        );\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(blockedNumber.numbers.length).equal(1);\n    });\n\n    it(\"Should not load numbers when there isn't ReadBlockedNumbers permission\", async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(\n          (p) => p.permission.id !== 'ReadBlockedNumbers',\n        ),\n      });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error(\n          'Skip test case as failed to login with credential ',\n          account,\n        );\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(blockedNumber.numbers.length).equal(0);\n    });\n  });\n};\n"],"file":"blockedNumber.js"}