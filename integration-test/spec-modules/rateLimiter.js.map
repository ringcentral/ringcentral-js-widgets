{"version":3,"sources":["integration-test/spec-modules/rateLimiter.ts"],"names":["auth","alert","account","client","rateLimiter","describe","timeout","conditionalDescribe","isLoginSuccess","skip","console","error","beforeEach","dismissAll","state","messages","length","isAlertClear","it","_requestErrorHandler","Error","expect","errorMessages","rateLimitReached","to","not","equal","undefined"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;eAEe,kBAACA,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAAuBC,MAAvB,EAA+BC,WAA/B,EAA+C;AAC5DC,EAAAA,QAAQ,CAAC,aAAD,uEAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AACtB,YAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACIC,YAAAA,mBAFkB,GAEIF,QAFJ;AAAA;AAAA,mBAGO,2BAAYL,IAAZ,EAAkBE,OAAlB,CAHP;;AAAA;AAGhBM,YAAAA,cAHgB;;AAItB,gBAAI,CAACA,cAAL,EAAqB;AACnBD,cAAAA,mBAAmB,GAAGF,QAAQ,CAACI,IAA/B;AACAC,cAAAA,OAAO,CAACC,KAAR,CACE,oDADF,EAEET,OAFF;AAID;;AACDK,YAAAA,mBAAmB,CAAC,oBAAD,EAAuB,YAAY;AAAA;;AACpD,mBAAKD,OAAL,CAAa,KAAb;AACAM,cAAAA,UAAU,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACkB,8BACzB,YAAM;AACJX,0BAAAA,KAAK,CAACY,UAAN;AACA,iCAAOZ,KAAK,CAACa,KAAN,CAAYC,QAAZ,CAAqBC,MAA5B;AACD,yBAJwB,EAKzB,OALyB,EAMzB,CANyB,EAOzB,CAPyB,CADlB;;AAAA;AACHC,wBAAAA,YADG;;AAUT,4BAAI,CAACA,YAAL,EAAmB;AACjBP,0BAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AACA,0BAAA,MAAI,CAACF,IAAL;AACD;;AAbQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAD,GAAV;AAeAJ,cAAAA,QAAQ,CAAC,8CAAD,EAAiD,YAAY;AACnEa,gBAAAA,EAAE,CAAC,oCAAD,uEAAuC;AAAA;AAAA;AAAA;AAAA;AACvCd,0BAAAA,WAAW,CAACe,oBAAZ,CAAiC,IAAIC,KAAJ,CAAU,uBAAV,CAAjC;;AACAC,0BAAAA,MAAM,CACJ,oCACEpB,KAAK,CAACa,KAAN,CAAYC,QADd,EAEEO,0BAAcC,gBAFhB,CADI,CAAN,CAKEC,EALF,CAKKC,GALL,CAKSC,KALT,CAKeC,SALf;;AAFuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAvC,GAAF;AASD,eAVO,CAAR;AAWD,aA5BkB,CAAnB;;AAXsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB,GAAR;AAyCD,C","sourcesContent":["import errorMessages from '../../modules/RateLimiter/errorMessages';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitUntilEqual } from '../utils/WaitUtil';\n\nexport default (auth, alert, account, client, rateLimiter) => {\n  describe('RateLimiter', async () => {\n    this.timeout(20000);\n    let conditionalDescribe = describe;\n    const isLoginSuccess = await ensureLogin(auth, account);\n    if (!isLoginSuccess) {\n      conditionalDescribe = describe.skip;\n      console.error(\n        'Skip test case as failed to login with credential ',\n        account,\n      );\n    }\n    conditionalDescribe('Should Allow Alert', function () {\n      this.timeout(20000);\n      beforeEach(async () => {\n        const isAlertClear = await waitUntilEqual(\n          () => {\n            alert.dismissAll();\n            return alert.state.messages.length;\n          },\n          'Alert',\n          0,\n          5,\n        );\n        if (!isAlertClear) {\n          console.error('Alert is not cleared after dismissAll');\n          this.skip();\n        }\n      });\n      describe('Should Prompt Alerts when rateLimiter occurs', function () {\n        it('Should Prompt Alert of rateLimiter', async () => {\n          rateLimiter._requestErrorHandler(new Error('Request rate exceeded'));\n          expect(\n            containsErrorMessage(\n              alert.state.messages,\n              errorMessages.rateLimitReached,\n            ),\n          ).to.not.equal(undefined);\n        });\n      });\n    });\n  });\n};\n"],"file":"rateLimiter.js"}