{"version":3,"sources":["integration-test/spec-modules/conferenceCall.ts"],"names":["auth","client","conferenceCall","alert","account","describe","timeout","mock","mockClient","clientHistoryRequest","ClientHistoryRequest","Map","isLoginSuccess","it","expect","state","conferences","to","be","an","that","is","empty","conferenceCallStatus","equal","idle","after","logout","before","restore","mockForLogin","mockAuthzProfile","console","error","skip","numberParse","_makeConference","sessionData","rawRequest","getRawResponse","endPoints","JSON","stringify","session","Object","values","conferenceCallErrors","forEach","err","messages","undefined","_reset","mockForbidden","method","path","makeConferenceFailed","not","bringInToConference","Math","random","direction","callDirection","outbound"],"mappings":"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","sourcesContent":["import callDirection from '../../enums/callDirections';\nimport { sleep } from '../../lib/sleep';\nimport conferenceCallErrors from '../../modules/ConferenceCall/conferenceCallErrors';\nimport conferenceCallStatus from '../../modules/ConferenceCall/conferenceCallStatus';\nimport * as mock from '../mock';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\n\nexport default (auth, client, conferenceCall, alert, account) => {\n  describe('ConferenceCall:', () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n    let isLoginSuccess;\n\n    describe('Should Init Successfully with Default Setting', () => {\n      it('Should Have Empty Records of Conferences By Default', () => {\n        expect(conferenceCall.state.conferences).to.be.an('object').that.is\n          .empty;\n      });\n      it('Should Be Idle By Default', () => {\n        expect(conferenceCall.state.conferenceCallStatus).to.equal(\n          conferenceCallStatus.idle,\n        );\n      });\n    });\n\n    describe('Should Update Conference Successfully', () => {\n      after(async () => {\n        await auth.logout();\n\n        await sleep(1000);\n      });\n\n      before(async () => {\n        mock.restore();\n        mock.mockForLogin({\n          mockAuthzProfile: false,\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n\n        if (!isLoginSuccess) {\n          console.error(\n            'Skip test case as failed to login with credential ',\n            account,\n          );\n          this.skip();\n        }\n        mock.conferenceCall();\n        mock.numberParse({}, 'US');\n      });\n\n      it('Should Update Records of Conferences When Request One', async () => {\n        let sessionData;\n        sessionData = await conferenceCall._makeConference();\n        const rawRequest = clientHistoryRequest.getRawResponse(\n          ClientHistoryRequest.endPoints.conferenceCall,\n        );\n        expect(JSON.stringify(sessionData)).to.equal(\n          JSON.stringify(rawRequest.session),\n        );\n        // FIXME: because we are unable to mock sip.js instance, so skip the session assertation below:\n        // expect(conferenceCall.conferences).to.have.key(rawRequest.session.id);\n      });\n\n      it('Should Not Have Failure Alert', () => {\n        Object.values(conferenceCallErrors).forEach((err) => {\n          expect(containsErrorMessage(alert.state.messages, err)).to.equal(\n            undefined,\n          );\n        });\n      });\n    });\n\n    describe('Should Failed to Update Conference', () => {\n      after(async () => {\n        await auth.logout();\n\n        await sleep(1000);\n      });\n\n      before(async () => {\n        conferenceCall._reset();\n        mock.restore();\n        mock.mockForLogin({\n          mockAuthzProfile: false,\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n\n        if (!isLoginSuccess) {\n          console.error(\n            'Skip test case as failed to login with credential ',\n            account,\n          );\n          this.skip();\n        }\n        mock.mockForbidden({\n          method: 'POST',\n          path: ClientHistoryRequest.endPoints.conferenceCall,\n        });\n        mock.numberParse({}, 'US');\n      });\n\n      it('Should Have No Records of Conference', async () => {\n        await conferenceCall._makeConference(false);\n        expect(conferenceCall.conferences).to.be.an('object').that.is.empty;\n      });\n\n      it('Should Have A Failure Alert', () => {\n        expect(\n          containsErrorMessage(\n            alert.state.messages,\n            conferenceCallErrors.makeConferenceFailed,\n          ),\n        ).to.not.equal(undefined);\n      });\n\n      it('Should Not Bring Session into Non-existent Conference', async () => {\n        try {\n          await conferenceCall.bringInToConference(Math.random(), {\n            direction: callDirection.outbound,\n          });\n        } catch (e) {\n          // skip the error that were throwed intentinally\n        }\n        expect(\n          containsErrorMessage(\n            alert.state.messages,\n            conferenceCallErrors.makeConferenceFailed,\n          ),\n        ).to.not.equal(undefined);\n      });\n    });\n  });\n};\n"],"file":"conferenceCall.js"}