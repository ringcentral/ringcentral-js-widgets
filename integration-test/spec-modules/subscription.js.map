{"version":3,"sources":["integration-test/spec-modules/subscription.ts"],"names":["auth","client","subscription","account","describe","timeout","mock","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","Map","beforeEach","localStorage","clear","afterEach","loggedIn","logout","it","restore","mockForLogin","console","error","skip","retries","expect","subscriptionStatus","equal","subscribed","_subscription","not","mockForbidden","method","url","mockSubscription","notSubscribed","cachedSubscription"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;eAEe,kBAACA,IAAD,EAAOC,MAAP,EAAeC,YAAf,EAA6BC,OAA7B,EAAyC;AACtDC,EAAAA,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9B,IAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAC,IAAAA,IAAI,CAACC,UAAL,CAAgBN,MAAhB;AAEA,QAAIO,cAAJ;AACA,QAAMC,oBAAoB,GAAG,IAAIC,gCAAJ,CAAyB,IAAIC,GAAJ,EAAzB,EAAoCV,MAApC,CAA7B;AACAW,IAAAA,UAAU,uEAAC;AAAA;AAAA;AAAA;AAAA;AACTC,cAAAA,YAAY,CAACC,KAAb;;AADS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAV;AAGAC,IAAAA,SAAS,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJf,IAAI,CAACgB,QADD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEAhB,IAAI,CAACiB,MAAL,EAFA;;AAAA;AAAA;AAAA,qBAKF,kBAAM,IAAN,CALE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAT;AAOAC,IAAAA,EAAE,CAAC,yCAAD,uEAA4C;AAAA;AAAA;AAAA;AAAA;AAC5CZ,cAAAA,IAAI,CAACa,OAAL;AACAb,cAAAA,IAAI,CAACc,YAAL;AAF4C;AAAA,qBAGrB,2BAAYpB,IAAZ,EAAkBG,OAAlB,CAHqB;;AAAA;AAG5CK,cAAAA,cAH4C;;AAI5C,kBAAI,CAACA,cAAL,EAAqB;AACnBa,gBAAAA,OAAO,CAACC,KAAR,CACE,oDADF,EAEEnB,OAFF;;AAIA,gBAAA,KAAI,CAACoB,IAAL;AACD;;AACD,cAAA,KAAI,CAACC,OAAL,CAAa,CAAb;;AAX4C;AAAA,qBAYtC,kBAAM,IAAN,CAZsC;;AAAA;AAa5CC,cAAAA,MAAM,CAACvB,YAAY,CAACwB,kBAAd,CAAN,CAAwCC,KAAxC,CACED,uCAAmBE,UADrB;AAGAH,cAAAA,MAAM,CAACvB,YAAY,CAAC2B,aAAd,CAAN,CAAmCC,GAAnC,CAAuCH,KAAvC,CAA6C,IAA7C;;AAhB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA5C,GAAF;AAkBAT,IAAAA,EAAE,CAAC,8DAAD,uEAAiE;AAAA;AAAA;AAAA;AAAA;AACjEZ,cAAAA,IAAI,CAACa,OAAL;AACAb,cAAAA,IAAI,CAACyB,aAAL,CAAmB;AACjBC,gBAAAA,MAAM,EAAE,MADS;AAEjBC,gBAAAA,GAAG,EAAE;AAFY,eAAnB;AAIA3B,cAAAA,IAAI,CAACc,YAAL,CAAkB;AAAEc,gBAAAA,gBAAgB,EAAE;AAApB,eAAlB;AANiE;AAAA,qBAO1C,2BAAYlC,IAAZ,EAAkBG,OAAlB,CAP0C;;AAAA;AAOjEK,cAAAA,cAPiE;;AAQjE,kBAAI,CAACA,cAAL,EAAqB;AACnBa,gBAAAA,OAAO,CAACC,KAAR,CACE,oDADF,EAEEnB,OAFF;;AAIA,gBAAA,KAAI,CAACoB,IAAL;AACD;;AAdgE;AAAA,qBAgB3D,kBAAM,IAAN,CAhB2D;;AAAA;AAiBjEE,cAAAA,MAAM,CAACvB,YAAY,CAACwB,kBAAd,CAAN,CAAwCC,KAAxC,CACED,uCAAmBS,aADrB;AAGAV,cAAAA,MAAM,CAACvB,YAAY,CAACkC,kBAAd,CAAN,CAAwCT,KAAxC,CAA8C,IAA9C;;AApBiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjE,GAAF;AAsBD,GAxDO,CAAR;AAyDD,C","sourcesContent":["import { sleep } from '../../lib/sleep';\nimport { subscriptionStatus } from '../../modules/Subscription/subscriptionStatus';\nimport * as mock from '../mock';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport { ensureLogin } from '../utils/HelpUtil';\n\nexport default (auth, client, subscription, account) => {\n  describe('Subscription:', () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n    beforeEach(async () => {\n      localStorage.clear();\n    });\n    afterEach(async () => {\n      if (auth.loggedIn) {\n        await auth.logout();\n      }\n\n      await sleep(1000);\n    });\n    it('Should create subscription successfully', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error(\n          'Skip test case as failed to login with credential ',\n          account,\n        );\n        this.skip();\n      }\n      this.retries(2);\n      await sleep(3000);\n      expect(subscription.subscriptionStatus).equal(\n        subscriptionStatus.subscribed,\n      );\n      expect(subscription._subscription).not.equal(null);\n    });\n    it('Should reset cache subscription to null when subscribe error', async () => {\n      mock.restore();\n      mock.mockForbidden({\n        method: 'POST',\n        url: 'begin:http://whatever/restapi/v1.0/subscription',\n      });\n      mock.mockForLogin({ mockSubscription: false });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error(\n          'Skip test case as failed to login with credential ',\n          account,\n        );\n        this.skip();\n      }\n\n      await sleep(3000);\n      expect(subscription.subscriptionStatus).equal(\n        subscriptionStatus.notSubscribed,\n      );\n      expect(subscription.cachedSubscription).equal(null);\n    });\n  });\n};\n"],"file":"subscription.js"}