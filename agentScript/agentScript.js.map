{"version":3,"sources":["agentScript/agentScript.ts"],"names":["AgentScriptApp","_channel","eventEmitter","EventEmitter","toAngularKey","fromAngularKey","eventKeys","updateScript","agentScriptEvents","INIT","setScriptResult","SET_SCRIPT_RESULT","updateDisposition","UPDATE_DISPOSITION","getKnowledgeBaseArticles","GET_KNOWLEDGE_BASE_ARTICLES","bindAngularEventAndSend","bindAngularEvent","value","request","key","knowledgeBaseArticles","sendToAngular","SingleTabBroadcastChannel","EV_AGENT_SCRIPT_BROADCAST_KEY","from","EV_AGENT_SCRIPT_PAGE_KEY","to","EV_APP_PAGE_KEY","onTabIdExist","config","call","_bindBroadCastEvent","addEventListener","data","keys","forEach","on","send","cb","emit","window","app"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\n\nimport { SingleTabBroadcastChannel } from '@ringcentral-integration/commons/lib/SingleTabBroadcastChannel';\n\nimport {\n  agentScriptEvents,\n  EV_AGENT_SCRIPT_BROADCAST_KEY,\n  EV_AGENT_SCRIPT_PAGE_KEY,\n  EV_APP_PAGE_KEY,\n} from '../enums';\n\nclass AgentScriptApp {\n  private _channel: SingleTabBroadcastChannel;\n  eventEmitter = new EventEmitter();\n\n  toAngularKey = 'to_angular';\n  fromAngularKey = 'from_angular';\n\n  eventKeys = {\n    updateScript: agentScriptEvents.INIT,\n    setScriptResult: agentScriptEvents.SET_SCRIPT_RESULT,\n    updateDisposition: agentScriptEvents.UPDATE_DISPOSITION,\n    getKnowledgeBaseArticles: agentScriptEvents.GET_KNOWLEDGE_BASE_ARTICLES,\n  };\n\n  constructor() {\n    this.bindAngularEventAndSend([\n      this.eventKeys.setScriptResult,\n      this.eventKeys.updateDisposition,\n    ]);\n\n    this.bindAngularEvent(\n      this.eventKeys.getKnowledgeBaseArticles,\n      async (value: any) => {\n        const knowledgeBaseArticles = await this._channel.request({\n          key: agentScriptEvents.GET_KNOWLEDGE_BASE_ARTICLES,\n          value,\n        });\n\n        this.sendToAngular(\n          this.eventKeys.getKnowledgeBaseArticles,\n          knowledgeBaseArticles,\n        );\n      },\n    );\n  }\n\n  // that init method call from angular.\n  async init() {\n    this._channel = await new SingleTabBroadcastChannel(\n      EV_AGENT_SCRIPT_BROADCAST_KEY,\n      {\n        from: EV_AGENT_SCRIPT_PAGE_KEY,\n        to: EV_APP_PAGE_KEY,\n      },\n    ).onTabIdExist();\n\n    const value = (await this._channel.request({\n      key: agentScriptEvents.INIT,\n    })) || {\n      config: null,\n      call: null,\n    };\n\n    this.sendToAngular(this.eventKeys.updateScript, value);\n\n    this._bindBroadCastEvent();\n  }\n\n  private _bindBroadCastEvent() {\n    this._channel.addEventListener(({ data }) => {\n      const { key, value } = data;\n      switch (key) {\n        case agentScriptEvents.INIT:\n          this.sendToAngular(this.eventKeys.updateScript, value);\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  bindAngularEventAndSend(keys: string[]) {\n    keys.forEach((key) => {\n      this.eventEmitter.on(this.fromAngularKey + key, (value) =>\n        this._channel.send({ key, value }),\n      );\n    });\n    return this;\n  }\n\n  bindAngularEvent(key: string, cb: (...args: any[]) => void) {\n    this.eventEmitter.on(this.fromAngularKey + key, cb);\n    return this;\n  }\n\n  sendToAngular(key: string, value: any) {\n    this.eventEmitter.emit(this.toAngularKey + key, value);\n  }\n}\n\n// Here just assertion as any, that only for using in angular.\n(window as any).app = new AgentScriptApp();\n"],"file":"agentScript.js"}