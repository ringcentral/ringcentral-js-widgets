{"version":3,"sources":["gulpfile.js"],"names":["BUILD_PATH","path","resolve","__dirname","RELEASE_PATH","getVersionFromTag","tag","process","env","TRAVIS_TAG","test","execa","command","shell","stdout","replace","console","error","clean","fs","remove","copy","gulp","src","pipe","dest","preBuild","localeSettings","sourcemaps","init","write","build","series","releaseClean","exists","readdir","files","filter","file","releaseCopy","preRelease","JSON","readFile","packageInfo","parse","scripts","jest","version","log","name","writeFile","stringify","release","parallel","normalizeName","str","split","map","token","idx","toUpperCase","toLowerCase","substr","join","exports","cssLocation","content","output","regExp","match","exec","target","normalizedName","newContent","dedent","exportType","sourceFolder"],"mappings":"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","sourcesContent":["import dedent from 'dedent';\nimport execa from 'execa';\nimport fs from 'fs-extra';\nimport gulp from 'gulp';\nimport babel from 'gulp-babel';\nimport sourcemaps from 'gulp-sourcemaps';\nimport path from 'path';\n\nimport consolidateLocale from '@ringcentral-integration/locale-loader/lib/consolidateLocale';\nimport exportLocale from '@ringcentral-integration/locale-loader/lib/exportLocale';\nimport importLocale from '@ringcentral-integration/locale-loader/lib/importLocale';\nimport transformLoader from '@ringcentral-integration/locale-loader/lib/transformLoader';\nimport localeSettings from '@ringcentral-integration/locale-settings';\n\nconst BUILD_PATH = path.resolve(__dirname, '../../build/ringcentral-widgets');\nconst RELEASE_PATH = path.resolve(\n  __dirname,\n  '../../release/ringcentral-widgets',\n);\n\nasync function getVersionFromTag() {\n  let tag = process.env.TRAVIS_TAG;\n  if (tag && /^\\d+.\\d+.\\d+/.test(tag)) {\n    return tag;\n  }\n  try {\n    tag = await execa.command(\n      'git describe --exact-match --tags $(git rev-parse HEAD)',\n      {\n        shell: true,\n      },\n    );\n    tag = tag.stdout.replace(/\\r?\\n|\\r/g, '');\n    if (/^\\d+.\\d+.\\d+/.test(tag)) {\n      return tag;\n    }\n  } catch (e) {\n    console.error(e);\n  }\n  return null;\n}\nfunction clean() {\n  return fs.remove(BUILD_PATH);\n}\nfunction copy() {\n  return gulp\n    .src([\n      './**',\n      '!./**/*.js',\n      '!./test{/**,}',\n      '!./coverage{/**,}',\n      '!./node_modules{/**,}',\n      '!package-lock.json',\n    ])\n    .pipe(gulp.dest(BUILD_PATH));\n}\nfunction preBuild() {\n  return gulp\n    .src([\n      './**/*.js',\n      './**/*.ts',\n      './**/*.tsx',\n      './**/*.jsx',\n      '!./**/*.test.js',\n      '!./test{/**,}',\n      '!./coverage{/**,}',\n      '!./node_modules{/**,}',\n      '!gulpfile.babel.js',\n    ])\n    .pipe(\n      transformLoader({\n        ...localeSettings,\n      }),\n    )\n    .pipe(sourcemaps.init())\n    .pipe(babel())\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest(BUILD_PATH));\n}\nconst build = gulp.series(clean, copy, preBuild);\nasync function releaseClean() {\n  if (!(await fs.exists(RELEASE_PATH))) {\n    await execa.command(`mkdir -p ${RELEASE_PATH}`, { shell: true });\n  }\n  const files = (await fs.readdir(RELEASE_PATH)).filter(\n    (file) => !/^\\./.test(file),\n  );\n  for (const file of files) {\n    await fs.remove(path.resolve(RELEASE_PATH, file));\n  }\n}\nfunction releaseCopy() {\n  return gulp\n    .src([`${BUILD_PATH}/**`, `${__dirname}/README.md`, `${__dirname}/LICENSE`])\n    .pipe(gulp.dest(RELEASE_PATH));\n}\nasync function preRelease() {\n  const packageInfo = JSON.parse(\n    await fs.readFile(path.resolve(BUILD_PATH, 'package.json')),\n  );\n  delete packageInfo.scripts;\n  delete packageInfo.jest;\n  const version = await getVersionFromTag();\n  console.log('version:', version);\n  if (version) {\n    packageInfo.version = version;\n    packageInfo.name = '@ringcentral-integration/widgets';\n  }\n  await fs.writeFile(\n    path.resolve(RELEASE_PATH, 'package.json'),\n    JSON.stringify(packageInfo, null, 2),\n  );\n}\nconst release = gulp.series(\n  gulp.parallel(build, releaseClean),\n  releaseCopy,\n  preRelease,\n);\nfunction normalizeName(str) {\n  return str\n    .split(/[-_]/g)\n    .map(\n      (token, idx) =>\n        `${idx > 0 ? token[0].toUpperCase() : token[0].toLowerCase()}${token\n          .toLowerCase()\n          .substr(1)}`,\n    )\n    .join('');\n}\nexport { build, release };\n\nexports['generate-font'] = async () => {\n  try {\n    const cssLocation = path.resolve(\n      __dirname,\n      'assets/DynamicsFont/style.css',\n    );\n    const content = await fs.readFile(cssLocation, 'utf8');\n    let output = content\n      .replace(/url\\('fonts\\/dynamics_icon/g, \"url('./fonts/dynamics_icon\")\n      .replace('[class^=\"icon-\"], [class*=\" icon-\"]', '.icon');\n    const regExp = /\\.icon-(.*):before/;\n    let match;\n    do {\n      match = regExp.exec(output);\n      if (match) {\n        const [target, name] = match;\n        const normalizedName = normalizeName(name);\n        const newContent = dedent`\n      .${normalizedName} {\n        composes: icon;\n      }\n      .${normalizedName}:before `;\n        output = output.replace(target, newContent);\n      }\n    } while (match);\n    await fs.writeFile(\n      path.resolve(__dirname, 'assets/DynamicsFont/DynamicsFont.scss'),\n      output,\n      'utf8',\n    );\n  } catch (error) {\n    console.log(error);\n  }\n};\nexports['export-locale'] = async () =>\n  exportLocale({\n    ...localeSettings,\n  });\nexports['export-locale-full'] = async () =>\n  exportLocale({\n    ...localeSettings,\n    exportType: 'full',\n  });\nexports['export-locale-translated'] = async () =>\n  exportLocale({\n    ...localeSettings,\n    exportType: 'translated',\n  });\nexports['import-locale'] = async () =>\n  importLocale({\n    ...localeSettings,\n  });\nexports['consolidate-locale'] = async () =>\n  consolidateLocale({\n    ...localeSettings,\n    sourceFolder: path.resolve(__dirname, 'lib/countryNames'),\n  });\n"],"file":"gulpfile.js"}