{"version":3,"sources":["modules/RateLimiterV2/RateLimiter.ts"],"names":["DEFAULT_THROTTLE_DURATION","RateLimiter","name","deps","dep","optional","enableGlobalCache","storageKey","_timeoutId","_unbindHandlers","_throttleDuration","_beforeRequestHandler","throttling","Error","errorMessages","rateLimitReached","_checkTimestamp","stopThrottle","_requestErrorHandler","error","message","response","retryAfter","headers","get","Number","parseInt","wasThrottling","startThrottle","Date","now","showAlert","clearTimeout","setTimeout","_deps","rateLimiterOptions","throttleDuration","timestamp","environment","changeCounter","ready","_bindHandlers","alert","_suppressAlerts","warning","ttl","allowDuplicates","rateLimitAlertId","client","service","on","events","requestError","beforeRequest","removeListener","suppressAlerts","RcModuleV2","globalStorage","state","action","proxify"],"mappings":"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","sourcesContent":["import {\n  action,\n  globalStorage,\n  RcModuleV2,\n  state,\n  watch,\n} from '@ringcentral-integration/core';\nimport { ApiError } from '@ringcentral/sdk';\n\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { errorMessages } from './errorMessages';\nimport { Deps } from './RateLimiter.interface';\n\nconst DEFAULT_THROTTLE_DURATION = 61 * 1000;\n\n@Module({\n  name: 'RateLimiter',\n  deps: [\n    'Alert',\n    'Client',\n    'GlobalStorage',\n    { dep: 'Environment', optional: true },\n    { dep: 'RateLimiterOptions', optional: true },\n  ],\n})\nexport class RateLimiter extends RcModuleV2<Deps> {\n  protected _timeoutId: NodeJS.Timeout = null;\n  protected _unbindHandlers?: () => void;\n  protected _throttleDuration: number = DEFAULT_THROTTLE_DURATION;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableGlobalCache: true,\n      storageKey: 'RateLimiter',\n    });\n    this._throttleDuration =\n      this._deps.rateLimiterOptions?.throttleDuration ??\n      DEFAULT_THROTTLE_DURATION;\n  }\n\n  get _suppressAlerts() {\n    return this._deps.rateLimiterOptions?.suppressAlerts ?? false;\n  }\n\n  @globalStorage\n  @state\n  timestamp: number = null;\n\n  @globalStorage\n  @state\n  rateLimitAlertId: string = null;\n\n  @action\n  startThrottle(timestamp: number) {\n    this.timestamp = timestamp;\n  }\n\n  @action\n  stopThrottle() {\n    this.timestamp = null;\n  }\n\n  onInitOnce() {\n    if (this._deps.environment) {\n      watch(\n        this,\n        () => this._deps.environment.changeCounter,\n        () => {\n          if (this.ready) {\n            this._bindHandlers();\n          }\n        },\n      );\n    }\n  }\n\n  onInit() {\n    this._bindHandlers();\n  }\n\n  /**\n   * If the app is throttling, an incoming request will lead to an exception\n   */\n  _beforeRequestHandler = () => {\n    if (this.throttling) {\n      throw new Error(errorMessages.rateLimitReached);\n    }\n  };\n\n  _checkTimestamp = () => {\n    this._timeoutId = null;\n    if (!this.throttling) {\n      this.stopThrottle();\n    }\n  };\n\n  @proxify\n  async showAlert() {\n    if (!this.throttling || !this._deps.alert || this._suppressAlerts) {\n      return;\n    }\n\n    this.rateLimitAlertId = await this._deps.alert.warning({\n      message: errorMessages.rateLimitReached,\n      ttl: this.ttl,\n      allowDuplicates: false,\n    });\n  }\n\n  _requestErrorHandler = (error: ApiError) => {\n    if (\n      !(error instanceof Error) ||\n      error.message !== 'Request rate exceeded'\n    ) {\n      return;\n    }\n\n    // Get `retry-after` from response headers first\n    this._throttleDuration = DEFAULT_THROTTLE_DURATION;\n    if (error.response) {\n      const retryAfter = error.response.headers.get('retry-after');\n      if (retryAfter) {\n        this._throttleDuration = 1000 * Number.parseInt(retryAfter, 10);\n      }\n    }\n\n    const wasThrottling = this.throttling;\n    this.startThrottle(Date.now());\n    if (!wasThrottling) {\n      this.showAlert();\n    }\n    clearTimeout(this._timeoutId);\n    this._timeoutId = setTimeout(this._checkTimestamp, this._throttleDuration);\n  };\n\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n    const client = this._deps.client.service.client();\n    // TODO: Bind the `rateLimitError` event instead\n    client.on(client.events.requestError, this._requestErrorHandler);\n    client.on(client.events.beforeRequest, this._beforeRequestHandler);\n    this._unbindHandlers = () => {\n      client.removeListener(\n        client.events.requestError,\n        this._requestErrorHandler,\n      );\n      client.removeListener(\n        client.events.beforeRequest,\n        this._beforeRequestHandler,\n      );\n      this._unbindHandlers = null;\n    };\n  }\n\n  get ttl() {\n    return this.throttling\n      ? this._throttleDuration - (Date.now() - this.timestamp)\n      : 0;\n  }\n\n  get throttleDuration() {\n    return this._throttleDuration;\n  }\n\n  /**\n   * Is in throttling status\n   */\n  get throttling() {\n    return Date.now() - this.timestamp <= this._throttleDuration;\n  }\n}\n"],"file":"RateLimiter.js"}