{"version":3,"sources":["modules/CallHistoryUI/CallHistoryUI.ts"],"names":["CallHistoryUI","name","deps","dep","optional","enableContactFallback","useNewList","_deps","locale","brand","callHistory","regionSettings","extensionInfo","connectivityMonitor","connectivityManager","rateLimiter","call","callLogger","dateTimeFormat","composeText","appFeatures","fullName","title","i18n","getString","currentLocale","calls","latestCalls","areaCode","countryCode","currentSiteCode","site","code","isMultipleSiteEnabled","disableLinks","isOfflineMode","isVoipOnlyMode","throttling","disableCallButton","isWebphoneUnavailableMode","isWebphoneInitializing","disableClickToDial","isIdle","outboundSmsPermission","hasOutboundSMSPermission","internalSmsPermission","hasInternalSMSPermission","loggingMap","showSpinner","ready","autoLog","enableCDC","isCDCEnabled","onCreateContact","dateTimeFormatter","formatDateTime","onLogCall","isLoggedContact","dialerRoute","composeTextRoute","onViewContact","contactMatcher","dialerUI","contactDetailsUI","routerInteraction","contactSearch","contact","type","id","showContactDetails","direct","phoneNumber","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","isCallingEnabled","recipient","push","onClickToCall","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","redirect","logCall","RcUIModuleV2"],"mappings":"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","sourcesContent":["import { RcUIModuleV2 } from '@ringcentral-integration/core';\nimport { Entity } from '@ringcentral-integration/commons/interfaces/Entity.interface';\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport { ToNumber } from '@ringcentral-integration/commons/modules/ComposeTextV2';\nimport { DateTimeFormat } from '@ringcentral-integration/commons/modules/DateTimeFormatV2';\nimport { OnCreateContactOptions } from '../CallsListUI/CallsListUI.interface';\nimport { CallHistoryUIComponentProps, Deps } from './CallHistoryUI.interface';\nimport i18n from './i18n';\n\n/**\n * TODO:\n * * Add type info for getUIProps and getUIFunctions when CallsPanel is refactored into ts.\n */\n@Module({\n  name: 'CallHistoryUI',\n  deps: [\n    'Locale',\n    'Brand',\n    'CallHistory',\n    'RegionSettings',\n    'ConnectivityMonitor',\n    'RateLimiter',\n    'DateTimeFormat',\n    'AppFeatures',\n    { dep: 'CallLogger', optional: true },\n    { dep: 'Call', optional: true },\n    { dep: 'ComposeText', optional: true },\n    { dep: 'DialerUI', optional: true },\n    { dep: 'ContactDetailsUI', optional: true },\n    { dep: 'ExtensionInfo', optional: true },\n    'ContactMatcher',\n    'RouterInteraction',\n    'ContactSearch',\n    'ConnectivityManager',\n  ],\n})\nexport class CallHistoryUI extends RcUIModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  getUIProps({\n    enableContactFallback = false,\n    useNewList = false,\n  }: CallHistoryUIComponentProps) {\n    const {\n      locale,\n      brand,\n      callHistory,\n      regionSettings,\n      extensionInfo,\n      connectivityMonitor,\n      connectivityManager,\n      rateLimiter,\n      call,\n      callLogger,\n      dateTimeFormat,\n      composeText,\n      appFeatures,\n    } = this._deps;\n    return {\n      enableContactFallback,\n      brand: brand.fullName,\n      title: i18n.getString('title', locale.currentLocale),\n      currentLocale: locale.currentLocale,\n      calls: callHistory.latestCalls,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n      currentSiteCode: extensionInfo?.site?.code ?? '',\n      isMultipleSiteEnabled: extensionInfo?.isMultipleSiteEnabled ?? false,\n      disableLinks:\n        connectivityManager.isOfflineMode ||\n        connectivityManager.isVoipOnlyMode ||\n        rateLimiter.throttling,\n      disableCallButton:\n        connectivityManager.isOfflineMode ||\n        connectivityManager.isWebphoneUnavailableMode ||\n        connectivityManager.isWebphoneInitializing ||\n        rateLimiter.throttling,\n      disableClickToDial: !(call && call.isIdle),\n      outboundSmsPermission: appFeatures.hasOutboundSMSPermission,\n      internalSmsPermission: appFeatures.hasInternalSMSPermission,\n      loggingMap: callLogger && callLogger.loggingMap,\n      showSpinner: !(\n        callHistory.ready &&\n        locale.ready &&\n        regionSettings.ready &&\n        dateTimeFormat.ready &&\n        connectivityMonitor.ready &&\n        appFeatures.ready &&\n        (!call || call.ready) &&\n        (!composeText || composeText.ready) &&\n        (!callLogger || callLogger.ready)\n      ),\n      autoLog: !!(callLogger && callLogger.autoLog),\n      useNewList,\n      enableCDC: appFeatures.isCDCEnabled,\n    };\n  }\n\n  getUIFunctions({\n    onCreateContact,\n    dateTimeFormatter = (\n      ...args: Parameters<DateTimeFormat['formatDateTime']>\n    ) => this._deps.dateTimeFormat.formatDateTime(...args),\n    onLogCall,\n    isLoggedContact,\n    dialerRoute = '/dialer',\n    composeTextRoute = '/composeText',\n    onViewContact,\n  }: CallHistoryUIComponentProps) {\n    const {\n      callLogger,\n      contactMatcher,\n      call,\n      dialerUI,\n      contactDetailsUI,\n      composeText,\n      routerInteraction,\n      contactSearch,\n      callHistory,\n      appFeatures,\n    } = this._deps;\n    return {\n      dateTimeFormatter,\n      onViewContact:\n        onViewContact ||\n        (({ contact: { type, id } }) => {\n          if (contactDetailsUI) {\n            contactDetailsUI.showContactDetails({\n              type,\n              id,\n              direct: true,\n            });\n          }\n        }),\n      onCreateContact: onCreateContact\n        ? async ({ phoneNumber, name, entityType }: OnCreateContactOptions) => {\n            const hasMatchNumber = await contactMatcher.hasMatchNumber({\n              phoneNumber,\n              ignoreCache: true,\n            });\n\n            if (!hasMatchNumber) {\n              await onCreateContact({ phoneNumber, name, entityType });\n              await contactMatcher.forceMatchNumber({ phoneNumber });\n            }\n          }\n        : undefined,\n      onClickToDial:\n        dialerUI && appFeatures.isCallingEnabled\n          ? (recipient: any) => {\n              if (call.isIdle) {\n                routerInteraction.push(dialerRoute);\n                dialerUI.call({ recipient });\n                callHistory.onClickToCall();\n              }\n            }\n          : undefined,\n      onClickToSms: composeText\n        ? // TODO: find a better way to define contact type\n          async (contact: Entity & ToNumber, isDummyContact = false) => {\n            if (routerInteraction) {\n              routerInteraction.push(composeTextRoute);\n            }\n            // if contact autocomplete, if no match fill the number only\n            if (contact.name && contact.phoneNumber && isDummyContact) {\n              composeText.updateTypingToNumber(contact.name);\n              contactSearch.search({ searchString: contact.name });\n            } else {\n              composeText.addToNumber(contact);\n              if (composeText.typingToNumber === contact.phoneNumber) {\n                composeText.cleanTypingToNumber();\n              }\n            }\n            callHistory.onClickToSMS();\n          }\n        : undefined,\n      isLoggedContact,\n      onLogCall:\n        onLogCall ||\n        (callLogger &&\n          (async ({ call, contact, redirect = true }) => {\n            await callLogger.logCall({\n              call,\n              contact,\n              redirect,\n            });\n          })),\n    };\n  }\n}\n"],"file":"CallHistoryUI.js"}