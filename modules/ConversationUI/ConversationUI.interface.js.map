{"version":3,"file":"ConversationUI.interface.js","names":[],"sources":["modules/ConversationUI/ConversationUI.interface.ts"],"sourcesContent":["import type GetMessageInfoResponse from 'ringcentral-client/build/definitions/GetMessageInfoResponse';\nimport type { Entity } from '@ringcentral-integration/commons/interfaces/Entity.interface';\nimport type { Message } from '@ringcentral-integration/commons/interfaces/MessageStore.model';\nimport type { Correspondent } from '@ringcentral-integration/commons/lib/messageHelper';\nimport type { AppFeatures } from '@ringcentral-integration/commons/modules/AppFeatures/AppFeatures';\nimport type { ExtensionInfo } from '@ringcentral-integration/commons/modules/ExtensionInfo';\nimport type { Brand } from '@ringcentral-integration/commons/modules/Brand';\nimport type { ConnectivityMonitor } from '@ringcentral-integration/commons/modules/ConnectivityMonitor';\nimport type { ContactMatcher } from '@ringcentral-integration/commons/modules/ContactMatcher';\nimport type { ConversationLogger } from '@ringcentral-integration/commons/modules/ConversationLogger';\nimport type {\n  Conversations,\n  CurrentConversation,\n} from '@ringcentral-integration/commons/modules/Conversations';\nimport type {\n  DateTimeFormat,\n  FormatDateTimeOptions,\n} from '@ringcentral-integration/commons/modules/DateTimeFormat';\nimport type { Locale } from '@ringcentral-integration/commons/modules/Locale';\nimport type { Attachment } from '@ringcentral-integration/commons/modules/MessageSender';\nimport type { MessageStore } from '@ringcentral-integration/commons/modules/MessageStore';\nimport type { RateLimiter } from '@ringcentral-integration/commons/modules/RateLimiter';\nimport type { RegionSettings } from '@ringcentral-integration/commons/modules/RegionSettings';\nimport type { AccountInfo } from '@ringcentral-integration/commons/modules/AccountInfo';\n\nimport type { ReactNode } from 'react';\nimport type { RouterInteraction } from '../RouterInteraction';\n\nexport interface ConversationUIOptions {\n  //\n}\n\nexport interface Deps {\n  appFeatures: AppFeatures;\n  brand: Brand;\n  locale: Locale;\n  conversationLogger: ConversationLogger;\n  dateTimeFormat: DateTimeFormat;\n  regionSettings: RegionSettings;\n  conversations: Conversations;\n  rateLimiter: RateLimiter;\n  connectivityMonitor: ConnectivityMonitor;\n  messageStore: MessageStore;\n  routerInteraction: RouterInteraction;\n  accountInfo: AccountInfo;\n  contactMatcher?: ContactMatcher;\n  conversationUIOptions?: ConversationUIOptions;\n  extensionInfo?: ExtensionInfo;\n}\n\nexport interface OnLogConversationOptions {\n  conversationId: string;\n  correspondentEntity: Entity;\n  redirect: boolean;\n}\nexport interface OnSelectContactOptions {\n  correspondentEntity: Entity;\n  conversation: CurrentConversation;\n}\n\nexport interface RenderExtraButtonOptions {\n  logConversation: (options: {\n    redirect?: boolean;\n    selected: number;\n    prefill?: boolean;\n  }) => Promise<void> | void;\n  isLogging: boolean;\n}\n\nexport interface ConversationContainerProps {\n  params: {\n    conversationId: string;\n  };\n  enableContactFallback?: boolean;\n  showGroupNumberName?: boolean;\n  supportAttachment?: boolean;\n  perPage?: number;\n  inputExpandable?: boolean;\n  dateTimeFormatter?(options: Partial<FormatDateTimeOptions>): string;\n  onLogConversation?(options: OnLogConversationOptions): Promise<void>;\n  conversationsPath?: string;\n  renderExtraButton?(\n    conversation: CurrentConversation,\n    options: RenderExtraButtonOptions,\n  ): React.ReactElement;\n}\n\n// TODO: remove to ConversationPanel folder with TypeScript\nexport interface ConversationPanelProps {\n  brand: string;\n  enableContactFallback: boolean;\n  showGroupNumberName: boolean;\n  supportAttachment: boolean;\n  currentLocale: string;\n  conversationId: string;\n  sendButtonDisabled: boolean;\n  areaCode: string;\n  countryCode: string;\n  showSpinner: boolean;\n  recipients: Correspondent[];\n  messages: Message[];\n  messageText: string;\n  attachments: Attachment[];\n  conversation: CurrentConversation;\n  disableLinks: boolean;\n  autoLog: boolean;\n  perPage: number;\n  loadingNextPage: boolean;\n  inputExpandable: boolean;\n  shouldLogSelectRecord?: boolean;\n  contactPlaceholder?: string;\n  dropdownClassName?: string;\n  isWide?: boolean;\n  replyToReceivers: (\n    text: string,\n    attachments?: Attachment[],\n  ) => Promise<GetMessageInfoResponse>;\n  unloadConversation: () => Promise<void>;\n  loadConversation: (id: string) => Promise<void>;\n  updateMessageText: (text: string) => Promise<boolean>;\n  addAttachment: (attachment: Attachment) => Promise<void>;\n  removeAttachment: (attachment: Attachment) => Promise<void>;\n  dateTimeFormatter: (options: Partial<FormatDateTimeOptions>) => string;\n  formatPhone: (phoneNumber: string) => string;\n  getMatcherContactName: (phoneNumber: string) => string;\n  getMatcherContactList: (phoneNumber: string) => string[];\n  getMatcherContactNameList: (phoneNumber: string) => string[];\n  onLogConversation: (options: OnLogConversationOptions) => Promise<void>;\n  goBack(): void;\n  readMessages(id: string): void;\n  loadPreviousMessages(): void;\n  renderExtraButton?(\n    conversation: CurrentConversation,\n    options: RenderExtraButtonOptions,\n  ): React.ReactElement;\n  onSelectContact?(options: OnSelectContactOptions): Promise<void> | void;\n  restrictSendMessage?(...args: any): boolean;\n  renderContactList?: (entity: { name: string; labelType: string }) => any;\n  renderLogInfoSection?: (...args: any) => any;\n  enableCDC: boolean;\n  maxExtensionNumberLength: number;\n  renderConversationTitle?(options: {\n    conversation: CurrentConversation;\n    phoneNumber: string;\n    defaultContactDisplay: JSX.Element;\n  }): ReactNode;\n}\n"],"mappings":""}