{"version":3,"sources":["modules/ExtensionDevice/index.ts"],"names":["ExtensionDevice","deps","dep","optional","client","options","fetchFunction","params","account","extension","device","list","map","cleanOnReset","DataFetcher","selector","data","devices","phoneLines","forEach","length","concat"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASqBA,e;AAPrB;AACA;AACA;AACA;OACC,gBAAO;AACNC,EAAAA,IAAI,EAAE,CAAC,QAAD,EAAW;AAAEC,IAAAA,GAAG,EAAE,wBAAP;AAAiCC,IAAAA,QAAQ,EAAE;AAA3C,GAAX;AADA,CAAP,C;;;;;AAIC;AACF;AACA;AACA;AACA;AACE,iCAAoC;AAAA;;AAAA,QAAtBC,MAAsB,QAAtBA,MAAsB;AAAA,QAAXC,OAAW;;AAAA;;AAClC;AACED,MAAAA,MAAM,EAANA,MADF;AAEEE,MAAAA,aAAa;AAAA,qFAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEL,2BAAU,UAACC,MAAD;AAAA,2BACdH,MAAM,CAACI,OAAP,GAAiBC,SAAjB,GAA6BC,MAA7B,GAAsCC,IAAtC,CAA2CJ,MAA3C,CADc;AAAA,mBAAV,CAFK;;AAAA;AAAA,iEAKXK,GALW,CAKP,UAACF,MAAD;AAAA,2DACD,2BAAUA,MAAV,CADC;AAEJD,sBAAAA,SAAS,EAAE,2BAAUC,MAAM,CAACD,SAAjB;AAFP;AAAA,mBALO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SAFf;AAWEI,MAAAA,YAAY,EAAE;AAXhB,OAYKR,OAZL;;AADkC;;AAAA;;AAAA;AAenC;;;;wBAEW;AACV,aAAO,iBAAP;AACD;;;;EAzB0CS,wB,2EA2B1CC,kB;;;;;;;WACS,CAAC;AAAA,aAAM,MAAI,CAACC,IAAX;AAAA,KAAD,EAAkB,UAACA,IAAD;AAAA,aAAUA,IAAI,IAAI,EAAlB;AAAA,KAAlB,C;;+EAETD,kB;;;;;;;WACY,CACX;AAAA,aAAM,MAAI,CAACE,OAAX;AAAA,KADW,EAEX,UAACA,OAAD,EAAa;AACX,UAAIC,UAAU,GAAG,EAAjB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAACT,MAAD,EAAY;AAC1B,YAAI,CAACA,MAAM,CAACQ,UAAR,IAAsBR,MAAM,CAACQ,UAAP,CAAkBE,MAAlB,KAA6B,CAAvD,EAA0D;AACxD;AACD;;AACDF,QAAAA,UAAU,GAAGA,UAAU,CAACG,MAAX,CAAkBX,MAAM,CAACQ,UAAzB,CAAb;AACD,OALD;AAMA,aAAOA,UAAP;AACD,KAXU,C","sourcesContent":["import DataFetcher from '../../lib/DataFetcher';\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport removeUri from '../../lib/removeUri';\nimport { selector } from '../../lib/selector';\n\n/**\n * @class\n * @description Extension device list module\n */\n@Module({\n  deps: ['Client', { dep: 'ExtensionDeviceOptions', optional: true }],\n})\nexport default class ExtensionDevice extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({ client, ...options }) {\n    super({\n      client,\n      fetchFunction: async () =>\n        (\n          await fetchList((params) =>\n            client.account().extension().device().list(params),\n          )\n        ).map((device) => ({\n          ...removeUri(device),\n          extension: removeUri(device.extension),\n        })),\n      cleanOnReset: true,\n      ...options,\n    });\n  }\n\n  get _name() {\n    return 'extensionDevice';\n  }\n\n  @selector\n  devices = [() => this.data, (data) => data || []];\n\n  @selector\n  phoneLines = [\n    () => this.devices,\n    (devices) => {\n      let phoneLines = [];\n      devices.forEach((device) => {\n        if (!device.phoneLines || device.phoneLines.length === 0) {\n          return;\n        }\n        phoneLines = phoneLines.concat(device.phoneLines);\n      });\n      return phoneLines;\n    },\n  ];\n}\n"],"file":"index.js"}