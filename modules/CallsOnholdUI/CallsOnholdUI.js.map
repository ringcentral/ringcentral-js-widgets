{"version":3,"sources":["modules/CallsOnholdUI/CallsOnholdUI.ts"],"names":["CallsOnholdUI","name","deps","dep","optional","that","_deps","callMonitor","calls","fromSessionId","options","params","onMerge","sessionId","callsOnHoldClickMergeTrack","conferenceCall","parseMergingSessions","sessionIdToMergeWith","sessions","confId","conferences","Object","keys","confSessionId","routerInteraction","push","goBack","mergeSessions","onBackButtonClick","webphone","length","go","onAdd","callsOnHoldClickAddTrack","fromNumber","getAvatarUrl","webphoneHangup","callsOnHoldClickHangupTrack","hangup","call","webphoneSession","isConferenceSession","id","ActiveCallsUI"],"mappings":"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","sourcesContent":["import { filter } from 'ramda';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport { computed, UIFunctions, UIProps } from '@ringcentral-integration/core';\n\nimport { ActiveCallsUI } from '../ActiveCallsUI';\nimport {\n  CallsOnholdContainerProps,\n  CallsOnholdPanelProps,\n  Deps,\n} from './CallsOnholdUI.interface';\n\n@Module({\n  name: 'CallsOnholdUI',\n  deps: ['RouterInteraction', { dep: 'CallsOnholdUIOptions', optional: true }],\n})\nexport class CallsOnholdUI extends ActiveCallsUI<Deps> {\n  fromSessionId?: string;\n\n  @computed((that: CallsOnholdUI) => [\n    that._deps.callMonitor.calls,\n    that.fromSessionId,\n  ])\n  get calls() {\n    return filter(\n      (call) =>\n        call.webphoneSession &&\n        !this._deps.conferenceCall.isConferenceSession(\n          call.webphoneSession.id,\n        ) &&\n        call.webphoneSession.id !== this.fromSessionId,\n      this._deps.callMonitor.calls,\n    );\n  }\n\n  getUIProps(\n    options: CallsOnholdContainerProps,\n  ): UIProps<CallsOnholdPanelProps> {\n    this.fromSessionId = options.params.fromSessionId;\n    return {\n      ...super.getUIProps(options),\n      calls: this.calls,\n    };\n  }\n\n  getUIFunctions(\n    options: CallsOnholdContainerProps,\n  ): UIFunctions<CallsOnholdPanelProps> {\n    return {\n      ...super.getUIFunctions(options),\n      onMerge: async (sessionId) => {\n        // to track user click merge\n        this._deps.callMonitor.callsOnHoldClickMergeTrack();\n\n        const sessions = await this._deps.conferenceCall.parseMergingSessions({\n          sessionId,\n          sessionIdToMergeWith: options.params.fromSessionId,\n        });\n        if (sessions) {\n          const confId =\n            this._deps.conferenceCall.conferences &&\n            Object.keys(this._deps.conferenceCall.conferences)[0];\n          if (confId) {\n            const confSessionId =\n              this._deps.conferenceCall.conferences[confId].sessionId;\n            this._deps.routerInteraction.push(`/calls/active/${confSessionId}`);\n          } else {\n            this._deps.routerInteraction.goBack();\n          }\n          await this._deps.conferenceCall.mergeSessions(sessions);\n        }\n      },\n      onBackButtonClick: () => {\n        if (this._deps.webphone.sessions.length) {\n          this._deps.routerInteraction.goBack();\n          return;\n        }\n        this._deps.routerInteraction.go(-2);\n      },\n      onAdd: () => {\n        // to track use click add button\n        this._deps.callMonitor.callsOnHoldClickAddTrack();\n        this._deps.routerInteraction.push(\n          `/conferenceCall/dialer/${options.params.fromNumber}/${options.params.fromSessionId}`,\n        );\n      },\n      getAvatarUrl: options.getAvatarUrl,\n      webphoneHangup: async (sessionId) => {\n        // track user click hangup on calls onhold page\n        this._deps.callMonitor.callsOnHoldClickHangupTrack();\n        return this._deps.webphone && this._deps.webphone.hangup(sessionId);\n      },\n    };\n  }\n}\n"],"file":"CallsOnholdUI.js"}