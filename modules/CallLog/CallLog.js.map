{"version":3,"file":"CallLog.js","names":["_core","require","_utils","_callActions","_callResults","_subscriptionFilters","_syncTypes","_callLogHelpers","_di","_fetchList","_interopRequireDefault","_getDateFrom","_proxify","_helper","_dec","_dec2","_dec3","_class","_class2","_descriptor","e","__esModule","ownKeys","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","_typeof","Symbol","iterator","constructor","prototype","asyncGeneratorStep","n","a","c","i","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","_initializerDefineProperty","l","initializer","call","_classCallCheck","TypeError","_defineProperties","key","_createClass","_toPrimitive","toPrimitive","String","Number","_get","Reflect","get","bind","p","_superPropBase","hasOwnProperty","_getPrototypeOf","_inherits","create","_setPrototypeOf","setPrototypeOf","__proto__","_createSuper","_isNativeReflectConstruct","s","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","slice","reverse","reduce","_initializerWarningHelper","Error","DEFAULT_TTL","DEFAULT_REFRESH_LOCK","DEFAULT_TOKEN_EXPIRES_IN","DEFAULT_DAY_SPAN","RECORD_COUNT","LIST_RECORD_COUNT","DEFAULT_TIME_TO_RETRY","SYNC_DELAY","presenceRegExp","CallLog","Module","name","deps","dep","optional","computed","_ref","list","_ref2","data","map","_RcModuleV","_super","_deps$callLogOptions$","_deps$callLogOptions","_this","storageKey","enableCache","callLogOptions","disableCache","_promise","_queueSync","_timeoutId","_handleSyncApiError","resetData","token","timestamp","clearToken","filterExpiredCalls","daySpan","_this2","cutOffTime","getDateFrom","getTime","newList","id","startTime","syncSuccess","_ref3","_this3","syncToken","_ref3$records","records","_ref3$supplementRecor","supplementRecords","newState","processRecords","_enableDeleted","deleted","index","indexOf","splice","_shouldInit","_deps","auth","loggedIn","_shouldReset","ready","_onInit","regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","_daySpan","Date","now","_tokenExpiresIn","initInternal","stop","onInit","_initInternal","_callee2","_callee2$","_context2","appFeatures","hasReadExtensionCallLog","_init","onReset","_clearTimeout","onInitOnce","_this4","watch","subscription","message","_ref4","_callee3","ownerId","_callee3$","_context3","test","event","body","activeCalls","hasEndedCalls","sleep","storage","tabManager","active","sync","_x","_init2","_callee4","_callee4$","_context4","subscribe","refreshLock","t0","console","log","_polling","_startPolling","subscriptionFilters","detailedPresence","_fetch2","_callee5","_ref5","_this5","dateFrom","dateTo","perPageParam","_callee5$","_context5","_isLimitList","perPage","_listRecordCount","abrupt","fetchList","params","client","account","extension","callLog","_fetch","_x2","_iSync2","_callee6","_this$_handleSyncApiE","_callee6$","_context6","callLogSync","syncType","syncTypes","iSync","showDeleted","sent","processData","_iSync","_fSync2","_callee7","_processData","_this$_handleSyncApiE2","_callee7$","_context7","getISODateFrom","recordCount","_recordCount","fSync","getISODateTo","_fSync","_sync2","_callee8","shouldFSync","_callee8$","_context8","t1","timeToRetry","_retry","_sync","_x3","_sync3","_callee11","_this6","_args11","_callee11$","_context11","undefined","_callee10","_callee10$","_context10","_callee9","_callee9$","_context9","fetchData","clearTimeout","_this$timestamp","_this7","pollingInterval","setTimeout","ttl","_this8","_this$_deps$callLogOp","_this$_deps$callLogOp2","_this$_deps$callLogOp3","_this$_deps$callLogOp4","_this$_deps$callLogOp5","_this$_deps$callLogOp6","tokenExpiresIn","_this$_deps$callLogOp7","_this$_deps$callLogOp8","_this$_deps$callLogOp9","_this$_deps$callLogOp10","_this$_deps$callLogOp11","_this$_deps$callLogOp12","polling","_this$_deps$callLogOp13","_this$_deps$callLogOp14","isLimitList","_this$_deps$callLogOp15","_this$_deps$callLogOp16","listRecordCount","_this$_deps$callLogOp17","_this$_deps$callLogOp18","_this$_deps$callLogOp19","_this$_deps$callLogOp20","enableDeleted","_this9","calls","removeInboundRingOutLegs","removeDuplicateIntermediateCalls","result","callResults","stopped","busy","unknown","faxSendError","faxReceiptError","callFailed","faxReceipt","isOutBoundCompanyNumber","from","phoneNumber","mainCompanyNumbers","isOutBoundFromSelfExtNumber","extensionNumber","extensionInfo","info","isOutbound","action","callActions","ringOutWeb","ringOutPC","ringOutMobile","to","sort","sortByStartTime","_this10","_ttl","_refreshLock","_timeToRetry","extensionPhoneNumber","numbers","_ref8","usageType","_ref9","RcModuleV2","state","proxify","exports"],"sources":["modules/CallLog/CallLog.ts"],"sourcesContent":["import type ReadUserCallLogParameters from '@rc-ex/core/lib/definitions/ReadUserCallLogParameters';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  watch,\n} from '@ringcentral-integration/core';\nimport { sleep } from '@ringcentral-integration/utils';\n\nimport { callActions } from '../../enums/callActions';\nimport { callResults } from '../../enums/callResults';\nimport { subscriptionFilters } from '../../enums/subscriptionFilters';\nimport type { SyncType } from '../../enums/syncTypes';\nimport { syncTypes } from '../../enums/syncTypes';\nimport { ActiveCall } from '../../interfaces/Presence.model';\nimport {\n  hasEndedCalls,\n  isOutbound,\n  removeDuplicateIntermediateCalls,\n  removeInboundRingOutLegs,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport getDateFrom from '../../lib/getDateFrom';\nimport { proxify } from '../../lib/proxy/proxify';\n\nimport type {\n  CallLogData,\n  CallLogRecords,\n  CallLogSyncData,\n  Deps,\n  SyncSuccessOptions,\n  UserCallLogResponseData,\n} from './CallLog.interface';\nimport {\n  getISODateFrom,\n  getISODateTo,\n  processData,\n  processRecords,\n} from './helper';\n\nconst DEFAULT_TTL = 5 * 60 * 1000;\n// Lock fetching on app refresh if lst fetch happened less than this time span\nconst DEFAULT_REFRESH_LOCK = 3 * 60 * 1000;\nconst DEFAULT_TOKEN_EXPIRES_IN = 60 * 60 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\nconst RECORD_COUNT = 250;\nconst LIST_RECORD_COUNT = 250;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst SYNC_DELAY = 30 * 1000;\n// to not use $ at the end, presence with sipData has extra query parameters\nconst presenceRegExp = /\\/presence\\?detailedTelephonyState=true/;\n\n@Module({\n  name: 'CallLog',\n  deps: [\n    'Auth',\n    'Client',\n    'ExtensionPhoneNumber',\n    'ExtensionInfo',\n    'Subscription',\n    'AppFeatures',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'CallLogOptions', optional: true },\n  ],\n})\nexport class CallLog extends RcModuleV2<Deps> {\n  protected _promise: Promise<void> | null = null;\n\n  protected _queueSync: Promise<void> | null = null;\n\n  protected _timeoutId: NodeJS.Timeout | null = null;\n\n  protected _handleSyncApiError: ((error?: Error) => Promise<void>) | null =\n    null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'CallLog',\n      enableCache: !(deps.callLogOptions?.disableCache ?? false),\n    });\n  }\n\n  @storage\n  @state\n  data: CallLogData = {\n    list: [],\n    map: {},\n    token: null,\n    timestamp: null,\n  };\n\n  @action\n  resetData() {\n    this.data = {\n      list: [],\n      map: {},\n      token: null,\n      timestamp: null,\n    };\n  }\n\n  @action\n  clearToken() {\n    this.data.token = null;\n    this.data.timestamp = null;\n  }\n\n  @action\n  filterExpiredCalls(daySpan: number) {\n    const cutOffTime = getDateFrom(daySpan).getTime();\n    const newList: string[] = [];\n    this.data.list.forEach((id) => {\n      const call = this.data.map[id];\n      if (call.startTime > cutOffTime) {\n        newList.push(id);\n      } else {\n        delete this.data.map[id];\n      }\n    });\n    this.data.list = newList;\n  }\n\n  @action\n  syncSuccess({\n    timestamp,\n    syncToken,\n    records = [],\n    supplementRecords = [],\n    daySpan,\n  }: SyncSuccessOptions) {\n    this.data.timestamp = timestamp;\n    this.data.token = syncToken;\n    const newState: string[] = [];\n    const cutOffTime = getDateFrom(daySpan).getTime();\n    // filter old calls\n    this.data.list.forEach((id) => {\n      const call = this.data.map[id];\n      if (call.startTime > cutOffTime) {\n        newState.push(id);\n      } else {\n        delete this.data.map[id];\n      }\n    });\n    processRecords(records, supplementRecords).forEach((call) => {\n      if (call.startTime > cutOffTime) {\n        // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n        if (!this.data.map[call.id]) {\n          // @ts-expect-error TS(2345): Argument of type 'string | undefined' is not assig... Remove this comment to see the full error message\n          newState.push(call.id);\n        }\n        // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n        this.data.map[call.id] = call;\n        if (this._enableDeleted && call.deleted) {\n          // @ts-expect-error TS(2345): Argument of type 'string | undefined' is not assig... Remove this comment to see the full error message\n          const index = newState.indexOf(call.id);\n          if (index > -1) {\n            newState.splice(index, 1);\n          }\n          // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n          delete this.data.map[call.id];\n        }\n      }\n    });\n    this.data.list = newState;\n  }\n\n  protected get _ttl() {\n    return this._deps.callLogOptions?.ttl ?? DEFAULT_TTL;\n  }\n\n  protected get _refreshLock() {\n    return this._deps.callLogOptions?.refreshLock ?? DEFAULT_REFRESH_LOCK;\n  }\n\n  protected get _tokenExpiresIn() {\n    return (\n      this._deps.callLogOptions?.tokenExpiresIn ?? DEFAULT_TOKEN_EXPIRES_IN\n    );\n  }\n\n  protected get _timeToRetry() {\n    return this._deps.callLogOptions?.timeToRetry ?? DEFAULT_TIME_TO_RETRY;\n  }\n\n  protected get _daySpan() {\n    return this._deps.callLogOptions?.daySpan ?? DEFAULT_DAY_SPAN;\n  }\n\n  protected get _polling() {\n    return this._deps.callLogOptions?.polling ?? true;\n  }\n\n  protected get _isLimitList() {\n    return this._deps.callLogOptions?.isLimitList ?? false;\n  }\n\n  protected get _listRecordCount() {\n    return this._deps.callLogOptions?.listRecordCount ?? LIST_RECORD_COUNT;\n  }\n\n  protected get _recordCount() {\n    return this._deps.callLogOptions?.recordCount ?? RECORD_COUNT;\n  }\n\n  protected get _enableDeleted() {\n    return this._deps.callLogOptions?.enableDeleted ?? false;\n  }\n\n  override _shouldInit() {\n    return !!(super._shouldInit() && this._deps.auth.loggedIn);\n  }\n\n  override _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._deps.auth.loggedIn)\n    );\n  }\n\n  override async onInit() {\n    /**\n     * old call log data structure migration\n     */\n    if (typeof this.data.list[0] === 'object') {\n      this.resetData();\n    }\n\n    this.filterExpiredCalls(this._daySpan);\n    if (\n      this.token &&\n      (!this.timestamp || Date.now() - this.timestamp > this._tokenExpiresIn)\n    ) {\n      this.clearToken();\n    }\n\n    await this.initInternal();\n  }\n\n  protected async initInternal() {\n    if (this._deps.appFeatures.hasReadExtensionCallLog) {\n      await this._init();\n    }\n  }\n\n  override onReset() {\n    this._clearTimeout();\n    this._promise = null;\n    this.resetData();\n  }\n\n  override onInitOnce() {\n    watch(\n      this,\n      () => this._deps.subscription.message,\n      async (message) => {\n        if (\n          this.ready &&\n          this._deps.subscription.ready &&\n          // @ts-expect-error TS(2345): Argument of type 'string | undefined' is not assig... Remove this comment to see the full error message\n          presenceRegExp.test(message.event) &&\n          message.body &&\n          message.body.activeCalls &&\n          hasEndedCalls(message.body.activeCalls)\n        ) {\n          const { ownerId } = this._deps.auth;\n          await sleep(SYNC_DELAY);\n          if (\n            ownerId === this._deps.auth.ownerId &&\n            (!this._deps.storage ||\n              !this._deps.tabManager ||\n              this._deps.tabManager.active)\n          ) {\n            this.sync();\n          }\n        }\n      },\n    );\n  }\n\n  async _init() {\n    this.subscribe();\n    if (\n      (!this._deps.tabManager || this._deps.tabManager.active) &&\n      (!this.timestamp || Date.now() - this.timestamp > this.refreshLock)\n    ) {\n      try {\n        await this.sync();\n      } catch (e: any /** TODO: confirm with instanceof */) {\n        console.log(e);\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    }\n  }\n\n  /**\n   * For a temporal solution for sub module to do subscribe message manually\n   */\n  protected subscribe() {\n    if (this._deps.subscription) {\n      this._deps.subscription.subscribe([subscriptionFilters.detailedPresence]);\n    }\n  }\n\n  @computed(({ list }: CallLog) => [list])\n  get calls() {\n    // TODO: make sure removeDuplicateIntermediateCalls is necessary here\n    const calls = removeInboundRingOutLegs(\n      removeDuplicateIntermediateCalls(\n        // https://developers.ringcentral.com/api-reference/Call-Log/readUserCallLog\n        // @ts-expect-error TS(2345): Argument of type 'CallLogRecord[]' is not assignab... Remove this comment to see the full error message\n        this.list.filter(\n          (call) =>\n            // [RCINT-3472] calls with result === 'stopped' seems to be useless\n            call.result !== callResults.stopped &&\n            // [RCINT-51111] calls with result === 'busy'\n            call.result !== callResults.busy &&\n            // [RCINT-6839]\n            // Call processing result is undefined\n            call.result !== callResults.unknown &&\n            // Outgoing fax sending has failed\n            // TODO: Types of Legacy, remove for checking type?\n            // @ts-expect-error TS(2367): This condition will always return 'true' since the... Remove this comment to see the full error message\n            call.result !== callResults.faxSendError &&\n            // Incoming fax has failed to be received\n            call.result !== callResults.faxReceiptError &&\n            // Outgoing fax has failed because of no answer\n            call.result !== callResults.callFailed &&\n            // Error Internal error occurred when receiving fax\n            // TODO: Types of Legacy, remove for checking type?\n            // @ts-expect-error TS(2367): This condition will always return 'true' since the... Remove this comment to see the full error message\n            call.result !== callResults.faxReceipt,\n        ),\n      ) as ActiveCall[],\n    )\n      .map((call) => {\n        // [RCINT-7364] Call presence is incorrect when make ringout call from a DL number.\n        // When user use DL number set ringout and the outBound from number must not a oneself company/extension number\n        // Call log sync will response tow legs.\n        // But user use company plus extension number, call log sync will response only one leg.\n        // And the results about `to` and `from` in platform APIs call log sync response is opposite.\n        // This is a temporary solution.\n        const isOutBoundCompanyNumber =\n          call.from &&\n          call.from.phoneNumber &&\n          this.mainCompanyNumbers.indexOf(call.from.phoneNumber) > -1;\n        const isOutBoundFromSelfExtNumber =\n          call.from &&\n          call.from.extensionNumber &&\n          call.from.extensionNumber ===\n            this._deps.extensionInfo.info.extensionNumber;\n        if (\n          isOutbound(call) &&\n          (call.action === callActions.ringOutWeb ||\n            call.action === callActions.ringOutPC ||\n            call.action === callActions.ringOutMobile) &&\n          !isOutBoundCompanyNumber &&\n          !isOutBoundFromSelfExtNumber\n        ) {\n          return {\n            ...call,\n            from: call.to,\n            to: call.from,\n          };\n        }\n        return call;\n      })\n      .sort(sortByStartTime);\n    if (this._isLimitList) {\n      return calls.slice(0, this._listRecordCount);\n    }\n    return calls;\n  }\n\n  @computed(({ data }: CallLog) => [data.list, data.map])\n  get list() {\n    /**\n     * old call log data structure migration\n     */\n    if (typeof this.data.list[0] === 'object') {\n      return [];\n    }\n\n    return this.data.list.map((id) => this.data.map[id]).sort(sortByStartTime);\n  }\n\n  get token() {\n    return this.data.token;\n  }\n\n  get timestamp() {\n    return this.data.timestamp;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get refreshLock() {\n    return this._refreshLock;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  @proxify\n  async _fetch({\n    dateFrom,\n    dateTo,\n  }: Pick<ReadUserCallLogParameters, 'dateFrom' | 'dateTo'>) {\n    const perPageParam = this._isLimitList\n      ? { perPage: this._listRecordCount }\n      : {};\n    return fetchList(\n      (params) =>\n        this._deps.client\n          .account()\n          .extension()\n          .callLog()\n          .list({\n            ...params,\n            dateFrom,\n            dateTo,\n            ...perPageParam,\n          }) as Promise<UserCallLogResponseData>,\n    );\n  }\n\n  @proxify\n  async _iSync() {\n    const ownerId = this._deps.auth.ownerId;\n    try {\n      const data: CallLogSyncData = await this._deps.client\n        .account()\n        .extension()\n        .callLogSync()\n        .list({\n          syncType: syncTypes.iSync,\n          syncToken: this.token,\n          showDeleted: this._enableDeleted,\n        });\n      if (ownerId !== this._deps.auth.ownerId) throw Error('request aborted');\n      // @ts-expect-error TS(2345): Argument of type '{ daySpan: number; records: Call... Remove this comment to see the full error message\n      this.syncSuccess({\n        ...processData(data),\n        daySpan: this._daySpan,\n      });\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      if (ownerId === this._deps.auth.ownerId) {\n        // iSyncError\n        await this._handleSyncApiError?.(error);\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async _fSync() {\n    const ownerId = this._deps.auth.ownerId;\n    try {\n      const dateFrom = getISODateFrom(this._daySpan);\n      const data: CallLogSyncData = await this._deps.client\n        .account()\n        .extension()\n        .callLogSync()\n        .list({\n          recordCount: this._recordCount,\n          syncType: syncTypes.fSync,\n          dateFrom,\n        });\n      if (ownerId !== this._deps.auth.ownerId) throw Error('request aborted');\n      let supplementRecords: CallLogRecords;\n      const { records, timestamp, syncToken } = processData(data);\n      if (records.length >= this._recordCount) {\n        // reach the max record count\n        supplementRecords = await this._fetch({\n          dateFrom,\n          // @ts-expect-error TS(2322): Type 'string | 0 | undefined' is not assignable to... Remove this comment to see the full error message\n          dateTo: getISODateTo(records),\n        });\n      }\n      if (ownerId !== this._deps.auth.ownerId) throw Error('request aborted');\n      if (this._enableDeleted) {\n        this.resetData();\n      }\n      this.syncSuccess({\n        records,\n        // @ts-expect-error TS(2454): Variable 'supplementRecords' is used before being ... Remove this comment to see the full error message\n        supplementRecords,\n        timestamp,\n        // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n        syncToken,\n        daySpan: this._daySpan,\n      });\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      if (ownerId === this._deps.auth.ownerId) {\n        // fSyncError\n        await this._handleSyncApiError?.(error);\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async _sync(syncType: SyncType) {\n    const ownerId = this._deps.auth.ownerId;\n    try {\n      let shouldFSync = syncType === syncTypes.fSync;\n      if (!shouldFSync) {\n        try {\n          await this._iSync();\n        } catch (error: any /** TODO: confirm with instanceof */) {\n          shouldFSync = true;\n        }\n      }\n      if (shouldFSync && ownerId === this._deps.auth.ownerId) {\n        await this._fSync();\n      }\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      if (ownerId === this._deps.auth.ownerId) {\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n      }\n    }\n    this._promise = null;\n  }\n\n  @proxify\n  async sync(syncType = this.token ? syncTypes.iSync : syncTypes.fSync) {\n    if (!this._promise) {\n      this._promise = this._sync(syncType);\n      return this._promise;\n    }\n    if (!this._queueSync) {\n      this._queueSync = (async () => {\n        await this._promise;\n        this._promise = (async () => {\n          await sleep(300);\n          return this._sync(syncType);\n        })();\n        this._queueSync = null;\n        return this._promise;\n      })();\n      return this._queueSync;\n    }\n    return this._queueSync;\n  }\n\n  @proxify\n  fetchData() {\n    return this.sync();\n  }\n\n  get mainCompanyNumbers() {\n    return this._deps.extensionPhoneNumber.numbers\n      .filter(({ usageType }) => usageType === 'MainCompanyNumber')\n      .map(({ phoneNumber }) => phoneNumber);\n  }\n\n  get pollingInterval() {\n    return this.ttl;\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n\n  _startPolling(\n    t = (this.timestamp ?? 0) + this.pollingInterval + 10 - Date.now(),\n  ) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._deps.tabManager || this._deps.tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  _retry(t = this.timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n        if (!this._deps.tabManager || this._deps.tabManager.active) {\n          this.fetchData();\n        } else {\n          // continue retry checks in case tab becomes main tab\n          this._retry();\n        }\n      }\n    }, t);\n  }\n}\n"],"mappings":"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","ignoreList":[]}