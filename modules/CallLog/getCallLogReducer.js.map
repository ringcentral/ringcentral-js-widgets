{"version":3,"sources":["modules/CallLog/getCallLogReducer.ts"],"names":["processRecords","records","supplementRecords","ids","output","processCall","call","id","action","callActions","findMe","push","forEach","getDataReducer","types","state","type","daySpan","init","cutOffTime","getTime","filter","startTime","fSyncSuccess","iSyncSuccess","indexMap","newState","length","sort","sortByStartTime","resetSuccess","getTokenReducer","syncToken","clearToken","getTimestampReducer","timestamp","getLocalTimestampReducer","localTimestamp","getCallLogReducer","reducers","status"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,SAASA,cAAT,GAA8D;AAAA,MAAtCC,OAAsC,uEAA5B,EAA4B;AAAA,MAAxBC,iBAAwB,uEAAJ,EAAI;AAC5D,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,MAAM,GAAG,EAAf;;AACA,WAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAI,CAACH,GAAG,CAACG,IAAI,CAACC,EAAN,CAAJ,IAAiBD,IAAI,CAACE,MAAL,KAAgBC,wBAAYC,MAAjD,EAAyD;AACvDN,MAAAA,MAAM,CAACO,IAAP,CAAY,wCAAmB,2BAAUL,IAAV,CAAnB,CAAZ;AACAH,MAAAA,GAAG,CAACG,IAAI,CAACC,EAAN,CAAH,GAAe,IAAf;AACD;AACF;;AACDN,EAAAA,OAAO,CAACW,OAAR,CAAgBP,WAAhB;AACAH,EAAAA,iBAAiB,CAACU,OAAlB,CAA0BP,WAA1B;AACA,SAAOD,MAAP;AACD;;AAEM,SAASS,cAAT,CAAwBC,KAAxB,EAA+B;AACpC,SAAO,YAGF;AAAA,QAFHC,KAEG,uEAFK,EAEL;;AAAA;AAAA,QADDC,IACC,QADDA,IACC;AAAA,4BADKf,OACL;AAAA,QADKA,OACL,6BADe,EACf;AAAA,qCADmBC,iBACnB;AAAA,QADmBA,iBACnB,sCADuC,EACvC;AAAA,QAD2Ce,OAC3C,QAD2CA,OAC3C;;AACH,YAAQD,IAAR;AACE,WAAKF,KAAK,CAACI,IAAX;AAAiB;AACf,cAAMC,UAAU,GAAG,6BAAYF,OAAZ,EAAqBG,OAArB,EAAnB;AACA,iBAAOL,KAAK,CAACM,MAAN,CAAa,UAACf,IAAD;AAAA,mBAAUA,IAAI,CAACgB,SAAL,GAAiBH,UAA3B;AAAA,WAAb,CAAP;AACD;;AACD,WAAKL,KAAK,CAACS,YAAX;AACA,WAAKT,KAAK,CAACU,YAAX;AAAyB;AACvB,cAAMC,QAAQ,GAAG,EAAjB;AACA,cAAMC,QAAQ,GAAG,EAAjB;;AACA,cAAMP,WAAU,GAAG,6BAAYF,OAAZ,EAAqBG,OAArB,EAAnB,CAHuB,CAIvB;;;AACAL,UAAAA,KAAK,CAACH,OAAN,CAAc,UAACN,IAAD,EAAU;AACtB,gBAAIA,IAAI,CAACgB,SAAL,GAAiBH,WAArB,EAAiC;AAC/BM,cAAAA,QAAQ,CAACnB,IAAI,CAACC,EAAN,CAAR,GAAoBmB,QAAQ,CAACC,MAA7B;AACAD,cAAAA,QAAQ,CAACf,IAAT,CAAcL,IAAd;AACD;AACF,WALD;AAMAN,UAAAA,cAAc,CAACC,OAAD,EAAUC,iBAAV,CAAd,CAA2CU,OAA3C,CAAmD,UAACN,IAAD,EAAU;AAC3D,gBAAIA,IAAI,CAACgB,SAAL,GAAiBH,WAArB,EAAiC;AAC/B,kBAAIM,QAAQ,CAACnB,IAAI,CAACC,EAAN,CAAR,GAAoB,CAAC,CAAzB,EAA4B;AAC1B;AACAmB,gBAAAA,QAAQ,CAACD,QAAQ,CAACnB,IAAI,CAACC,EAAN,CAAT,CAAR,GAA8BD,IAA9B;AACD,eAHD,MAGO;AACLmB,gBAAAA,QAAQ,CAACnB,IAAI,CAACC,EAAN,CAAR,GAAoBmB,QAAQ,CAACC,MAA7B;AACAD,gBAAAA,QAAQ,CAACf,IAAT,CAAcL,IAAd;AACD;AACF;AACF,WAVD;AAWAoB,UAAAA,QAAQ,CAACE,IAAT,CAAcC,+BAAd;AACA,iBAAOH,QAAP;AACD;;AACD,WAAKZ,KAAK,CAACgB,YAAX;AACE,eAAO,EAAP;;AACF;AACE,eAAOf,KAAP;AAlCJ;AAoCD,GAxCD;AAyCD;;AAEM,SAASgB,eAAT,CAAyBjB,KAAzB,EAAgC;AACrC,SAAO,YAAuC;AAAA,QAAtCC,KAAsC,uEAA9B,IAA8B;;AAAA;AAAA,QAAtBC,IAAsB,SAAtBA,IAAsB;AAAA,QAAhBgB,SAAgB,SAAhBA,SAAgB;;AAC5C,YAAQhB,IAAR;AACE,WAAKF,KAAK,CAACU,YAAX;AACA,WAAKV,KAAK,CAACS,YAAX;AACE,eAAOS,SAAP;;AACF,WAAKlB,KAAK,CAACgB,YAAX;AACA,WAAKhB,KAAK,CAACmB,UAAX;AACE,eAAO,IAAP;;AACF;AACE,eAAOlB,KAAP;AARJ;AAUD,GAXD;AAYD;;AAEM,SAASmB,mBAAT,CAA6BpB,KAA7B,EAAoC;AACzC,SAAO,YAAuC;AAAA,QAAtCC,KAAsC,uEAA9B,IAA8B;;AAAA;AAAA,QAAtBC,IAAsB,SAAtBA,IAAsB;AAAA,QAAhBmB,SAAgB,SAAhBA,SAAgB;;AAC5C,YAAQnB,IAAR;AACE,WAAKF,KAAK,CAACS,YAAX;AACA,WAAKT,KAAK,CAACU,YAAX;AACE,eAAOW,SAAP;;AACF,WAAKrB,KAAK,CAACgB,YAAX;AACA,WAAKhB,KAAK,CAACmB,UAAX;AACE,eAAO,IAAP;;AACF;AACE,eAAOlB,KAAP;AARJ;AAUD,GAXD;AAYD;;AAEM,SAASqB,wBAAT,CAAkCtB,KAAlC,EAAyC;AAC9C,SAAO,YAA4C;AAAA,QAA3CC,KAA2C,uEAAnC,IAAmC;;AAAA;AAAA,QAA3BC,IAA2B,SAA3BA,IAA2B;AAAA,QAArBqB,cAAqB,SAArBA,cAAqB;;AACjD,YAAQrB,IAAR;AACE,WAAKF,KAAK,CAACS,YAAX;AACA,WAAKT,KAAK,CAACU,YAAX;AACE,eAAOa,cAAP;;AACF,WAAKvB,KAAK,CAACgB,YAAX;AACA,WAAKhB,KAAK,CAACmB,UAAX;AACE,eAAO,IAAP;;AACF;AACE,eAAOlB,KAAP;AARJ;AAUD,GAXD;AAYD;AAED;;;AACe,SAASuB,iBAAT,CAA2BxB,KAA3B,EAAiD;AAAA,MAAfyB,QAAe,uEAAJ,EAAI;AAC9D,SAAO,4DACFA,QADE;AAELC,IAAAA,MAAM,EAAE,wCAAuB1B,KAAvB;AAFH,KAAP;AAID","sourcesContent":["import { combineReducers } from 'redux';\n\nimport callActions from '../../enums/callActions';\nimport { normalizeStartTime, sortByStartTime } from '../../lib/callLogHelpers';\nimport getDateFrom from '../../lib/getDateFrom';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport removeUri from '../../lib/removeUri';\n\nfunction processRecords(records = [], supplementRecords = []) {\n  const ids = {};\n  const output = [];\n  function processCall(call) {\n    if (!ids[call.id] && call.action !== callActions.findMe) {\n      output.push(normalizeStartTime(removeUri(call)));\n      ids[call.id] = true;\n    }\n  }\n  records.forEach(processCall);\n  supplementRecords.forEach(processCall);\n  return output;\n}\n\nexport function getDataReducer(types) {\n  return (\n    state = [],\n    { type, records = [], supplementRecords = [], daySpan },\n  ) => {\n    switch (type) {\n      case types.init: {\n        const cutOffTime = getDateFrom(daySpan).getTime();\n        return state.filter((call) => call.startTime > cutOffTime);\n      }\n      case types.fSyncSuccess:\n      case types.iSyncSuccess: {\n        const indexMap = {};\n        const newState = [];\n        const cutOffTime = getDateFrom(daySpan).getTime();\n        // filter old calls\n        state.forEach((call) => {\n          if (call.startTime > cutOffTime) {\n            indexMap[call.id] = newState.length;\n            newState.push(call);\n          }\n        });\n        processRecords(records, supplementRecords).forEach((call) => {\n          if (call.startTime > cutOffTime) {\n            if (indexMap[call.id] > -1) {\n              // replace the current data with new data\n              newState[indexMap[call.id]] = call;\n            } else {\n              indexMap[call.id] = newState.length;\n              newState.push(call);\n            }\n          }\n        });\n        newState.sort(sortByStartTime);\n        return newState;\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTokenReducer(types) {\n  return (state = null, { type, syncToken }) => {\n    switch (type) {\n      case types.iSyncSuccess:\n      case types.fSyncSuccess:\n        return syncToken;\n      case types.resetSuccess:\n      case types.clearToken:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTimestampReducer(types) {\n  return (state = null, { type, timestamp }) => {\n    switch (type) {\n      case types.fSyncSuccess:\n      case types.iSyncSuccess:\n        return timestamp;\n      case types.resetSuccess:\n      case types.clearToken:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getLocalTimestampReducer(types) {\n  return (state = null, { type, localTimestamp }) => {\n    switch (type) {\n      case types.fSyncSuccess:\n      case types.iSyncSuccess:\n        return localTimestamp;\n      case types.resetSuccess:\n      case types.clearToken:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallLogReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n  });\n}\n"],"file":"getCallLogReducer.js"}