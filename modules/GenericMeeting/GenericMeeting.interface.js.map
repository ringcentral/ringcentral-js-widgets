{"version":3,"file":"GenericMeeting.interface.js","names":["MeetingEvents","exports"],"sources":["modules/GenericMeeting/GenericMeeting.interface.ts"],"sourcesContent":["import type { RcVMeetingModel } from '../../interfaces/Rcv.model';\nimport type { Brand } from '../Brand';\nimport type { ExtensionInfo } from '../ExtensionInfo';\nimport type { Meeting, MeetingDelegator, RcMMeetingModel } from '../Meeting';\nimport type { RcVideo } from '../RcVideo';\nimport type {\n  meetingProviderTypesProps,\n  VideoConfiguration,\n} from '../VideoConfiguration';\n\nexport type ExtensionInfoData = {\n  contact: object;\n  departments: object[];\n  extensionNumber: string;\n  id: number;\n  name: string;\n  status: string;\n  type: string;\n  profileImage?: object;\n  regionalSettings: object;\n  permissions: object;\n  serviceFeatures: object;\n};\n\ntype ServiceInfo = {\n  dialInNumbers: object[];\n  domain: string;\n  externalUserInfo: {\n    accountId: string;\n    hostKey: string;\n    personalMeetingId: string;\n    userId: string;\n    userToken: string;\n    userType: number;\n  };\n  intlDialInNumbersUri: string;\n  supportUri: string;\n  uri: string;\n  mobileDialingNumberTpl: string;\n  phoneDialingNumberTpl: string;\n};\n\nexport type MeetingScheduleModel = {\n  durationInMinutes: number;\n  timeZone?: { id: string };\n  startTime?: string;\n};\n\nexport type ScheduleModel = Maybe<RcMMeetingModel | RcVMeetingModel>;\n\nexport type Maybe<T> = T | undefined;\nexport type Either<T1, T2> = T1 | T2;\n\nexport type RCMeetingResponse = {\n  id?: string;\n  topic: string;\n  meetingType: any;\n  allowJoinBeforeHost: any;\n  startHostVideo: any;\n  startParticipantsVideo: any;\n  audioOptions: any;\n  password: any;\n  schedule?: MeetingScheduleModel;\n  links: {\n    joinUri: string;\n  } & object;\n};\n\nexport type RCVideoResponse = {\n  uri: string;\n  id: string;\n  participantCode: string;\n  hostCode: string;\n  shortId: string;\n  meetingUri: string;\n  joinUri: string;\n  notificationUrl: string;\n  expiresIn: number;\n  expiration: number;\n  autoFinish: true;\n  type: number;\n  accountId: string;\n  extensionId: string;\n  name: string;\n  allowJoinBeforeHost: boolean;\n  muteAudio: boolean;\n  muteVideo: boolean;\n  startTime?: string;\n  duration?: number;\n  links?: { joinUri: string };\n  isMeetingSecret?: boolean;\n  e2ee?: boolean;\n  meetingPassword?: string;\n  meetingPasswordPSTN?: string;\n};\n\nexport type RCMeeting = {\n  meeting: RCMeetingResponse;\n  serviceInfo: ServiceInfo;\n  extensionInfo: ExtensionInfoData;\n};\n\nexport type RCVideo = {\n  scheduleOriginalInfo?: RcVMeetingModel;\n  extensionInfo: ExtensionInfoData;\n  dialInNumber: string;\n  meeting: RCVideoResponse; // TODO: add RCVideoScheduleModel?\n};\n\nexport type MeetingData = Either<RCMeeting, RCVideo>;\n\nexport enum MeetingEvents {\n  afterSchedule = 'afterSchedule',\n  afterUpdate = 'afterUpdate',\n}\n\nexport interface IGenericMeeting {\n  meetingProviderType: Maybe<meetingProviderTypesProps>;\n  isRCV: boolean;\n  isRCM: boolean;\n  extensionInfo: any;\n  meeting: Maybe<MeetingData>;\n  defaultSetting: any;\n  isScheduling: boolean;\n  showSaveAsDefault: boolean;\n  isPreferencesChanged: boolean;\n  brandName: string;\n  status: object;\n  delegators: MeetingDelegator[];\n\n  initialize(): void;\n\n  /**\n   * Init basic meeting information\n   * also load meeting settings from previous one.\n   */\n  init(): void;\n\n  reload(): void;\n\n  /**\n   * Update Meeting Config\n   */\n  updateMeetingSettings(meeting: ScheduleModel): void;\n\n  /**\n   * Validate if password is legal based on our user story\n   */\n  validatePasswordSettings(password: string, isSecret: boolean): boolean;\n\n  enablePersonalMeeting: boolean;\n  personalMeeting: any;\n  personalMeetingId: string;\n  personalMeetingSettings: any;\n  switchUsePersonalMeetingId: (usePersonalMeetingId: boolean) => any;\n\n  /**\n   * requests\n   */\n  schedule: (\n    meeting: ScheduleModel,\n    config?: {\n      isAlertSuccess: boolean;\n    },\n    opener?: Window,\n  ) => Promise<Maybe<MeetingData>>;\n\n  getMeeting: (meetingId: string) => Promise<Maybe<MeetingData>>;\n\n  updateMeeting(\n    meetingId: string,\n    meeting: ScheduleModel,\n    config?: {\n      isAlertSuccess: boolean;\n    },\n    opener?: Window,\n  ): Promise<Maybe<MeetingData>>;\n\n  updateScheduleFor: (userExtensionId: string | number) => void;\n\n  getMeetingServiceInfo?: () => Promise<ServiceInfo>;\n\n  /**\n   * hook\n   */\n  addScheduledCallBack(cb: ScheduledCallback): void;\n  removeScheduledCallBack(cb: ScheduledCallback): void;\n}\n\nexport type ScheduledCallback = (result: MeetingData, opener: Window) => any;\n\nexport interface GenericMeetingOptions {\n  enableCache: boolean;\n  //\n}\n\nexport interface Deps {\n  videoConfiguration: VideoConfiguration;\n  extensionInfo: ExtensionInfo;\n  brand: Brand;\n  meeting: Meeting;\n  rcVideo: RcVideo;\n  genericMeetingOptions?: GenericMeetingOptions;\n}\n"],"mappings":";;;;;;IA+GYA,aAAa,0BAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AAAAC,OAAA,CAAAD,aAAA,GAAAA,aAAA"}