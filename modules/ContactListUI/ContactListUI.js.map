{"version":3,"sources":["modules/ContactListUI/ContactListUI.ts"],"names":["FILTER_THRESHOLD","ContactListUI","name","deps","dep","optional","that","filteredContactsList","Object","values","_deps","contactSources","map","source","contacts","checkSourcesUpdated","filteredContacts","_sourcesLastStatus","Map","_sourcesUpdatedAt","_currentFilterCriteria","_nextFilterCriteria","_debouncedFilterContactSources","fn","_filterContactSources","threshold","auth","loggedIn","allSourcesReady","ready","notLoggedIn","applyFilters","_resetFilters","_clearFilteredContacts","cancel","updated","size","length","clear","lastStatus","get","sourceName","sourceReady","rawContacts","set","Date","now","sourceFilter","searchFilter","filterStamp","Math","random","AllContactSourceName","isFiltering","forEach","contact","push","id","criteria","_setIsFiltering","sources","filter","filterContacts","Promise","all","promise","resolve","then","items","_appendFilteredContacts","error","console","next","_updateFilters","useCache","find","x","getPresence","type","result","bottomNotice","bottomNoticeHeight","currentLocale","locale","contactSourceNames","sourceNames","contactGroups","searchSource","searchString","isSearching","showSpinner","currentSiteCode","extensionInfo","site","code","isMultipleSiteEnabled","onVisitPage","onRefresh","onItemSelect","getAvatarUrl","contactDetailsUI","showContactDetails","onSearchContact","contactsMap","names","RcUIModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import {\n  ContactPresence,\n  IContact,\n} from '@ringcentral-integration/commons/interfaces/Contact.model';\nimport {\n  AllContactSourceName,\n  groupByFirstLetterOfName,\n  sortContactItemsByName,\n  uniqueContactItems,\n} from '@ringcentral-integration/commons/lib/contactHelper';\nimport { debounce } from '@ringcentral-integration/commons/lib/debounce-throttle';\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport proxify from '@ringcentral-integration/commons/lib/proxy/proxify';\nimport {\n  action,\n  computed,\n  RcUIModuleV2,\n  state,\n  watch,\n} from '@ringcentral-integration/core';\n\nimport { RouteParams } from '../ContactDetailsUI';\nimport {\n  ContactSourceLastStatus,\n  Deps,\n  FilterCriteria,\n  GetUIFunctions,\n  GetUIProps,\n  StampedFilterCriteria,\n} from './ContactListUI.interface';\n\nexport const FILTER_THRESHOLD: number = 500;\n\n@Module({\n  name: 'ContactListUI',\n  deps: [\n    'Auth',\n    'Locale',\n    'ExtensionInfo',\n    'ContactSources',\n    { dep: 'ContactDetailsUI', optional: true },\n  ],\n})\nexport class ContactListUI extends RcUIModuleV2<Deps> {\n  private _sourcesLastStatus: Map<string, ContactSourceLastStatus> = new Map();\n  private _sourcesUpdatedAt: number = 0;\n  private _currentFilterCriteria: StampedFilterCriteria = null;\n  private _nextFilterCriteria: StampedFilterCriteria = null;\n\n  constructor(deps: Deps) {\n    super({ deps });\n  }\n\n  _shouldInit() {\n    return (\n      super._shouldInit() && this._deps.auth.loggedIn && this.allSourcesReady()\n    );\n  }\n\n  _shouldReset() {\n    return (\n      super._shouldReset() ||\n      (this.ready && (this._deps.auth.notLoggedIn || !this.allSourcesReady()))\n    );\n  }\n\n  onInitOnce() {\n    this.checkSourcesUpdated();\n    watch(\n      this,\n      () => this.checkSourcesUpdated(),\n      () => {\n        if (this.ready) {\n          this.applyFilters();\n        }\n      },\n    );\n  }\n\n  onInitSuccess() {\n    this.applyFilters();\n  }\n\n  onReset() {\n    this._resetFilters();\n    this._clearFilteredContacts();\n    if (this._debouncedFilterContactSources) {\n      this._debouncedFilterContactSources.cancel();\n    }\n  }\n\n  allSourcesReady() {\n    let ready = true;\n    for (const source of this._deps.contactSources) {\n      if (!source.ready) {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  }\n\n  checkSourcesUpdated() {\n    let updated = false;\n    if (this._sourcesLastStatus.size !== this._deps.contactSources.length) {\n      updated = true;\n      this._sourcesLastStatus.clear();\n    }\n    for (const source of this._deps.contactSources) {\n      const lastStatus = this._sourcesLastStatus.get(source.sourceName);\n      if (\n        !lastStatus ||\n        lastStatus.sourceReady !== source.sourceReady ||\n        lastStatus.rawContacts !== source.rawContacts\n      ) {\n        updated = true;\n        this._sourcesLastStatus.set(source.sourceName, {\n          sourceReady: source.sourceReady,\n          contacts: source.contacts,\n          rawContacts: source.rawContacts,\n        });\n      }\n    }\n    if (updated) {\n      this._sourcesUpdatedAt = Date.now();\n    }\n    return this._sourcesUpdatedAt;\n  }\n\n  @state\n  sourceFilter: string = AllContactSourceName;\n\n  @state\n  searchFilter: string = '';\n\n  @state\n  filterStamp: number = 0;\n\n  @state\n  isFiltering: boolean = false;\n\n  @state\n  filteredContactsList: [string, string][] = [];\n\n  @action\n  private _updateFilters({ sourceFilter, searchFilter }: FilterCriteria) {\n    this.sourceFilter = sourceFilter;\n    this.searchFilter = searchFilter;\n    this.filterStamp = Math.random();\n  }\n\n  @action\n  private _resetFilters() {\n    this.sourceFilter = AllContactSourceName;\n    this.searchFilter = '';\n    this.filterStamp = 0;\n    this.isFiltering = false;\n    this._currentFilterCriteria = null;\n    this._nextFilterCriteria = null;\n  }\n\n  @action\n  private _setIsFiltering(isFiltering: boolean) {\n    this.isFiltering = isFiltering;\n  }\n\n  @action\n  private _clearFilteredContacts() {\n    this.filteredContactsList = [];\n  }\n\n  @action\n  private _appendFilteredContacts(contacts: IContact[], sourceName: string) {\n    if (contacts.length > 0) {\n      contacts.forEach((contact) => {\n        this.filteredContactsList.push([sourceName, contact.id]);\n      });\n    }\n  }\n\n  @computed((that: ContactListUI) => [\n    that.filteredContactsList,\n    ...Object.values(that._deps.contactSources).map(\n      (source) => source.contacts,\n    ),\n  ])\n  get filteredContacts() {\n    const contactsMap: Record<string, Record<string, IContact>> = {};\n    this._deps.contactSources.forEach((source) => {\n      contactsMap[source.sourceName] = {};\n      source.contacts.forEach((contact) => {\n        contactsMap[source.sourceName][contact.id] = contact;\n      });\n    });\n    const filteredContacts: IContact[] = [];\n    this.filteredContactsList.forEach(([sourceName, id]) => {\n      filteredContacts.push(contactsMap[sourceName][id]);\n    });\n    return filteredContacts;\n  }\n\n  private _debouncedFilterContactSources = debounce({\n    fn: this._filterContactSources,\n    threshold: FILTER_THRESHOLD,\n  });\n\n  private async _filterContactSources(criteria: StampedFilterCriteria) {\n    if (this._currentFilterCriteria) {\n      this._nextFilterCriteria = criteria;\n      return;\n    }\n    this._setIsFiltering(true);\n    this._clearFilteredContacts();\n    this._currentFilterCriteria = criteria;\n    const sources = this._deps.contactSources.filter(\n      (source) =>\n        source.sourceReady &&\n        typeof source.filterContacts === 'function' &&\n        (source.sourceName === criteria.sourceFilter ||\n          AllContactSourceName === criteria.sourceFilter),\n    );\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.filterContacts(criteria.searchFilter),\n        );\n        return promise\n          .then((items) => {\n            if (\n              !criteria.filterStamp ||\n              criteria.filterStamp === this.filterStamp\n            ) {\n              this._appendFilteredContacts(items, source.sourceName);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[ContactListUI > ContactSource(${source.sourceName}) > filterContacts] ${error}`,\n            );\n          });\n      }),\n    );\n    this._currentFilterCriteria = null;\n    this._setIsFiltering(false);\n    if (this._nextFilterCriteria) {\n      const next = this._nextFilterCriteria;\n      this._nextFilterCriteria = null;\n      this._filterContactSources(next);\n    }\n  }\n\n  @proxify\n  async applyFilters({\n    sourceFilter = this.sourceFilter,\n    searchFilter = this.searchFilter,\n  }: FilterCriteria = {}) {\n    this._updateFilters({\n      sourceFilter,\n      searchFilter,\n    });\n    this._debouncedFilterContactSources({\n      sourceFilter,\n      searchFilter,\n      filterStamp: this.filterStamp,\n    });\n  }\n\n  @proxify\n  async getPresence(\n    contact: IContact,\n    useCache: boolean = true,\n  ): Promise<ContactPresence> {\n    const source = this._deps.contactSources.find(\n      (x) =>\n        x.sourceReady &&\n        typeof x.getPresence === 'function' &&\n        x.sourceName === (contact && contact.type),\n    );\n    if (source) {\n      const result = await source.getPresence(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @computed((that: ContactListUI) => [that.checkSourcesUpdated()])\n  get sourceNames() {\n    const names = [AllContactSourceName];\n    for (const source of this._deps.contactSources) {\n      if (source.sourceReady) {\n        names.push(source.sourceName);\n      }\n    }\n    return names;\n  }\n\n  @computed((that: ContactListUI) => [that.filteredContacts])\n  get contactGroups() {\n    return groupByFirstLetterOfName(\n      sortContactItemsByName(uniqueContactItems(this.filteredContacts)),\n    );\n  }\n\n  getUIProps({ bottomNotice, bottomNoticeHeight }: GetUIProps) {\n    return {\n      currentLocale: this._deps.locale.currentLocale,\n      contactSourceNames: this.sourceNames || [],\n      contactGroups: this.contactGroups || [],\n      searchSource: this.sourceFilter,\n      searchString: this.searchFilter,\n      isSearching: this.isFiltering,\n      showSpinner: !(this._deps.locale.ready && this.ready),\n      currentSiteCode: this._deps.extensionInfo?.site?.code ?? '',\n      isMultipleSiteEnabled:\n        this._deps.extensionInfo?.isMultipleSiteEnabled ?? false,\n      bottomNotice,\n      bottomNoticeHeight,\n    };\n  }\n\n  getUIFunctions({ onVisitPage, onRefresh, onItemSelect }: GetUIFunctions) {\n    return {\n      getAvatarUrl(): string {\n        return null;\n      },\n      getPresence: (contact: IContact): Promise<any> => {\n        return this.getPresence(contact);\n      },\n      onItemSelect:\n        onItemSelect ||\n        (async ({ type, id }: RouteParams) => {\n          if (this._deps.contactDetailsUI) {\n            this._deps.contactDetailsUI.showContactDetails({ type, id });\n          }\n        }),\n      onSearchContact: ({\n        searchSource,\n        searchString,\n      }: {\n        searchSource: string;\n        searchString: string;\n      }) => {\n        this.applyFilters({\n          sourceFilter: searchSource,\n          searchFilter: searchString,\n        });\n      },\n      onVisitPage: () => {\n        if (typeof onVisitPage === 'function') {\n          onVisitPage();\n        }\n        // fire filtering contacts if not yet\n        if (!this.filterStamp) {\n          this.applyFilters();\n        }\n      },\n      onRefresh,\n    };\n  }\n}\n"],"file":"ContactListUI.js"}