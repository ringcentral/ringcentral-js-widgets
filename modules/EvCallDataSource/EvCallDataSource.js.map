{"version":3,"sources":["modules/EvCallDataSource/EvCallDataSource.ts"],"names":["EvCallDataSource","name","deps","dep","optional","enableCache","storageKey","eventEmitter","EventEmitter","value","window","localStorage","setItem","toString","call","rawAgentRecording","agentRecording","pause","Number","data","rawCallsMapping","uii","timestamp","queueDts","gate","_getCurrentGateData","session","id","_deps","evClient","encodeUii","agentId","evAuth","index","callIds","indexOf","unshift","otherCallIds","callsMapping","setNewSession","emit","callStatus","RINGING","dropSession","_getCallEncodeId","filter","callId","endedCall","includes","callLogsIndex","callLogsIds","JSON","parse","stringify","res","isHold","holdState","lastWeekDayTimestamp","_getLastWeekDayTimestamp","storageCallData","fullCallLogsIds","slice","reduce","acc","curr","substr","length","Object","keys","endsWith","changeCallsLimited","currentGateId","queue","number","currentQueueGroup","availableRequeueQueues","find","gates","some","gateId","gateGroupId","now","lastWeekDay","clone","subtract","startOf","valueOf","getItem","RcModuleV2","storage","state","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAQA;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYMA,gB,WAVL,gBAAO;AACNC,EAAAA,IAAI,EAAE,kBADA;AAENC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,UAFI,EAGJ,SAHI,EAIJ,YAJI,EAKJ;AAAEC,IAAAA,GAAG,EAAE,yBAAP;AAAkCC,IAAAA,QAAQ,EAAE;AAA5C,GALI;AAFA,CAAP,C;;;;;AAaC,4BAAYF,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA,IADI;AAEJG,MAAAA,WAAW,EAAE,IAFT;AAGJC,MAAAA,UAAU,EAAE;AAHR,KAAN;AADsB,UAFxBC,YAEwB,GAFT,IAAIC,oBAAJ,EAES;;AAAA;;AAAA;AAMvB;;;;uCA0CkBC,K,EAAgB;AAAA;;AACjC,8BAAAC,MAAM,CAACC,YAAP,8EAAqBC,OAArB,CAA6B,cAA7B,EAA6CH,KAA7C,aAA6CA,KAA7C,uBAA6CA,KAAK,CAAEI,QAAP,EAA7C;AACD;;;+BAGUC,I,EAAkB;AAC3B,UAAIC,iBAAiB,GAAGD,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEE,cAA9B;AACAD,MAAAA,iBAAiB,KAAjBA,iBAAiB,mCACZA,iBADY;AAEfE,QAAAA,KAAK,EAAEF,iBAAiB,CAACE,KAAlB,GAA0BC,MAAM,CAACH,iBAAiB,CAACE,KAAnB,CAAhC,GAA4D;AAFpD,SAAjB,CAF2B,CAM3B;;AACA,WAAKE,IAAL,CAAUC,eAAV,CAA0BN,IAAI,CAACO,GAA/B,oCACKP,IADL;AAEE;AACA;AACAQ,QAAAA,SAAS,EAAE,0BAAaR,IAAI,CAACS,QAAlB,CAJb;AAKEC,QAAAA,IAAI,EAAE,KAAKC,mBAAL,CAAyBX,IAAzB,CALR;AAMEE,QAAAA,cAAc,EAAED;AANlB;AAQD;;;kCAGaW,O,EAAmC;AAC/C,UAAMC,EAAE,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,SAApB,CAA8BJ,OAA9B,CAAX;;AACA,UAAIA,OAAO,CAACK,OAAR,KAAoB,KAAKH,KAAL,CAAWI,MAAX,CAAkBD,OAA1C,EAAmD;AACjD;AACA,YAAME,KAAK,GAAG,KAAKC,OAAL,CAAaC,OAAb,CAAqBR,EAArB,CAAd;;AACA,YAAIM,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,eAAKd,IAAL,CAAUe,OAAV,CAAkBE,OAAlB,CAA0BT,EAA1B;AACD;AACF,OAND,MAMO;AACL;AACA,YAAMM,MAAK,GAAG,KAAKI,YAAL,CAAkBF,OAAlB,CAA0BR,EAA1B,CAAd;;AACA,YAAIM,MAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,eAAKd,IAAL,CAAUkB,YAAV,CAAuBD,OAAvB,CAA+BT,EAA/B;AACD;AACF;;AAED,WAAKR,IAAL,CAAUmB,YAAV,CAAuBX,EAAvB,oCACK,KAAKP,eAAL,CAAqBM,OAAO,CAACL,GAA7B,CADL;AAEEK,QAAAA,OAAO,EAAPA;AAFF;AAID;;;kCAEaA,O,EAAmC;AAC/C,WAAKa,aAAL,CAAmBb,OAAnB,EAD+C,CAE/C;;AACA,UAAIA,OAAO,CAACK,OAAR,KAAoB,EAAxB,EAA4B;AAC1B;AACA,aAAKxB,YAAL,CAAkBiC,IAAlB,CAAuBC,kBAAWC,OAAlC,EAA2ChB,OAA3C;AACD;AACF;;;gCAGWiB,Y,EAAwC;AAClD,UAAMhB,EAAE,GAAG,KAAKiB,gBAAL,CAAsBD,YAAtB,CAAX;;AACA,WAAKxB,IAAL,CAAUkB,YAAV,GAAyB,KAAKA,YAAL,CAAkBQ,MAAlB,CACvB,UAACC,MAAD;AAAA,eAAYA,MAAM,KAAKnB,EAAvB;AAAA,OADuB,CAAzB;AAGD;;;oCAGeoB,S,EAAwB;AACtC,UAAMpB,EAAE,GAAG,KAAKiB,gBAAL,CAAsBG,SAAtB,CAAX,CADsC,CAEtC;;;AACA,WAAK5B,IAAL,CAAUe,OAAV,GAAoB,KAAKA,OAAL,CAAaW,MAAb,CAAoB,UAACC,MAAD;AAAA,eAAYA,MAAM,KAAKnB,EAAvB;AAAA,OAApB,CAApB,CAHsC,CAItC;;AACA,WAAKR,IAAL,CAAUkB,YAAV,GAAyB,KAAKA,YAAL,CAAkBQ,MAAlB,CACvB,UAACC,MAAD;AAAA,eAAY,CAACA,MAAM,CAACE,QAAP,CAAgBD,SAAS,CAAC1B,GAA1B,CAAb;AAAA,OADuB,CAAzB,CALsC,CAStC;;AACA,UAAM4B,aAAa,GAAG,KAAKC,WAAL,CAAiBf,OAAjB,CAAyBR,EAAzB,CAAtB;;AACA,UAAIsB,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxB,aAAK9B,IAAL,CAAU+B,WAAV,CAAsBd,OAAtB,CAA8BT,EAA9B;AACD;;AACD,UAAI,KAAKW,YAAL,CAAkBX,EAAlB,CAAJ,EAA2B;AACzB,aAAKR,IAAL,CAAUmB,YAAV,CAAuBX,EAAvB,EAA2BoB,SAA3B,GAAuCI,IAAI,CAACC,KAAL,CACrCD,IAAI,CAACE,SAAL,CAAeN,SAAf,CADqC,CAAvC;AAGD;AACF;;;iCAGY;AACX,WAAK5B,IAAL,CAAUe,OAAV,GAAoB,EAApB;AACA,WAAKf,IAAL,CAAUkB,YAAV,GAAyB,EAAzB;AACD;;;sCAGiBiB,G,EAAqB;AACrC,UAAM3B,EAAE,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,SAApB,CAA8BwB,GAA9B,CAAX;;AACA,WAAKnC,IAAL,CAAUmB,YAAV,CAAuBX,EAAvB,EAA2B4B,MAA3B,GAAoCD,GAAG,CAACE,SAAxC;AACD;;;iCAGY;AAAA;;AACX;AACA,UAAMC,oBAAoB,GAAG,KAAKC,wBAAL,EAA7B;;AACA,UAAMC,eAML,GAAG;AACFzB,QAAAA,OAAO,EAAE,EADP;AAEFG,QAAAA,YAAY,EAAE,EAFZ;AAGFa,QAAAA,WAAW,EAAE,EAHX;AAIFZ,QAAAA,YAAY,EAAE,EAJZ;AAKFlB,QAAAA,eAAe,EAAE;AALf,OANJ;AAcA,UAAMwC,eAAe,GAAG,KAAKV,WAAL,CACrBW,KADqB,CACf,CADe,EACZ,GADY,EAErBC,MAFqB,CAEd,UAACC,GAAD,EAAMC,IAAN;AAAA,4CAAmBD,GAAnB,IAAwBC,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeD,IAAI,CAACE,MAAL,GAAc,CAA7B,CAAxB;AAAA,OAFc,EAE4C,EAF5C,CAAxB,CAjBW,CAqBX;;AACAP,MAAAA,eAAe,CAACvC,eAAhB,GAAkC+C,MAAM,CAACC,IAAP,CAAY,KAAKhD,eAAjB,EAAkC0C,MAAlC,CAChC,UAACC,GAAD,EAAMpC,EAAN,EAAa;AACX,YACEiC,eAAe,CAACZ,QAAhB,CAAyBrB,EAAzB,KACA,0BAAa,MAAI,CAACP,eAAL,CAAqBO,EAArB,EAAyBJ,QAAtC,KACEkC,oBAHJ,EAIE;AACAM,UAAAA,GAAG,CAACpC,EAAD,CAAH,GAAU,MAAI,CAACP,eAAL,CAAqBO,EAArB,CAAV;AACD;;AACD,eAAOoC,GAAP;AACD,OAV+B,EAWhC,EAXgC,CAAlC,CAtBW,CAoCX;;AACAJ,MAAAA,eAAe,CAACrB,YAAhB,GAA+B6B,MAAM,CAACC,IAAP,CAAY,KAAK9B,YAAjB,EAA+BwB,MAA/B,CAC7B,UAACC,GAAD,EAAMpC,EAAN,EAAa;AACX,YACEiC,eAAe,CAACZ,QAAhB,CAAyBrB,EAAE,CAACsC,MAAH,CAAU,CAAV,EAAatC,EAAE,CAACuC,MAAH,GAAY,CAAzB,CAAzB,KACA,0BAAa,MAAI,CAAC5B,YAAL,CAAkBX,EAAlB,EAAsBJ,QAAnC,KAAgDkC,oBAFlD,EAGE;AACAM,UAAAA,GAAG,CAACpC,EAAD,CAAH,GAAU,MAAI,CAACW,YAAL,CAAkBX,EAAlB,CAAV;;AACA,cAAI,CAACA,EAAE,CAAC0C,QAAH,CAAY,IAAZ,CAAL,EAAwB;AACtBV,YAAAA,eAAe,CAACT,WAAhB,CAA4Bd,OAA5B,CAAoCT,EAApC;AACD;AACF;;AACD,eAAOoC,GAAP;AACD,OAZ4B,EAa7B,EAb6B,CAA/B;AAgBA,WAAK5C,IAAL,GAAYwC,eAAZ;AACA,WAAKW,kBAAL,CAAwB,IAAxB;AACD;;;qCAEwB5C,O,EAA4C;AACnE,aAAO,KAAKE,KAAL,CAAWC,QAAX,CAAoBC,SAApB,CAA8BJ,OAA9B,CAAP;AACD;;;wCAE2BZ,I,EAAgD;AAC1E,UAAMyD,aAAa,GAAGzD,IAAI,CAAC0D,KAAL,CAAWC,MAAjC;;AACA,UAAMC,iBAAiB,GAAG,KAAK9C,KAAL,CAAWI,MAAX,CAAkB2C,sBAAlB,CAAyCC,IAAzC,CACxB,gBAAe;AAAA,YAAZC,KAAY,QAAZA,KAAY;AACb,eAAOA,KAAK,CAACC,IAAN,CAAW;AAAA,cAAGC,MAAH,SAAGA,MAAH;AAAA,iBAAgBA,MAAM,KAAKR,aAA3B;AAAA,SAAX,CAAP;AACD,OAHuB,CAA1B;;AAKA,aAAO;AACLQ,QAAAA,MAAM,EAAER,aADH;AAELS,QAAAA,WAAW,EAAEN,iBAAF,aAAEA,iBAAF,uBAAEA,iBAAiB,CAAEM;AAF3B,OAAP;AAID;;;+CAEkC;AACjC,UAAMC,GAAG,GAAG,yBAAZ;AACA,UAAMC,WAAW,GAAGD,GAAG,CAACE,KAAJ,GAAYC,QAAZ,CAAqB,CAArB,EAAwB,MAAxB,EAAgCC,OAAhC,CAAwC,KAAxC,CAApB;AACA,aAAOH,WAAW,CAACI,OAAZ,EAAP;AACD;;;wBAvMa;AACZ,aAAO,KAAKnE,IAAL,CAAUe,OAAjB;AACD;;;wBAEkB;AACjB,aAAO,KAAKf,IAAL,CAAUkB,YAAjB;AACD;;;wBAEiB;AAChB,aAAO,KAAKlB,IAAL,CAAU+B,WAAjB;AACD;;;wBAEkB;AACjB,aAAO,KAAK/B,IAAL,CAAUmB,YAAjB;AACD;;;wBAEqB;AACpB,aAAO,KAAKnB,IAAL,CAAUC,eAAjB;AACD;;;wBAEkB;AAAA;;AACjB,aAAO,0BAAAV,MAAM,CAACC,YAAP,gFAAqB4E,OAArB,CAA6B,cAA7B,OAAiD,MAAxD;AACD;;;;EAjD4BC,gB,wEAW5BC,a,EACAC,W;;;;;WAOG;AACFxD,MAAAA,OAAO,EAAE,EADP;AAEFG,MAAAA,YAAY,EAAE,EAFZ;AAGFa,MAAAA,WAAW,EAAE,EAHX;AAIFZ,MAAAA,YAAY,EAAE,EAJZ;AAKFlB,MAAAA,eAAe,EAAE;AALf,K;;gEAoCHuE,Y,wJAkBAA,Y,yJAgCAA,Y,2JAQAA,Y,0JAsBAA,Y,4JAMAA,Y,4JAMAA,Y","sourcesContent":["import { EventEmitter } from 'events';\nimport moment from 'moment';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { Mapping } from '@ringcentral-integration/widgets/typings';\n\nimport { callStatus } from '../../enums';\nimport {\n  EvCallData,\n  EvEvRequeueCallGate,\n} from '../../interfaces/EvData.interface';\nimport {\n  EvAddSessionNotification,\n  EvBaseCall,\n  EvDropSessionNotification,\n  EvEndedCall,\n  EvHoldResponse,\n} from '../../lib/EvClient';\nimport { CallDataSource, Deps } from './EvCallDataSource.interface';\nimport { getTimeStamp } from './helper';\n\n@Module({\n  name: 'EvCallDataSource',\n  deps: [\n    'EvAuth',\n    'EvClient',\n    'Storage',\n    'TabManager',\n    { dep: 'EvCallDataSourceOptions', optional: true },\n  ],\n})\nclass EvCallDataSource extends RcModuleV2<Deps> implements CallDataSource {\n  eventEmitter = new EventEmitter();\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvCallDataSource',\n    });\n  }\n\n  @storage\n  @state\n  data: {\n    callIds: string[];\n    otherCallIds: string[];\n    callLogsIds: string[];\n    callsMapping: Mapping<EvCallData>;\n    rawCallsMapping: Mapping<EvCallData>;\n  } = {\n    callIds: [],\n    otherCallIds: [],\n    callLogsIds: [],\n    callsMapping: {},\n    rawCallsMapping: {},\n  };\n\n  get callIds() {\n    return this.data.callIds;\n  }\n\n  get otherCallIds() {\n    return this.data.otherCallIds;\n  }\n\n  get callLogsIds() {\n    return this.data.callLogsIds;\n  }\n\n  get callsMapping() {\n    return this.data.callsMapping;\n  }\n\n  get rawCallsMapping() {\n    return this.data.rawCallsMapping;\n  }\n\n  get callsLimited() {\n    return window.localStorage?.getItem('callsLimited') === 'true';\n  }\n\n  changeCallsLimited(value: boolean) {\n    window.localStorage?.setItem('callsLimited', value?.toString());\n  }\n\n  @action\n  addNewCall(call: EvBaseCall) {\n    let rawAgentRecording = call?.agentRecording;\n    rawAgentRecording &&= {\n      ...rawAgentRecording,\n      pause: rawAgentRecording.pause ? Number(rawAgentRecording.pause) : null,\n    };\n    // note: rawCallsMapping index is raw call uii.\n    this.data.rawCallsMapping[call.uii] = {\n      ...call,\n      // input timezone in second arg if EV reponse has timezone propoty\n      // default timezone is 'America/New_York'\n      timestamp: getTimeStamp(call.queueDts),\n      gate: this._getCurrentGateData(call),\n      agentRecording: rawAgentRecording,\n    };\n  }\n\n  @action\n  setNewSession(session: EvAddSessionNotification) {\n    const id = this._deps.evClient.encodeUii(session);\n    if (session.agentId === this._deps.evAuth.agentId) {\n      // related to current agent session\n      const index = this.callIds.indexOf(id);\n      if (index === -1) {\n        this.data.callIds.unshift(id);\n      }\n    } else {\n      // other session without current agent\n      const index = this.otherCallIds.indexOf(id);\n      if (index === -1) {\n        this.data.otherCallIds.unshift(id);\n      }\n    }\n\n    this.data.callsMapping[id] = {\n      ...this.rawCallsMapping[session.uii],\n      session,\n    };\n  }\n\n  addNewSession(session: EvAddSessionNotification) {\n    this.setNewSession(session);\n    // check with other phone\n    if (session.agentId === '') {\n      // ringing\n      this.eventEmitter.emit(callStatus.RINGING, session);\n    }\n  }\n\n  @action\n  dropSession(dropSession: EvDropSessionNotification) {\n    const id = this._getCallEncodeId(dropSession);\n    this.data.otherCallIds = this.otherCallIds.filter(\n      (callId) => callId !== id,\n    );\n  }\n\n  @action\n  removeEndedCall(endedCall: EvEndedCall) {\n    const id = this._getCallEncodeId(endedCall);\n    // remove current agent session call with uii.\n    this.data.callIds = this.callIds.filter((callId) => callId !== id);\n    // remove other call session with uii.\n    this.data.otherCallIds = this.otherCallIds.filter(\n      (callId) => !callId.includes(endedCall.uii),\n    );\n\n    // add call with id (encodeUii({ uii, sessionId }))\n    const callLogsIndex = this.callLogsIds.indexOf(id);\n    if (callLogsIndex === -1) {\n      this.data.callLogsIds.unshift(id);\n    }\n    if (this.callsMapping[id]) {\n      this.data.callsMapping[id].endedCall = JSON.parse(\n        JSON.stringify(endedCall),\n      );\n    }\n  }\n\n  @action\n  clearCalls() {\n    this.data.callIds = [];\n    this.data.otherCallIds = [];\n  }\n\n  @action\n  setCallHoldStatus(res: EvHoldResponse) {\n    const id = this._deps.evClient.encodeUii(res);\n    this.data.callsMapping[id].isHold = res.holdState;\n  }\n\n  @action\n  limitCalls() {\n    // max 250 and 7 days\n    const lastWeekDayTimestamp = this._getLastWeekDayTimestamp();\n    const storageCallData: {\n      callIds: string[];\n      otherCallIds: string[];\n      callLogsIds: string[];\n      callsMapping: Mapping<EvCallData>;\n      rawCallsMapping: Mapping<EvCallData>;\n    } = {\n      callIds: [],\n      otherCallIds: [],\n      callLogsIds: [],\n      callsMapping: {},\n      rawCallsMapping: {},\n    };\n\n    const fullCallLogsIds = this.callLogsIds\n      .slice(0, 250)\n      .reduce((acc, curr) => [...acc, curr.substr(0, curr.length - 2)], []);\n\n    // valid rawCallsMapping\n    storageCallData.rawCallsMapping = Object.keys(this.rawCallsMapping).reduce(\n      (acc, id) => {\n        if (\n          fullCallLogsIds.includes(id) &&\n          getTimeStamp(this.rawCallsMapping[id].queueDts) >=\n            lastWeekDayTimestamp\n        ) {\n          acc[id] = this.rawCallsMapping[id];\n        }\n        return acc;\n      },\n      {} as Mapping<EvCallData>,\n    );\n\n    // valid callsMapping\n    storageCallData.callsMapping = Object.keys(this.callsMapping).reduce(\n      (acc, id) => {\n        if (\n          fullCallLogsIds.includes(id.substr(0, id.length - 2)) &&\n          getTimeStamp(this.callsMapping[id].queueDts) >= lastWeekDayTimestamp\n        ) {\n          acc[id] = this.callsMapping[id];\n          if (!id.endsWith('$1')) {\n            storageCallData.callLogsIds.unshift(id);\n          }\n        }\n        return acc;\n      },\n      {} as Mapping<EvCallData>,\n    );\n\n    this.data = storageCallData;\n    this.changeCallsLimited(true);\n  }\n\n  private _getCallEncodeId(session: Partial<EvAddSessionNotification>) {\n    return this._deps.evClient.encodeUii(session);\n  }\n\n  private _getCurrentGateData(call: Partial<EvCallData>): EvEvRequeueCallGate {\n    const currentGateId = call.queue.number;\n    const currentQueueGroup = this._deps.evAuth.availableRequeueQueues.find(\n      ({ gates }) => {\n        return gates.some(({ gateId }) => gateId === currentGateId);\n      },\n    );\n    return {\n      gateId: currentGateId,\n      gateGroupId: currentQueueGroup?.gateGroupId,\n    };\n  }\n\n  private _getLastWeekDayTimestamp() {\n    const now = moment();\n    const lastWeekDay = now.clone().subtract(7, 'days').startOf('day');\n    return lastWeekDay.valueOf();\n  }\n}\n\nexport { EvCallDataSource };\n"],"file":"EvCallDataSource.js"}