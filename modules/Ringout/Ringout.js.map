{"version":3,"file":"Ringout.js","names":["_core","require","_utils","_di","_proxify","_ringoutErrors","_ringoutStatus","_dec","_class","_class2","_descriptor","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_initializerDefineProperty","l","Object","defineProperty","enumerable","configurable","writable","initializer","call","_classCallCheck","TypeError","_defineProperties","length","_toPropertyKey","key","_createClass","prototype","_toPrimitive","_typeof","Symbol","toPrimitive","String","Number","_inherits","create","constructor","_setPrototypeOf","setPrototypeOf","bind","__proto__","_createSuper","_isNativeReflectConstruct","_getPrototypeOf","s","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","keys","forEach","slice","reverse","reduce","_initializerWarningHelper","Error","DEFAULT_MONITOR_INTERVAL","DEFAULT_TIME_BETWEEN_CALLS","Ringout","Module","name","deps","dep","optional","_RcModuleV","_super","_this$_deps$ringoutOp","_this$_deps$ringoutOp2","_this$_deps$ringoutOp3","_this$_deps$ringoutOp4","_this","_monitorInterval","_timeBetweenCalls","_deps","ringoutOptions","monitorInterval","timeBetweenCalls","setRingoutStatus","ringoutStatus","_shouldInit","auth","loggedIn","pending","_shouldReset","ready","_makeCall","regeneratorRuntime","mark","_callee","_ref","fromNumber","toNumber","prompt","resp","_this$_deps$contactMa","startTime","wrap","_callee$","_context","prev","next","connecting","client","account","extension","ringOut","post","from","phoneNumber","to","playPrompt","sent","contactMatcher","forceMatchBatchNumbers","phoneNumbers","error","console","Date","now","_monitorRingout","id","idle","t0","message","ringoutErrors","pollingCancelled","stop","makeCall","_x","_monitorRingout2","_callee2","ringoutId","callerStatus","_callee2$","_context2","_fetchRingoutStatus","sleep","firstLegConnectFailed","_x2","_x3","_fetchRingoutStatus2","_callee3","callStatus","_callee3$","_context3","get","response","status","abrupt","pollingFailed","_x4","RcModuleV2","state","action","getOwnPropertyDescriptor","proxify","exports"],"sources":["modules/Ringout/Ringout.ts"],"sourcesContent":["import type RestException from '@rc-ex/core/lib/RestException';\nimport type GetRingOutStatusResponse from '@rc-ex/core/lib/definitions/GetRingOutStatusResponse';\nimport { action, RcModuleV2, state } from '@ringcentral-integration/core';\nimport { sleep } from '@ringcentral-integration/utils';\n\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\n\nimport type { Deps, MakeCallOptions } from './Ringout.interface';\nimport { ringoutErrors } from './ringoutErrors';\nimport { ringoutStatus } from './ringoutStatus';\n\nconst DEFAULT_MONITOR_INTERVAL = 2500;\nconst DEFAULT_TIME_BETWEEN_CALLS = 10000;\n\n@Module({\n  name: 'Ringout',\n  deps: [\n    'Auth',\n    'Client',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'RingoutOptions', optional: true },\n  ],\n})\nexport class Ringout extends RcModuleV2<Deps> {\n  protected _monitorInterval: number;\n  protected _timeBetweenCalls: number;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    this._monitorInterval =\n      this._deps.ringoutOptions?.monitorInterval ?? DEFAULT_MONITOR_INTERVAL;\n    this._timeBetweenCalls =\n      this._deps.ringoutOptions?.timeBetweenCalls ?? DEFAULT_TIME_BETWEEN_CALLS;\n  }\n\n  @state\n  ringoutStatus: string = ringoutStatus.idle;\n\n  @action\n  setRingoutStatus(ringoutStatus: string) {\n    this.ringoutStatus = ringoutStatus;\n  }\n\n  override _shouldInit() {\n    return this._deps.auth.loggedIn && this.pending;\n  }\n\n  override _shouldReset() {\n    return !this._deps.auth.loggedIn && this.ready;\n  }\n\n  @proxify\n  async makeCall({ fromNumber, toNumber, prompt }: MakeCallOptions) {\n    if (this.ready) {\n      this.setRingoutStatus(ringoutStatus.connecting);\n      try {\n        const resp: GetRingOutStatusResponse = await this._deps.client\n          .account()\n          .extension()\n          .ringOut()\n          .post({\n            from: { phoneNumber: fromNumber },\n            to: { phoneNumber: toNumber },\n            playPrompt: prompt,\n          });\n\n        try {\n          this._deps.contactMatcher?.forceMatchBatchNumbers({\n            phoneNumbers: [fromNumber, toNumber],\n          });\n        } catch (error) {\n          console.error('makeCall forceMatchBatchNumbers error', error);\n        }\n\n        const startTime = Date.now();\n        await this._monitorRingout(resp.id, startTime);\n\n        this.setRingoutStatus(ringoutStatus.idle);\n      } catch (e: any /** TODO: confirm with instanceof */) {\n        this.setRingoutStatus(ringoutStatus.idle);\n        if (e.message !== ringoutErrors.pollingCancelled) {\n          throw e;\n        }\n      }\n    } else {\n      // TODO: Need to dispatch a generic error action\n    }\n  }\n\n  @proxify\n  async _monitorRingout(\n    ringoutId: GetRingOutStatusResponse['id'],\n    startTime: number,\n  ) {\n    let callerStatus = await this._fetchRingoutStatus(ringoutId);\n    while (callerStatus === 'InProgress') {\n      if (Date.now() - startTime > this._timeBetweenCalls) {\n        throw new Error(ringoutErrors.pollingCancelled);\n      }\n      await sleep(this._monitorInterval);\n      callerStatus = await this._fetchRingoutStatus(ringoutId);\n    }\n    if (callerStatus !== 'Success' && callerStatus !== 'NoAnswer') {\n      throw new Error(ringoutErrors.firstLegConnectFailed);\n    }\n  }\n\n  @proxify\n  async _fetchRingoutStatus(ringoutId: GetRingOutStatusResponse['id']) {\n    try {\n      let callStatus;\n      const resp = await this._deps.client\n        .account()\n        .extension()\n        .ringOut(ringoutId)\n        .get()\n        .catch((error: RestException | Error) => {\n          if (\n            error &&\n            (error as RestException).response &&\n            (error as RestException).response.status === 404\n          ) {\n            callStatus = 'Success';\n          }\n        });\n      return callStatus || resp.status.callerStatus;\n    } catch (e: any /** TODO: confirm with instanceof */) {\n      throw new Error(ringoutErrors.pollingFailed);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}