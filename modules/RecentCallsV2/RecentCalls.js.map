{"version":3,"sources":["modules/RecentCallsV2/RecentCalls.ts"],"names":["RecentCalls","name","deps","dep","optional","callStatus","loading","contact","calls","sessionId","loaded","contactId","String","id","currentContact","initLoad","_getRecentCalls","_deps","callHistory","loadSuccess","auth","loggedIn","ready","daySpan","length","dateFrom","recentCalls","_getLocalRecentCalls","_fetchRemoteRecentCalls","toISOString","sort","sortByTime","slice","phoneNumbers","reduce","acc","call","to","from","matches","find","Date","startTime","concat","params","perPage","type","recentCallsPromises","phoneType","phoneNumber","replace","phoneTypes","extension","promise","_fetchCallLogList","extensionNumber","then","flattenToRecords","records","client","account","callLog","list","RcModuleV2","state","action","background"],"mappings":"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","sourcesContent":["import { UserCallLogResponse } from '@rc-ex/core/definitions';\nimport { action, RcModuleV2, state } from '@ringcentral-integration/core';\n\nimport { phoneTypes } from '../../enums/phoneTypes';\nimport { Entity } from '../../interfaces/Entity.interface';\nimport background from '../../lib/background';\nimport concurrentExecute from '../../lib/concurrentExecute';\nimport { Module } from '../../lib/di';\nimport getDateFrom from '../../lib/getDateFrom';\nimport { HistoryCall } from '../CallHistoryV2';\nimport { callStatus } from './callStatus';\nimport {\n  CleanUpCallsOptions,\n  Deps,\n  FetchCallLogListOptions,\n  GetCallsOptions,\n  LoadSuccessOptions,\n} from './RecentCalls.interface';\nimport {\n  dedup,\n  filterPhoneNumber,\n  flattenToRecords,\n  sortByTime,\n} from './RecentCallsHelper';\n\n@Module({\n  name: 'RecentCalls',\n  deps: [\n    'Client',\n    'Auth',\n    'CallHistory',\n    { dep: 'RecentCallsOptions', optional: true },\n  ],\n})\nexport class RecentCalls extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  @state\n  calls: Record<string, HistoryCall[]> = {};\n\n  @state\n  callStatus: string = null;\n\n  @action\n  initLoad() {\n    this.callStatus = callStatus.loading;\n  }\n\n  @action\n  loadSuccess({ contact, calls, sessionId }: LoadSuccessOptions) {\n    this.callStatus = callStatus.loaded;\n    const contactId = String(contact && contact.id);\n    this.calls[sessionId ? `${contactId}-${sessionId}` : contactId] = calls;\n  }\n\n  @action\n  cleanUpCalls({ contact, sessionId = null }: CleanUpCallsOptions) {\n    this.callStatus = callStatus.loaded;\n    const contactId = String(contact && contact.id);\n    const id = sessionId ? `${contactId}-${sessionId}` : contactId;\n    delete this.calls[id];\n  }\n\n  get isCallsLoaded() {\n    return this.callStatus === callStatus.loaded;\n  }\n\n  @background\n  async getCalls({ currentContact, sessionId = null }: GetCallsOptions) {\n    // No need to calculate recent calls of the same contact repeatedly\n    if (!currentContact) {\n      return;\n    }\n    const contactId = String(currentContact && currentContact.id);\n    if (this.calls[sessionId ? `${contactId}-${sessionId}` : contactId]) {\n      return;\n    }\n    this.initLoad();\n    const calls = await this._getRecentCalls(\n      currentContact,\n      this._deps.callHistory.calls,\n    );\n    this.loadSuccess({\n      calls,\n      contact: currentContact,\n      sessionId,\n    });\n  }\n\n  _shouldInit() {\n    return !!(super._shouldInit() && this._deps.auth.loggedIn);\n  }\n\n  _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._deps.auth.loggedIn)\n    );\n  }\n\n  /**\n   * Searching for recent calls of specific contact.\n   * @param {Object} currentContact Current contact\n   * @param {Array} calls Calls in callHistory\n   * @param {Number} daySpan Find calls within certain days\n   * @param {Number} length Maximum length of recent calls\n   * @return {Array}\n   * @private\n   */\n  async _getRecentCalls(\n    currentContact: Entity,\n    calls: HistoryCall[] = [],\n    daySpan = 60,\n    length = 5,\n  ) {\n    const dateFrom = getDateFrom(daySpan);\n    let recentCalls = this._getLocalRecentCalls(\n      currentContact,\n      calls,\n      dateFrom,\n    );\n\n    // If we could not find enough recent calls,\n    // we need to search for calls on server.\n    if (recentCalls.length < length) {\n      recentCalls = await this._fetchRemoteRecentCalls(\n        currentContact,\n        dateFrom.toISOString(),\n        length,\n      );\n    }\n\n    recentCalls.sort(sortByTime);\n    recentCalls = dedup(recentCalls);\n    return recentCalls.length > length\n      ? recentCalls.slice(0, length)\n      : recentCalls;\n  }\n\n  _getLocalRecentCalls(\n    { phoneNumbers }: Entity,\n    calls: HistoryCall[],\n    dateFrom: Date,\n  ) {\n    // Get all calls related to this contact\n    return calls.reduce((acc, call) => {\n      if (call && call.to && call.from) {\n        const matches = phoneNumbers.find(filterPhoneNumber(call));\n\n        // Check if calls is within certain days\n        if (!!matches && new Date(call.startTime) > dateFrom) {\n          return acc.concat(call);\n        }\n      }\n      return acc;\n    }, [] as HistoryCall[]);\n  }\n\n  /**\n   * Fetch recent calls from server by given current contact.\n   */\n  _fetchRemoteRecentCalls(\n    { phoneNumbers }: Entity,\n    dateFrom: string,\n    length: number,\n  ) {\n    const params = {\n      dateFrom,\n      perPage: length,\n      type: 'Voice',\n    };\n\n    // CallLog API doesn't support plus sign in phoneNumber\n    const recentCallsPromises = phoneNumbers.reduce(\n      (acc, { phoneType, phoneNumber }) => {\n        phoneNumber = phoneNumber.replace('+', '');\n        if (phoneType === phoneTypes.extension) {\n          const promise = this._fetchCallLogList({\n            ...params,\n            extensionNumber: phoneNumber,\n          });\n          return acc.concat(promise);\n        }\n        const promise = this._fetchCallLogList({\n          ...params,\n          phoneNumber,\n        });\n        return acc.concat(promise);\n      },\n      [] as (() => Promise<UserCallLogResponse>)[],\n    );\n\n    return concurrentExecute(recentCallsPromises, 5, 500).then(\n      flattenToRecords,\n    ) as Promise<HistoryCall[]>;\n  }\n\n  _fetchCallLogList(params: FetchCallLogListOptions) {\n    return async () => {\n      if (!this._deps.auth.loggedIn) {\n        return { records: [] };\n      }\n      return this._deps.client\n        .account()\n        .extension()\n        .callLog()\n        .list(params) as Promise<UserCallLogResponse>;\n    };\n  }\n}\n"],"file":"RecentCalls.js"}