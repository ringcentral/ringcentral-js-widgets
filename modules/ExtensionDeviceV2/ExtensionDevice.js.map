{"version":3,"sources":["modules/ExtensionDeviceV2/ExtensionDevice.ts"],"names":["ExtensionDevice","name","deps","dep","optional","data","devices","_source","DataSource","extensionDeviceOptions","key","cleanOnReset","fetchFunction","params","_deps","client","account","extension","device","list","dataFetcherV2","register","acc","concat","phoneLines","DataFetcherV2Consumer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAMA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAWaA,e,WARZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,iBADA;AAENC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,eAFI,EAGJ;AAAEC,IAAAA,GAAG,EAAE,wBAAP;AAAiCC,IAAAA,QAAQ,EAAE;AAA3C,GAHI;AAFA,CAAP,C,UA4BE,oBAAS;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,SAA+B,CAACA,IAAD,CAA/B;AAAA,CAAT,C,UAKA,oBAAS;AAAA,MAAGC,OAAH,SAAGA,OAAH;AAAA,SAAkC,CAACA,OAAD,CAAlC;AAAA,CAAT,C;;;;;AArBD,2BAAYJ,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA;AADI,KAAN;AAGA,UAAKK,OAAL,GAAe,IAAIC,wBAAJ,iCACVN,IAAI,CAACO,sBADK;AAEbC,MAAAA,GAAG,EAAE,iBAFQ;AAGbC,MAAAA,YAAY,EAAE,IAHD;AAIbC,MAAAA,aAAa;AAAA,qFAAE;AAAA;AAAA;AAAA;AAAA;AAAA,mDACb,2BAAU,UAACC,MAAD;AAAA,2BACR,MAAKC,KAAL,CAAWC,MAAX,CAAkBC,OAAlB,GAA4BC,SAA5B,GAAwCC,MAAxC,GAAiDC,IAAjD,CAAsDN,MAAtD,CADQ;AAAA,mBAAV,CADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAJA,OAAf;;AASA,UAAKC,KAAL,CAAWM,aAAX,CAAyBC,QAAzB,CAAkC,MAAKd,OAAvC;;AAbsB;AAcvB;;;;wBAGa;AAAA;;AACZ,2BAAO,KAAKF,IAAZ,mDAAoB,EAApB;AACD;;;wBAGgB;AACf,aAAO,mBACL,UAACiB,GAAD,EAAMJ,MAAN,EAAiB;AAAA;;AACf,eAAOI,GAAG,CAACC,MAAJ,uBAAWL,MAAM,CAACM,UAAlB,mEAAgC,EAAhC,CAAP;AACD,OAHI,EAIL,EAJK,EAKL,KAAKlB,OALA,CAAP;AAOD;;;;EAlCkCmB,mC","sourcesContent":["import { reduce } from 'ramda';\n\nimport {\n  ExtensionDeviceResponse,\n  PhoneLinesInfo,\n} from '@rc-ex/core/definitions';\nimport { computed } from '@ringcentral-integration/core';\n\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport { Deps } from './ExtensionDevice.interface';\n\n@Module({\n  name: 'ExtensionDevice',\n  deps: [\n    'Client',\n    'DataFetcherV2',\n    { dep: 'ExtensionDeviceOptions', optional: true },\n  ],\n})\nexport class ExtensionDevice extends DataFetcherV2Consumer<\n  Deps,\n  ExtensionDeviceResponse[]\n> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    this._source = new DataSource({\n      ...deps.extensionDeviceOptions,\n      key: 'extensionDevice',\n      cleanOnReset: true,\n      fetchFunction: async (): Promise<ExtensionDeviceResponse[]> =>\n        fetchList((params: any) =>\n          this._deps.client.account().extension().device().list(params),\n        ),\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  @computed(({ data }: ExtensionDevice) => [data])\n  get devices() {\n    return this.data ?? [];\n  }\n\n  @computed(({ devices }: ExtensionDevice) => [devices])\n  get phoneLines() {\n    return reduce(\n      (acc, device) => {\n        return acc.concat(device.phoneLines ?? []);\n      },\n      [] as PhoneLinesInfo[],\n      this.devices,\n    );\n  }\n}\n"],"file":"ExtensionDevice.js"}