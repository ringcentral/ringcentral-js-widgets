{"version":3,"sources":["modules/ActiveCallControl/index.ts"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_BUSY_TIMEOUT","telephonySessionsEndPoint","storageKey","subscribeEvent","subscriptionFilters","telephonySessions","ActiveCallControl","deps","dep","optional","client","auth","ttl","timeToRetry","storage","subscription","connectivityMonitor","availabilityMonitor","tabManager","presence","polling","disableCache","alert","numberValidate","accountInfo","extensionInfo","appFeatures","options","actionTypes","_updateSessionsHandler","store","dispatch","type","updateActiveSessions","timestamp","Date","now","sessionData","_rcCallControl","sessions","map","s","data","_client","_storage","_subscription","ensureExist","call","_connectivityMonitor","_availabilityMonitor","_presence","_tabManager","_ttl","_timeToRetry","_auth","_promise","_lastSubscriptionMessage","_storageKey","_polling","_alert","_numberValidate","_accountInfo","_extensionInfo","_appFeatures","_reducer","registerReducer","key","reducer","console","warn","subscribe","_onStateChange","_shouldInit","init","_connectivity","connectivity","_init","initSuccess","_shouldReset","_resetModuleStatus","ready","hasPermission","_subscriptionHandler","_checkConnectivity","_checkTabActive","loggedIn","pending","resetSuccess","active","_fetchData","_syncData","_startPolling","_retry","t","_clearTimeout","_timeoutId","setTimeout","fetchData","activeCalls","calls","loadSessions","forEach","session","_newSessionHandler","log","RingCentralCallControl","sdk","service","preloadDevices","preloadSessions","info","account","on","_tabActive","_shouldFetch","removeListener","message","test","event","body","onNotificationEvent","removeActiveSession","telephonySessionId","setActiveSessionId","restoreSessions","activeSessions","mute","find","id","muteSuccess","response","_text","clone","text","warning","callControlError","muteConflictError","checkIfHAError","generalError","muteError","unmute","unmuteSuccess","unMuteConflictError","unmuteError","recordingId","getRecordingId","resumeRecord","createRecord","recording","recordings","recodingId","pauseRecord","activeSession","getActiveSession","stopRecord","hangUp","drop","_onCallEndFunc","hangUpSuccess","hangUpError","reject","toVoicemail","rejectSuccess","rejectError","hold","holdSuccess","holdConflictError","holdError","unhold","unholdSuccess","unHoldConflictError","transferNumber","transfer","validateNumbers","validatedResult","result","Promise","all","errors","error","callErrors","payload","phoneNumber","transferError","validPhoneNumber","numbers","e164","indexOf","mainCompanyNumber","join","transferSuccess","flipValue","flip","callFlipId","flipSuccess","flipError","hasCallControl","getItem","state","activeSessionId","busy","status","moduleStatuses","Pollable","selector","sessionId","_t","accumulator","reduce"],"mappings":"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","sourcesContent":["import { RingCentralCallControl } from 'ringcentral-call-control';\n\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport Pollable from '../../lib/Pollable';\nimport { selector } from '../../lib/selector';\nimport callErrors from '../Call/callErrors';\nimport { actionTypes } from './actionTypes';\nimport callControlError from './callControlError';\nimport getActiveCallControlReducer from './getActiveCallControlReducer';\nimport getDataReducer from './getDataReducer';\nimport { conflictError, normalizeSession } from './helpers';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_BUSY_TIMEOUT = 3 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst storageKey = 'activeCallControl';\nconst subscribeEvent = subscriptionFilters.telephonySessions;\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'Presence',\n    'Alert',\n    'NumberValidate',\n    'AccountInfo',\n    'ExtensionInfo',\n    'AppFeatures',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n  ],\n})\nexport default class ActiveCallControl extends Pollable {\n  constructor({\n    client,\n    auth,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    storage,\n    subscription,\n    connectivityMonitor,\n    availabilityMonitor,\n    tabManager,\n    presence,\n    polling = false,\n    disableCache = false,\n    alert,\n    numberValidate,\n    accountInfo,\n    extensionInfo,\n    appFeatures,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._subscription = ensureExist.call(this, subscription, 'subscription');\n    this._connectivityMonitor = ensureExist.call(\n      this,\n      connectivityMonitor,\n      'connectivityMonitor',\n    );\n    this._availabilityMonitor = availabilityMonitor;\n    this._presence = ensureExist.call(this, presence, 'presence');\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._auth = ensureExist.call(this, auth, 'auth');\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = storageKey;\n    this._polling = polling;\n    this._alert = alert;\n    this._numberValidate = numberValidate;\n    this._accountInfo = accountInfo;\n    this._extensionInfo = extensionInfo;\n    this._appFeatures = appFeatures;\n    this._rcCallControl = null;\n\n    if (this._storage) {\n      this._reducer = getActiveCallControlReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getActiveCallControlReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n    console.warn(\n      'ActiveCallControl is deprecated, please evaluate and transition to use ActiveCallControlV2',\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._connectivity = this._connectivityMonitor.connectivity;\n      await this._init();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (this.ready && this.hasPermission) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n      this._checkTabActive();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._accountInfo.ready &&\n      this._extensionInfo.ready &&\n      (!this._storage || this._storage.ready) &&\n      this._subscription.ready &&\n      this._connectivityMonitor.ready &&\n      this._presence.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._auth.loggedIn ||\n        !this._accountInfo.ready ||\n        !this._extensionInfo.ready ||\n        (!!this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._tabManager && !this._tabManager.ready) ||\n        !this._connectivityMonitor.ready ||\n        !this._presence.ready ||\n        (!!this._availabilityMonitor && !this._availabilityMonitor.ready)) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  // This should reflect on the app permissions setting in DWP\n  get hasPermission() {\n    return this._appFeatures.hasCallControl;\n  }\n\n  _shouldFetch() {\n    return !this._tabManager || this._tabManager.active;\n  }\n\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = this.timestamp + this.ttl + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._tabManager || this._tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  async _syncData() {\n    try {\n      const activeCalls = this._presence.calls;\n      await this._rcCallControl.loadSessions(activeCalls);\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessions,\n        timestamp: Date.now(),\n        sessionData: this._rcCallControl.sessions.map((s) => s.data),\n      });\n      this._rcCallControl.sessions.forEach((session) => {\n        this._newSessionHandler(session);\n      });\n    } catch (error) {\n      console.log('sync data error:', error);\n      throw error;\n    }\n  }\n\n  async _init() {\n    if (!this.hasPermission) return;\n    this._subscription.subscribe([subscribeEvent]);\n    this._rcCallControl = new RingCentralCallControl({\n      sdk: this._client.service,\n      preloadDevices: false,\n      preloadSessions: false,\n      extensionInfo: {\n        ...this._extensionInfo.info,\n        account: this._accountInfo.info,\n      },\n    });\n    this._rcCallControl.on('new', (session) => {\n      this._newSessionHandler(session);\n    });\n    this._tabActive = this._tabManager.active;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n  }\n\n  _updateSessionsHandler = () => {\n    this.store.dispatch({\n      type: this.actionTypes.updateActiveSessions,\n      timestamp: Date.now(),\n      sessionData: this._rcCallControl.sessions.map((s) => s.data),\n    });\n  };\n\n  _newSessionHandler(session) {\n    this._updateSessionsHandler();\n    session.removeListener('status', this._updateSessionsHandler);\n    session.removeListener('muted', this._updateSessionsHandler);\n    session.removeListener('recordings', this._updateSessionsHandler);\n    session.on('status', this._updateSessionsHandler);\n    session.on('muted', this._updateSessionsHandler);\n    session.on('recordings', this._updateSessionsHandler);\n  }\n\n  _subscriptionHandler() {\n    if (\n      !this.ready ||\n      (this._storage && this._tabManager && !this._tabManager.active)\n    ) {\n      return;\n    }\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      this._lastSubscriptionMessage = message;\n      if (this._rcCallControl) {\n        this._rcCallControl.onNotificationEvent(message);\n      }\n    }\n  }\n\n  removeActiveSession() {\n    this.store.dispatch({\n      type: this.actionTypes.removeActiveSession,\n    });\n  }\n\n  // count it as load (should only call on container init step)\n  setActiveSessionId(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.setActiveSessionId,\n      telephonySessionId,\n    });\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  _checkTabActive() {\n    if (!this._tabManager || !this._storage) {\n      return;\n    }\n    if (this._tabActive !== this._tabManager.active) {\n      this._tabActive = this._tabManager.active;\n      if (this._tabManager.active && this._rcCallControl) {\n        this._rcCallControl.restoreSessions(this.data.sessions);\n        this._rcCallControl.sessions.forEach((session) => {\n          this._newSessionHandler(session);\n        });\n      }\n    }\n  }\n\n  getActiveSession(telephonySessionId) {\n    return this.activeSessions[telephonySessionId];\n  }\n\n  async mute(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.mute,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.mute();\n      this.store.dispatch({\n        type: this.actionTypes.muteSuccess,\n      });\n    } catch (error) {\n      if (error.response && !error.response._text) {\n        error.response._text = await error.response.clone().text();\n      }\n      if (conflictError(error)) {\n        this._alert.warning({\n          message: callControlError.muteConflictError,\n        });\n      } else if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.muteError,\n      });\n    }\n  }\n\n  async unmute(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.unmute,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.unmute();\n      this.store.dispatch({\n        type: this.actionTypes.unmuteSuccess,\n      });\n    } catch (error) {\n      if (error.response && !error.response._text) {\n        error.response._text = await error.response.clone().text();\n      }\n      if (conflictError(error)) {\n        this._alert.warning({\n          message: callControlError.unMuteConflictError,\n        });\n      } else if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.unmuteError,\n      });\n    }\n  }\n\n  async startRecord(telephonySessionId) {\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      if (recordingId) {\n        await session.resumeRecord(recordingId);\n      } else {\n        await session.createRecord(recordingId);\n      }\n    } catch (error) {\n      // this.store.dispatch({\n      //   type: this.actionTypes.recordFail,\n      //   sessionId,\n      // });\n    }\n  }\n\n  getRecordingId(session) {\n    const recording = session.recordings[0];\n    const recodingId = recording && recording.id;\n    return recodingId;\n  }\n\n  async stopRecord(telephonySessionId) {\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      const recordingId = this.getRecordingId(session);\n      await session.pauseRecord(recordingId);\n      const activeSession = this.getActiveSession(telephonySessionId);\n      this.store.dispatch({\n        type: this.actionTypes.stopRecord,\n        activeSession,\n      });\n    } catch (error) {\n      console.log('stop record error:', error);\n      throw error;\n    }\n  }\n\n  async hangUp(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.hangUp,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.drop();\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.hangUpSuccess,\n      });\n    } catch (error) {\n      if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.hangUpError,\n      });\n    }\n  }\n\n  async reject(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.reject,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.toVoicemail();\n      this.store.dispatch({\n        type: this.actionTypes.rejectSuccess,\n      });\n    } catch (error) {\n      if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.rejectError,\n      });\n    }\n  }\n\n  async hold(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.hold,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.hold();\n      this.store.dispatch({\n        type: this.actionTypes.holdSuccess,\n      });\n    } catch (error) {\n      if (error.response && !error.response._text) {\n        error.response._text = await error.response.clone().text();\n      }\n      if (conflictError(error)) {\n        this._alert.warning({\n          message: callControlError.holdConflictError,\n        });\n      } else if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.holdError,\n      });\n    }\n  }\n\n  async unhold(telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.unhold,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.unhold();\n      this.store.dispatch({\n        type: this.actionTypes.unholdSuccess,\n      });\n    } catch (error) {\n      if (error.response && !error.response._text) {\n        error.response._text = await error.response.clone().text();\n      }\n      if (conflictError(error)) {\n        this._alert.warning({\n          message: callControlError.unHoldConflictError,\n        });\n      } else if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({\n          message: callControlError.generalError,\n        });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.holdError,\n      });\n    }\n  }\n\n  async transfer(transferNumber, telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.transfer,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      const validatedResult = await this._numberValidate.validateNumbers([\n        transferNumber,\n      ]);\n      if (!validatedResult.result) {\n        await Promise.all(\n          validatedResult.errors.map(async (error) => {\n            if (\n              !this._availabilityMonitor ||\n              !(await this._availabilityMonitor.checkIfHAError(error))\n            ) {\n              this._alert.warning({\n                message: callErrors[error.type],\n                payload: {\n                  phoneNumber: error.phoneNumber,\n                },\n              });\n            }\n          }),\n        );\n        this.store.dispatch({\n          type: this.actionTypes.transferError,\n        });\n        return;\n      }\n      const validPhoneNumber =\n        validatedResult.numbers[0] && validatedResult.numbers[0].e164;\n      let phoneNumber = validPhoneNumber;\n      if (validPhoneNumber.indexOf('+') === -1) {\n        phoneNumber = [\n          this._accountInfo.mainCompanyNumber,\n          validPhoneNumber,\n        ].join('*');\n      }\n      session.transfer({ phoneNumber });\n      this.store.dispatch({\n        type: this.actionTypes.transferSuccess,\n      });\n    } catch (error) {\n      if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.transferError,\n      });\n    }\n  }\n\n  // Incomplete Implementation?\n  async flip(flipValue, telephonySessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.flip,\n      timestamp: Date.now(),\n    });\n    try {\n      const session = this._rcCallControl.sessions.find(\n        (s) => s.id === telephonySessionId,\n      );\n      await session.flip({ callFlipId: flipValue });\n      this.store.dispatch({\n        type: this.actionTypes.flipSuccess,\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.flipError,\n      });\n      throw error;\n    }\n  }\n\n  async forward() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n\n  get data() {\n    return (\n      (this._storage &&\n        this._storage.ready &&\n        this._storage.getItem(this._storageKey)) ||\n      this.state\n    );\n  }\n\n  get activeSessionId() {\n    return this.data.activeSessionId || null;\n  }\n\n  /**\n   * Mitigation strategy for avoiding 404/409 on call control endpoings.\n   * This should gradually move towards per session controls rather than\n   * a global busy timeout.\n   */\n  get busy() {\n    return Date.now() - this.data.busy < DEFAULT_BUSY_TIMEOUT;\n  }\n\n  get timestamp() {\n    return this.data.timestamp;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  @selector\n  activeSession = [\n    () => this.activeSessionId,\n    () => this.activeSessions,\n    (sessionId) => this.getActiveSession(sessionId),\n  ];\n\n  @selector\n  activeSessions = [\n    () => this._presence.calls,\n    () => this.data.sessions,\n    () => this.timestamp,\n    (calls, sessions, _t) => {\n      const reducer = (accumulator, call) => {\n        const { telephonySessionId } = call;\n        const session = sessions.find((s) => s.id === telephonySessionId);\n        if (!session) {\n          return accumulator;\n        }\n        accumulator[telephonySessionId] = normalizeSession({\n          call,\n          session,\n        });\n        return accumulator;\n      };\n      return calls.reduce(reducer, {});\n    },\n  ];\n\n  @selector\n  sessionIdToTelephonySessionIdMapping = [\n    () => this._presence.calls,\n    (calls) => {\n      const reducer = (accumulator, call) => {\n        const { telephonySessionId, sessionId } = call;\n        accumulator[sessionId] = telephonySessionId;\n        return accumulator;\n      };\n      return calls.reduce(reducer, {});\n    },\n  ];\n}\n"],"file":"index.js"}