{"version":3,"sources":["modules/ActiveCallControl/helpers.ts"],"names":["isHangUp","code","callResults","disconnected","isRejectCode","direction","callDirections","inbound","activeCallControlStatus","setUp","proceeding","isOnRecording","recordings","length","recording","active","getSessionsParty","session","extensionId","parties","find","p","normalizeSession","call","party","partyId","id","from","to","status","muted","startTime","sessionId","formatValue","telephonySessionId","phoneNumber","fromNumber","fromUserName","name","toNumber","toUserName","callStatus","telephonyStatus","creationTime","isOnMute","isForwarded","isOnFlip","isOnHold","hold","isOnTransfer","isReplied","isToVoicemail","lastHoldingTime","minimized","recordStatus","idle","removed","isReject","conflictError","message","response","conflictErrRgx","conflictMsgRgx","test","_text"],"mappings":"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","sourcesContent":["import activeCallControlStatus from '../../enums/activeCallControlStatus';\nimport callDirections from '../../enums/callDirections';\nimport callResults from '../../enums/callResults';\nimport recordStatus from '../Webphone/recordStatus';\n\nexport function isHangUp(code) {\n  return code === callResults.disconnected;\n}\nexport function isRejectCode({ direction, code }) {\n  return (\n    direction === callDirections.inbound &&\n    (code === activeCallControlStatus.setUp ||\n      code === activeCallControlStatus.proceeding)\n  );\n}\nexport function isOnRecording(recordings) {\n  if (!recordings || recordings.length === 0) {\n    return false;\n  }\n  const recording = recordings[0];\n  return recording.active;\n}\n\nexport function getSessionsParty(session) {\n  const extensionId = session.extensionId;\n  return session.parties.find((p) => {\n    return p.extensionId === extensionId;\n  });\n}\n\nexport function normalizeSession({ session, call }) {\n  const party = getSessionsParty(session);\n  const { id: partyId, direction, from, to, status, recordings, muted } = party;\n\n  const { startTime, sessionId } = call;\n\n  const formatValue = {\n    telephonySessionId: session.id,\n    partyId,\n    direction,\n    from: from?.phoneNumber,\n    fromNumber: from?.phoneNumber,\n    fromUserName: from?.name,\n    to: to?.phoneNumber,\n    toNumber: to?.phoneNumber,\n    toUserName: to?.name,\n    id: session.id,\n    sessionId,\n    callStatus: call.telephonyStatus,\n    startTime,\n    creationTime: startTime,\n    isOnMute: muted,\n    isForwarded: false,\n    isOnFlip: false,\n    isOnHold: status?.code === activeCallControlStatus.hold,\n    isOnTransfer: false,\n    isReplied: false,\n    isToVoicemail: false,\n    lastHoldingTime: 0,\n    minimized: false,\n    recordStatus: isOnRecording(recordings)\n      ? recordStatus.recording\n      : recordStatus.idle,\n    removed: false,\n    isReject: isRejectCode({ direction, code: status?.code }),\n  };\n  return {\n    ...formatValue,\n  };\n}\n\nexport function conflictError({ message, response }) {\n  const conflictErrRgx = /409/g;\n  const conflictMsgRgx = /Incorrect State/g;\n  return (\n    conflictErrRgx.test(message) &&\n    conflictMsgRgx.test(response && response._text)\n  );\n}\n"],"file":"helpers.js"}