{"version":3,"file":"helpers.js","names":["_ramda","require","_Session","_activeCallControlStatus","_interopRequireDefault","_callDirections","_callResults","_telephonyStatus","_recordStatus","e","__esModule","mapTelephonyStatus","telephonySessionStatus","PartyStatusCode","setup","proceeding","telephonyStatus","ringing","hold","onHold","answered","callConnected","parked","parkedCall","noCall","isHangUp","code","callResults","disconnected","isRejectCode","_ref","direction","callDirection","inbound","activeCallControlStatus","setUp","isOnRecording","recordings","length","recording","active","normalizeSession","_ref2","session","party","creationTime","sessionId","partyId","id","from","to","status","muted","formatValue","telephonySessionId","phoneNumber","fromNumber","fromUserName","name","toNumber","toUserName","callStatus","startTime","Date","getTime","isOnMute","isForwarded","isOnFlip","isOnHold","isOnTransfer","isReplied","isToVoicemail","lastHoldingTime","minimized","recordStatus","idle","removed","isReject","conflictError","_ref3","message","response","conflictErrRgx","conflictMsgRgx","test","_text","isRinging","telephonySession","isHolding","isRecording","isForwardedToVoiceMail","voicemail","isOnSetupStage","isFaxSession","faxReceive","isAtMainNumberPromptToneStage","_session$otherParties","otherParties","outbound","getInboundSwitchedParty","parties","result","find","_party$status","_party$status2","reason","filterDisconnectedCalls","inboundSwitchedParty","isGoneSession","gone","normalizeTelephonySession","accountId","data","extensionId","origin","requestOptions","serverId","voiceCallToken","WEBPHONE_REPLY_TIME_UNIT","Minute","Hour","Day","exports","WEBPHONE_REPLY_TYPE","customMessage","callBack","onMyWay","inAMeeting","getWebphoneReplyMessageOption","params","_params$replyWithPatt","_params$replyWithPatt2","_params$replyWithPatt3","_params$replyWithPatt4","replyWithText","replyType","replyText","replyWithPattern","pattern","ReplyWithPattern","callbackDirection","includes","timeValue","time","timeUnits","timeUnit"],"sources":["modules/ActiveCallControl/helpers.ts"],"sourcesContent":["// eslint-disable-next-line import/no-named-as-default\nimport type CallRecording from '@rc-ex/core/lib/definitions/CallRecording';\nimport { find } from 'ramda';\nimport type {\n  Party,\n  Session as TelephonySession,\n  ReplyWithTextParams,\n} from 'ringcentral-call-control/lib/Session';\nimport {\n  PartyStatusCode,\n  ReplyWithPattern,\n} from 'ringcentral-call-control/lib/Session';\nimport type { Session } from 'ringcentral-call/lib/Session';\n\n// eslint-disable-next-line import/no-named-as-default\nimport activeCallControlStatus from '../../enums/activeCallControlStatus';\nimport { callDirection } from '../../enums/callDirections';\n// eslint-disable-next-line import/no-named-as-default\nimport callResults from '../../enums/callResults';\nimport { telephonyStatus } from '../../enums/telephonyStatus';\nimport { recordStatus } from '../Webphone/recordStatus';\n\nimport type { ActiveCallControlSessionData } from './ActiveCallControl.interface';\n\n// telephony session status match presence telephonyStatus\nexport function mapTelephonyStatus(telephonySessionStatus: PartyStatusCode) {\n  switch (telephonySessionStatus) {\n    case PartyStatusCode.setup:\n    case PartyStatusCode.proceeding:\n      return telephonyStatus.ringing;\n    case PartyStatusCode.hold:\n      return telephonyStatus.onHold;\n    case PartyStatusCode.answered:\n      return telephonyStatus.callConnected;\n    case PartyStatusCode.parked:\n      return telephonyStatus.parkedCall;\n    default:\n      return telephonyStatus.noCall;\n  }\n}\n\nexport function isHangUp(code: string) {\n  return code === callResults.disconnected;\n}\n\nexport function isRejectCode({\n  direction,\n  code,\n}: {\n  direction: string;\n  code: string;\n}) {\n  return (\n    direction === callDirection.inbound &&\n    (code === activeCallControlStatus.setUp ||\n      code === activeCallControlStatus.proceeding)\n  );\n}\n\nexport function isOnRecording(recordings: Array<CallRecording>) {\n  if (!recordings || recordings.length === 0) {\n    return false;\n  }\n  const recording = recordings[0];\n  return recording.active;\n}\n\n// TODO: add call type in callMonitor module\nexport function normalizeSession({\n  session,\n}: {\n  session: ActiveCallControlSessionData;\n}) {\n  const { party, creationTime, sessionId } = session;\n  const { id: partyId, direction, from, to, status, recordings, muted } = party;\n\n  const formatValue = {\n    telephonySessionId: session.id,\n    partyId,\n    direction,\n    from: from?.phoneNumber,\n    fromNumber: from?.phoneNumber,\n    fromUserName: from?.name,\n    to: to?.phoneNumber,\n    toNumber: to?.phoneNumber,\n    toUserName: to?.name,\n    id: session.id,\n    sessionId,\n    // @ts-expect-error TS(2345): Argument of type 'PartyStatusCode | undefined' is ... Remove this comment to see the full error message\n    callStatus: mapTelephonyStatus(status?.code),\n    startTime: new Date(creationTime).getTime(),\n    creationTime,\n    isOnMute: muted,\n    isForwarded: false,\n    isOnFlip: false,\n    isOnHold: status?.code === activeCallControlStatus.hold,\n    isOnTransfer: false,\n    isReplied: false,\n    isToVoicemail: false,\n    lastHoldingTime: 0,\n    minimized: false,\n    // @ts-expect-error TS(2345): Argument of type 'Recording[] | undefined' is not ... Remove this comment to see the full error message\n    recordStatus: isOnRecording(recordings)\n      ? recordStatus.recording\n      : recordStatus.idle,\n    removed: false,\n    // @ts-expect-error TS(2322): Type 'import(\"/Users/declan.zou/Projects/rc/integr... Remove this comment to see the full error message\n    isReject: isRejectCode({ direction, code: status?.code }),\n  };\n  return formatValue;\n}\n\nexport function conflictError({\n  message,\n  response,\n}: {\n  message: string;\n  response: any;\n}) {\n  const conflictErrRgx = /409/g;\n  const conflictMsgRgx = /Incorrect State/g;\n  return (\n    conflictErrRgx.test(message) &&\n    conflictMsgRgx.test(response && response._text)\n  );\n}\n\nexport function isRinging(\n  telephonySession: ActiveCallControlSessionData | Session,\n) {\n  return (\n    telephonySession &&\n    (telephonySession.status === PartyStatusCode.proceeding ||\n      telephonySession.status === PartyStatusCode.setup) &&\n    telephonySession.direction === callDirection.inbound\n  );\n}\n\nexport function isHolding(telephonySession: ActiveCallControlSessionData) {\n  return telephonySession.status === PartyStatusCode.hold;\n}\n\nexport function isRecording(session: ActiveCallControlSessionData) {\n  const { party } = session;\n  // @ts-expect-error TS(2345): Argument of type 'Recording[] | undefined' is not ... Remove this comment to see the full error message\n  return isOnRecording(party.recordings);\n}\n\nexport function isForwardedToVoiceMail(session: ActiveCallControlSessionData) {\n  return session.status === PartyStatusCode.voicemail;\n}\n\nexport function isOnSetupStage(session: ActiveCallControlSessionData) {\n  return session.status === PartyStatusCode.setup;\n}\n\nexport function isFaxSession(session: ActiveCallControlSessionData) {\n  return session.status === PartyStatusCode.faxReceive;\n}\n\n// call to main company number but still at inputting extension number prompt tone stage\nexport function isAtMainNumberPromptToneStage(session: Session) {\n  if (!session) return false;\n  const { otherParties = [], direction, status } = session;\n  if (\n    direction === callDirection.outbound &&\n    status === PartyStatusCode.answered &&\n    !otherParties.length\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function getInboundSwitchedParty(parties: Party[]) {\n  if (!parties.length) return false;\n  const result = find((party: Party) => {\n    return (\n      party.direction === callDirection.inbound &&\n      party.status?.code === PartyStatusCode.disconnected &&\n      // @ts-expect-error TS(2339): Property 'reason' does not exist on type 'PartySta... Remove this comment to see the full error message\n      party.status?.reason === 'CallSwitch'\n    );\n  }, parties);\n  return result;\n}\n\nexport function filterDisconnectedCalls(\n  session: Session | ActiveCallControlSessionData,\n) {\n  // workaround of bug:\n  // switch an inbound call then call direction will change to outbound\n  const { party, otherParties, direction, status } = session;\n  if (\n    direction === callDirection.outbound &&\n    status !== PartyStatusCode.disconnected\n  ) {\n    const inboundSwitchedParty = getInboundSwitchedParty(otherParties);\n    if (inboundSwitchedParty) {\n      party.direction = inboundSwitchedParty.direction;\n      party.to = inboundSwitchedParty.to;\n      party.from = inboundSwitchedParty.from;\n    }\n  }\n  return session.status !== PartyStatusCode.disconnected;\n}\n\nexport function isGoneSession(session: Session | ActiveCallControlSessionData) {\n  return session.status === PartyStatusCode.gone;\n}\n\nexport function normalizeTelephonySession(\n  session?: TelephonySession,\n): ActiveCallControlSessionData {\n  if (!session) {\n    // @ts-expect-error TS(2740): Type '{}' is missing the following properties from... Remove this comment to see the full error message\n    return {};\n  }\n  return {\n    accountId: session.accountId,\n    creationTime: session.creationTime,\n    // @ts-expect-error TS(2322): Type '{ accountId: any; creationTime: any; data: a... Remove this comment to see the full error message\n    data: session.data,\n    extensionId: session.extensionId,\n    id: session.id,\n    origin: session.origin,\n    otherParties: session.otherParties,\n    parties: session.parties,\n    party: session.party,\n    recordings: session.recordings,\n    requestOptions: session.requestOptions,\n    serverId: session.serverId,\n    sessionId: session.sessionId,\n    voiceCallToken: session.voiceCallToken,\n  };\n}\n\n// fix call control api issue.\nexport const WEBPHONE_REPLY_TIME_UNIT = {\n  Minute: '0',\n  Hour: '1',\n  Day: '2',\n};\n\nexport const WEBPHONE_REPLY_TYPE = {\n  customMessage: 0,\n  callBack: 1,\n  onMyWay: 2,\n  inAMeeting: 5,\n};\n\nexport function getWebphoneReplyMessageOption(params: ReplyWithTextParams) {\n  if (params.replyWithText) {\n    return {\n      replyType: WEBPHONE_REPLY_TYPE.customMessage,\n      replyText: params.replyWithText,\n    };\n  }\n  if (params.replyWithPattern?.pattern === ReplyWithPattern.onMyWay) {\n    return {\n      replyType: WEBPHONE_REPLY_TYPE.onMyWay,\n    };\n  }\n  if (params.replyWithPattern?.pattern === ReplyWithPattern.inAMeeting) {\n    return {\n      replyType: WEBPHONE_REPLY_TYPE.inAMeeting,\n    };\n  }\n  const replyType = WEBPHONE_REPLY_TYPE.callBack;\n  let callbackDirection;\n  if (params.replyWithPattern?.pattern.includes('CallMe')) {\n    callbackDirection = `1`;\n  } else {\n    callbackDirection = `0`;\n  }\n  return {\n    replyType,\n    timeValue: params.replyWithPattern?.time || '',\n    timeUnits: WEBPHONE_REPLY_TIME_UNIT[params.replyWithPattern!.timeUnit!],\n    callbackDirection,\n  };\n}\n"],"mappings":"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","ignoreList":[]}