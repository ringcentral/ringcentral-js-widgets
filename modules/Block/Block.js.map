{"version":3,"sources":["modules/Block/Block.ts"],"names":["Block","name","deps","dep","optional","that","blockIds","blockMapping","id","data","push","filter","blockId","length","props","_getId","_setListItem","_removeListItem","cb","block","unblock","_clearAllItem","uuid","v4","map","RcModuleV2","state","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeaA,K,WAJZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,OADA;AAENC,EAAAA,IAAI,EAAE,CAAC;AAAEC,IAAAA,GAAG,EAAE,cAAP;AAAuBC,IAAAA,QAAQ,EAAE;AAAjC,GAAD;AAFA,CAAP,C,UAWE,oBAAS,UAACC,IAAD;AAAA,SAAiB,CAACA,IAAI,CAACC,QAAN,EAAgBD,IAAI,CAACE,YAArB,CAAjB;AAAA,CAAT,C;;;;;;;;;;;;;;;;;;;;;;;;;iCAMoBC,E,EAAYC,I,EAAiB;AAChD,WAAKH,QAAL,CAAcI,IAAd,CAAmBF,EAAnB;AACA,WAAKD,YAAL,CAAkBC,EAAlB,IAAwBC,IAAxB;AACD;;;oCAGuBD,E,EAAY;AAClC,WAAKF,QAAL,GAAgB,KAAKA,QAAL,CAAcK,MAAd,CAAqB,UAACC,OAAD;AAAA,eAAaA,OAAO,KAAKJ,EAAzB;AAAA,OAArB,CAAhB;AACA,aAAO,KAAKD,YAAL,CAAkBC,EAAlB,CAAP;AACD;;;oCAGuB;AACtB,WAAKF,QAAL,CAAcO,MAAd,GAAuB,CAAvB;AACA,WAAKN,YAAL,GAAoB,EAApB;AACD;AAED;AACF;AACA;AACA;;;;4BAC+B;AAAA,UAAvBO,KAAuB,uEAAJ,EAAI;;AAC3B,UAAMN,EAAE,GAAG,KAAKO,MAAL,EAAX;;AAEA,WAAKC,YAAL,CAAkBR,EAAlB,EAAsBM,KAAtB;;AAEA,aAAON,EAAP;AACD;AAED;AACF;AACA;AACA;;;;4BACUA,E,EAAY;AAClB,WAAKS,eAAL,CAAqBT,EAArB;AACD;AAED;AACF;AACA;AACA;;;;;4FACaU,E;;;;;;AACHV,gBAAAA,E,GAAK,KAAKW,KAAL,E;;;uBAEHD,EAAE,E;;;;AAER,qBAAKE,OAAL,CAAaZ,EAAb;;;;;;;;;;;;;;;;;AAIJ;AACF;AACA;;;;iCACe;AACX,WAAKa,aAAL;AACD;;;6BAEgB;AACf,aAAOC,IAAI,CAACC,EAAL,EAAP;AACD;;;wBAhEY;AAAA;;AACX,aAAO,KAAKjB,QAAL,CAAckB,GAAd,CAAkB,UAAChB,EAAD;AAAA,eAAQ,MAAI,CAACD,YAAL,CAAkBC,EAAlB,CAAR;AAAA,OAAlB,CAAP;AACD;;;;EAVwBiB,gB,4EACxBC,W;;;;;WACoB,E;;iFAEpBA,W;;;;;WACgC,E;;oNAOhCC,Y,4JAMAA,Y,6JAMAA,Y","sourcesContent":["import * as uuid from 'uuid';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n} from '@ringcentral-integration/core';\n\nimport { BlockItem, DepsModules, IBlock } from './Block.interface';\n\ntype ModalMappingType = Record<string, BlockItem>;\n\n@Module({\n  name: 'Block',\n  deps: [{ dep: 'BlockOptions', optional: true }],\n})\nexport class Block extends RcModuleV2<DepsModules> implements IBlock {\n  @state\n  blockIds: string[] = [];\n\n  @state\n  blockMapping: ModalMappingType = {};\n\n  @computed((that: Block) => [that.blockIds, that.blockMapping])\n  get blocks() {\n    return this.blockIds.map((id) => this.blockMapping[id]);\n  }\n\n  @action\n  private _setListItem(id: string, data: BlockItem) {\n    this.blockIds.push(id);\n    this.blockMapping[id] = data;\n  }\n\n  @action\n  private _removeListItem(id: string) {\n    this.blockIds = this.blockIds.filter((blockId) => blockId !== id);\n    delete this.blockMapping[id];\n  }\n\n  @action\n  private _clearAllItem() {\n    this.blockIds.length = 0;\n    this.blockMapping = {};\n  }\n\n  /**\n   * block view with `SpinnerOverlay`\n   * @param props props for show in `SpinnerOverlay`\n   */\n  block(props: BlockItem = {}) {\n    const id = this._getId();\n\n    this._setListItem(id, props);\n\n    return id;\n  }\n\n  /**\n   * that will unblock one of pass id\n   * @param id for unblock id\n   */\n  unblock(id: string) {\n    this._removeListItem(id);\n  }\n\n  /**\n   * Show block and wait for call back method complete that block will auto close\n   * @param cb the method you want to wait for complete\n   */\n  async next(cb: Function) {\n    const id = this.block();\n    try {\n      await cb();\n    } finally {\n      this.unblock(id);\n    }\n  }\n\n  /**\n   * clear all block item, and unblock view\n   */\n  unblockAll() {\n    this._clearAllItem();\n  }\n\n  private _getId() {\n    return uuid.v4();\n  }\n}\n"],"file":"Block.js"}