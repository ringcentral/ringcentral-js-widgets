{"version":3,"sources":["modules/GlipGroups/index.ts"],"names":["glipGroupRegExp","subscriptionFilter","DEFAULT_PER_PAGE","DEFAULT_TTL","DEFAULT_RETRY","DEFAULT_RECORD_COUNT_PER_REQ","DEFAULT_PRELOAD_POSTS_DELAY_TTL","formatGroup","group","personsMap","postsMap","ownerId","id","detailMembers","members","forEach","memberId","push","isMe","newGroup","updatedTime","Date","lastModifiedTime","getTime","latestPost","creator","creatorId","postCreationTime","creationTime","getUniqueMemberIds","groups","memberIds","memberIdsMap","searchPosts","searchFilter","posts","result","post","text","toLowerCase","indexOf","mentions","length","mentionNames","map","m","name","join","GlipGroups","deps","dep","optional","auth","subscription","client","tabManager","glipPersons","glipPosts","storage","appFeatures","connectivityMonitor","timeToRetry","ttl","polling","disableCache","perPage","recordCountPerReq","preloadPosts","preloadPostsDelayTtl","options","actionTypes","_auth","ensureExist","call","_client","_subscription","_appFeatures","_connectivityMonitor","_glipPersons","_glipPosts","_tabManager","_ttl","_timeToRetry","_polling","_perPage","_recordCountPerReq","_preloadPosts","_preloadedPosts","_preloadPostsDelayTtl","_promise","_lastMessage","_subscriptionFilters","_storage","_dataStorageKey","_timestampStorageKey","_reducer","registerReducer","key","reducer","timestamp","data","addNewPostListener","onNewPost","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_init","_isDataReady","initSuccess","_onDataReady","_shouldReset","_clearTimeout","resetSuccess","_shouldHandleSubscriptionMessage","_processSubscription","ready","_connectivity","connectivity","fetchData","_preloadGroupPosts","loggedIn","_readyCheckFn","pending","message","loadPersons","groupMemberIds","test","event","body","eventType","removeGroup","updateGroup","loadPosts","active","status","moduleStatuses","initializing","_hasPermission","_shouldFetch","console","error","_retry","_startPolling","_subscriptionHandleFn","force","slice","fetchPosts","readTimeMap","updateReadTime","now","pageNumber","updateFilter","groupId","lastGroupId","currentGroupId","lastGroupPosts","currentGroupPosts","updateCurrentGroupId","currentGroup","glip","list","recordCount","fetch","_fetchFunction","fetchSuccess","fetchError","_fetchData","personId","isPublic","description","state","getItem","hasGlipPermission","Pollable","proxify","selector","allGroups","filterString","filter","groupUsernames","firstName","lastName","filteredGroups","sortedGroups","sort","a","b","noTeamGroups","g","find","undefined","reversePosts","reverse","sentByMe","readTime","unread","groupsWithUnread","reduce"],"mappings":"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","sourcesContent":["import moduleStatuses from '../../enums/moduleStatuses';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport isBlank from '../../lib/isBlank';\nimport Pollable from '../../lib/Pollable';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\nimport sleep from '../../lib/sleep';\nimport { actionTypes } from './actionTypes';\nimport getReducer, { getDataReducer, getTimestampReducer } from './getReducer';\n\nconst glipGroupRegExp = /glip\\/groups$/;\nconst subscriptionFilter = '/restapi/v1.0/glip/groups';\n\nconst DEFAULT_PER_PAGE = 20;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_RETRY = 62 * 1000;\nconst DEFAULT_RECORD_COUNT_PER_REQ = 250;\nconst DEFAULT_PRELOAD_POSTS_DELAY_TTL = 800;\n\nfunction formatGroup(group, personsMap, postsMap = {}, ownerId) {\n  if (!group || !group.id) {\n    return {};\n  }\n  const detailMembers = [];\n  if (group.members) {\n    group.members.forEach((memberId) => {\n      if (personsMap[memberId]) {\n        detailMembers.push({\n          ...personsMap[memberId],\n          isMe: ownerId === memberId,\n        });\n      }\n    });\n  }\n  const newGroup = {\n    ...group,\n    detailMembers,\n    updatedTime: new Date(group.lastModifiedTime).getTime(),\n  };\n  const latestPost = postsMap[group.id] && postsMap[group.id][0];\n  if (latestPost) {\n    newGroup.latestPost = {\n      ...latestPost,\n      creator: personsMap[latestPost.creatorId],\n    };\n    const postCreationTime = new Date(latestPost.creationTime).getTime();\n    if (postCreationTime > newGroup.updatedTime) {\n      newGroup.updatedTime = postCreationTime;\n    }\n  }\n  return newGroup;\n}\n\nfunction getUniqueMemberIds(groups) {\n  const memberIds = [];\n  const memberIdsMap = {};\n  groups.forEach((group) => {\n    group.members.forEach((memberId) => {\n      if (memberIdsMap[memberId]) {\n        return;\n      }\n      memberIdsMap[memberId] = true;\n      memberIds.push(memberId);\n    });\n  });\n  return memberIds;\n}\n\nfunction searchPosts(searchFilter, posts) {\n  let result = false;\n  for (const post of posts) {\n    if (post.text && post.text.toLowerCase().indexOf(searchFilter) > -1) {\n      result = true;\n      break;\n    }\n    if (post.mentions && post.mentions.length > 0) {\n      const mentionNames = post.mentions\n        .map((m) => m.name)\n        .join(' ')\n        .toLowerCase();\n      if (mentionNames.indexOf(searchFilter) > -1) {\n        result = true;\n        break;\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * @class\n * @description Accound info managing module.\n */\n@Module({\n  deps: [\n    'Auth',\n    'Client',\n    'Subscription',\n    'AppFeatures',\n    { dep: 'ConnectivityMonitor', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'GlipPersons', optional: true },\n    { dep: 'GlipPosts', optional: true },\n    { dep: 'GLipGroupsOptions', optional: true },\n  ],\n})\nexport default class GlipGroups extends Pollable {\n  constructor({\n    auth,\n    subscription,\n    client,\n    tabManager,\n    glipPersons,\n    glipPosts,\n    storage,\n    appFeatures,\n    connectivityMonitor,\n    timeToRetry = DEFAULT_RETRY,\n    ttl = DEFAULT_TTL,\n    polling = false,\n    disableCache = false,\n    perPage = DEFAULT_PER_PAGE,\n    recordCountPerReq = DEFAULT_RECORD_COUNT_PER_REQ,\n    preloadPosts = true,\n    preloadPostsDelayTtl = DEFAULT_PRELOAD_POSTS_DELAY_TTL,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = ensureExist.call(this, auth, 'auth');\n    this._client = ensureExist.call(this, client, 'client');\n    this._subscription = ensureExist.call(this, subscription, 'subscription');\n    this._appFeatures = appFeatures;\n    this._connectivityMonitor = connectivityMonitor;\n    this._glipPersons = glipPersons;\n    this._glipPosts = glipPosts;\n    this._tabManager = tabManager;\n\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._perPage = perPage;\n    this._recordCountPerReq = recordCountPerReq;\n    this._preloadPosts = preloadPosts;\n    this._preloadedPosts = {};\n    this._preloadPostsDelayTtl = preloadPostsDelayTtl;\n\n    this._promise = null;\n    this._lastMessage = null;\n\n    this._subscriptionFilters = [subscriptionFilter];\n    if (!disableCache) {\n      this._storage = storage;\n    }\n\n    this._dataStorageKey = 'glipGroupsData';\n    this._timestampStorageKey = 'glipGroupsTimestamp';\n\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n\n      this._storage.registerReducer({\n        key: this._dataStorageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n      this._storage.registerReducer({\n        key: this._timestampStorageKey,\n        reducer: getTimestampReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        timestamp: getTimestampReducer(this.actionTypes),\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n\n    if (this._glipPosts) {\n      this._glipPosts.addNewPostListener((post) => this.onNewPost(post));\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      await this._init();\n    } else if (this._isDataReady()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this._onDataReady();\n    } else if (this._shouldReset()) {\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (this._shouldHandleSubscriptionMessage()) {\n      this._processSubscription();\n    } else if (\n      this.ready &&\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (!this._connectivity) {\n        return;\n      }\n      await this.fetchData();\n      if (this._preloadPosts) {\n        this._preloadedPosts = {};\n        this._preloadGroupPosts(true);\n      }\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._auth.loggedIn &&\n      this._appFeatures.ready &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      (!this._storage || this._storage.ready) &&\n      (!this._readyCheckFn || this._readyCheckFn()) &&\n      (!this._subscription || this._subscription.ready) &&\n      (!this._glipPosts || this._glipPosts.ready) &&\n      (!this._glipPersons || this._glipPersons.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return !!(\n      (!this._auth.loggedIn ||\n        !this._appFeatures.ready ||\n        (this._storage && !this._storage.ready) ||\n        (this._readyCheckFn && !this._readyCheckFn()) ||\n        (this._subscription && !this._subscription.ready) ||\n        (this._glipPosts && !this._glipPosts.ready) ||\n        (this._glipPersons && !this._glipPersons.ready) ||\n        (this._connectivityMonitor && !this._connectivityMonitor.ready) ||\n        (this._tabManager && !this._tabManager.ready)) &&\n      this.ready\n    );\n  }\n\n  _shouldHandleSubscriptionMessage() {\n    return !!(\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    );\n  }\n\n  _onDataReady() {\n    if (this._glipPersons) {\n      this._glipPersons.loadPersons(this.groupMemberIds);\n    }\n    if (this._preloadPosts) {\n      this._preloadedPosts = {};\n      this._preloadGroupPosts();\n    }\n  }\n\n  async _subscriptionHandleFn(message) {\n    if (\n      message &&\n      glipGroupRegExp.test(message.event) &&\n      message.body &&\n      message.body.eventType\n    ) {\n      const { eventType, ...group } = message.body;\n      if (eventType.indexOf('Group') !== 0) {\n        return;\n      }\n      if (eventType === 'GroupLeft') {\n        this.store.dispatch({\n          type: this.actionTypes.removeGroup,\n          group,\n        });\n        return;\n      }\n      this.store.dispatch({\n        type: this.actionTypes.updateGroup,\n        group,\n      });\n      if (this._glipPersons) {\n        this._glipPersons.loadPersons(group.members);\n      }\n      this._glipPosts.loadPosts(group.id);\n    }\n  }\n\n  _shouldFetch() {\n    return !this._tabManager || this._tabManager.active;\n  }\n\n  _isDataReady() {\n    return (\n      this.status === moduleStatuses.initializing && this.timestamp !== null\n    );\n  }\n\n  async _init() {\n    if (!this._hasPermission) {\n      return;\n    }\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        console.error('fetchData error:', e);\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    if (this._subscription && this._subscriptionFilters) {\n      this._subscription.subscribe(this._subscriptionFilters);\n    }\n    if (this._connectivityMonitor) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n    }\n  }\n\n  _processSubscription() {\n    this._lastMessage = this._subscription.message;\n    this._subscriptionHandleFn(this._lastMessage);\n  }\n\n  async _preloadGroupPosts(force) {\n    const groups = this.groups.slice(0, 20);\n    for (const group of groups) {\n      if (!this._glipPosts) {\n        return;\n      }\n      if (!this._preloadedPosts[group.id]) {\n        this._preloadedPosts[group.id] = true;\n        if (!this._glipPosts.postsMap[group.id] || force) {\n          await sleep(this._preloadPostsDelayTtl);\n          if (!this._glipPosts.postsMap[group.id] || force) {\n            await this._glipPosts.fetchPosts(group.id);\n          }\n        }\n        if (!this._glipPosts.readTimeMap[group.id]) {\n          this._glipPosts.updateReadTime(\n            group.id,\n            Date.now() - 1000 * 3600 * 2,\n          );\n        }\n      }\n    }\n  }\n\n  @proxify\n  updateFilter({ searchFilter, pageNumber }) {\n    this.store.dispatch({\n      type: this.actionTypes.updateFilter,\n      searchFilter,\n      pageNumber,\n    });\n    if (this._preloadPosts && this.groups.length <= this._perPage * 2) {\n      this._preloadGroupPosts();\n    }\n  }\n\n  @proxify\n  updateCurrentGroupId(groupId) {\n    if (!groupId) {\n      return;\n    }\n    const lastGroupId = this.currentGroupId;\n    const lastGroupPosts = this.currentGroupPosts;\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentGroupId,\n      groupId,\n    });\n    if (this._glipPersons) {\n      this._glipPersons.loadPersons(\n        this.currentGroup && this.currentGroup.members,\n      );\n    }\n    if (!this._glipPosts) {\n      return;\n    }\n    if (lastGroupPosts.length > 20) {\n      this._glipPosts.fetchPosts(lastGroupId);\n    }\n    this._glipPosts.loadPosts(groupId);\n    this._glipPosts.updateReadTime(groupId);\n  }\n\n  async _fetchFunction() {\n    const result = await this._client.glip().groups().list({\n      recordCount: this._recordCountPerReq,\n    });\n    return result;\n  }\n\n  async _fetchData() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const data = await this._fetchFunction();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          data,\n          timestamp: Date.now(),\n        });\n        if (this._polling) {\n          this._startPolling();\n        }\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this._promise = null;\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    return this._promise;\n  }\n\n  @proxify\n  async startChat(personId) {\n    try {\n      const group = await this._client\n        .glip()\n        .groups()\n        .post({\n          type: 'PrivateChat',\n          members: [this._auth.ownerId, personId],\n        });\n      group.lastModifiedTime = Date.now();\n      this.store.dispatch({\n        type: this.actionTypes.updateGroup,\n        group,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.updateCurrentGroupId,\n        groupId: group.id,\n      });\n      return group;\n    } catch (e) {\n      console.error(e);\n    }\n    return null;\n  }\n\n  onNewPost(post) {\n    if (post.groupId === this.currentGroupId && this._glipPosts) {\n      this._glipPosts.updateReadTime(post.groupId);\n    }\n  }\n\n  async createTeam(name, members, type = 'Team') {\n    const group = await this._client.glip().groups().post({\n      type,\n      name,\n      members,\n      isPublic: true,\n      description: '',\n    });\n    return group.id;\n  }\n\n  @selector\n  allGroups = [\n    () => this.data,\n    () => this._glipPersons && this._glipPersons.personsMap,\n    () => this._glipPosts && this._glipPosts.postsMap,\n    () => this._auth.ownerId,\n    (data, personsMap = {}, postsMap = {}, ownerId) =>\n      (data || []).map((group) =>\n        formatGroup(group, personsMap, postsMap, ownerId),\n      ),\n  ];\n\n  @selector\n  filteredGroups = [\n    () => this.allGroups,\n    () => this.searchFilter,\n    () => this._glipPosts && this._glipPosts.postsMap,\n    (allGroups, searchFilter, postsMap = {}) => {\n      if (isBlank(searchFilter)) {\n        return allGroups;\n      }\n      const filterString = searchFilter.toLowerCase();\n      return allGroups.filter((group) => {\n        const name = group.name && group.name.toLowerCase();\n        if (name && name.indexOf(filterString) > -1) {\n          return true;\n        }\n        if (!name) {\n          const groupUsernames = group.detailMembers\n            .map((m) => `${m.firstName} ${m.lastName}`)\n            .join(' ')\n            .toLowerCase();\n          if (groupUsernames && groupUsernames.indexOf(filterString) > -1) {\n            return true;\n          }\n        }\n        const result = searchPosts(filterString, postsMap[group.id] || []);\n        return result;\n      });\n    },\n  ];\n\n  @selector\n  groups = [\n    () => this.filteredGroups,\n    (filteredGroups) => {\n      const sortedGroups = filteredGroups.sort((a, b) => {\n        if (a.updatedTime === b.updatedTime) return 0;\n        return a.updatedTime > b.updatedTime ? -1 : 1;\n      });\n      return sortedGroups;\n    },\n  ];\n\n  @selector\n  uniqueMemberIds = [() => this.allGroups, getUniqueMemberIds];\n\n  @selector\n  groupMemberIds = [\n    () => this.allGroups,\n    (groups) => {\n      const noTeamGroups = groups.filter((g) => g.type !== 'Team');\n      return getUniqueMemberIds(noTeamGroups);\n    },\n  ];\n\n  @selector\n  currentGroup = [\n    () => this.allGroups,\n    () => this.currentGroupId,\n    () => (this._glipPersons && this._glipPersons.personsMap) || {},\n    (allGroups, currentGroupId, personsMap) => {\n      const group = allGroups.find((g) => g.id === currentGroupId) || {};\n      return formatGroup(group, personsMap, undefined, this._auth.ownerId);\n    },\n  ];\n\n  @selector\n  currentGroupPosts = [\n    () => {\n      const postsMap = (this._glipPosts && this._glipPosts.postsMap) || {};\n      return postsMap[this.currentGroupId];\n    },\n    () => (this._glipPersons && this._glipPersons.personsMap) || {},\n    (posts, personsMap) => {\n      // const posts = postsMap[currentGroupId] || [];\n      const reversePosts = (posts || []).slice(0).reverse();\n      return reversePosts.map((post) => {\n        const creator = personsMap[post.creatorId];\n        return {\n          ...post,\n          sentByMe: post.creatorId === this._auth.ownerId,\n          creator,\n        };\n      });\n    },\n  ];\n\n  @selector\n  groupsWithUnread = [\n    () => this.groups,\n    () => (this._glipPosts && this._glipPosts.postsMap) || {},\n    () => (this._glipPosts && this._glipPosts.readTimeMap) || {},\n    (groups, postsMap, readTimeMap) =>\n      groups.map((group) => {\n        const posts = postsMap[group.id] || [];\n        const readTime = readTimeMap[group.id] || Date.now();\n        return {\n          ...group,\n          unread: posts.filter(\n            (post) =>\n              new Date(post.creationTime).getTime() > readTime &&\n              post.creatorId !== this._auth.ownerId,\n          ).length,\n        };\n      }),\n  ];\n\n  @selector\n  unreadCounts = [\n    () => this.groupsWithUnread,\n    (groups) => groups.reduce((a, b) => a + b.unread, 0),\n  ];\n\n  get searchFilter() {\n    return this.state.searchFilter;\n  }\n\n  get data() {\n    return this._storage\n      ? this._storage.getItem(this._dataStorageKey)\n      : this.state.data;\n  }\n\n  get timestamp() {\n    return this._storage\n      ? this._storage.getItem(this._timestampStorageKey)\n      : this.state.timestamp;\n  }\n\n  get currentGroupId() {\n    return this.state.currentGroupId;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get _hasPermission() {\n    return !!this._appFeatures.hasGlipPermission;\n  }\n}\n"],"file":"index.js"}