{"version":3,"sources":["modules/CompanyContactsV2/CompanyContacts.ts"],"names":["contactsRegExp","DEFAULT_TTL","DEFAULT_SHOW_DISABLED","DEFAULT_SHOW_NOT_ACTIVATED","DEFAULT_ALLOW_SETTINGS","DEFAULT_SELECTED_TYPES","extensionTypes","digitalUser","user","department","CompanyContacts","name","deps","dep","optional","selectedTypes","showDisabled","showNotActivated","data","_extensionFilter","_stopWatching","companyContactsOptions","ttl","polling","_source","DataSource","key","cleanOnReset","fetchFunction","params","_deps","client","account","directory","contacts","list","readyCheckFunction","extensionFeatures","ready","subscription","permissionCheckFunction","features","ReadExtensions","available","dataFetcherV2","register","message","disableCache","tabManager","active","test","event","body","eventType","oldEtag","newEtag","contact","item","id","updateData","Date","now","subscribe","subscriptionFilters","companyContacts","_handleSubscription","_showDisabled","_showNotActivated","extensionNumber","filteredContacts","concat","ivrContacts","allowSettings","_selectedTypes","typeFilter","acc","type","status","extensionStatusTypes","disabled","notActivated","ivrMenu","phoneNumbers","phonetype","phoneTypes","extension","phoneNumber","DataFetcherV2Consumer","storage","state","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;AASA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,cAAc,GAAG,0BAAvB;AAEA,IAAMC,WAAW,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAAnC;AACA,IAAMC,qBAAqB,GAAG,KAA9B;AACA,IAAMC,0BAA0B,GAAG,KAAnC;AACA,IAAMC,sBAAsB,GAAG,KAA/B;AAEA,IAAMC,sBAA+D,GAAG,CACtEC,+BAAeC,WADuD,EAEtED,+BAAeE,IAFuD,EAGtEF,+BAAeG,UAHuD,CAItE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZsE,CAAxE;IA2BaC,e,WAZZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,iBADA;AAENC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,mBAFI,EAGJ,eAHI,EAIJ,cAJI,EAKJ,SALI,EAMJ;AAAEC,IAAAA,GAAG,EAAE,YAAP;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GANI,EAOJ;AAAED,IAAAA,GAAG,EAAE,wBAAP;AAAiCC,IAAAA,QAAQ,EAAE;AAA3C,GAPI;AAFA,CAAP,C,UA2IE,oBACC;AAAA,MAAGC,aAAH,QAAGA,aAAH;AAAA,MAAkBC,YAAlB,QAAkBA,YAAlB;AAAA,MAAgCC,gBAAhC,QAAgCA,gBAAhC;AAAA,SAAwE,CACtEF,aADsE,EAEtEC,YAFsE,EAGtEC,gBAHsE,CAAxE;AAAA,CADD,C,UA4BA,oBAAS;AAAA,MAAGC,IAAH,SAAGA,IAAH;AAAA,MAASC,gBAAT,SAASA,gBAAT;AAAA,SAAiD,CACzDD,IADyD,EAEzDC,gBAFyD,CAAjD;AAAA,CAAT,C,UAQA,oBAAS;AAAA,MAAGD,IAAH,SAAGA,IAAH;AAAA,SAA+B,CAACA,IAAD,CAA/B;AAAA,CAAT,C;;;;;AA7JD,2BAAYN,IAAZ,EAAwB;AAAA;;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA;AADI,KAAN;AADsB,UAFdQ,aAEc,GAFe,IAEf;;AAAA;;AAAA;;AAAA;;AAAA,yCAKpBR,IAAI,CAACS,sBALe,yEAKW,EALX;AAAA,0BAIdC,GAJc;AAAA,QAIdA,GAJc,0BAIRrB,WAJQ;AAAA,8BAIKsB,OAJL;AAAA,QAIKA,OAJL,8BAIe,IAJf;;AAMtB,UAAKC,OAAL,GAAe,IAAIC,wBAAJ,iCACVb,IAAI,CAACS,sBADK;AAEbK,MAAAA,GAAG,EAAE,iBAFQ;AAGbH,MAAAA,OAAO,EAAPA,OAHa;AAIbD,MAAAA,GAAG,EAAHA,GAJa;AAKbK,MAAAA,YAAY,EAAE,IALD;AAMbC,MAAAA,aAAa;AAAA,qFAAE;AAAA;AAAA;AAAA;AAAA;AAAA,mDACb,2BAAU,UAACC,MAAD;AAAA,2BACR,MAAKC,KAAL,CAAWC,MAAX,CAAkBC,OAAlB,GAA4BC,SAA5B,GAAwCC,QAAxC,GAAmDC,IAAnD,CAAwDN,MAAxD,CADQ;AAAA,mBAAV,CADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SANA;AAUbO,MAAAA,kBAAkB,EAAE;AAAA,eAClB,MAAKN,KAAL,CAAWO,iBAAX,CAA6BC,KAA7B,IAAsC,MAAKR,KAAL,CAAWS,YAAX,CAAwBD,KAD5C;AAAA,OAVP;AAYbE,MAAAA,uBAAuB,EAAE;AAAA;;AAAA,kEACvB,MAAKV,KAAL,CAAWO,iBAAX,CAA6BI,QADN,qFACvB,uBAAuCC,cADhB,2DACvB,uBAAuDC,SADhC,yEAEvB,KAFuB;AAAA;AAZZ,OAAf;;AAgBA,UAAKb,KAAL,CAAWc,aAAX,CAAyBC,QAAzB,CAAkC,MAAKrB,OAAvC;;AAtBsB;AAuBvB,G,CAED;;;;;wCAC8BsB,O,EAAc;AAAA;;AAC1C,UACE,KAAKR,KAAL,KACC,KAAKd,OAAL,CAAauB,YAAb,wDAA8B,KAAKjB,KAAL,CAAWkB,UAAzC,2DAA8B,uBAAuBC,MAArD,yEAA+D,IAA/D,CADD,KAEAjD,cAAc,CAACkD,IAAf,CAAoBJ,OAApB,aAAoBA,OAApB,uBAAoBA,OAAO,CAAEK,KAA7B,CAFA,KAGAL,OAHA,aAGAA,OAHA,wCAGAA,OAAO,CAAEM,IAHT,kDAGA,cAAelB,QAHf,CADF,EAKE;AAAA;;AACA,YAAIhB,IAAI,iBAAG,KAAKA,IAAR,mDAAgB,EAAxB,CADA,CAEA;;AACA,4BAAQ,iBAAiD;AAAA,cAA9CmC,SAA8C,SAA9CA,SAA8C;AAAA,cAAnCC,OAAmC,SAAnCA,OAAmC;AAAA,cAA1BC,OAA0B,SAA1BA,OAA0B;AAAA,cAAdC,OAAc;;AACvD,cAAIH,SAAS,KAAK,QAAd,IAA0BA,SAAS,KAAK,QAA5C,EAAsD;AACpDnC,YAAAA,IAAI,gCAAO,mBAAO,UAACuC,IAAD;AAAA,qBAAUA,IAAI,CAACC,EAAL,KAAYF,OAAO,CAACE,EAA9B;AAAA,aAAP,EAAyCxC,IAAzC,CAAP,IAAuDsC,OAAvD,EAAJ;AACD,WAFD,MAEO,IAAIH,SAAS,KAAK,QAAlB,EAA4B;AACjCnC,YAAAA,IAAI,sBAAO,mBAAO,UAACuC,IAAD;AAAA,qBAAUA,IAAI,CAACC,EAAL,KAAYF,OAAO,CAACE,EAA9B;AAAA,aAAP,EAAyCxC,IAAzC,CAAP,CAAJ;AACD;AACF,SAND,EAMG4B,OAAO,CAACM,IAAR,CAAalB,QANhB;;AAOA,aAAKJ,KAAL,CAAWc,aAAX,CAAyBe,UAAzB,CAAoC,KAAKnC,OAAzC,EAAkDN,IAAlD,EAAwD0C,IAAI,CAACC,GAAL,EAAxD;AACD;AACF;;;6BAEQ;AAAA;;AACP,WAAK/B,KAAL,CAAWS,YAAX,CAAwBuB,SAAxB,CAAkC,CAACC,yCAAoBC,eAArB,CAAlC;;AACA,WAAK5C,aAAL,GAAqB,iBACnB,IADmB,EAEnB;AAAA,eAAM,MAAI,CAACU,KAAL,CAAWS,YAAX,CAAwBO,OAA9B;AAAA,OAFmB,EAGnB,UAACA,OAAD;AAAA,eAAa,MAAI,CAACmB,mBAAL,CAAyBnB,OAAzB,CAAb;AAAA,OAHmB,CAArB;AAKD;;;8BAES;AAAA;;AACR,kCAAK1B,aAAL;AACA,WAAKA,aAAL,GAAqB,IAArB;AACD;;;oCAyBeJ,Y,EAAuB;AACrC,WAAKkD,aAAL,GAAqBlD,YAArB;AACD;;;wCAGmBC,gB,EAA2B;AAC7C,WAAKkD,iBAAL,GAAyBlD,gBAAzB;AACD;;;yCAuFoBmD,e,EAAyB;AAC5C,aAAO,CAAC,CAAC,iBACP,UAACX,IAAD;AAAA,eAAUA,IAAI,CAACW,eAAL,KAAyBA,eAAnC;AAAA,OADO,EAEP,KAAKC,gBAAL,CAAsBC,MAAtB,CAA6B,KAAKC,WAAlC,CAFO,CAAT;AAID;;;wBA1HmB;AAAA;;AAClB,gEACE,KAAKzC,KAAL,CAAWT,sBADb,2DACE,uBAAmCmD,aADrC,yEACsDpE,sBADtD;AAGD;;;wBAUoB;AACnB,aAAOE,8BAAP;AACD;;;wBAgBkB;AAAA;;AACjB,sBACG,KAAKkE,aAAL,0BACG,KAAKN,aADR,+FACyB,KAAKpC,KAAL,CAAWT,sBADpC,2DACyB,uBAAmCL,YAD5D,6BAEG,KAAKc,KAAL,CAAWT,sBAFd,2DAEG,uBAAmCL,YAHzC,yCAIEd,qBAJF;AAMD;;;wBAEsB;AAAA;;AACrB,sBACG,KAAKsE,aAAL,4BACG,KAAKL,iBADR,mGAEG,KAAKrC,KAAL,CAAWT,sBAFd,2DAEG,uBAAmCJ,gBAFtC,6BAGG,KAAKa,KAAL,CAAWT,sBAHd,2DAGG,uBAAmCJ,gBAJzC,yCAKEd,0BALF;AAOD;;;wBAEmB;AAAA;;AAClB,sBACG,KAAKqE,aAAL,2BACG,KAAKC,cADR,iGAEG,KAAK3C,KAAL,CAAWT,sBAFd,2DAEG,uBAAmCN,aAFtC,6BAGG,KAAKe,KAAL,CAAWT,sBAHd,2DAGG,uBAAmCN,aAJzC,yCAKEV,sBALF;AAOD;;;wBASsB;AAAA;;AACrB,UAAMqE,UAAU,GAAG,mBACjB,UAACC,GAAD,EAAMC,IAAN,EAAe;AACbD,QAAAA,GAAG,CAACC,IAAD,CAAH,GAAY,IAAZ;AACA,eAAOD,GAAP;AACD,OAJgB,EAKjB,EALiB,EAMjB,KAAK5D,aANY,CAAnB;AAQA,aAAO,mBACL,UAAC0C,IAAD;AAAA,eACE,EACG,CAAC,MAAI,CAACzC,YAAN,IACCyC,IAAI,CAACoB,MAAL,KAAgBC,2CAAqBC,QADvC,IAEC,CAAC,MAAI,CAAC9D,gBAAN,IACCwC,IAAI,CAACoB,MAAL,KAAgBC,2CAAqBE,YAHvC,IAIA,CAACN,UAAU,CAACjB,IAAI,CAACmB,IAAN,CALb,CADF;AAAA,OADK,CAAP;AAUD;;;wBAMsB;AAAA;;AACrB,aAAO,KAAKzD,gBAAL,gBAAsB,KAAKD,IAA3B,qDAAmC,EAAnC,CAAP;AACD;;;wBAGiB;AAAA;;AAChB,UAAMqD,WAAW,GAAG,mBAClB,UAACd,IAAD;AAAA,eAAUA,IAAI,CAACmB,IAAL,KAActE,+BAAe2E,OAAvC;AAAA,OADkB,iBAElB,KAAK/D,IAFa,qDAEL,EAFK,CAApB;AAIA,aAAO,gBAAI,UAACuC,IAAD,EAAU;AAAA;;AACnB,+CACKA,IADL;AAEEyB,UAAAA,YAAY,qDACNzB,IAAI,CAACyB,YADC,mEACe,EADf,IAEV;AACEC,YAAAA,SAAS,EAAEC,uBAAWC,SADxB;AAEEC,YAAAA,WAAW,EAAE7B,IAAI,CAACW;AAFpB,WAFU;AAFd;AAUD,OAXM,EAWJG,WAXI,CAAP;AAYD;;;;EArLkCgB,mC,iFAwElCC,a,EACAC,W;;;;;WACwB,I;;sFAExBD,a,EACAC,W;;;;;WAC4B,I;;mFAM5BD,a,EACAC,W;;;;;WACyD,I;;qEAEzDC,Y,mKAKAA,Y","sourcesContent":["import { filter, find, forEach, map, reduce, reject } from 'ramda';\nimport { Unsubscribe } from 'redux';\n\nimport { ContactResource } from '@rc-ex/core/definitions';\nimport {\n  action,\n  computed,\n  state,\n  storage,\n  watch,\n} from '@ringcentral-integration/core';\nimport { ObjectMapValue } from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport { extensionStatusTypes } from '../../enums/extensionStatusTypes';\nimport { extensionTypes } from '../../enums/extensionTypes';\nimport { phoneTypes } from '../../enums/phoneTypes';\nimport { subscriptionFilters } from '../../enums/subscriptionFilters';\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport { Deps } from './CompanyContacts.interface';\n\n/**\n * TODO:\n * 1. Consider moving the filters to some UI module for display contact list\n * 2. Find out whether there are other types should be searchable/matchable, but hidden in contact lists\n * 3. Find out whether isAvailableExtension can be better defined in our business logic layer\n * 4. Standardize and remove the IVR contacts special treatments\n */\n\nconst contactsRegExp = /.*\\/directory\\/contacts$/;\n\nconst DEFAULT_TTL = 24 * 60 * 60 * 1000;\nconst DEFAULT_SHOW_DISABLED = false;\nconst DEFAULT_SHOW_NOT_ACTIVATED = false;\nconst DEFAULT_ALLOW_SETTINGS = false;\n\nconst DEFAULT_SELECTED_TYPES: ObjectMapValue<typeof extensionTypes>[] = [\n  extensionTypes.digitalUser,\n  extensionTypes.user,\n  extensionTypes.department,\n  // extensionTypes.limited,\n  // extensionTypes.announcement,\n  // extensionTypes.applicationExtension,\n  // extensionTypes.bot,\n  // extensionTypes.faxUser,\n  // extensionTypes.ivrMenu,\n  // extensionTypes.pagingOnly,\n  // extensionTypes.parkLocation,\n  // extensionTypes.sharedLinesGroup,\n];\n\n@Module({\n  name: 'CompanyContacts',\n  deps: [\n    'Client',\n    'ExtensionFeatures',\n    'DataFetcherV2',\n    'Subscription',\n    'Storage',\n    { dep: 'TabManager', optional: true },\n    { dep: 'CompanyContactsOptions', optional: true },\n  ],\n})\nexport class CompanyContacts extends DataFetcherV2Consumer<\n  Deps,\n  ContactResource[]\n> {\n  protected _stopWatching: Unsubscribe = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    const { ttl = DEFAULT_TTL, polling = true } =\n      deps.companyContactsOptions ?? {};\n    this._source = new DataSource({\n      ...deps.companyContactsOptions,\n      key: 'companyContacts',\n      polling,\n      ttl,\n      cleanOnReset: true,\n      fetchFunction: async (): Promise<ContactResource[]> =>\n        fetchList((params: any) =>\n          this._deps.client.account().directory().contacts().list(params),\n        ),\n      readyCheckFunction: () =>\n        this._deps.extensionFeatures.ready && this._deps.subscription.ready,\n      permissionCheckFunction: () =>\n        this._deps.extensionFeatures.features?.ReadExtensions?.available ??\n        false,\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  // company directory events is missing in official swagger spec\n  protected _handleSubscription(message: any) {\n    if (\n      this.ready &&\n      (this._source.disableCache || (this._deps.tabManager?.active ?? true)) &&\n      contactsRegExp.test(message?.event) &&\n      message?.body?.contacts\n    ) {\n      let data = this.data ?? [];\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      forEach(({ eventType, oldEtag, newEtag, ...contact }) => {\n        if (eventType === 'Create' || eventType === 'Update') {\n          data = [...reject((item) => item.id === contact.id, data), contact];\n        } else if (eventType === 'Delete') {\n          data = [...reject((item) => item.id === contact.id, data)];\n        }\n      }, message.body.contacts);\n      this._deps.dataFetcherV2.updateData(this._source, data, Date.now());\n    }\n  }\n\n  onInit() {\n    this._deps.subscription.subscribe([subscriptionFilters.companyContacts]);\n    this._stopWatching = watch(\n      this,\n      () => this._deps.subscription.message,\n      (message) => this._handleSubscription(message),\n    );\n  }\n\n  onReset() {\n    this._stopWatching?.();\n    this._stopWatching = null;\n  }\n\n  get allowSettings() {\n    return (\n      this._deps.companyContactsOptions?.allowSettings ?? DEFAULT_ALLOW_SETTINGS\n    );\n  }\n\n  @storage\n  @state\n  _showDisabled: boolean = null;\n\n  @storage\n  @state\n  _showNotActivated: boolean = null;\n\n  get extensionTypes() {\n    return extensionTypes;\n  }\n\n  @storage\n  @state\n  _selectedTypes: ObjectMapValue<typeof extensionTypes>[] = null;\n\n  @action\n  setShowDisabled(showDisabled: boolean) {\n    this._showDisabled = showDisabled;\n  }\n\n  @action\n  setShowNotActivated(showNotActivated: boolean) {\n    this._showNotActivated = showNotActivated;\n  }\n\n  get showDisabled() {\n    return (\n      (this.allowSettings\n        ? this._showDisabled ?? this._deps.companyContactsOptions?.showDisabled\n        : this._deps.companyContactsOptions?.showDisabled) ??\n      DEFAULT_SHOW_DISABLED\n    );\n  }\n\n  get showNotActivated() {\n    return (\n      (this.allowSettings\n        ? this._showNotActivated ??\n          this._deps.companyContactsOptions?.showNotActivated\n        : this._deps.companyContactsOptions?.showNotActivated) ??\n      DEFAULT_SHOW_NOT_ACTIVATED\n    );\n  }\n\n  get selectedTypes() {\n    return (\n      (this.allowSettings\n        ? this._selectedTypes ??\n          this._deps.companyContactsOptions?.selectedTypes\n        : this._deps.companyContactsOptions?.selectedTypes) ??\n      DEFAULT_SELECTED_TYPES\n    );\n  }\n\n  @computed(\n    ({ selectedTypes, showDisabled, showNotActivated }: CompanyContacts) => [\n      selectedTypes,\n      showDisabled,\n      showNotActivated,\n    ],\n  )\n  get _extensionFilter() {\n    const typeFilter = reduce(\n      (acc, type) => {\n        acc[type] = true;\n        return acc;\n      },\n      {} as Record<string, boolean>,\n      this.selectedTypes,\n    );\n    return filter<ContactResource>(\n      (item) =>\n        !(\n          (!this.showDisabled &&\n            item.status === extensionStatusTypes.disabled) ||\n          (!this.showNotActivated &&\n            item.status === extensionStatusTypes.notActivated) ||\n          !typeFilter[item.type]\n        ),\n    );\n  }\n\n  @computed(({ data, _extensionFilter }: CompanyContacts) => [\n    data,\n    _extensionFilter,\n  ])\n  get filteredContacts() {\n    return this._extensionFilter(this.data ?? []);\n  }\n\n  @computed(({ data }: CompanyContacts) => [data])\n  get ivrContacts() {\n    const ivrContacts = filter(\n      (item) => item.type === extensionTypes.ivrMenu,\n      this.data ?? [],\n    );\n    return map((item) => {\n      return {\n        ...item,\n        phoneNumbers: [\n          ...(item.phoneNumbers ?? []),\n          {\n            phonetype: phoneTypes.extension,\n            phoneNumber: item.extensionNumber,\n          },\n        ],\n      };\n    }, ivrContacts);\n  }\n\n  isAvailableExtension(extensionNumber: string) {\n    return !!find(\n      (item) => item.extensionNumber === extensionNumber,\n      this.filteredContacts.concat(this.ivrContacts),\n    );\n  }\n}\n"],"file":"CompanyContacts.js"}