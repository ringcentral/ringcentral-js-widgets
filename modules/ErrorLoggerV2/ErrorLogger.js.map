{"version":3,"sources":["modules/ErrorLoggerV2/ErrorLogger.ts"],"names":["ErrorLogger","name","deps","dep","optional","_sentryInitialized","appName","_deps","brandConfig","appBrand","code","errorLoggerOptions","appVersion","environment","sentryConfig","endpoint","_bootstrap","setTags","release","Sentry","init","dsn","sampleRate","enabled","ignoreErrors","auth","loggedIn","user","id","ownerId","setUser","configureScope","scope","tags","message","level","eventId","captureMessage","error","captureException","log","Severity","Debug","RcModuleV2"],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/browser';\nimport { RcModuleV2, watch } from '@ringcentral-integration/core';\nimport { Module } from '../../lib/di';\nimport { SentryConfig, Deps, User, Severity } from './ErrorLogger.interface';\n\n@Module({\n  name: 'ErrorLogger',\n  deps: [\n    'BrandConfig',\n    { dep: 'Auth', optional: true },\n    { dep: 'ErrorLoggerOptions', optional: true },\n  ],\n})\nexport class ErrorLogger extends RcModuleV2<Deps> {\n  private _sentryInitialized = false;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    const appName = this._deps.brandConfig.appName;\n    const appBrand = this._deps.brandConfig.code;\n    const { appVersion, environment, sentryConfig } =\n      this._deps.errorLoggerOptions ?? {};\n    if (sentryConfig?.endpoint) {\n      this._bootstrap({\n        sentryConfig,\n        environment,\n      });\n      this.setTags({\n        'app.name': appName,\n        'app.brand': appBrand,\n        'app.version': appVersion,\n      });\n    }\n  }\n\n  private _bootstrap({\n    sentryConfig,\n    environment,\n    release,\n  }: {\n    sentryConfig: SentryConfig;\n    environment: string;\n    release?: string;\n  }): void {\n    Sentry.init({\n      dsn: sentryConfig.endpoint,\n      sampleRate: sentryConfig.sampleRate,\n      environment,\n      release,\n      enabled: true,\n      ignoreErrors: [\n        '200 OK',\n        'Failed to fetch',\n        'Request Timeout',\n        'Service is overloaded',\n        'In order to call this API endpoint, user needs to have [ReadCallLog] permission for requested resource',\n        'INVALID_STATE_ERROR: Invalid status: 11',\n        'INVALID_STATE_ERROR: Invalid status: 1',\n        'rateLimiterErrorMessages-rateLimitReached',\n      ],\n    });\n    this._sentryInitialized = true;\n  }\n\n  onInitOnce() {\n    if (this._sentryInitialized && this._deps.auth) {\n      watch(\n        this,\n        () => this._deps.auth.loggedIn,\n        (loggedIn) => {\n          if (loggedIn) {\n            // set user\n            const user: User = {\n              id: this._deps.auth.ownerId,\n            };\n            this.setUser(user);\n          }\n        },\n      );\n    }\n  }\n\n  setUser(user: User) {\n    Sentry.configureScope((scope) => {\n      scope.setUser(user);\n    });\n  }\n\n  setTags(tags: Record<string, string>) {\n    Sentry.configureScope((scope) => {\n      scope.setTags(tags);\n    });\n  }\n\n  log(message: string, level?: Severity) {\n    const eventId = Sentry.captureMessage(message, level);\n    return eventId;\n  }\n\n  logError(error: any) {\n    const eventId = Sentry.captureException(error);\n    return eventId;\n  }\n\n  test(message: string = '[test] error logger') {\n    const eventId = this.log(message, Severity.Debug);\n    return eventId;\n  }\n}\n"],"file":"ErrorLogger.js"}