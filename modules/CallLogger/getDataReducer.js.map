{"version":3,"sources":["modules/CallLogger/getDataReducer.ts"],"names":["DEFAULT_OPACITY","getLogOnRingingReducer","types","state","type","logOnRinging","setLogOnRinging","getAutoLogReducer","initialState","autoLog","setAutoLog","getTransferredCallsReducer","opacity","sessionId","transferredMiddleNumber","addTransferredCall","slice","length","getDataReducer","transferredCallsMap"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,EAAxB;;AAEO,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,SAAO,YAA0C;AAAA,QAAzCC,KAAyC,uEAAjC,IAAiC;;AAAA;AAAA,QAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,QAAnBC,YAAmB,QAAnBA,YAAmB;;AAC/C,QAAID,IAAI,KAAKF,KAAK,CAACI,eAAnB,EAAoC,OAAO,CAAC,CAACD,YAAT;AACpC,WAAOF,KAAP;AACD,GAHD;AAID;;AAEM,SAASI,iBAAT,CAA2BL,KAA3B,EAAuD;AAAA,MAArBM,YAAqB,uEAAN,IAAM;AAC5D,SAAO,YAA6C;AAAA,QAA5CL,KAA4C,uEAApCK,YAAoC;;AAAA;AAAA,QAApBJ,IAAoB,SAApBA,IAAoB;AAAA,QAAdK,OAAc,SAAdA,OAAc;;AAClD,QAAIL,IAAI,KAAKF,KAAK,CAACQ,UAAnB,EAA+B,OAAO,CAAC,CAACD,OAAT;AAC/B,WAAON,KAAP;AACD,GAHD;AAID;;AAEM,SAASQ,0BAAT,CAAoCT,KAApC,EAAsE;AAAA,MAA3BU,OAA2B,uEAAjBZ,eAAiB;AAC3E,SAAO,YAA8D;AAAA,QAA7DG,KAA6D,uEAArD,EAAqD;;AAAA;AAAA,QAA/CC,IAA+C,SAA/CA,IAA+C;AAAA,QAAzCS,SAAyC,SAAzCA,SAAyC;AAAA,QAA9BC,uBAA8B,SAA9BA,uBAA8B;;AACnE,QAAIV,IAAI,KAAKF,KAAK,CAACa,kBAAnB,EAAuC;AACrC,0CACKZ,KAAK,CAACa,KAAN,CAAYb,KAAK,CAACc,MAAN,IAAgBL,OAAhB,GAA0B,CAA1B,GAA8B,CAA1C,EAA6CA,OAA7C,CADL,wBAEKC,SAFL,EAEiB;AAAEC,QAAAA,uBAAuB,EAAvBA;AAAF,OAFjB;AAID;;AACD,WAAOX,KAAP;AACD,GARD;AASD;AAED;;;AACe,SAASe,cAAT,CAAwBhB,KAAxB,EAAkD;AAAA,MAAnBM,YAAmB,uEAAJ,EAAI;AAC/D,SAAO,4BAAgB;AACrBC,IAAAA,OAAO,EAAEF,iBAAiB,CAACL,KAAD,EAAQM,YAAY,CAACC,OAArB,CADL;AAErBJ,IAAAA,YAAY,EAAEJ,sBAAsB,CAACC,KAAD,CAFf;AAGrBiB,IAAAA,mBAAmB,EAAER,0BAA0B,CAACT,KAAD;AAH1B,GAAhB,CAAP;AAKD","sourcesContent":["import { combineReducers } from 'redux';\n\nconst DEFAULT_OPACITY = 20;\n\nexport function getLogOnRingingReducer(types) {\n  return (state = true, { type, logOnRinging }) => {\n    if (type === types.setLogOnRinging) return !!logOnRinging;\n    return state;\n  };\n}\n\nexport function getAutoLogReducer(types, initialState = true) {\n  return (state = initialState, { type, autoLog }) => {\n    if (type === types.setAutoLog) return !!autoLog;\n    return state;\n  };\n}\n\nexport function getTransferredCallsReducer(types, opacity = DEFAULT_OPACITY) {\n  return (state = [], { type, sessionId, transferredMiddleNumber }) => {\n    if (type === types.addTransferredCall) {\n      return [\n        ...state.slice(state.length >= opacity ? 1 : 0, opacity),\n        { [sessionId]: { transferredMiddleNumber } },\n      ];\n    }\n    return state;\n  };\n}\n\n/* istanbul ignore next */\nexport default function getDataReducer(types, initialState = {}) {\n  return combineReducers({\n    autoLog: getAutoLogReducer(types, initialState.autoLog),\n    logOnRinging: getLogOnRingingReducer(types),\n    transferredCallsMap: getTransferredCallsReducer(types),\n  });\n}\n"],"file":"getDataReducer.js"}