{"version":3,"file":"CallLogger.interface.js","names":[],"sources":["modules/CallLogger/CallLogger.interface.ts"],"sourcesContent":["import type { CallLoggerTriggerType } from '../../enums/callLoggerTriggerTypes';\nimport type { Entity } from '../../interfaces/Entity.interface';\nimport type { ActiveCall } from '../../interfaces/Presence.model';\nimport type { LogOptions as BaseLogOptions } from '../../lib/LoggerBase';\nimport type { ActivityMatcher } from '../ActivityMatcher';\nimport type { CallHistory, HistoryCall } from '../CallHistory';\nimport type { CallMonitor } from '../CallMonitor';\nimport type { ContactMatcher } from '../ContactMatcher';\nimport type { Storage } from '../Storage';\nimport type { TabManager } from '../TabManager';\n\nexport interface CallLoggerOptions {\n  autoLog?: boolean;\n  logFunction: <P, S>(options: BaseLogOptions<P, S>) => Promise<void>;\n  readyCheckFunction: () => boolean;\n}\n\nexport interface Deps {\n  storage: Storage;\n  callHistory: CallHistory;\n  callMonitor: CallMonitor;\n  callLoggerOptions: CallLoggerOptions;\n  activityMatcher?: ActivityMatcher;\n  contactMatcher?: ContactMatcher;\n  tabManager?: TabManager;\n}\n\nexport type Hook = (sessionId: string) => boolean;\n\nexport type UpdatedCallLog = HistoryCall & {\n  isTransferredCall: boolean;\n  transferredMiddleNumber: string;\n};\n\nexport type UpdatedCallMap = {\n  presenceUpdate: ActiveCall & {\n    isTransferredCall: boolean;\n    transferredMiddleNumber: string;\n    phoneNumberUpdated?: boolean;\n  };\n  callLogSync: UpdatedCallLog;\n};\n\nexport type UpdatedCall<T extends keyof UpdatedCallMap> = UpdatedCallMap[T];\n\nexport type LogCallOptions<T> = {\n  call: HistoryCall | ActiveCall;\n  contact: Entity;\n} & T;\n\nexport interface AutoLogCallOptions {\n  call: HistoryCall | ActiveCall;\n  fromEntity?: Entity;\n  toEntity?: Entity;\n  triggerType: CallLoggerTriggerType;\n}\n\nexport interface TransferredCall {\n  transferredMiddleNumber: string;\n}\n\nexport type LogOptions<T> = {\n  // TODO: fix type for sessionId\n  call: Record<string, any> & {\n    // sessionId: string;\n    duration: number;\n    result: ActiveCall['result'] | HistoryCall['telephonyStatus'];\n  };\n  fromEntity?: Entity;\n  toEntity?: Entity;\n} & T;\n"],"mappings":"","ignoreList":[]}