{"version":3,"sources":["modules/CallLogger/index.ts"],"names":["callIdentityFunction","call","sessionId","CallLogger","deps","dep","optional","storage","activityMatcher","callHistory","callMonitor","contactMatcher","tabManager","initialState","options","name","actionTypes","getDataReducer","identityFunction","_storage","ensureExist","_callMonitor","_contactMatcher","_activityMatcher","_callHistory","_tabManager","_storageKey","_name","registerReducer","key","reducer","_lastProcessedCalls","_lastProcessedEndedCalls","_customMatcherHooks","pending","ready","_readyCheckFunction","item","checkIsMain","isActive","_ensureActive","autoLog","logOnRinging","contact","inbound","fromEntity","toEntity","log","duration","Object","prototype","hasOwnProperty","Math","round","Date","now","startTime","result","telephonyStatus","triggerType","dataMapping","length","some","hook","push","_shouldLogNewCall","triggerMatch","_activityMatcherCheck","_customMatcherCheck","toNumberEntity","fromMatches","from","phoneNumber","toMatches","to","find","match","id","_autoLogCall","activityMatches","_shouldLogUpdatedCall","calls","oldCalls","slice","forEach","oldCallIndex","findIndex","_onNewCall","callLoggerTriggerTypes","presenceUpdate","oldCall","splice","_onCallUpdated","isTransferredCall","transferredCallsMap","transferredMiddleNumber","store","dispatch","type","addTransferredCall","phoneNumberUpdated","recentlyEndedCalls","currentSessions","callInfo","callLogSync","_processCalls","setAutoLog","setLogOnRinging","getItem","LoggerBase","proxify","selector","transferredCallsArr","mapping","matcher","assign"],"mappings":"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","sourcesContent":["import { reduce } from 'ramda';\n\nimport callLoggerTriggerTypes from '../../enums/callLoggerTriggerTypes';\nimport {\n  isInbound,\n  isRinging,\n  removeDuplicateSelfCalls,\n} from '../../lib/callLogHelpers';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport LoggerBase from '../../lib/LoggerBase';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\n\n/**\n * @function\n * @description Identity function for calls.\n * @param {Object} call - call object\n * @return {String} sessionId\n */\nexport function callIdentityFunction(call) {\n  return call.sessionId;\n}\n\n/**\n * @class\n * @description call logger module\n */\n@Module({\n  deps: [\n    'Storage',\n    { dep: 'ActivityMatcher', optional: true },\n    'CallHistory',\n    'CallMonitor',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'CallLoggerOptions', optional: true },\n  ],\n})\nexport default class CallLogger extends LoggerBase {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Storage} params.storage - storage module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {CallHistory} params.callHistory - callHistory module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   */\n  constructor({\n    storage,\n    activityMatcher,\n    callHistory,\n    callMonitor,\n    contactMatcher,\n    tabManager,\n    initialState,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'callLogger',\n      actionTypes,\n      getDataReducer,\n      identityFunction: callIdentityFunction,\n    });\n    this._storage = ensureExist.call(this, storage, 'storage');\n    this._callMonitor = ensureExist.call(this, callMonitor, 'callMonitor');\n    this._contactMatcher = ensureExist.call(\n      this,\n      contactMatcher,\n      'contactMatcher',\n    );\n    this._activityMatcher = ensureExist.call(\n      this,\n      activityMatcher,\n      'activityMatcher',\n    );\n    this._callHistory = callHistory;\n    this._tabManager = tabManager;\n    this._storageKey = `${this._name}Data`;\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes, initialState),\n    });\n    this._lastProcessedCalls = null;\n    this._lastProcessedEndedCalls = null;\n    this._customMatcherHooks = [];\n  }\n\n  _onReset() {\n    this._lastProcessedCalls = null;\n    this._lastProcessedEndedCalls = null;\n  }\n\n  _shouldInit() {\n    return (\n      this.pending &&\n      this._callMonitor.ready &&\n      (!this._callHistory || this._callHistory.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._contactMatcher.ready &&\n      this._activityMatcher.ready &&\n      this._readyCheckFunction() &&\n      this._storage.ready\n    );\n  }\n\n  _shouldReset() {\n    return (\n      this.ready &&\n      (!this._callMonitor.ready ||\n        !this._callMonitor.ready ||\n        (this._callHistory && !this._callHistory.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._contactMatcher.ready ||\n        !this._activityMatcher.ready ||\n        !this._readyCheckFunction() ||\n        !this._storage.ready)\n    );\n  }\n\n  @proxify\n  async log({ call, ...options }) {\n    return super.log({ item: call, ...options });\n  }\n\n  async _ensureActive() {\n    const isActive =\n      !this._tabManager || (await this._tabManager.checkIsMain());\n    return isActive;\n  }\n\n  async _shouldLogNewCall(call) {\n    const isActive = await this._ensureActive();\n    return isActive && this.autoLog && (this.logOnRinging || !isRinging(call));\n  }\n\n  @proxify\n  async logCall({ call, contact, ...options }) {\n    const inbound = isInbound(call);\n    const fromEntity = (inbound && contact) || null;\n    const toEntity = (!inbound && contact) || null;\n    await this.log({\n      ...options,\n      call: {\n        ...call,\n        duration: Object.prototype.hasOwnProperty.call(call, 'duration')\n          ? call.duration\n          : Math.round((Date.now() - call.startTime) / 1000),\n        result: call.result || call.telephonyStatus,\n      },\n      fromEntity,\n      toEntity,\n    });\n  }\n\n  async _autoLogCall({ call, fromEntity, toEntity, triggerType }) {\n    if (!this.ready) {\n      return;\n    }\n    await this.log({\n      call: {\n        ...call,\n        duration: Object.prototype.hasOwnProperty.call(call, 'duration')\n          ? call.duration\n          : Math.round((Date.now() - call.startTime) / 1000),\n        result: call.result || call.telephonyStatus,\n      },\n      fromEntity,\n      toEntity,\n      triggerType,\n    });\n  }\n\n  _activityMatcherCheck(sessionId) {\n    return (\n      !this._activityMatcher.dataMapping[sessionId] ||\n      !this._activityMatcher.dataMapping[sessionId].length\n    );\n  }\n\n  _customMatcherCheck(sessionId) {\n    if (!this._customMatcherHooks.length) {\n      return true;\n    }\n    return this._customMatcherHooks.some((hook) => hook(sessionId));\n  }\n\n  addCustomMatcherHook(hook) {\n    this._customMatcherHooks.push(hook);\n  }\n\n  async _onNewCall(call, triggerType) {\n    if (await this._shouldLogNewCall(call)) {\n      // RCINT-3857 check activity in case instance was reloaded when call is still active\n      await this._activityMatcher.triggerMatch();\n      if (\n        this._activityMatcherCheck(call.sessionId) &&\n        this._customMatcherCheck(call.sessionId)\n      ) {\n        // is completely new, need entity information\n        await this._contactMatcher.triggerMatch();\n\n        const toNumberEntity = call.toNumberEntity || '';\n\n        const fromMatches =\n          (call.from &&\n            call.from.phoneNumber &&\n            this._contactMatcher.dataMapping[call.from.phoneNumber]) ||\n          [];\n\n        const toMatches =\n          (call.to &&\n            call.to.phoneNumber &&\n            this._contactMatcher.dataMapping[call.to.phoneNumber]) ||\n          [];\n\n        const fromEntity =\n          (fromMatches && fromMatches.length === 1 && fromMatches[0]) || null;\n\n        let toEntity = null;\n        if (toMatches && toMatches.length === 1) {\n          /* eslint { \"prefer-destructuring\": 0 } */\n          toEntity = toMatches[0];\n        } else if (toMatches && toMatches.length > 1 && toNumberEntity !== '') {\n          toEntity = toMatches.find((match) => toNumberEntity === match.id);\n        }\n\n        await this._autoLogCall({\n          call,\n          fromEntity,\n          toEntity,\n          triggerType,\n        });\n      } else {\n        // only update call information if call has been logged\n        await this._autoLogCall({\n          call,\n          triggerType,\n        });\n      }\n    }\n  }\n\n  async _shouldLogUpdatedCall(call) {\n    const isActive = await this._ensureActive();\n    if (isActive && (this.logOnRinging || !isRinging(call))) {\n      if (this.autoLog) return true;\n      await this._activityMatcher.triggerMatch();\n      const activityMatches =\n        this._activityMatcher.dataMapping[call.sessionId] || [];\n      return activityMatches.length > 0;\n    }\n    return false;\n  }\n\n  async _onCallUpdated(call, triggerType) {\n    if (await this._shouldLogUpdatedCall(call)) {\n      await this._autoLogCall({ call, triggerType });\n    }\n  }\n\n  _processCalls() {\n    if (this.ready) {\n      if (this._lastProcessedCalls !== this._callMonitor.calls) {\n        const oldCalls =\n          (this._lastProcessedCalls && this._lastProcessedCalls.slice()) || [];\n        this._lastProcessedCalls = this._callMonitor.calls;\n\n        removeDuplicateSelfCalls(this._lastProcessedCalls).forEach((call) => {\n          const oldCallIndex = oldCalls.findIndex(\n            (item) => item.sessionId === call.sessionId,\n          );\n          if (oldCallIndex === -1) {\n            this._onNewCall(call, callLoggerTriggerTypes.presenceUpdate);\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (call.telephonyStatus !== oldCall.telephonyStatus) {\n              this._onCallUpdated(\n                {\n                  ...call,\n                  isTransferredCall: !!this.transferredCallsMap[call.sessionId],\n                  transferredMiddleNumber: this.transferredCallsMap[\n                    call.sessionId\n                  ]\n                    ? this.transferredCallsMap[call.sessionId]\n                        .transferredMiddleNumber\n                    : null,\n                },\n                callLoggerTriggerTypes.presenceUpdate,\n              );\n            }\n            if (\n              (call.from && call.from.phoneNumber) !==\n              (oldCall.from && oldCall.from.phoneNumber)\n            ) {\n              this.store.dispatch({\n                type: this.actionTypes.addTransferredCall,\n                sessionId: call.sessionId,\n                transferredMiddleNumber:\n                  oldCall.from && oldCall.from.phoneNumber,\n              });\n              this._onCallUpdated(\n                {\n                  ...call,\n                  isTransferredCall: true,\n                  transferredMiddleNumber:\n                    oldCall.from && oldCall.from.phoneNumber,\n                  phoneNumberUpdated: true,\n                },\n                callLoggerTriggerTypes.presenceUpdate,\n              );\n            }\n          }\n        });\n        oldCalls.forEach((call) => {\n          this._onCallUpdated(\n            {\n              ...call,\n              isTransferredCall: !!this.transferredCallsMap[call.sessionId],\n              transferredMiddleNumber: this.transferredCallsMap[call.sessionId]\n                ? this.transferredCallsMap[call.sessionId]\n                    .transferredMiddleNumber\n                : null,\n            },\n            callLoggerTriggerTypes.presenceUpdate,\n          );\n        });\n      }\n      if (\n        this._callHistory &&\n        this._lastProcessedEndedCalls !== this._callHistory.recentlyEndedCalls\n      ) {\n        const oldCalls =\n          (this._lastProcessedEndedCalls &&\n            this._lastProcessedEndedCalls.slice()) ||\n          [];\n        this._lastProcessedEndedCalls = this._callHistory.recentlyEndedCalls;\n        const currentSessions = {};\n        this._lastProcessedEndedCalls.forEach((call) => {\n          currentSessions[call.sessionId] = true;\n        });\n        oldCalls.forEach((call) => {\n          if (!currentSessions[call.sessionId]) {\n            // call log updated\n            const callInfo = this._callHistory.calls.find(\n              (item) => item.sessionId === call.sessionId,\n            );\n            if (callInfo) {\n              this._onCallUpdated(\n                {\n                  ...callInfo,\n                  isTransferredCall:\n                    !!this.transferredCallsMap[callInfo.sessionId],\n                  transferredMiddleNumber: this.transferredCallsMap[\n                    call.sessionId\n                  ]\n                    ? this.transferredCallsMap[call.sessionId]\n                        .transferredMiddleNumber\n                    : null,\n                },\n                callLoggerTriggerTypes.callLogSync,\n              );\n            }\n          }\n        });\n      }\n    }\n  }\n\n  async _onStateChange() {\n    await super._onStateChange();\n    this._processCalls();\n  }\n\n  @proxify\n  async setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  @proxify\n  async setLogOnRinging(logOnRinging) {\n    if (this.ready && logOnRinging !== this.logOnRinging) {\n      this.store.dispatch({\n        type: this.actionTypes.setLogOnRinging,\n        logOnRinging,\n      });\n    }\n  }\n\n  @selector\n  transferredCallsMap = [\n    () => this.transferredCallsArr,\n    (transferredCallsArr) =>\n      reduce(\n        (mapping, matcher) => Object.assign({}, mapping, matcher),\n        {},\n        transferredCallsArr,\n      ),\n  ];\n\n  get logOnRinging() {\n    return this._storage.getItem(this._storageKey).logOnRinging;\n  }\n\n  get transferredCallsArr() {\n    return this._storage.getItem(this._storageKey).transferredCallsMap;\n  }\n}\n"],"file":"index.js"}