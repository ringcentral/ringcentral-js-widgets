{"version":3,"sources":["modules/AddressBookV2/AddressBook.ts"],"names":["DEFAULT_FETCH_INTERVAL","DEFAULT_CONTACTS_PER_PAGE","AddressBook","name","deps","dep","optional","data","_deps","AddressBookOptions","polling","_source","DataSource","key","cleanOnReset","permissionCheckFunction","extensionFeatures","features","ReadPersonalContacts","available","readyCheckFunction","ready","fetchFunction","_sync","dataFetcherV2","register","perPage","syncToken","pageId","params","processAddressBookResponse","client","account","extension","addressBookSync","list","records","length","updatedRecords","processedIDMap","record","availability","availabilityTypes","alive","push","id","_perPage","_fetch","response","concat","nextPageId","_fetchInterval","syncInfo","syncType","_processISyncData","status","fetchData","contactId","contacts","find","x","searchFilter","searchString","entityType","phoneSources","contact","options","phoneNumber","rcContact","fetchInterval","rawContact","type","sourceName","phoneNumbers","emails","firstName","lastName","email","email2","email3","toLocaleLowerCase","indexOf","Object","keys","DataFetcherV2Consumer","proxify"],"mappings":"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","sourcesContent":["import { computed } from '@ringcentral-integration/core';\nimport { forEach, map } from 'ramda';\nimport { availabilityTypes } from '../../enums/availabilityTypes';\nimport { phoneSources } from '../../enums/phoneSources';\nimport { ContactModel, ContactSource } from '../../interfaces/Contact.model';\nimport {\n  addPhoneToContact,\n  getFilterContacts,\n  getMatchContactsByPhoneNumber,\n  getSearchForPhoneNumbers,\n} from '../../lib/contactHelper';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport sleep from '../../lib/sleep';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport {\n  AddressBookData,\n  Deps,\n  PersonalContactResource,\n} from './AddressBook.interface';\nimport { getSyncParams, processAddressBookResponse } from './helpers';\n\nexport const DEFAULT_FETCH_INTERVAL = 1000;\nexport const DEFAULT_CONTACTS_PER_PAGE = 250;\n\n@Module({\n  name: 'AddressBook',\n  deps: [\n    'Client',\n    'ExtensionFeatures',\n    'DataFetcherV2',\n    { dep: 'AddressBookOptions', optional: true },\n  ],\n})\nexport class AddressBook\n  extends DataFetcherV2Consumer<Deps, AddressBookData>\n  implements ContactSource {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    const { polling = true } = this._deps.AddressBookOptions ?? {};\n    this._source = new DataSource({\n      ...this._deps.AddressBookOptions,\n      key: 'addressBook',\n      polling,\n      cleanOnReset: true,\n      permissionCheckFunction: () =>\n        this._deps.extensionFeatures.features?.ReadPersonalContacts\n          ?.available ?? false,\n      readyCheckFunction: () => this._deps.extensionFeatures.ready,\n      fetchFunction: async () => this._sync(),\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  protected get _fetchInterval() {\n    return (\n      this._deps.AddressBookOptions?.fetchInterval ?? DEFAULT_FETCH_INTERVAL\n    );\n  }\n\n  protected get _perPage() {\n    return this._deps.AddressBookOptions?.perPage ?? DEFAULT_CONTACTS_PER_PAGE;\n  }\n\n  get syncToken() {\n    return this.data?.syncToken;\n  }\n\n  protected async _fetch(perPage: number, syncToken: string, pageId?: number) {\n    const params = getSyncParams({\n      perPage,\n      syncToken,\n      pageId,\n    });\n    return processAddressBookResponse(\n      await this._deps.client\n        .account()\n        .extension()\n        .addressBookSync()\n        .list(params),\n    );\n  }\n\n  protected _processISyncData(records: PersonalContactResource[]) {\n    if (records?.length > 0) {\n      const updatedRecords: PersonalContactResource[] = [];\n      const processedIDMap: Record<PersonalContactResource['id'], true> = {};\n      forEach((record) => {\n        if (record.availability === availabilityTypes.alive) {\n          // Only keep entries that is 'alive', omit 'purged' and 'deleted'\n          updatedRecords.push(record);\n        }\n        processedIDMap[record.id] = true;\n      }, records);\n      forEach((record) => {\n        if (!processedIDMap[record.id]) {\n          // record has no updates\n          updatedRecords.push(record);\n        }\n      }, this.data.records);\n      return updatedRecords;\n    }\n    return this.data.records;\n  }\n\n  protected async _sync(): Promise<AddressBookData> {\n    try {\n      const syncToken = this.syncToken;\n      const perPage = this._perPage;\n      let records: PersonalContactResource[] = [];\n      let response = await this._fetch(perPage, syncToken);\n      records = records.concat(response.records ?? []);\n      while (response.nextPageId) {\n        await sleep(this._fetchInterval);\n        response = await this._fetch(perPage, syncToken, response.nextPageId);\n        records = records.concat(response.records ?? []);\n      }\n      if (response.syncInfo.syncType === 'ISync') {\n        records = this._processISyncData(records);\n      }\n      return {\n        syncToken: response.syncInfo.syncToken,\n        records,\n      };\n    } catch (error) {\n      if (error?.response?.status === 403) {\n        return {} as AddressBookData;\n      }\n      throw error;\n    }\n  }\n\n  // interface of ContactSource\n  @proxify\n  async sync() {\n    await this._deps.dataFetcherV2.fetchData(this._source);\n  }\n\n  // interface of ContactSource\n  findContact(contactId: string) {\n    return this.contacts.find((x) => x.id === contactId);\n  }\n\n  // interface of ContactSource\n  filterContacts(searchFilter: string) {\n    return getFilterContacts(this.contacts, searchFilter);\n  }\n\n  // interface of ContactSource\n  searchForPhoneNumbers(searchString: string) {\n    return getSearchForPhoneNumbers({\n      contacts: this.contacts,\n      searchString,\n      entityType: phoneSources.contact,\n      options: null,\n    });\n  }\n\n  // interface of ContactSource\n  matchContactsByPhoneNumber(phoneNumber: string) {\n    return getMatchContactsByPhoneNumber({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: phoneSources.rcContact,\n    });\n  }\n\n  // interface of ContactSource\n  get sourceName() {\n    return 'personal';\n  }\n\n  // interface of ContactSource\n  @computed(({ data }: AddressBook) => [data])\n  get contacts() {\n    return map((rawContact) => {\n      const contact: ContactModel = {\n        ...rawContact,\n        type: this.sourceName,\n        phoneNumbers: [],\n        emails: [],\n        id: `${rawContact.id}`,\n        name: `${rawContact.firstName ?? ''} ${rawContact.lastName ?? ''}`,\n      };\n      if (rawContact.email) {\n        contact.emails.push(rawContact.email);\n      }\n      if (rawContact.email2) {\n        contact.emails.push(rawContact.email2);\n      }\n      if (rawContact.email3) {\n        contact.emails.push(rawContact.email3);\n      }\n      forEach((key: keyof typeof contact) => {\n        if (\n          key.toLocaleLowerCase().indexOf('phone') === -1 ||\n          typeof contact[key] !== 'string'\n        ) {\n          return;\n        }\n        addPhoneToContact(contact, contact[key] as string, key);\n      }, Object.keys(contact) as (keyof typeof contact)[]);\n      return contact;\n    }, this.data?.records ?? []);\n  }\n\n  // interface of ContactSource\n  @computed(({ data }: AddressBook) => [data])\n  get rawContacts() {\n    return this.data?.records ?? [];\n  }\n\n  // interface of ContactSource\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"file":"AddressBook.js"}