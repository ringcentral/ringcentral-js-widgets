{"version":3,"sources":["modules/ContactSearchUI/ContactSearchUI.ts"],"names":["ContactSearchUI","name","deps","dep","optional","filterString","_companyContactsCache","_personalContactsCache","_debouncedSetFilterString","fn","_setFilterString","threshold","formatPhone","phoneNumber","areaCode","_deps","regionSettings","countryCode","searchFilter","lowCaseString","toLowerCase","startTime","Date","now","filterResult","accountContacts","filterContacts","accountFilterEnd","maps","map","id","phoneNumbers","type","isNameInclude","includes","filteredNumbers","filter","index","phoneType","isPrimary","result","reduce","accumulator","currentValue","concat","formatFilterEnd","accountFilterTime","toFixed","formatFilterTime","console","log","addressBook","contacts","userInput","inputRef","currentLocale","locale","companyContacts","personalContacts","optionClickHandler","searchHandler","searchString","contactSearch","search","sortedResult","slice","setFilterString","getFilteredCompanyContacts","getFilteredPersonalContacts","RcUIModuleV2","state","action"],"mappings":"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","sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport {\n  RcUIModuleV2,\n  UIFunctions,\n  UIProps,\n  computed,\n  state,\n  action,\n  watch,\n} from '@ringcentral-integration/core';\nimport { debounce } from '@ringcentral-integration/commons/lib/debounce-throttle';\nimport { formatNumber } from '@ringcentral-integration/commons/lib/formatNumber';\n\nimport {\n  Deps,\n  ContactSearchPanelProps,\n  IContactSearchItem,\n  PageProps,\n} from './ContactSearchUI.interface';\n\n@Module({\n  name: 'ContactSearchUI',\n  deps: [\n    'Locale',\n    'AccountContacts',\n    'AddressBook',\n    'RegionSettings',\n    { dep: 'ContactSearch', optional: true },\n  ],\n})\nexport class ContactSearchUI<T extends Deps = Deps> extends RcUIModuleV2<T> {\n  private _companyContactsCache: Record<string, IContactSearchItem[]> = {};\n  private _personalContactsCache: Record<string, IContactSearchItem[]> = {};\n\n  constructor(deps: Deps & T) {\n    super({\n      deps,\n    });\n  }\n\n  @state\n  filterString = '';\n\n  private _debouncedSetFilterString = debounce({\n    fn: this._setFilterString,\n    threshold: 800,\n  });\n\n  @action\n  _setFilterString(filterString: string) {\n    this.filterString = filterString;\n  }\n\n  getFilteredCompanyContacts(searchFilter: string) {\n    const lowCaseString = searchFilter.toLowerCase();\n    if (this._companyContactsCache[lowCaseString]) {\n      return this._companyContactsCache[lowCaseString];\n    }\n    const startTime = Date.now();\n    const filterResult =\n      this._deps.accountContacts.filterContacts(lowCaseString);\n\n    const accountFilterEnd = Date.now();\n    const maps = filterResult.map(({ id, name, phoneNumbers, type }) => {\n      const isNameInclude = name.toLowerCase().includes(lowCaseString);\n      const filteredNumbers = isNameInclude\n        ? phoneNumbers\n        : phoneNumbers.filter(({ phoneNumber }) =>\n            phoneNumber.includes(lowCaseString),\n          );\n      return filteredNumbers.map(({ phoneType, phoneNumber }, index) => ({\n        id,\n        name,\n        type,\n        phoneType,\n        phoneNumber,\n        isPrimary: index === 0,\n      }));\n    });\n\n    const result = maps.reduce(\n      (accumulator, currentValue) => accumulator.concat(currentValue),\n      [],\n    );\n    const formatFilterEnd = Date.now();\n    const accountFilterTime = ((accountFilterEnd - startTime) / 1000).toFixed(\n      2,\n    );\n    const formatFilterTime = (\n      (formatFilterEnd - accountFilterEnd) /\n      1000\n    ).toFixed(2);\n\n    console.log(\n      `exec time Company: ${accountFilterTime} s, and ui filter: ${formatFilterTime}`,\n    );\n    this._companyContactsCache[lowCaseString] = result;\n    return result;\n  }\n\n  getFilteredPersonalContacts(searchFilter: string) {\n    const lowCaseString = searchFilter.toLowerCase();\n    if (this._personalContactsCache[lowCaseString]) {\n      return this._personalContactsCache[lowCaseString];\n    }\n\n    const filterResult = this._deps.addressBook.filterContacts(lowCaseString);\n\n    const maps = filterResult.map(({ id, name, phoneNumbers, type }) => {\n      // const uniqueTypeNumbers = uniqBy((item) => item.phoneType, phoneNumbers);\n      const isNameInclude = name.toLowerCase().includes(lowCaseString);\n      const filteredNumbers = isNameInclude\n        ? phoneNumbers\n        : phoneNumbers.filter(({ phoneNumber }) =>\n            phoneNumber.includes(lowCaseString),\n          );\n      return filteredNumbers.map(({ phoneType, phoneNumber }, index) => ({\n        id,\n        name,\n        type,\n        phoneType,\n        phoneNumber,\n        isPrimary: index === 0,\n      }));\n    });\n\n    const result = maps.reduce(\n      (accumulator, currentValue) => accumulator.concat(currentValue),\n      [],\n    );\n    this._personalContactsCache[lowCaseString] = result;\n    return result;\n  }\n\n  @computed(({ filterString }) => [filterString])\n  get companyContacts() {\n    return this.getFilteredCompanyContacts(this.filterString);\n  }\n\n  @computed(({ filterString }) => [filterString])\n  get personalContacts() {\n    return this.getFilteredPersonalContacts(this.filterString);\n  }\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this._deps.addressBook.contacts,\n      () => {\n        this._personalContactsCache = {};\n      },\n    );\n\n    watch(\n      this,\n      () => this._deps.accountContacts.contacts,\n      () => {\n        this._companyContactsCache = {};\n      },\n    );\n  }\n\n  getUIProps({\n    userInput,\n    inputRef,\n  }: PageProps): UIProps<ContactSearchPanelProps> {\n    return {\n      currentLocale: this._deps.locale.currentLocale,\n      companyContacts: this.companyContacts,\n      personalContacts: this.personalContacts,\n      userInput,\n      inputRef,\n    };\n  }\n\n  getUIFunctions({\n    optionClickHandler,\n  }: PageProps): UIFunctions<ContactSearchPanelProps> {\n    return {\n      optionClickHandler,\n      searchHandler: async (searchString) => {\n        await this._deps.contactSearch?.search({ searchString });\n        return this._deps.contactSearch?.sortedResult.slice(0, 50);\n      },\n      setFilterString: (filterString: string) =>\n        this._debouncedSetFilterString(filterString),\n      formatPhone: this.formatPhone,\n    };\n  }\n\n  formatPhone = (phoneNumber: string) => {\n    return formatNumber({\n      phoneNumber,\n      areaCode: this._deps.regionSettings.areaCode,\n      countryCode: this._deps.regionSettings.countryCode,\n    });\n  };\n}\n"],"file":"ContactSearchUI.js"}