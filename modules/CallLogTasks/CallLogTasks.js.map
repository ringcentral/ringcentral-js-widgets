{"version":3,"sources":["modules/CallLogTasks/CallLogTasks.ts"],"names":["CallLogTasks","name","deps","storageKey","enableCache","call","func","fetchLogInfo","newLogInfo","previousLogInfo","getLogInfo","sessionId","currentLogInfo","task","updateLogInfo","console","error","Error","logInfoMapping","logInfo","RcModuleV2","storage","state","proxify","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOaA,Y,WAJZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,cADA;AAENC,EAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,iBAAZ,EAA+B,gBAA/B;AAFA,CAAP,C;;;;;AAKC,wBAAYA,IAAZ,EAA4B;AAAA;;AAAA;;AAC1B,8BAAM;AAAEA,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,UAAU,EAAE,aAApB;AAAmCC,MAAAA,WAAW,EAAE;AAAhD,KAAN;;AAD0B;;AAAA;AAE3B;;;;;yGAQCC,I,EACAC,I;;;;;;;;uBAG2B,KAAKC,YAAL,CAAkBF,IAAlB,C;;;AAAnBG,gBAAAA,U;AACAC,gBAAAA,e,GAAkB,KAAKC,UAAL,CAAgBL,IAAI,CAACM,SAArB,C;AAClBC,gBAAAA,c,uBACHP,IAAI,CAACM,S,gDACDF,e,GACAD,U;AACHK,kBAAAA,IAAI,kCACCJ,eAAe,CAACI,IADjB,GAECL,UAAU,CAACK,IAFZ;;AAMR,qBAAKC,aAAL,CAAmBF,cAAnB;8BACAN,I;;;;;;;;uBAAeA,IAAI,CAACD,IAAI,CAACM,SAAN,C;;;;;;;;;AAEnBI,gBAAAA,OAAO,CAACC,KAAR;;;;;;;;;;;;;;;;;;iCAISX,I,EAAY;AACvB,YAAM,IAAIY,KAAJ,CAAU,yBAAV,CAAN;AACD;;;+BAEUN,S,EAAmB;AAC5B,aAAO,KAAKO,cAAL,CAAoBP,SAApB,KAAkC,EAAzC;AACD;;;kCAGaQ,O,EAAc;AAC1B,WAAKD,cAAL,mCACK,KAAKA,cADV,GAEKC,OAFL;AAID;;;;EAhDsDC,gB,kFAKtDC,a,EACAC,W;;;;;WACqC,E;;wEAErCC,gB,gKAiCAC,Y","sourcesContent":["import {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { Call } from '../../interfaces/Call.interface';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { Deps } from './CallLogTasks.interface';\n\n@Module({\n  name: 'CallLogTasks',\n  deps: ['Storage', 'ActivityMatcher', 'ContactMatcher'],\n})\nexport class CallLogTasks<T extends Deps = Deps> extends RcModuleV2<Deps & T> {\n  constructor(deps: Deps & T) {\n    super({ deps, storageKey: 'CallLogTask', enableCache: true });\n  }\n\n  @storage\n  @state\n  logInfoMapping: Record<string, any> = {};\n\n  @proxify\n  async fetchAndUpdateTask(\n    call: Call,\n    func?: (sessionId: string) => Promise<void>,\n  ) {\n    try {\n      const newLogInfo = await this.fetchLogInfo(call);\n      const previousLogInfo = this.getLogInfo(call.sessionId);\n      const currentLogInfo = {\n        [call.sessionId]: {\n          ...previousLogInfo,\n          ...newLogInfo,\n          task: {\n            ...previousLogInfo.task,\n            ...newLogInfo.task,\n          },\n        },\n      };\n      this.updateLogInfo(currentLogInfo);\n      func && (await func(call.sessionId));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  fetchLogInfo(call: Call) {\n    throw new Error('Method not implemented.');\n  }\n\n  getLogInfo(sessionId: string) {\n    return this.logInfoMapping[sessionId] || {};\n  }\n\n  @action\n  updateLogInfo(logInfo: any) {\n    this.logInfoMapping = {\n      ...this.logInfoMapping,\n      ...logInfo,\n    };\n  }\n}\n"],"file":"CallLogTasks.js"}