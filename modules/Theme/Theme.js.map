{"version":3,"sources":["modules/Theme/Theme.ts"],"names":["Theme","name","deps","dep","optional","that","_deps","brand","brandConfig","theme","variable","storageKey","type","themeType","defaultThemeType","defaultTheme","setThemeType","newValue","newDefaultThemeType","curr","themeMap","defaultCssVariable","RcModuleV2","globalStorage","state","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAUA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOaA,K,WAJZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,OADA;AAENC,EAAAA,IAAI,EAAE,CAAC,OAAD,EAAU;AAAEC,IAAAA,GAAG,EAAE,cAAP;AAAuBC,IAAAA,QAAQ,EAAE;AAAjC,GAAV;AAFA,CAAP,C,UAgDE,oBAAS,UAACC,IAAD;AAAA;;AAAA,SAAiB,0BAACA,IAAI,CAACC,KAAL,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BC,KAA9B,0DAAC,sBAAoCC,QAArC,CAAjB;AAAA,CAAT,C;;;;;AA3CD,iBAAYR,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA,IADI;AAEJS,MAAAA,UAAU,EAAE;AAFR,KAAN;;AADsB;;AAAA;AAKvB;;;;iCAOYC,I,EAAc;AACzB,WAAKC,SAAL,GAAiBD,IAAjB;AACD;;;iCAEY;AAAA;AAAA;;AACX,UAAME,gBAAgB,4BAAG,KAAKR,KAAL,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BC,KAAhC,0DAAG,sBAAoCM,YAA7D;;AACA,UAAID,gBAAJ,EAAsB;AACpB,aAAKE,YAAL,CAAkBF,gBAAlB;AACD;;AAED,uBACE,IADF,EAEE;AAAA,eAAM,MAAI,CAACR,KAAL,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BC,KAAnC;AAAA,OAFF,EAGE,UAACQ,QAAD,EAAc;AACZ,YAAMC,mBAAmB,GAAGD,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEF,YAAtC;;AAEA,YAAIG,mBAAmB,IAAIA,mBAAmB,KAAK,MAAI,CAACL,SAAxD,EAAmE;AACjE,UAAA,MAAI,CAACG,YAAL,CAAkBC,QAAQ,CAACF,YAA3B;AACD;AACF,OATH;AAWD;;;wBAEW;AAAA;;AACV,UAAMI,IAAI,6BAAG,KAAKb,KAAL,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BC,KAAhC,qFAAG,uBAAoCW,QAAvC,2DAAG,uBACX,KAAKP,SADM,CAAb;AAIA,aAAOM,IAAP;AACD;;;wBAGc;AAAA;;AACb,6CACKE,sCADL,6BAEK,KAAKf,KAAL,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BC,KAFlC,2DAEK,uBAAoCC,QAFzC;AAID;;;;EAlDwBY,gB,6EAQxBC,mB,EACAC,W;;;;;WACmB,E;;kEAEnBC,Y","sourcesContent":["import {\n  action,\n  computed,\n  globalStorage,\n  RcModuleV2,\n  state,\n  watch,\n} from '@ringcentral-integration/core';\nimport type { RcTheme } from '@ringcentral/juno';\n\nimport { Module } from '../../lib/di';\nimport { CssModuleVariable } from '../Brand/BrandConfig.interface';\nimport { defaultCssVariable } from './defaultCssVariable';\nimport { Deps } from './Theme.interface';\n\n@Module({\n  name: 'Theme',\n  deps: ['Brand', { dep: 'ThemeOptions', optional: true }],\n})\nexport class Theme extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'Theme',\n    });\n  }\n\n  @globalStorage\n  @state\n  themeType: string = '';\n\n  @action\n  setThemeType(type: string) {\n    this.themeType = type;\n  }\n\n  onInitOnce() {\n    const defaultThemeType = this._deps.brand.brandConfig.theme?.defaultTheme;\n    if (defaultThemeType) {\n      this.setThemeType(defaultThemeType);\n    }\n\n    watch(\n      this,\n      () => this._deps.brand.brandConfig.theme,\n      (newValue) => {\n        const newDefaultThemeType = newValue?.defaultTheme;\n\n        if (newDefaultThemeType && newDefaultThemeType !== this.themeType) {\n          this.setThemeType(newValue.defaultTheme);\n        }\n      },\n    );\n  }\n\n  get theme() {\n    const curr = this._deps.brand.brandConfig.theme?.themeMap?.[\n      this.themeType\n    ] as any;\n\n    return curr as RcTheme;\n  }\n\n  @computed((that: Theme) => [that._deps.brand.brandConfig.theme?.variable])\n  get variable() {\n    return {\n      ...defaultCssVariable,\n      ...this._deps.brand.brandConfig.theme?.variable,\n    } as CssModuleVariable;\n  }\n}\n"],"file":"Theme.js"}