{"version":3,"sources":["modules/Theme/Theme.ts"],"names":["Theme","name","deps","dep","optional","that","_deps","brand","brandConfig","theme","variable","storageKey","type","themeType","defaultTheme","newValue","setThemeType","themeMap","defaultCssVariable","RcModuleV2","storage","state","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AASA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOaA,K,WAJZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,OADA;AAENC,EAAAA,IAAI,EAAE,CAAC,OAAD,EAAU;AAAEC,IAAAA,GAAG,EAAE,cAAP;AAAuBC,IAAAA,QAAQ,EAAE;AAAjC,GAAV;AAFA,CAAP,C,UAsCE,oBAAS,UAACC,IAAD;AAAA;;AAAA,SAAiB,0BAACA,IAAI,CAACC,KAAL,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BC,KAA9B,0DAAC,sBAAoCC,QAArC,CAAjB;AAAA,CAAT,C;;;;;AAjCD,iBAAYR,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA,IADI;AAEJS,MAAAA,UAAU,EAAE;AAFR,KAAN;;AADsB;;AAAA;AAKvB;;;;iCAOYC,I,EAAc;AACzB,WAAKC,SAAL,GAAiBD,IAAjB;AACD;;;iCAEY;AAAA;;AACX;AACA,UAAI,KAAKC,SAAL,KAAmB,EAAvB,EAA2B;AACzB,yBACE,IADF,EAEE;AAAA;;AAAA,0CAAM,MAAI,CAACP,KAAL,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BC,KAAnC,0DAAM,sBAAoCK,YAA1C;AAAA,SAFF,EAGE,UAACC,QAAD,EAAc;AACZ,UAAA,MAAI,CAACC,YAAL,CAAkBD,QAAlB;AACD,SALH;AAOD;AACF;;;wBAEW;AAAA;;AACV,sCAAO,KAAKT,KAAL,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BC,KAApC,oFAAO,sBAAoCQ,QAA3C,2DAAO,uBAA+C,KAAKJ,SAApD,CAAP;AACD;;;wBAGc;AAAA;;AACb,6CACKK,sCADL,6BAEK,KAAKZ,KAAL,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BC,KAFlC,2DAEK,uBAAoCC,QAFzC;AAID;;;;EAxCwBS,gB,6EAQxBC,a,EACAC,W;;;;;WACmB,E;;kEAEnBC,Y","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  watch,\n} from '@ringcentral-integration/core';\n\nimport { Module } from '../../lib/di';\nimport { defaultCssVariable } from './defaultCssVariable';\nimport { Deps } from './Theme.interface';\n\n@Module({\n  name: 'Theme',\n  deps: ['Brand', { dep: 'ThemeOptions', optional: true }],\n})\nexport class Theme extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'Theme',\n    });\n  }\n\n  @storage\n  @state\n  themeType: string = '';\n\n  @action\n  setThemeType(type: string) {\n    this.themeType = type;\n  }\n\n  onInitOnce() {\n    // only watch config defaultTheme when first time init app.\n    if (this.themeType === '') {\n      watch(\n        this,\n        () => this._deps.brand.brandConfig.theme?.defaultTheme,\n        (newValue) => {\n          this.setThemeType(newValue);\n        },\n      );\n    }\n  }\n\n  get theme() {\n    return this._deps.brand.brandConfig.theme?.themeMap?.[this.themeType];\n  }\n\n  @computed((that: Theme) => [that._deps.brand.brandConfig.theme?.variable])\n  get variable() {\n    return {\n      ...defaultCssVariable,\n      ...this._deps.brand.brandConfig.theme?.variable,\n    };\n  }\n}\n"],"file":"Theme.js"}