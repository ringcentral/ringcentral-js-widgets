{"version":3,"sources":["modules/CallLogV2/CallLog.ts"],"names":["DEFAULT_TTL","DEFAULT_REFRESH_LOCK","DEFAULT_TOKEN_EXPIRES_IN","DEFAULT_DAY_SPAN","RECORD_COUNT","LIST_RECORD_COUNT","DEFAULT_TIME_TO_RETRY","SYNC_DELAY","presenceRegExp","CallLog","name","deps","dep","optional","list","data","map","storageKey","enableCache","callLogOptions","disableCache","_promise","_queueSync","_timeoutId","token","timestamp","daySpan","cutOffTime","getTime","newList","forEach","id","call","startTime","push","syncToken","records","supplementRecords","newState","_enableDeleted","deleted","index","indexOf","splice","_deps","auth","loggedIn","ready","resetData","filterExpiredCalls","_daySpan","Date","now","_tokenExpiresIn","clearToken","appFeatures","hasReadExtensionCallLog","_init","_clearTimeout","subscription","message","test","event","body","activeCalls","ownerId","storage","tabManager","active","sync","subscribe","subscriptionFilters","detailedPresence","refreshLock","console","log","_polling","_startPolling","dateFrom","dateTo","perPageParam","_isLimitList","perPage","_listRecordCount","params","client","account","extension","callLog","callLogSync","syncType","syncTypes","iSync","showDeleted","Error","syncSuccess","recordCount","_recordCount","fSync","length","_fetch","shouldFSync","_iSync","_fSync","timeToRetry","_retry","_sync","clearTimeout","t","pollingInterval","setTimeout","ttl","fetchData","tokenExpiresIn","polling","isLimitList","listRecordCount","enableDeleted","calls","filter","result","callResults","stopped","busy","unknown","faxSendError","faxReceiptError","callFailed","faxReceipt","isOutBoundCompanyNumber","from","phoneNumber","mainCompanyNumbers","isOutBoundFromSelfExtNumber","extensionNumber","extensionInfo","info","action","callActions","ringOutWeb","ringOutPC","ringOutMobile","to","sort","sortByStartTime","slice","_ttl","_refreshLock","_timeToRetry","extensionPhoneNumber","numbers","usageType","RcModuleV2","state","proxify"],"mappings":"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","sourcesContent":["import { ReadUserCallLogParameters } from '@rc-ex/core/definitions';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  watch,\n} from '@ringcentral-integration/core';\n\nimport { callActions } from '../../enums/callActions';\nimport { callResults } from '../../enums/callResults';\nimport { subscriptionFilters } from '../../enums/subscriptionFilters';\nimport { SyncType, syncTypes } from '../../enums/syncTypes';\nimport {\n  hasEndedCalls,\n  isOutbound,\n  removeDuplicateIntermediateCalls,\n  removeInboundRingOutLegs,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport getDateFrom from '../../lib/getDateFrom';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { sleep } from '../../lib/sleep';\nimport {\n  CallLogData,\n  CallLogRecords,\n  CallLogSyncData,\n  Deps,\n  SyncSuccessOptions,\n  UserCallLogResponseData,\n} from './CallLog.interface';\nimport {\n  getISODateFrom,\n  getISODateTo,\n  processData,\n  processRecords,\n} from './helper';\n\nconst DEFAULT_TTL = 5 * 60 * 1000;\n// Lock fetching on app refresh if lst fetch happened less than this time span\nconst DEFAULT_REFRESH_LOCK = 3 * 60 * 1000;\nconst DEFAULT_TOKEN_EXPIRES_IN = 60 * 60 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\nconst RECORD_COUNT = 250;\nconst LIST_RECORD_COUNT = 250;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst SYNC_DELAY = 30 * 1000;\n// to not use $ at the end, presence with sipData has extra query parameters\nconst presenceRegExp = /\\/presence\\?detailedTelephonyState=true/;\n\n@Module({\n  name: 'CallLog',\n  deps: [\n    'Auth',\n    'Client',\n    'ExtensionPhoneNumber',\n    'ExtensionInfo',\n    'Subscription',\n    'AppFeatures',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'CallLogOptions', optional: true },\n  ],\n})\nexport class CallLog extends RcModuleV2<Deps> {\n  protected _promise: Promise<void> = null;\n\n  protected _queueSync: Promise<void> = null;\n\n  protected _timeoutId: NodeJS.Timeout = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'CallLog',\n      enableCache: !(deps.callLogOptions?.disableCache ?? false),\n    });\n  }\n\n  @storage\n  @state\n  data: CallLogData = {\n    list: [],\n    map: {},\n    token: null,\n    timestamp: null,\n  };\n\n  @action\n  resetData() {\n    this.data = {\n      list: [],\n      map: {},\n      token: null,\n      timestamp: null,\n    };\n  }\n\n  @action\n  clearToken() {\n    this.data.token = null;\n    this.data.timestamp = null;\n  }\n\n  @action\n  filterExpiredCalls(daySpan: number) {\n    const cutOffTime = getDateFrom(daySpan).getTime();\n    const newList: string[] = [];\n    this.data.list.forEach((id) => {\n      const call = this.data.map[id];\n      if (call.startTime > cutOffTime) {\n        newList.push(id);\n      } else {\n        delete this.data.map[id];\n      }\n    });\n    this.data.list = newList;\n  }\n\n  @action\n  syncSuccess({\n    timestamp,\n    syncToken,\n    records = [],\n    supplementRecords = [],\n    daySpan,\n  }: SyncSuccessOptions) {\n    this.data.timestamp = timestamp;\n    this.data.token = syncToken;\n    const newState: string[] = [];\n    const cutOffTime = getDateFrom(daySpan).getTime();\n    // filter old calls\n    this.data.list.forEach((id) => {\n      const call = this.data.map[id];\n      if (call.startTime > cutOffTime) {\n        newState.push(id);\n      } else {\n        delete this.data.map[id];\n      }\n    });\n    processRecords(records, supplementRecords).forEach((call) => {\n      if (call.startTime > cutOffTime) {\n        if (!this.data.map[call.id]) {\n          newState.push(call.id);\n        }\n        this.data.map[call.id] = call;\n        if (this._enableDeleted && call.deleted) {\n          const index = newState.indexOf(call.id);\n          if (index > -1) {\n            newState.splice(index, 1);\n          }\n          delete this.data.map[call.id];\n        }\n      }\n    });\n    this.data.list = newState;\n  }\n\n  protected get _ttl() {\n    return this._deps.callLogOptions?.ttl ?? DEFAULT_TTL;\n  }\n\n  protected get _refreshLock() {\n    return this._deps.callLogOptions?.refreshLock ?? DEFAULT_REFRESH_LOCK;\n  }\n\n  protected get _tokenExpiresIn() {\n    return (\n      this._deps.callLogOptions?.tokenExpiresIn ?? DEFAULT_TOKEN_EXPIRES_IN\n    );\n  }\n\n  protected get _timeToRetry() {\n    return this._deps.callLogOptions?.timeToRetry ?? DEFAULT_TIME_TO_RETRY;\n  }\n\n  protected get _daySpan() {\n    return this._deps.callLogOptions?.daySpan ?? DEFAULT_DAY_SPAN;\n  }\n\n  protected get _polling() {\n    return this._deps.callLogOptions?.polling ?? true;\n  }\n\n  protected get _isLimitList() {\n    return this._deps.callLogOptions?.isLimitList ?? false;\n  }\n\n  protected get _listRecordCount() {\n    return this._deps.callLogOptions?.listRecordCount ?? LIST_RECORD_COUNT;\n  }\n\n  protected get _recordCount() {\n    return this._deps.callLogOptions?.recordCount ?? RECORD_COUNT;\n  }\n\n  protected get _enableDeleted() {\n    return this._deps.callLogOptions?.enableDeleted ?? false;\n  }\n\n  _shouldInit() {\n    return !!(super._shouldInit() && this._deps.auth.loggedIn);\n  }\n\n  _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._deps.auth.loggedIn)\n    );\n  }\n\n  async onInit() {\n    /**\n     * old call log data structure migration\n     */\n    if (typeof this.data.list[0] === 'object') {\n      this.resetData();\n    }\n\n    this.filterExpiredCalls(this._daySpan);\n    if (\n      this.token &&\n      (!this.timestamp || Date.now() - this.timestamp > this._tokenExpiresIn)\n    ) {\n      this.clearToken();\n    }\n    if (this._deps.appFeatures.hasReadExtensionCallLog) {\n      await this._init();\n    }\n  }\n\n  onReset() {\n    this._clearTimeout();\n    this._promise = null;\n    this.resetData();\n  }\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this._deps.subscription.message,\n      async (message) => {\n        if (\n          this.ready &&\n          this._deps.subscription.ready &&\n          presenceRegExp.test(message.event) &&\n          message.body &&\n          message.body.activeCalls &&\n          hasEndedCalls(message.body.activeCalls)\n        ) {\n          const { ownerId } = this._deps.auth;\n          await sleep(SYNC_DELAY);\n          if (\n            ownerId === this._deps.auth.ownerId &&\n            (!this._deps.storage ||\n              !this._deps.tabManager ||\n              this._deps.tabManager.active)\n          ) {\n            this.sync();\n          }\n        }\n      },\n    );\n  }\n\n  async _init() {\n    if (this._deps.subscription) {\n      this._deps.subscription.subscribe([subscriptionFilters.detailedPresence]);\n    }\n    if (\n      (!this._deps.tabManager || this._deps.tabManager.active) &&\n      (!this.timestamp || Date.now() - this.timestamp > this.refreshLock)\n    ) {\n      try {\n        await this.sync();\n      } catch (e) {\n        console.log(e);\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    }\n  }\n\n  @computed(({ list }: CallLog) => [list])\n  get calls() {\n    // TODO: make sure removeDuplicateIntermediateCalls is necessary here\n    const calls = removeInboundRingOutLegs(\n      removeDuplicateIntermediateCalls(\n        // https://developers.ringcentral.com/api-reference/Call-Log/readUserCallLog\n        this.list.filter(\n          (call) =>\n            // [RCINT-3472] calls with result === 'stopped' seems to be useless\n            call.result !== callResults.stopped &&\n            // [RCINT-51111] calls with result === 'busy'\n            call.result !== callResults.busy &&\n            // [RCINT-6839]\n            // Call processing result is undefined\n            call.result !== callResults.unknown &&\n            // Outgoing fax sending has failed\n            // TODO: Types of Legacy, remove for checking type?\n            // @ts-ignore\n            call.result !== callResults.faxSendError &&\n            // Incoming fax has failed to be received\n            call.result !== callResults.faxReceiptError &&\n            // Outgoing fax has failed because of no answer\n            call.result !== callResults.callFailed &&\n            // Error Internal error occurred when receiving fax\n            // TODO: Types of Legacy, remove for checking type?\n            // @ts-ignore\n            call.result !== callResults.faxReceipt,\n        ),\n      ),\n    )\n      .map((call) => {\n        // [RCINT-7364] Call presence is incorrect when make ringout call from a DL number.\n        // When user use DL number set ringout and the outBound from number must not a oneself company/extension number\n        // Call log sync will response tow legs.\n        // But user use company plus extension number, call log sync will response only one leg.\n        // And the results about `to` and `from` in platform APIs call log sync response is opposite.\n        // This is a temporary solution.\n        const isOutBoundCompanyNumber =\n          call.from &&\n          call.from.phoneNumber &&\n          this.mainCompanyNumbers.indexOf(call.from.phoneNumber) > -1;\n        const isOutBoundFromSelfExtNumber =\n          call.from &&\n          call.from.extensionNumber &&\n          call.from.extensionNumber ===\n            this._deps.extensionInfo.info.extensionNumber;\n        if (\n          isOutbound(call) &&\n          (call.action === callActions.ringOutWeb ||\n            call.action === callActions.ringOutPC ||\n            call.action === callActions.ringOutMobile) &&\n          !isOutBoundCompanyNumber &&\n          !isOutBoundFromSelfExtNumber\n        ) {\n          return {\n            ...call,\n            from: call.to,\n            to: call.from,\n          };\n        }\n        return call;\n      })\n      .sort(sortByStartTime);\n    if (this._isLimitList) {\n      return calls.slice(0, this._listRecordCount);\n    }\n    return calls;\n  }\n\n  @computed(({ data }: CallLog) => [data.list, data.map])\n  get list() {\n    /**\n     * old call log data structure migration\n     */\n    if (typeof this.data.list[0] === 'object') {\n      return [];\n    }\n\n    return this.data.list.map((id) => this.data.map[id]).sort(sortByStartTime);\n  }\n\n  get token() {\n    return this.data.token;\n  }\n\n  get timestamp() {\n    return this.data.timestamp;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get refreshLock() {\n    return this._refreshLock;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  @proxify\n  async _fetch({\n    dateFrom,\n    dateTo,\n  }: Pick<ReadUserCallLogParameters, 'dateFrom' | 'dateTo'>) {\n    const perPageParam = this._isLimitList\n      ? { perPage: this._listRecordCount }\n      : {};\n    return fetchList(\n      (params) =>\n        this._deps.client\n          .account()\n          .extension()\n          .callLog()\n          .list({\n            ...params,\n            dateFrom,\n            dateTo,\n            ...perPageParam,\n          }) as Promise<UserCallLogResponseData>,\n    );\n  }\n\n  @proxify\n  async _iSync() {\n    const ownerId = this._deps.auth.ownerId;\n    try {\n      const data: CallLogSyncData = await this._deps.client\n        .account()\n        .extension()\n        .callLogSync()\n        .list({\n          syncType: syncTypes.iSync,\n          syncToken: this.token,\n          showDeleted: this._enableDeleted,\n        });\n      if (ownerId !== this._deps.auth.ownerId) throw Error('request aborted');\n      this.syncSuccess({\n        ...processData(data),\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._deps.auth.ownerId) {\n        // iSyncError\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async _fSync() {\n    const ownerId = this._deps.auth.ownerId;\n    try {\n      const dateFrom = getISODateFrom(this._daySpan);\n      const data: CallLogSyncData = await this._deps.client\n        .account()\n        .extension()\n        .callLogSync()\n        .list({\n          recordCount: this._recordCount,\n          syncType: syncTypes.fSync,\n          dateFrom,\n        });\n      if (ownerId !== this._deps.auth.ownerId) throw Error('request aborted');\n      let supplementRecords: CallLogRecords;\n      const { records, timestamp, syncToken } = processData(data);\n      if (records.length >= this._recordCount) {\n        // reach the max record count\n        supplementRecords = await this._fetch({\n          dateFrom,\n          dateTo: getISODateTo(records),\n        });\n      }\n      if (ownerId !== this._deps.auth.ownerId) throw Error('request aborted');\n      if (this._enableDeleted) {\n        this.resetData();\n      }\n      this.syncSuccess({\n        records,\n        supplementRecords,\n        timestamp,\n        syncToken,\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._deps.auth.ownerId) {\n        // fSyncError\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async _sync(syncType: SyncType) {\n    const ownerId = this._deps.auth.ownerId;\n    try {\n      let shouldFSync = syncType === syncTypes.fSync;\n      if (!shouldFSync) {\n        try {\n          await this._iSync();\n        } catch (error) {\n          shouldFSync = true;\n        }\n      }\n      if (shouldFSync && ownerId === this._deps.auth.ownerId) {\n        await this._fSync();\n      }\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error) {\n      if (ownerId === this._deps.auth.ownerId) {\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n      }\n    }\n    this._promise = null;\n  }\n\n  @proxify\n  async sync(syncType = this.token ? syncTypes.iSync : syncTypes.fSync) {\n    if (!this._promise) {\n      this._promise = this._sync(syncType);\n      return this._promise;\n    }\n    if (!this._queueSync) {\n      this._queueSync = (async () => {\n        await this._promise;\n        this._promise = (async () => {\n          await sleep(300);\n          return this._sync(syncType);\n        })();\n        this._queueSync = null;\n        return this._promise;\n      })();\n      return this._queueSync;\n    }\n    return this._queueSync;\n  }\n\n  @proxify\n  fetchData() {\n    return this.sync();\n  }\n\n  get mainCompanyNumbers() {\n    return this._deps.extensionPhoneNumber.numbers\n      .filter(({ usageType }) => usageType === 'MainCompanyNumber')\n      .map(({ phoneNumber }) => phoneNumber);\n  }\n\n  get pollingInterval() {\n    return this.ttl;\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n\n  _startPolling(t = this.timestamp + this.pollingInterval + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._deps.tabManager || this._deps.tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  _retry(t = this.timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n        if (!this._deps.tabManager || this._deps.tabManager.active) {\n          this.fetchData();\n        } else {\n          // continue retry checks in case tab becomes main tab\n          this._retry();\n        }\n      }\n    }, t);\n  }\n}\n"],"file":"CallLog.js"}