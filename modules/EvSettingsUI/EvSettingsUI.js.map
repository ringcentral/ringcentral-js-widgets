{"version":3,"sources":["modules/EvSettingsUI/EvSettingsUI.ts"],"names":["LOGIN_TYPE","RC_PHONE","RC_SOFTPHONE","RC_EXTERNAL","EvSettingsUI","name","deps","that","_deps","locale","currentLocale","evAuth","agentSettings","loginDTS","loginType","dialDest","inboundSettings","skillProfile","evAgentSession","resetFormGroup","routerInteraction","push","agentPermissions","version","agentName","userName","username","sessionInfo","disableEditSessionButton","evCallMonitor","isOnCall","evSettings","isOffhooking","isOffhook","showEditSessionIcon","allowLoginUpdates","onLogout","logout","goToSessionUpdatePage","split","phoneNumber","type","formatedPhoneNumber","loginTime","format","getLocalString","i18n","getString","profileName","label","value","agent","agentConfig","firstName","lastName","RcUIModuleV2"],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport { computed, RcUIModuleV2 } from '@ringcentral-integration/core';\n\nimport {\n  EvSettingsUIFunctions,\n  EvSettingsUIProps,\n  SessionInfo,\n} from '../../interfaces/EvSettingsUI.interface';\nimport { formatPhoneNumber } from '../../lib/FormatPhoneNumber';\nimport { Deps, SettingsUI } from './EvSettingsUI.interface';\nimport i18n from './i18n';\n\nconst LOGIN_TYPE = {\n  RC_PHONE: 'ringCentralPhone',\n  RC_SOFTPHONE: 'integratedPhone',\n  RC_EXTERNAL: 'externalPhone',\n};\n\ntype LoginType = keyof typeof LOGIN_TYPE;\n\n@Module({\n  name: 'EvSettingsUI',\n  deps: [\n    'EvClient',\n    'Locale',\n    'RouterInteraction',\n    'EvAuth',\n    'EvSettings',\n    'Version',\n    'EvCallMonitor',\n    'EvAgentSession',\n  ],\n})\nclass EvSettingsUI extends RcUIModuleV2<Deps> implements SettingsUI {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  @computed((that: EvSettingsUI) => [\n    that._deps.locale.currentLocale,\n    that._deps.evAuth.agentSettings.loginDTS,\n    that._deps.evAuth.agentSettings.loginType,\n    that._deps.evAuth.agentSettings.dialDest,\n    that._deps.evAuth.inboundSettings.skillProfile,\n  ])\n  get sessionInfo(): SessionInfo {\n    const { loginDTS, loginType, dialDest } = this._deps.evAuth.agentSettings;\n\n    const [phoneNumber, type = 'RC_EXTERNAL'] = dialDest.split('@');\n\n    // TODO: find that why reponse empty phoneNumber by accident\n    const formatedPhoneNumber = formatPhoneNumber({\n      phoneNumber,\n      currentLocale: this._deps.locale.currentLocale,\n    });\n\n    const loginTime = moment(loginDTS).format('M/DD/YY h:mm A');\n\n    const getLocalString = (name: string) =>\n      i18n.getString(name, this._deps.locale.currentLocale);\n\n    const profileName =\n      this._deps.evAuth.inboundSettings.skillProfile?.profileName ??\n      getLocalString('noneSkillProfile');\n\n    return [\n      {\n        label: getLocalString(\n          LOGIN_TYPE[type as LoginType] ?? 'integratedPhone',\n        ),\n        value: LOGIN_TYPE[type as LoginType] ? formatedPhoneNumber : dialDest,\n      },\n      {\n        label: getLocalString('loginStyle'),\n        value: loginType,\n      },\n      {\n        label: getLocalString('loginTime'),\n        value: loginTime,\n      },\n      {\n        label: getLocalString('skillProfile'),\n        value: profileName,\n      },\n    ];\n  }\n\n  goToSessionUpdatePage() {\n    this._deps.evAgentSession.resetFormGroup();\n    this._deps.routerInteraction.push('/sessionUpdate');\n  }\n\n  get agentName() {\n    const { firstName, lastName } =\n      this._deps.evAuth.agent.agentConfig.agentSettings;\n    if (!firstName && !lastName) {\n      return null;\n    }\n    return `${firstName} ${lastName}`;\n  }\n\n  getUIProps(): EvSettingsUIProps {\n    const { agentSettings, agentPermissions } = this._deps.evAuth;\n    return {\n      currentLocale: this._deps.locale.currentLocale,\n      version: this._deps.version,\n      agentName: this.agentName,\n      userName: agentSettings.username,\n      sessionInfo: this.sessionInfo,\n      // pendingdisposition?\n      disableEditSessionButton:\n        this._deps.evCallMonitor.isOnCall ||\n        this._deps.evSettings.isOffhooking ||\n        this._deps.evSettings.isOffhook,\n      showEditSessionIcon: agentPermissions.allowLoginUpdates,\n    };\n  }\n\n  getUIFunctions(): EvSettingsUIFunctions {\n    return {\n      onLogout: () => this._deps.evAuth.logout(),\n      goToSessionUpdatePage: () => this.goToSessionUpdatePage(),\n    };\n  }\n}\nexport { EvSettingsUI };\n"],"file":"EvSettingsUI.js"}