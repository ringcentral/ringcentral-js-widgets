{"version":3,"sources":["modules/RingCentralExtensions/RingCentralExtensions.ts"],"names":["RingCentralExtensions","name","deps","dep","optional","enableCache","storageKey","_core","_webSocketExtension","_currentWs","_syncWsStatusHandler","_syncWebSocketReadyState","CoreExtension","debugMode","debugExtension","DebugExtension","_deps","ringCentralExtensionsOptions","debugOptions","installExtension","rcSdkExtension","RcSdkExtension","rcSdk","sdk","wsOptions","webSocketOptions","WebSocketExtension","wscToken","cachedWsc","token","eventEmitter","addListener","Events","newWsc","wsc","_cacheWsc","console","error","_setupInfra","_exposeConnectionEvents","newWebSocketObject","ws","_onCreated","options","autoRecover","autoRecoverSuccess","autoRecoverFailed","sleepDetector","on","events","detected","ready","recoverWebSocketConnection","auth","addAfterLoggedInHandler","addBeforeLogoutHandler","revokeWebSocketConnection","recover","revoke","removeEventListener","addEventListener","readyState","_setWebSocketReadyState","WebSocket","CONNECTING","webSocketReadyState","webSocketReadyStates","connecting","OPEN","open","CLOSING","closing","CLOSED","closed","log","client","service","RcModuleV2","action","storage","state","proxify"],"mappings":"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","sourcesContent":["import WebSocket from 'isomorphic-ws';\n\nimport CoreExtension from '@rc-ex/core';\nimport DebugExtension from '@rc-ex/debug';\nimport RcSdkExtension from '@rc-ex/rcsdk';\nimport WebSocketExtension, { Events } from '@rc-ex/ws';\nimport { Wsc } from '@rc-ex/ws/lib/types';\nimport {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { SDK } from '@ringcentral/sdk';\n\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { Deps } from './RingCentralExtensions.interface';\nimport {\n  WebSocketReadyState,\n  webSocketReadyStates,\n} from './webSocketReadyStates';\n\n@Module({\n  name: 'RingCentralExtensions',\n  deps: [\n    'Auth',\n    'Client',\n    'Storage',\n    { dep: 'SleepDetector', optional: true },\n    { dep: 'RingCentralExtensionsOptions', optional: true },\n  ],\n})\nexport class RingCentralExtensions extends RcModuleV2<Deps> {\n  // infra\n  private _core: CoreExtension;\n  private _webSocketExtension: WebSocketExtension;\n  // refs\n  private _currentWs: WebSocket;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'RingCentralExtensions',\n    });\n  }\n\n  private async _setupInfra() {\n    this._core = new CoreExtension();\n\n    // install DebugExtension\n    if (this.debugMode) {\n      const debugExtension = new DebugExtension(\n        this._deps.ringCentralExtensionsOptions?.debugOptions,\n      );\n      await this._core.installExtension(debugExtension);\n    }\n\n    // install RcSdkExtension\n    const rcSdkExtension = new RcSdkExtension({ rcSdk: this.sdk });\n    await this._core.installExtension(rcSdkExtension);\n\n    // install WebSocketExtension\n    const wsOptions = this._deps.ringCentralExtensionsOptions?.webSocketOptions;\n    this._webSocketExtension = new WebSocketExtension({\n      ...wsOptions,\n      wscToken: wsOptions?.wscToken ?? this.cachedWsc?.token,\n    });\n    this._webSocketExtension.eventEmitter.addListener(\n      Events.newWsc,\n      (wsc: Wsc) => {\n        this._cacheWsc(wsc);\n      },\n    );\n    try {\n      await this._core.installExtension(this._webSocketExtension);\n    } catch (ex) {\n      // It tries to establish connection on install.\n      // Catch the connection issue and ignore.\n      console.error('[RingCentralExtensions] Establish websocket failed', ex);\n    }\n  }\n\n  async onInitOnce() {\n    await this._setupInfra();\n\n    // expose WebSocket events\n    this._exposeConnectionEvents();\n    this._webSocketExtension.eventEmitter.addListener(\n      Events.newWebSocketObject,\n      async (ws) => {\n        // for mock WebSocket used\n        if (ws._onCreated) {\n          await ws._onCreated();\n        }\n        // expose events\n        this._exposeConnectionEvents();\n      },\n    );\n    if (this._webSocketExtension.options.autoRecover) {\n      this._webSocketExtension.eventEmitter.addListener(\n        Events.autoRecoverSuccess,\n        () => {\n          this._exposeConnectionEvents();\n        },\n      );\n      this._webSocketExtension.eventEmitter.addListener(\n        Events.autoRecoverFailed,\n        () => {\n          this._exposeConnectionEvents();\n        },\n      );\n    }\n\n    // register SleepDetector\n    this._deps.sleepDetector?.on(\n      this._deps.sleepDetector.events.detected,\n      async () => {\n        if (this.ready) {\n          await this.recoverWebSocketConnection();\n        }\n      },\n    );\n\n    // hook auth events\n    this._deps.auth.addAfterLoggedInHandler(() => {\n      this.recoverWebSocketConnection();\n    });\n    this._deps.auth.addBeforeLogoutHandler(() => {\n      this.revokeWebSocketConnection();\n    });\n  }\n\n  @action\n  private _cacheWsc(wsc: Wsc) {\n    this.cachedWsc = wsc;\n  }\n\n  @storage\n  @state\n  cachedWsc: Wsc = null;\n\n  @proxify\n  async recoverWebSocketConnection() {\n    await this._webSocketExtension.recover();\n    this._exposeConnectionEvents();\n  }\n\n  @proxify\n  async revokeWebSocketConnection() {\n    await this._webSocketExtension.revoke();\n    this._exposeConnectionEvents();\n  }\n\n  private _exposeConnectionEvents() {\n    if (this._currentWs) {\n      this._currentWs.removeEventListener('close', this._syncWsStatusHandler);\n      this._currentWs.removeEventListener('open', this._syncWsStatusHandler);\n      this._currentWs.removeEventListener('error', this._syncWsStatusHandler);\n      this._currentWs = null;\n    }\n    this._currentWs = this._webSocketExtension.ws;\n    if (this._currentWs) {\n      this._currentWs.addEventListener('close', this._syncWsStatusHandler);\n      this._currentWs.addEventListener('open', this._syncWsStatusHandler);\n      this._currentWs.addEventListener('error', this._syncWsStatusHandler);\n    }\n    this._syncWebSocketReadyState();\n  }\n\n  private _syncWsStatusHandler = () => {\n    this._syncWebSocketReadyState();\n  };\n\n  private _syncWebSocketReadyState() {\n    const readyState = this._webSocketExtension.ws?.readyState;\n    this._setWebSocketReadyState(readyState);\n  }\n\n  @action\n  _setWebSocketReadyState(readyState: WebSocketExtension['ws']['readyState']) {\n    switch (readyState) {\n      case WebSocket.CONNECTING:\n        this.webSocketReadyState = webSocketReadyStates.connecting;\n        break;\n      case WebSocket.OPEN:\n        this.webSocketReadyState = webSocketReadyStates.open;\n        break;\n      case WebSocket.CLOSING:\n        this.webSocketReadyState = webSocketReadyStates.closing;\n        break;\n      case WebSocket.CLOSED:\n        this.webSocketReadyState = webSocketReadyStates.closed;\n        break;\n      default:\n        this.webSocketReadyState = null;\n        break;\n    }\n    console.log(\n      `[RingCentralExtensions] > webSocketReadyState > ${this.webSocketReadyState}`,\n    );\n  }\n\n  @state\n  webSocketReadyState?: WebSocketReadyState = null;\n\n  get debugMode(): boolean {\n    return this._deps.ringCentralExtensionsOptions?.debugMode ?? false;\n  }\n\n  get sdk(): SDK {\n    return this._deps.client.service;\n  }\n\n  get core(): CoreExtension {\n    return this._core;\n  }\n\n  get webSocketExtension(): WebSocketExtension {\n    return this._webSocketExtension;\n  }\n}\n"],"file":"RingCentralExtensions.js"}