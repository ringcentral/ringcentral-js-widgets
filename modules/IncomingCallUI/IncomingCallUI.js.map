{"version":3,"sources":["modules/IncomingCallUI/IncomingCallUI.ts"],"names":["IncomingCallUI","name","deps","dep","optional","showContactDisplayPlaceholder","showCallQueueName","sourceIcons","_deps","webphone","locale","contactMatcher","contactSearch","regionSettings","forwardingNumber","brand","currentSession","ringingCallOnView","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","phoneNumber","appFeatures","isCDCEnabled","currentLocale","session","activeSessionId","areaCode","countryCode","forwardingNumbers","searchContactList","sortedResult","phoneTypeRenderer","phoneSourceNameRenderer","getAvatarUrl","extensionInfo","conferenceCall","formatPhone","siteCode","site","code","isMultipleSiteEnabled","answer","sessionId","closeMergingPair","reject","toVoiceMail","onForward","forwardNumber","forward","replyWithMessage","message","toggleMinimized","updateSessionMatchedContact","contact","hangup","onHold","hold","searchContact","pattern","debouncedSearch","searchString","RcUIModuleV2"],"mappings":"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","sourcesContent":["import callDirections from '@ringcentral-integration/commons/enums/callDirections';\nimport { NormalizedSession } from '@ringcentral-integration/commons/interfaces/Webphone.interface';\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport formatNumber from '@ringcentral-integration/commons/lib/formatNumber';\nimport {\n  RcUIModuleV2,\n  UIFunctions,\n  UIProps,\n} from '@ringcentral-integration/core';\n\nimport { checkShouldHidePhoneNumber } from '../../lib/checkShouldHidePhoneNumber';\nimport {\n  Deps,\n  IncomingCallContainerProps,\n  IncomingCallUIPanelProps,\n} from './IncomingCallUI.interface';\n\n@Module({\n  name: 'IncomingCallUI',\n  deps: [\n    'Webphone',\n    'Locale',\n    'ContactSearch',\n    'RegionSettings',\n    'ForwardingNumber',\n    'Brand',\n    'ExtensionInfo',\n    'AppFeatures',\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'IncomingCallUIOptions', optional: true },\n  ],\n})\nclass IncomingCallUI extends RcUIModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  getUIProps({\n    showContactDisplayPlaceholder = false,\n    showCallQueueName,\n    sourceIcons,\n  }: IncomingCallContainerProps): UIProps<IncomingCallUIPanelProps> {\n    const {\n      webphone,\n      locale,\n      contactMatcher,\n      contactSearch,\n      regionSettings,\n      forwardingNumber,\n      brand,\n    } = this._deps;\n    const currentSession: Partial<NormalizedSession> =\n      webphone.ringingCallOnView || {};\n    const contactMapping = contactMatcher && contactMatcher.dataMapping;\n    const fromMatches =\n      (contactMapping && contactMapping[currentSession.from]) || [];\n    const toMatches =\n      (contactMapping && contactMapping[currentSession.to]) || [];\n    const nameMatches =\n      currentSession.direction === callDirections.outbound\n        ? toMatches\n        : fromMatches;\n    let phoneNumber =\n      currentSession.direction === callDirections.outbound\n        ? currentSession.to\n        : currentSession.from;\n\n    if (\n      this._deps.appFeatures.isCDCEnabled &&\n      checkShouldHidePhoneNumber(phoneNumber, nameMatches)\n    ) {\n      phoneNumber = null;\n    }\n    return {\n      sourceIcons,\n      brand: brand.name,\n      nameMatches,\n      currentLocale: locale.currentLocale,\n      session: currentSession,\n      activeSessionId: webphone.activeSessionId,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n      forwardingNumbers: forwardingNumber.forwardingNumbers,\n      showContactDisplayPlaceholder,\n      searchContactList: contactSearch.sortedResult,\n      showCallQueueName,\n      phoneNumber,\n    };\n  }\n\n  getUIFunctions({\n    phoneTypeRenderer,\n    phoneSourceNameRenderer,\n    getAvatarUrl = () => null,\n  }: IncomingCallContainerProps): UIFunctions<IncomingCallUIPanelProps> {\n    const {\n      webphone,\n      regionSettings,\n      contactSearch,\n      extensionInfo,\n      conferenceCall,\n    } = this._deps;\n    return {\n      phoneTypeRenderer,\n      phoneSourceNameRenderer,\n      formatPhone: (phoneNumber) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: regionSettings.areaCode,\n          countryCode: regionSettings.countryCode,\n          siteCode: extensionInfo?.site?.code ?? '',\n          isMultipleSiteEnabled: extensionInfo?.isMultipleSiteEnabled ?? false,\n        }),\n      answer(sessionId) {\n        conferenceCall?.closeMergingPair();\n        webphone.answer(sessionId);\n      },\n      reject: (sessionId) => webphone.reject(sessionId),\n      toVoiceMail: (sessionId) => webphone.toVoiceMail(sessionId),\n      onForward: (sessionId, forwardNumber) =>\n        webphone.forward(sessionId, forwardNumber),\n      replyWithMessage: (sessionId, message) =>\n        webphone.replyWithMessage(sessionId, message),\n      toggleMinimized: (sessionId) => webphone.toggleMinimized(sessionId),\n      updateSessionMatchedContact: (sessionId, contact) =>\n        webphone.updateSessionMatchedContact(sessionId, contact),\n      getAvatarUrl,\n      hangup: (sessionId) => webphone.hangup(sessionId),\n      onHold: (sessionId) => webphone.hold(sessionId),\n      searchContact: (pattern) =>\n        contactSearch.debouncedSearch({ searchString: pattern }),\n    };\n  }\n}\n\nexport { IncomingCallUI };\n"],"file":"IncomingCallUI.js"}