{"version":3,"file":"IncomingCallUI.interface.js","names":[],"sources":["modules/IncomingCallUI/IncomingCallUI.interface.ts"],"sourcesContent":["import type { ComponentType, ReactElement } from 'react';\nimport type ForwardingNumberInfo from '@rc-ex/core/lib/definitions/ForwardingNumberInfo';\nimport type { IContact } from '@ringcentral-integration/commons/interfaces/Contact.model';\nimport type { Entity } from '@ringcentral-integration/commons/interfaces/Entity.interface';\nimport type { NormalizedSession } from '@ringcentral-integration/commons/interfaces/Webphone.interface';\nimport type { AccountInfo } from '@ringcentral-integration/commons/modules/AccountInfo';\nimport type { AppFeatures } from '@ringcentral-integration/commons/modules/AppFeatures';\nimport type { Brand } from '@ringcentral-integration/commons/modules/Brand';\nimport type { ConferenceCall } from '@ringcentral-integration/commons/modules/ConferenceCall';\nimport type { ContactMatcher } from '@ringcentral-integration/commons/modules/ContactMatcher';\nimport type { ContactSearch } from '@ringcentral-integration/commons/modules/ContactSearch';\nimport type { ExtensionInfo } from '@ringcentral-integration/commons/modules/ExtensionInfo';\nimport type { ForwardingNumber } from '@ringcentral-integration/commons/modules/ForwardingNumber';\nimport type { Locale } from '@ringcentral-integration/commons/modules/Locale';\nimport type { RegionSettings } from '@ringcentral-integration/commons/modules/RegionSettings';\nimport type { Webphone } from '@ringcentral-integration/commons/modules/Webphone';\n\nexport interface IncomingCallUIOptions {\n  //\n}\n\nexport interface Deps {\n  appFeatures: AppFeatures;\n  webphone: Webphone;\n  locale: Locale;\n  contactSearch: ContactSearch;\n  regionSettings: RegionSettings;\n  forwardingNumber: ForwardingNumber;\n  brand: Brand;\n  accountInfo: AccountInfo;\n  extensionInfo: ExtensionInfo;\n  conferenceCall?: ConferenceCall;\n  contactMatcher?: ContactMatcher;\n  IncomingCallUIOptions?: IncomingCallUIOptions;\n}\n\nexport interface IncomingCallContainerProps\n  extends Pick<IncomingCallUIPanelProps, 'getAvatarUrl'> {\n  showContactDisplayPlaceholder?: boolean;\n  phoneSourceNameRenderer?: (type: string) => string;\n  showCallQueueName: boolean;\n  sourceIcons?: Record<string, ComponentType>;\n  phoneTypeRenderer?: (type: string) => ReactElement;\n}\n\nexport interface IncomingCallUIPanelProps {\n  brand: string;\n  nameMatches: Entity[];\n  currentLocale: string;\n  session: Partial<NormalizedSession>;\n  activeSessionId: string | null | undefined;\n  areaCode: string;\n  countryCode: string;\n  forwardingNumbers: ForwardingNumberInfo[];\n  showContactDisplayPlaceholder: boolean;\n  searchContactList: {\n    id: string;\n    name: string;\n    phoneNumber: string;\n  }[];\n  phoneNumber?: string | null;\n  /**\n   * current call should should name if not match any contact\n   */\n  name: string | undefined | null;\n  sourceIcons?: Record<string, ComponentType>;\n  phoneTypeRenderer?: (type: string) => ReactElement;\n  phoneSourceNameRenderer?: (type: string) => string;\n  showCallQueueName: boolean;\n  formatPhone: (phoneNumber: string) => string | undefined;\n  answer: (sessionId: string) => void;\n  reject: Webphone['reject'];\n  toVoiceMail: Webphone['toVoiceMail'];\n  onForward: Webphone['forward'];\n  replyWithMessage: Webphone['replyWithMessage'];\n  toggleMinimized: Webphone['toggleMinimized'];\n  updateSessionMatchedContact: Webphone['updateSessionMatchedContact'];\n  getAvatarUrl: (contact: IContact) => Promise<string | null> | null;\n  hangup: Webphone['hangup'];\n  onHold: Webphone['hold'];\n  searchContact: (pattern: string) => Promise<void>;\n}\n"],"mappings":""}