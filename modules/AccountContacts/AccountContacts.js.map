{"version":3,"file":"AccountContacts.js","names":["_ramda","require","_core","_phoneSources","_phoneTypes","_batchApiHelper","_contactHelper","_di","_isBlank","_phoneTypeHelper","_proxify","_dec","_dec2","_dec3","_dec4","_class","_class2","_descriptor","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","iter","len","arr2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","Promise","then","_asyncToGenerator","fn","self","args","undefined","_initializerDefineProperty","property","descriptor","context","initializer","_classCallCheck","instance","Constructor","_defineProperties","props","_createClass","protoProps","staticProps","_toPrimitive","_typeof","String","input","hint","prim","toPrimitive","res","Number","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","decorators","desc","reverse","reduce","decorator","_initializerWarningHelper","Error","PRESENCE_ENQUEUE_DELAY","exports","MAXIMUM_BATCH_GET_PRESENCE","DEFAULT_PRESENCE_TTL","DEFAULT_AVATAR_TTL","DEFAULT_AVATAR_QUERY_INTERVAL","AccountContacts","Module","deps","dep","optional","computed","that","_deps","companyContacts","filteredContacts","profileImages","presences","accountContactsOptions","contacts","_RcModuleV","_super","_this","_getPresenceContexts","Map","_enqueueTimeoutId","fetchImageSuccess","_ref","_this2","imageId","imageUrl","ttl","data","Date","now","timestamp","URL","revokeObjectURL","batchFetchPresenceSuccess","_ref2","_this3","_ref2$presenceMap","presenceMap","isUpdated","isExpired","presence","onReset","_this4","clearTimeout","clear","_shouldInit","ready","pending","_shouldReset","_getProfileImage","regeneratorRuntime","mark","_callee","contact","useCache","image","response","_args","wrap","_callee$","_context","prev","id","type","hasProfileImage","abrupt","_avatarTtl","client","account","extension","profileImage","get","sent","t0","blob","t1","createObjectURL","t2","console","stop","getProfileImage","_x","getPresence","_this5","_contact$account","extensionId","_presenceTtl","accountId","contextKey","concat","callbacks","set","startProcessing","contexts","values","_fetchPresences","size","setTimeout","findContact","contactId","find","x","filterContacts","searchFilter","getFilterContacts","isCDCEnabled","directoryContacts","cdc","all","searchForPhoneNumbers","searchString","_this$_deps$extension","extensionInfo","isMultipleSiteEnabled","site","getSearchForPhoneNumbers","entityType","phoneSources","rcContact","options","siteCode","code","matchContactsByPhoneNumber","phoneNumber","_this$_deps$extension2","shouldMatchExtension","isAnExtension","accountInfo","maxExtensionNumberLength","getMatchContactsByPhoneNumber","ivrContacts","findPhoneNumber","getFindPhoneNumber","maxExtensionLength","_fetchPresences2","_callee2","_this6","responses","_callee2$","_context2","_batchFetchPresences","acc","_ref3","dndStatus","presenceStatus","telephonyStatus","userStatus","meetingStatus","_ref4","_iterator","_step","ex","_x2","_batchFetchPresences2","_callee5","_this7","presenceSet","accountExtensionMap","batchResponses","_callee5$","_context5","_ref5","_acc$accountId","extensionIds","includes","map","_ref6","_callee4","_callee4$","_context4","join","_ref7","_callee3","resp","_callee3$","_context3","json","_x5","batchGetApi","platform","service","url","t3","t4","t5","_x4","batch","errorCode","warn","_data","_ref8","_x3","_this$_deps$accountCo","_this$_deps$accountCo2","avatarTtl","_this$_deps$accountCo3","_this$_deps$accountCo4","presenceTtl","_this$_deps$accountCo5","_this$_deps$accountCo6","avatarQueryInterval","_this$_deps$appFeatur","appFeatures","_this8","item","isBlank","extensionNumber","sourceName","firstName","lastName","emails","email","phoneNumbers","phoneType","phoneTypes","profileImageUrl","contactStatus","status","phone","isSupportedPhoneNumber","convertUsageTypeToPhoneType","usageType","hidden","_contact$phoneNumbers","cdcContact","number","rcCompanyMapping","RcModuleV2","state","action","proxify"],"sources":["modules/AccountContacts/AccountContacts.ts"],"sourcesContent":["import { filter, forEach, join, keys, map, reduce } from 'ramda';\nimport type PresenceInfoResponse from '@rc-ex/core/lib/definitions/PresenceInfoResponse';\nimport type ValidationError from '@rc-ex/core/lib/definitions/ValidationError';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n} from '@ringcentral-integration/core';\n\nimport { phoneSources } from '../../enums/phoneSources';\nimport { phoneTypes } from '../../enums/phoneTypes';\nimport type {\n  ContactPresence,\n  ContactSource,\n  IContact,\n} from '../../interfaces/Contact.model';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport {\n  getFilterContacts,\n  getFindPhoneNumber,\n  getMatchContactsByPhoneNumber,\n  getSearchForPhoneNumbers,\n  isAnExtension,\n} from '../../lib/contactHelper';\nimport { Module } from '../../lib/di';\nimport { isBlank } from '../../lib/isBlank';\nimport {\n  convertUsageTypeToPhoneType,\n  isSupportedPhoneNumber,\n} from '../../lib/phoneTypeHelper';\nimport { proxify } from '../../lib/proxy/proxify';\nimport type {\n  Contact,\n  Deps,\n  DirectoryContacts,\n  GetPresenceContext,\n  PresenceMap,\n  Presences,\n  ProfileImages,\n} from './AccountContacts.interface';\n\nexport const PRESENCE_ENQUEUE_DELAY = 1 * 1000; // 1 second\nconst MAXIMUM_BATCH_GET_PRESENCE = 30;\nexport const DEFAULT_PRESENCE_TTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATAR_TTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATAR_QUERY_INTERVAL = 2 * 1000; // 2 seconds\n\n@Module({\n  name: 'AccountContacts',\n  deps: [\n    'Client',\n    'ExtensionInfo',\n    'AppFeatures',\n    'AccountInfo',\n    { dep: 'CompanyContacts' },\n    { dep: 'AccountContactsOptions', optional: true },\n  ],\n})\nexport class AccountContacts extends RcModuleV2<Deps> implements ContactSource {\n  protected _getPresenceContexts: Map<string, GetPresenceContext> = new Map();\n  protected _enqueueTimeoutId?: NodeJS.Timeout;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  @state\n  profileImages: ProfileImages = {};\n\n  presences: Presences = {};\n\n  @action\n  fetchImageSuccess({\n    imageId,\n    imageUrl,\n    ttl,\n  }: {\n    imageId: string;\n    imageUrl: string;\n    ttl: number;\n  }) {\n    const data: ProfileImages = {};\n    // TODO: refactor without side effect.\n    Object.keys(this.profileImages).forEach((key) => {\n      if (Date.now() - this.profileImages[key].timestamp < ttl) {\n        data[key] = this.profileImages[key];\n      } else {\n        URL.revokeObjectURL(this.profileImages[key].imageUrl);\n      }\n    });\n    this.profileImages = data;\n    this.profileImages[imageId] = {\n      imageUrl,\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * 1. presence should not store in redux, which will make the CTI rerender once it has some changes and dispatch some action\n   * 2. make sure this.presences's changes is immutable\n   * 3. If the Record feature is stable, then we should use the below implementation to make sure change is immutable\n   * ```\n   *  data = {\n   *      ...data,\n   *      [key]: this.presences[key]\n   *  }\n   * ```\n   */\n  batchFetchPresenceSuccess({\n    presenceMap = {},\n    ttl,\n  }: {\n    presenceMap?: PresenceMap;\n    ttl: number;\n  }) {\n    const data: Presences = {};\n    let isUpdated = false;\n    // TODO: refactor without side effect.\n    Object.keys(this.presences).forEach((key) => {\n      const isExpired = Date.now() - this.presences[key].timestamp >= ttl;\n      if (!isExpired) {\n        // new key: use new reference: immutable\n        data[key] = this.presences[key];\n      } else {\n        isUpdated = true;\n      }\n    });\n    Object.keys(presenceMap).forEach((key) => {\n      isUpdated = true;\n      data[key] = { presence: presenceMap[key], timestamp: Date.now() };\n    });\n    // need to make sure this.presences is immutable\n    this.presences = isUpdated ? data : this.presences;\n  }\n\n  @action\n  override onReset() {\n    // TODO: refactor without side effect.\n    Object.keys(this.profileImages).forEach((key) => {\n      URL.revokeObjectURL(this.profileImages[key].imageUrl);\n    });\n    this.profileImages = {};\n    this.presences = {};\n    clearTimeout(this._enqueueTimeoutId);\n    this._getPresenceContexts.clear();\n  }\n\n  get _avatarTtl() {\n    return this._deps.accountContactsOptions?.avatarTtl ?? DEFAULT_AVATAR_TTL;\n  }\n\n  get _presenceTtl() {\n    return (\n      this._deps.accountContactsOptions?.presenceTtl ?? DEFAULT_PRESENCE_TTL\n    );\n  }\n\n  get _avatarQueryInterval() {\n    return (\n      this._deps.accountContactsOptions?.avatarQueryInterval ??\n      DEFAULT_AVATAR_QUERY_INTERVAL\n    );\n  }\n\n  get isCDCEnabled() {\n    // TODO: default to true when cdc feature is ready for production.\n    return this._deps.appFeatures?.isCDCEnabled;\n  }\n\n  override _shouldInit() {\n    return this._deps.companyContacts.ready && this.pending;\n  }\n\n  override _shouldReset() {\n    return !this._deps.companyContacts.ready && this.ready;\n  }\n\n  // interface of ContactSource\n  @proxify\n  async getProfileImage(contact: IContact, useCache = true) {\n    if (\n      !contact ||\n      !contact.id ||\n      contact.type !== 'company' ||\n      !contact.hasProfileImage\n    ) {\n      return null;\n    }\n\n    const imageId = contact.id;\n    if (\n      useCache &&\n      this.profileImages[imageId] &&\n      Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl\n    ) {\n      const image = this.profileImages[imageId].imageUrl;\n      return image;\n    }\n    let imageUrl = null;\n    try {\n      const response = await this._deps.client\n        .account(contact.account!.id)\n        .extension(contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response.blob());\n      this.fetchImageSuccess({\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e: any /** TODO: confirm with instanceof */) {\n      console.error(e);\n    }\n    return imageUrl;\n  }\n\n  // interface of ContactSource\n  @proxify\n  getPresence(\n    contact: IContact,\n    useCache = true,\n  ): Promise<ContactPresence | null> {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const extensionId = contact.id;\n      if (\n        useCache &&\n        this.presences[extensionId] &&\n        Date.now() - this.presences[extensionId].timestamp < this._presenceTtl\n      ) {\n        const { presence } = this.presences[extensionId];\n        resolve(presence);\n        return;\n      }\n\n      const accountId = contact.account?.id;\n      if (!accountId) {\n        resolve(null);\n        return;\n      }\n\n      const contextKey = `${accountId}-${extensionId}`;\n      const context = this._getPresenceContexts.get(contextKey);\n      if (context) {\n        context.callbacks.push(resolve);\n      } else {\n        this._getPresenceContexts.set(contextKey, {\n          accountId,\n          extensionId,\n          callbacks: [resolve],\n        });\n      }\n\n      const startProcessing = () => {\n        const contexts = Array.from(this._getPresenceContexts.values());\n        this._getPresenceContexts.clear();\n        this._fetchPresences(contexts);\n      };\n\n      clearTimeout(this._enqueueTimeoutId!);\n      if (this._getPresenceContexts.size === MAXIMUM_BATCH_GET_PRESENCE) {\n        startProcessing();\n      } else {\n        this._enqueueTimeoutId = setTimeout(\n          startProcessing,\n          PRESENCE_ENQUEUE_DELAY,\n        );\n      }\n    });\n  }\n\n  // interface of ContactSource\n  findContact(contactId: string) {\n    return this.contacts.find((x) => x.id === contactId)!;\n  }\n\n  // interface of ContactSource\n  filterContacts(searchFilter: string) {\n    return getFilterContacts(\n      this.isCDCEnabled\n        ? this.directoryContacts.cdc\n        : this.directoryContacts.all,\n      searchFilter,\n    );\n  }\n\n  // interface of ContactSource\n  searchForPhoneNumbers(searchString: string) {\n    const { isMultipleSiteEnabled, site } = this._deps.extensionInfo;\n    return getSearchForPhoneNumbers({\n      contacts: this.isCDCEnabled\n        ? this.directoryContacts.cdc\n        : this.directoryContacts.all,\n      searchString,\n      entityType: phoneSources.rcContact,\n      options: { isMultipleSiteEnabled, siteCode: site?.code },\n    });\n  }\n\n  // interface of ContactSource\n  matchContactsByPhoneNumber(phoneNumber: string) {\n    const { isMultipleSiteEnabled, site } = this._deps.extensionInfo;\n    const shouldMatchExtension = isAnExtension(\n      phoneNumber,\n      this._deps.accountInfo.maxExtensionNumberLength,\n    );\n    return getMatchContactsByPhoneNumber({\n      contacts: [\n        ...this.contacts,\n        ...this._deps.companyContacts.ivrContacts,\n      ] as IContact[],\n      phoneNumber,\n      entityType: phoneSources.rcContact,\n      findPhoneNumber: getFindPhoneNumber({\n        phoneNumber,\n        shouldMatchExtension,\n        options: {\n          isMultipleSiteEnabled,\n          siteCode: site?.code,\n          maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n        },\n      }),\n    });\n  }\n\n  async _fetchPresences(contexts: GetPresenceContext[]) {\n    // request\n    const responses = await this._batchFetchPresences(contexts);\n    // response\n    const presenceMap = reduce(\n      (acc, { extensionId }) => {\n        const response = responses[extensionId];\n        if (response) {\n          const {\n            dndStatus,\n            presenceStatus,\n            telephonyStatus,\n            userStatus,\n            meetingStatus,\n          } = response;\n          acc[extensionId] = {\n            dndStatus,\n            presenceStatus,\n            telephonyStatus,\n            userStatus,\n            meetingStatus,\n          };\n        } else if (this.presences[extensionId]) {\n          // Should keep the previous state when fail to fetch\n          acc[extensionId] = this.presences[extensionId].presence;\n        }\n        return acc;\n      },\n      {} as PresenceMap,\n      contexts,\n    );\n    // update state\n    this.batchFetchPresenceSuccess({\n      presenceMap,\n      ttl: this._presenceTtl,\n    });\n    // callback\n    contexts.forEach(({ extensionId, callbacks }) => {\n      const presence = presenceMap[extensionId];\n      for (const resolve of callbacks) {\n        try {\n          resolve(presence);\n        } catch (ex) {\n          console.error(ex);\n        }\n      }\n    });\n  }\n\n  async _batchFetchPresences(contexts: GetPresenceContext[]) {\n    const presenceSet: Record<string, PresenceInfoResponse> = {};\n    try {\n      const accountExtensionMap = reduce(\n        (acc, { accountId, extensionId }) => {\n          const extensionIds = acc[accountId] ?? [];\n          if (!extensionIds.includes(extensionId)) {\n            extensionIds.push(extensionId);\n          }\n          acc[accountId] = extensionIds;\n          return acc;\n        },\n        {} as Record<string, string[]>,\n        contexts,\n      );\n      const batchResponses = await Promise.all<\n        (PresenceInfoResponse | ValidationError)[]\n      >(\n        map(async (accountId): Promise<any> => {\n          if (accountExtensionMap[accountId].length > 1) {\n            const extensionIds = join(',', accountExtensionMap[accountId]);\n            // extract json data now so the data appears in the same format\n            // as single requests\n            return Promise.all(\n              map(\n                async (resp) => resp.json(),\n                await batchGetApi({\n                  platform: this._deps.client.service.platform(),\n                  url: `/restapi/v1.0/account/${accountId}/extension/${extensionIds}/presence`,\n                }),\n              ),\n            );\n          }\n          // wrap single request response data in array to keep the same\n          // format as batch requests\n          const extensionId = accountExtensionMap[accountId][0];\n          return [\n            await this._deps.client\n              .account(accountId)\n              .extension(extensionId)\n              .presence()\n              .get(),\n          ];\n        }, keys(accountExtensionMap)),\n      );\n      // treat all data as batch since the data is normalized\n      forEach(\n        (batch) =>\n          forEach((data) => {\n            if ((data as ValidationError).errorCode) {\n              console.warn(data);\n              return;\n            }\n            const _data: PresenceInfoResponse = data;\n            const { id } = _data.extension!;\n            presenceSet[id!] = _data;\n          }, batch),\n        batchResponses,\n      );\n    } catch (e: any /** TODO: confirm with instanceof */) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  // interface of ContactSource\n  get sourceName() {\n    return 'company';\n  }\n\n  // interface of ContactSource\n  @computed((that: AccountContacts) => [\n    that._deps.companyContacts.filteredContacts,\n    that.profileImages,\n    that.presences,\n    that._deps.accountContactsOptions,\n  ])\n  get directoryContacts(): DirectoryContacts {\n    return reduce(\n      (result, item) => {\n        if (!isBlank(item.extensionNumber)) {\n          const id = `${item.id}`;\n          const contact: Contact = {\n            ...item,\n            type: this.sourceName,\n            id,\n            name: item.name\n              ? item.name\n              : `${item.firstName || ''} ${item.lastName || ''}`,\n            emails: [item.email!],\n            extensionNumber: item.extensionNumber,\n            hasProfileImage: !!item.profileImage,\n            phoneNumbers: [\n              {\n                phoneNumber: item.extensionNumber,\n                phoneType: phoneTypes.extension,\n              },\n            ],\n            profileImageUrl:\n              this.profileImages[id] && this.profileImages[id].imageUrl,\n            presence: this.presences[id] && this.presences[id].presence,\n            contactStatus: item.status,\n          };\n\n          if (item.phoneNumbers && item.phoneNumbers.length > 0) {\n            item.phoneNumbers.forEach((phone) => {\n              isSupportedPhoneNumber(phone) &&\n                contact.phoneNumbers!.push({\n                  ...phone,\n                  phoneType: convertUsageTypeToPhoneType(phone?.usageType),\n                });\n            });\n          }\n          result.all.push(contact);\n          if (!contact.hidden) {\n            const cdcContact = {\n              ...contact,\n              phoneNumbers: filter(\n                (number) => !number.hidden,\n                contact.phoneNumbers ?? [],\n              ),\n            };\n            result.cdc.push(cdcContact);\n          }\n        }\n        return result;\n      },\n      {\n        all: [],\n        cdc: [],\n      } as DirectoryContacts,\n      this._deps.companyContacts.filteredContacts,\n    );\n  }\n\n  // interface of ContactSource\n  get contacts() {\n    return this.directoryContacts.all;\n  }\n\n  // interface of ContactSource\n  @computed((that: AccountContacts) => [\n    that._deps.companyContacts.filteredContacts,\n  ])\n  get rawContacts() {\n    return this._deps.companyContacts.filteredContacts;\n  }\n\n  @computed((that: AccountContacts) => [that.contacts])\n  get rcCompanyMapping() {\n    const rcCompanyMapping: any = {};\n    this.contacts.forEach((item: any) => {\n      rcCompanyMapping[item.id] = item;\n    });\n    return rcCompanyMapping;\n  }\n\n  // interface of ContactSource\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"mappings":"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"}