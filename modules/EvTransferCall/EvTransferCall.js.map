{"version":3,"sources":["modules/EvTransferCall/EvTransferCall.ts"],"names":["EvTransferCall","name","deps","dep","optional","that","_deps","evCall","currentCall","evAuth","availableCountries","transferAgentList","transferAgentId","enableCache","storageKey","_eventEmitter","AsyncEventEmitter","_internalTransferCallbacks","cancelTemplate","_sendVoiceMailModalId","_incomingTransferCallModalId","_transferNotificationId","_transferDest","data","receivedCall","cancelable","isTransferCancelable","transferType","transferTypes","phoneBook","transferPhoneBookSelectedIndex","transferRecipientNumber","transferRecipientCountryId","stayOnCall","value","countryId","type","currentAgent","find","agentId","phoneNumber","index","transferStatus","evAgentSession","onTriggerConfig","setTransferStatus","transferStatuses","idle","evCallMonitor","onCallEnded","closeModals","closeLoadingNotification","evSubscription","subscribe","EvCallbackTypes","DIRECT_AGENT_TRANSFER","internalTransferCallback","status","directTransferStatues","ACCEPTED","directTransferTypes","WARM","transferAgentAvailable","setCancelableTransfer","showNotificationLoadingCancel","REJECTED","SUCCEEDED","includes","showNotificationLoadingSpinner","needCloseNotificationTypes","directTransferNotificationTypes","CANCELLED","VOICEMAIL","MISSED","DIRECT_AGENT_TRANSFER_NOTIF","PENDING","hasReceivedCall","setReceivedCall","_showIncomingTransferCallModal","onTransferStart","alert","info","message","transferEvents","START","loading","backdrop","ttl","isInternalTransfer","onTransferSuccess","success","transferSuccesses","TRANSFER_CONNECTED","onTransferError","CANCEL","_showSendVoiceMailModal","danger","transferErrors","TRANSFER_ERROR","onTransferEnd","console","log","update","action","dismiss","handler","on","END","ERROR","SUCCESS","modalUI","close","evClient","fetchDirectAgentList","result","agents","error","Array","isArray","changeAgentList","rejectDirectAgentTransferCall","uii","evWorkingState","setWorkingStateWorking","setTimeout","sendVoicemailDirectAgentTransfer","SEND_VOICEMAIL_SUCCESS","SEND_VOICEMAIL_ERROR","cancelInternalTransfer","Error","transferring","cancelDirectAgentTransfer","Promise","resolve","reject","COLD","cancelWarmTransferCall","warn","parsePhoneBookNumber","manualEntry","parseManualEntryNumber","transferPhoneBook","destination","EvTypeError","RECIPIENT_NUMBER_ERROR","toNumber","CONTACT_ID_ERROR","transferPhoneBookSelected","parseNumber","asyncEmit","internal","internalTransferCall","transferCall","dialDest","TYPE_ERROR","messageTypes","NO_SUPPORT_COUNTRY","INVALID_NUMBER","callErrors","noToNumber","AGENT_ID_ERROR","fetchAgentList","warmDirectAgentTransfer","coldDirectAgentTransfer","transferArgs","warmTransferCall","coldTransferCall","allowManualInternationalTransfer","warmTransferIntlCall","coldTransferIntlCall","templates","currentLocale","locale","content","getErrorContent","confirm","title","i18n","getString","confirmButtonText","cancelButtonText","onConfirm","sendVoicemailToAgent","childrenSize","acceptTransferCall","onCancel","rejectTransferCall","allowDirectAgentTransfer","reduce","prev","bookItem","country","parsedDestination","countryCode","formatTypes","e164","e","countryName","phoneBookName","push","phoneBookItemIndex","allowTransfer","endedCall","item","available","RcModuleV2","storage","state"],"mappings":"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","sourcesContent":["import { alpha3ToAlpha2 } from 'i18n-iso-countries';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport callErrors from '@ringcentral-integration/commons/modules/Call/callErrors';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { format, formatTypes } from '@ringcentral-integration/phone-number';\n\nimport {\n  directTransferNotificationTypes,\n  DirectTransferNotificationTypes,\n  directTransferStatues,\n  DirectTransferStatues,\n  directTransferTypes,\n  EvTransferType,\n  messageTypes,\n  transferErrors,\n  transferEvents,\n  TransferStatus,\n  transferStatuses,\n  transferSuccesses,\n  transferTypes,\n} from '../../enums';\nimport { Handler } from '../../interfaces/Common.interface';\nimport { EvTransferViewPhoneBookItem } from '../../interfaces/EvTransferCallUI.interface';\nimport { AsyncEventEmitter } from '../../lib/asyncEventEmitter';\nimport { checkCountryCode } from '../../lib/checkCountryCode';\nimport {\n  EvClientTransferParams,\n  EvDirectAgentListItem,\n  EvDirectAgentTransferResponse,\n  EvReceivedTransferCall,\n} from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { EvTypeError } from '../../lib/EvTypeError';\nimport { parseNumber } from '../../lib/parseNumber';\nimport {\n  Deps,\n  EvTransferFailHandler,\n  InternalTransferCallbacks,\n  TransferCall,\n} from './EvTransferCall.interface';\nimport i18n from './i18n';\n\n@Module({\n  name: 'EvTransferCall',\n  deps: [\n    'EvClient',\n    'EvCallMonitor',\n    'EvCall',\n    'EvSubscription',\n    'EvWorkingState',\n    'Storage',\n    'ModalUI',\n    'EvAuth',\n    'Locale',\n    'Alert',\n    'EvAgentSession',\n    { dep: 'EvTransferCallOptions', optional: true },\n  ],\n})\nclass EvTransferCall extends RcModuleV2<Deps> implements TransferCall {\n  protected _eventEmitter = new AsyncEventEmitter();\n  protected _internalTransferCallbacks: InternalTransferCallbacks = {};\n\n  // alertTemplate: ModalTemplate;\n  cancelTemplate: React.ReactNode;\n\n  private _sendVoiceMailModalId: string = null;\n  private _incomingTransferCallModalId: string = null;\n  private _transferNotificationId: string = null;\n  private _transferDest: string = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvTransferCall',\n    });\n  }\n\n  @storage\n  @state\n  receivedCall: EvReceivedTransferCall = null;\n\n  @storage\n  @state\n  isTransferCancelable = false;\n\n  @storage\n  @state\n  transferStatus: TransferStatus = transferStatuses.idle;\n\n  @storage\n  @state\n  transferType: EvTransferType = transferTypes.phoneBook;\n\n  @storage\n  @state\n  transferAgentId: string = null;\n\n  @storage\n  @state\n  transferAgentList: EvDirectAgentListItem[] = [];\n\n  @storage\n  @state\n  transferPhoneBookSelectedIndex: number = null;\n\n  @storage\n  @state\n  transferRecipientNumber = '';\n\n  @storage\n  @state\n  transferRecipientCountryId = 'USA';\n\n  @storage\n  @state\n  stayOnCall = true;\n\n  get transferring() {\n    return this.transferStatus === transferStatuses.loading;\n  }\n\n  get evClient() {\n    return this._deps.evClient;\n  }\n\n  get allowManualInternationalTransfer() {\n    return this._deps.evCall.currentCall?.allowManualInternationalTransfer;\n  }\n\n  get allowInternalTransfer() {\n    return this._deps.evCall.currentCall?.allowDirectAgentTransfer !== '0';\n  }\n\n  get isInternalTransfer() {\n    return this.transferType === transferTypes.internal;\n  }\n\n  @computed((that: EvTransferCall) => [\n    that._deps.evCall.currentCall,\n    that._deps.evAuth.availableCountries,\n  ])\n  get transferPhoneBook() {\n    return (\n      this._deps.evCall.currentCall?.transferPhoneBook?.reduce<\n        EvTransferViewPhoneBookItem[]\n      >((prev, bookItem, index) => {\n        const { countryId, destination, name } = bookItem;\n        const country = this._deps.evAuth.availableCountries.find(\n          (country) => country.countryId === countryId,\n        );\n\n        if (typeof country === 'undefined' || country === null) {\n          return prev;\n        }\n\n        let parsedDestination = '';\n\n        try {\n          parsedDestination = format({\n            phoneNumber: destination,\n            countryCode: alpha3ToAlpha2(countryId),\n            type: formatTypes.e164,\n          });\n        } catch (e) {\n          //\n        }\n\n        const countryName =\n          country.countryId !== 'USA'\n            ? country.countryName || country.countryId\n            : '';\n        const phoneBookName = `${name} ${countryName}`;\n\n        prev.push({\n          ...bookItem,\n          phoneBookName,\n          parsedDestination,\n          phoneBookItemIndex: index,\n        });\n\n        return prev;\n      }, []) || []\n    );\n  }\n\n  @action\n  setReceivedCall(data: EvReceivedTransferCall) {\n    this.receivedCall = data;\n  }\n\n  @action\n  setCancelableTransfer(cancelable: boolean) {\n    this.isTransferCancelable = cancelable;\n  }\n\n  @action\n  resetTransferStatus() {\n    this.receivedCall = null;\n    this.transferType = transferTypes.phoneBook;\n    this.transferAgentId = null;\n    this.transferAgentList = [];\n    this.transferPhoneBookSelectedIndex = null;\n    this.transferRecipientNumber = '';\n    this.transferRecipientCountryId = 'USA';\n    this.stayOnCall = true;\n    this.isTransferCancelable = false;\n    this._sendVoiceMailModalId = null;\n    this._incomingTransferCallModalId = null;\n    this._transferDest = null;\n  }\n\n  @action\n  changeStayOnCall(value: boolean) {\n    this.stayOnCall = !value;\n  }\n\n  @action\n  changeRecipientCountryId(countryId: string) {\n    this.transferRecipientCountryId = countryId;\n  }\n\n  @action\n  changeTransferType(type: EvTransferType) {\n    this.transferType = type;\n  }\n\n  @action\n  changeAgentList(data: EvDirectAgentListItem[]) {\n    const currentAgent = data.find(\n      ({ agentId }) => agentId === this.transferAgentId,\n    );\n    if (!currentAgent) {\n      this.transferAgentId = null;\n    }\n    this.transferAgentList = data;\n  }\n\n  @action\n  changeRecipientNumber(phoneNumber: string) {\n    this.transferRecipientNumber = phoneNumber;\n  }\n\n  @action\n  changeTransferPhoneBookSelected(index: number) {\n    this.transferPhoneBookSelectedIndex = index;\n  }\n\n  @action\n  changeTransferAgentId(agentId: string) {\n    this.transferAgentId = agentId;\n  }\n\n  @action\n  setTransferStatus(transferStatus: TransferStatus) {\n    this.transferStatus = transferStatus;\n  }\n\n  @computed((that: EvTransferCall) => [that._deps.evCall.currentCall])\n  get allowTransferCall() {\n    const { currentCall } = this._deps.evCall;\n    return currentCall?.allowTransfer && !currentCall.endedCall;\n  }\n\n  @computed((that: EvTransferCall) => [\n    that.transferAgentList,\n    that.transferAgentId,\n  ])\n  get transferAgentAvailable() {\n    return this.transferAgentList.find(\n      (item) => item.agentId === this.transferAgentId,\n    ).available;\n  }\n\n  onInitOnce() {\n    this._deps.evAgentSession.onTriggerConfig(async () => {\n      this.setTransferStatus(transferStatuses.idle);\n    });\n\n    this._deps.evCallMonitor.onCallEnded(() => {\n      this.setTransferStatus(transferStatuses.idle);\n      this.closeModals();\n      this.closeLoadingNotification();\n    });\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.DIRECT_AGENT_TRANSFER,\n      (data) => {\n        const internalTransferCallback =\n          this._internalTransferCallbacks[data.type];\n        if (\n          data.status === directTransferStatues.ACCEPTED &&\n          data.type === directTransferTypes.WARM\n        ) {\n          if (!this.transferAgentAvailable) {\n            this.setCancelableTransfer(true);\n            this.showNotificationLoadingCancel();\n          }\n          return;\n        }\n        if (\n          (\n            [\n              directTransferStatues.REJECTED,\n              directTransferStatues.SUCCEEDED,\n            ] as DirectTransferStatues[]\n          ).includes(data.status) &&\n          data.type === directTransferTypes.WARM\n        ) {\n          this.setCancelableTransfer(false);\n          this.showNotificationLoadingSpinner();\n        }\n        if (internalTransferCallback) {\n          return internalTransferCallback(data);\n        }\n      },\n    );\n\n    const needCloseNotificationTypes: DirectTransferNotificationTypes[] = [\n      directTransferNotificationTypes.CANCELLED,\n      directTransferNotificationTypes.VOICEMAIL,\n      directTransferNotificationTypes.MISSED,\n    ];\n\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.DIRECT_AGENT_TRANSFER_NOTIF,\n      (data) => {\n        if (data.status === directTransferNotificationTypes.PENDING) {\n          const hasReceivedCall = !!this.receivedCall;\n          this.setReceivedCall(data);\n          if (!hasReceivedCall) {\n            this._showIncomingTransferCallModal();\n          }\n        }\n\n        if (needCloseNotificationTypes.includes(data.status)) {\n          this.closeModals();\n\n          this.setReceivedCall(null);\n        }\n      },\n    );\n\n    this.onTransferStart(async () => {\n      this._transferNotificationId = await this._deps.alert.info({\n        message: transferEvents.START,\n        loading: true,\n        backdrop: true,\n        ttl: 0,\n      });\n      if (!this.isInternalTransfer) {\n        this.setCancelableTransfer(true);\n        this.showNotificationLoadingCancel();\n      }\n    });\n\n    this.onTransferSuccess(() => {\n      this.closeLoadingNotification();\n\n      this._deps.alert.success({\n        message: transferSuccesses.TRANSFER_CONNECTED,\n      });\n    });\n\n    this.onTransferError((data) => {\n      this.closeLoadingNotification();\n\n      // if that is cancel transfer from user do nothing.\n      if (data.type === directTransferTypes.CANCEL) {\n        return;\n      }\n\n      if (this.isInternalTransfer) {\n        return this._showSendVoiceMailModal(data);\n      }\n\n      this._deps.alert.danger({ message: transferErrors.TRANSFER_ERROR });\n    });\n\n    // End transfer message will come after success and error.\n    this.onTransferEnd(() => {\n      console.log('==onTransferEnd==');\n    });\n  }\n\n  private showNotificationLoadingSpinner() {\n    this._deps.alert.update(this._transferNotificationId, {\n      message: transferEvents.START,\n      loading: true,\n    });\n  }\n\n  private showNotificationLoadingCancel() {\n    this._deps.alert.update(this._transferNotificationId, {\n      message: transferEvents.START,\n      action: this.cancelTemplate,\n    });\n  }\n\n  closeLoadingNotification() {\n    if (this._transferNotificationId) {\n      this._deps.alert.dismiss(this._transferNotificationId);\n      this._transferNotificationId = null;\n    }\n  }\n\n  onTransferStart(handler: Handler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on(transferEvents.START, handler);\n    }\n  }\n\n  onTransferEnd(handler: Handler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on(transferEvents.END, handler);\n    }\n  }\n\n  onTransferError(handler: EvTransferFailHandler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on(transferEvents.ERROR, handler);\n    }\n  }\n\n  onTransferSuccess(handler: Handler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on(transferEvents.SUCCESS, handler);\n    }\n  }\n\n  closeModals() {\n    // close send voice modal.\n    if (this._sendVoiceMailModalId) {\n      this._deps.modalUI.close(this._sendVoiceMailModalId);\n    }\n    // close ignore/accept transfer modal.\n    if (this._incomingTransferCallModalId) {\n      this._deps.modalUI.close(this._incomingTransferCallModalId);\n    }\n  }\n\n  async fetchAgentList() {\n    let data;\n    try {\n      const result = await this.evClient.fetchDirectAgentList();\n      if (result) {\n        data = result.agents;\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      if (Array.isArray(data)) {\n        this.changeAgentList(data);\n      }\n    }\n  }\n\n  rejectTransferCall() {\n    if (!this.receivedCall) return;\n    this._deps.evClient.rejectDirectAgentTransferCall(this.receivedCall.uii);\n    this.setReceivedCall(null);\n  }\n\n  acceptTransferCall() {\n    if (!this.receivedCall) return;\n    this._deps.evWorkingState.setWorkingStateWorking();\n    // TODO: need check why add timeout here?\n    setTimeout(() => this.setReceivedCall(null), 6000);\n  }\n\n  sendVoicemailToAgent() {\n    this.setTransferStatus(transferStatuses.loading);\n    this._deps.evClient.sendVoicemailDirectAgentTransfer(this.transferAgentId);\n    this._internalTransferCallbacks.VOICEMAIL = (data) => {\n      if (data.status === directTransferStatues.ACCEPTED) {\n        this._deps.alert.success({\n          message: transferSuccesses.SEND_VOICEMAIL_SUCCESS,\n        });\n      } else {\n        this._deps.alert.danger({\n          message: transferErrors.SEND_VOICEMAIL_ERROR,\n        });\n      }\n    };\n  }\n\n  async cancelTransfer() {\n    try {\n      await this.cancelInternalTransfer();\n    } catch (e) {\n      console.error(e);\n      throw new Error(`'cancelInternalTransfer' failed.`);\n    }\n    this.closeLoadingNotification();\n  }\n\n  async cancelInternalTransfer() {\n    if (this.transferring) {\n      if (this.isInternalTransfer) {\n        this._deps.evClient.cancelDirectAgentTransfer(this.transferAgentId);\n        await new Promise((resolve, reject) => {\n          this._internalTransferCallbacks.CANCEL = (data) => {\n            if (this.stayOnCall) {\n              this._internalTransferCallbacks.WARM(data);\n            } else {\n              this._internalTransferCallbacks.COLD(data);\n            }\n            if (data.status === directTransferStatues.SUCCEEDED) {\n              resolve(data);\n            } else {\n              reject(data);\n            }\n          };\n        });\n      } else if (this._transferDest) {\n        this._deps.evClient.cancelWarmTransferCall(this._transferDest);\n      } else {\n        console.warn('Unexpected cancel transfer');\n      }\n    }\n  }\n\n  parseNumber() {\n    switch (this.transferType) {\n      case transferTypes.phoneBook:\n        return this.parsePhoneBookNumber();\n      case transferTypes.manualEntry:\n        return this.parseManualEntryNumber();\n      default:\n        break;\n    }\n  }\n\n  getNumber() {\n    switch (this.transferType) {\n      case transferTypes.phoneBook:\n        return this.transferPhoneBook[this.transferPhoneBookSelectedIndex]\n          ?.destination;\n      case transferTypes.manualEntry:\n        return this.transferRecipientNumber;\n      default:\n        break;\n    }\n  }\n\n  private parseManualEntryNumber() {\n    if (!this.transferRecipientNumber) {\n      throw new EvTypeError({\n        type: transferErrors.RECIPIENT_NUMBER_ERROR,\n        data: `Abnormal Transfer: this.transferRecipientNumber -> ${this.transferRecipientNumber}`,\n      });\n    }\n    checkCountryCode(this.transferRecipientNumber);\n    const toNumber = parseNumber(this.transferRecipientNumber);\n    return { toNumber, countryId: this.transferRecipientCountryId };\n  }\n\n  private parsePhoneBookNumber() {\n    if (this.transferPhoneBookSelectedIndex === null) {\n      throw new EvTypeError({\n        type: transferErrors.CONTACT_ID_ERROR,\n        data: `Abnormal Transfer: this.transferPhoneBookSelected -> ${this.transferPhoneBookSelectedIndex}`,\n      });\n    }\n    const transferPhoneBookSelected =\n      this.transferPhoneBook[this.transferPhoneBookSelectedIndex];\n    checkCountryCode(transferPhoneBookSelected.destination);\n    const toNumber = parseNumber(transferPhoneBookSelected.destination);\n    return { toNumber, countryId: transferPhoneBookSelected.countryId };\n  }\n\n  async transfer() {\n    try {\n      const { toNumber, countryId } = this.parseNumber() || {};\n      await this._eventEmitter.asyncEmit(transferEvents.START);\n      this.setTransferStatus(transferStatuses.loading);\n      switch (this.transferType) {\n        case transferTypes.internal:\n          await this.internalTransferCall();\n          break;\n        case transferTypes.phoneBook:\n        case transferTypes.manualEntry:\n          await this.transferCall({\n            dialDest: toNumber,\n            countryId,\n          });\n          break;\n        default:\n          throw new EvTypeError({\n            type: transferErrors.TYPE_ERROR,\n            data: `Abnormal Transfer: this.transferType -> ${this.transferType}`,\n          });\n      }\n      await this._eventEmitter.asyncEmit(transferEvents.SUCCESS);\n    } catch (e) {\n      if (e instanceof EvTypeError) {\n        switch (e.type) {\n          case messageTypes.NO_SUPPORT_COUNTRY:\n            return this._deps.alert.danger({\n              message: messageTypes.NO_SUPPORT_COUNTRY,\n              ttl: 0,\n            });\n          case messageTypes.INVALID_NUMBER:\n            return this._deps.alert.danger({\n              message: callErrors.noToNumber,\n            });\n          default:\n            break;\n        }\n      }\n      await this._eventEmitter.asyncEmit(transferEvents.ERROR, e);\n      throw e;\n    } finally {\n      this.setTransferStatus(transferStatuses.idle);\n      await this._eventEmitter.asyncEmit(transferEvents.END);\n    }\n  }\n\n  async internalTransferCall() {\n    if (!this.transferAgentId) {\n      throw new EvTypeError({\n        type: transferErrors.AGENT_ID_ERROR,\n        data: `Abnormal Transfer: this.transferAgentId -> ${this.transferAgentId}`,\n      });\n    }\n    // it should update agent list before internal transfer call, in order to transfer with cancelable feature.\n    try {\n      await this.fetchAgentList();\n    } catch (e) {\n      console.warn(`fetch agent list error`);\n      console.error(e);\n    }\n    if (this.stayOnCall) {\n      this.evClient.warmDirectAgentTransfer(this.transferAgentId);\n      await new Promise((resolve, reject) => {\n        this._internalTransferCallbacks.WARM = (data) => {\n          if (\n            data.status === directTransferStatues.SUCCEEDED &&\n            data.type === directTransferTypes.WARM\n          ) {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        };\n      });\n    } else {\n      this.evClient.coldDirectAgentTransfer(this.transferAgentId);\n      await new Promise((resolve, reject) => {\n        this._internalTransferCallbacks.COLD = (data) => {\n          if (data.status === directTransferStatues.ACCEPTED) {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        };\n      });\n    }\n  }\n\n  async transferCall(transferArgs: { dialDest: string; countryId: string }) {\n    if (this.stayOnCall) {\n      await this.warmTransferCall(transferArgs);\n    } else {\n      await this.coldTransferCall(transferArgs);\n    }\n  }\n\n  async warmTransferCall({ dialDest, countryId }: EvClientTransferParams) {\n    if (countryId !== 'USA' && countryId !== 'CAN') {\n      if (this.allowManualInternationalTransfer) {\n        this._transferDest = dialDest;\n        await this.evClient.warmTransferIntlCall({\n          dialDest,\n          countryId,\n        });\n      } else {\n        throw new Error(\n          `Unexpected Error: ban transferring international call`,\n        );\n      }\n    } else {\n      this._transferDest = dialDest;\n      await this.evClient.warmTransferCall({ dialDest });\n    }\n  }\n\n  async coldTransferCall({ dialDest, countryId }: EvClientTransferParams) {\n    if (countryId !== 'USA' && countryId !== 'CAN') {\n      if (this.allowManualInternationalTransfer) {\n        await this.evClient.coldTransferIntlCall({\n          dialDest,\n          countryId,\n        });\n      } else {\n        // TODO handle to ban transferring international call\n      }\n    } else {\n      await this.evClient.coldTransferCall({ dialDest });\n    }\n  }\n\n  setCancelTemplate(templates: React.ReactNode) {\n    this.cancelTemplate = templates;\n  }\n\n  private _showSendVoiceMailModal(data: EvDirectAgentTransferResponse) {\n    const { currentLocale } = this._deps.locale;\n\n    const content = this.getErrorContent(data);\n\n    this._sendVoiceMailModalId = this._deps.modalUI.confirm({\n      title: i18n.getString('transferModalTitle', currentLocale),\n      content: i18n.getString(content, currentLocale),\n      confirmButtonText: i18n.getString('sendVoicemail', currentLocale),\n      cancelButtonText: i18n.getString('selectOtherAgents', currentLocale),\n      onConfirm: () => {\n        this.sendVoicemailToAgent();\n      },\n      childrenSize: 'small',\n    });\n  }\n\n  private getErrorContent(data: EvDirectAgentTransferResponse) {\n    if (data.status === 'FAILED') {\n      // ? that is from ev backend message.\n      if (data.message.includes('Routing')) {\n        return 'transferFailedContent';\n      }\n      return 'transferTimeOutContent';\n    }\n\n    if (data.status === 'REJECTED') {\n      return 'transferRejectedContent';\n    }\n\n    if (data.type === 'CANCEL') {\n      return 'transferCancelContent';\n    }\n\n    return 'transferFailedContent';\n  }\n\n  private _showIncomingTransferCallModal() {\n    const { currentLocale } = this._deps.locale;\n\n    this._incomingTransferCallModalId = this._deps.modalUI.confirm({\n      title: i18n.getString('incomingTransferTitle', currentLocale),\n      content: i18n.getString('incomingTransferContent', currentLocale),\n      confirmButtonText: i18n.getString(\n        'acceptIncomingTransfer',\n        currentLocale,\n      ),\n      cancelButtonText: i18n.getString('ignoreIncomingTransfer', currentLocale),\n      onConfirm: () => {\n        this.acceptTransferCall();\n      },\n      onCancel: () => {\n        this.rejectTransferCall();\n      },\n      childrenSize: 'small',\n    });\n  }\n}\n\nexport { EvTransferCall };\n"],"file":"EvTransferCall.js"}