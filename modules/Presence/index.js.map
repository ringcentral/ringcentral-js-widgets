{"version":3,"sources":["modules/Presence/index.ts"],"names":["presenceRegExp","detailedPresenceRegExp","Presence","deps","dep","optional","detailed","fetchRemainingDelay","ttl","polling","pollingInterval","connectivityMonitor","extensionFeatures","options","getDataReducer","fetchFunction","endpoint","_detailed","subscriptionFilters","detailedPresence","presence","_client","service","platform","get","response","json","subscriptionHandler","message","regExp","test","event","body","sequence","store","dispatch","data","type","actionTypes","notification","lastDndStatus","dndStatus","timestamp","Date","now","activeCalls","totalActiveCalls","length","_fetchRemainingCalls","readyCheckFn","_extensionFeatures","ready","_connectivityMonitor","ensureExist","call","fetchData","_shouldInit","_connectivity","connectivity","_hasPermission","params","features","EditPresenceStatus","available","ownerId","_auth","put","updateSuccess","updateError","error","userStatusParams","userStatus","takeAllCalls","doNotAcceptDepartmentCalls","lastNotDisturbDndStatus","presenceStatus","doNotAcceptAnyCalls","_getUpdateStatusParams","_update","busy","offline","presenceData","setAvailable","setBusy","setDoNotDisturb","setInvisible","ObjectMap","prefixKeys","keys","_name","telephonyStatus","meetingStatus","ReadPresenceStatus","DataFetcher","proxify","selector","calls","filter","map","sessionId"],"mappings":"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","sourcesContent":["import { ObjectMap } from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport { presenceStatus } from '../../enums/presenceStatus.enum';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport { isEnded, removeInboundRingOutLegs } from '../../lib/callLogHelpers';\nimport DataFetcher from '../../lib/DataFetcher';\nimport debounce from '../../lib/debounce';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\nimport dndStatus from './dndStatus';\nimport { getDataReducer } from './getPresenceReducer';\n\nconst presenceRegExp = /.*\\/presence(\\?.*)?/;\nconst detailedPresenceRegExp =\n  /.*\\/presence\\?detailedTelephonyState=true&sipData=true/;\n\n@Module({\n  deps: [\n    'ExtensionFeatures',\n    'ConnectivityMonitor',\n    { dep: 'Storage', optional: true },\n    { dep: 'PresenceOptions', optional: true },\n  ],\n})\nexport default class Presence extends DataFetcher {\n  constructor({\n    detailed = true,\n    fetchRemainingDelay = 2000,\n    ttl = 62 * 1000,\n    polling = false,\n    pollingInterval = 3 * 60 * 1000,\n    connectivityMonitor,\n    extensionFeatures,\n    ...options\n  }) {\n    super({\n      ...options,\n      polling,\n      ttl,\n      pollingInterval,\n      getDataReducer,\n      fetchFunction: async () => {\n        const endpoint = this._detailed\n          ? subscriptionFilters.detailedPresence\n          : subscriptionFilters.presence;\n        const response = await this._client.service.platform().get(endpoint);\n        return response.json();\n      },\n      subscriptionFilters: [\n        detailed\n          ? subscriptionFilters.detailedPresence\n          : subscriptionFilters.presence,\n      ],\n      subscriptionHandler: (message) => {\n        const regExp = this._detailed ? detailedPresenceRegExp : presenceRegExp;\n        if (regExp.test(message.event) && message.body) {\n          if (message.body.sequence) {\n            if (message.body.sequence < this.sequence) {\n              return;\n            }\n          }\n          const { body } = message;\n          this.store.dispatch({\n            data: body,\n            type: this.actionTypes.notification,\n            lastDndStatus: this.dndStatus,\n            timestamp: Date.now(),\n          });\n\n          /**\n           * as pointed out by Igor in https://jira.ringcentral.com/browse/PLA-33391,\n           * when the real calls count larger than the active calls returned by the pubnub,\n           * we need to pulling the calls manually.\n           */\n          const { activeCalls = [], totalActiveCalls = 0 } = body;\n          if (activeCalls.length !== totalActiveCalls) {\n            this._fetchRemainingCalls();\n          }\n        }\n      },\n      readyCheckFn: () =>\n        this._extensionFeatures.ready && this._connectivityMonitor.ready,\n    });\n    this._detailed = true;\n    this._connectivityMonitor = ensureExist.call(\n      this,\n      connectivityMonitor,\n      'connectivityMonitor',\n    );\n    this._extensionFeatures = extensionFeatures;\n    this._fetchRemainingCalls = debounce(\n      () => this.fetchData(),\n      fetchRemainingDelay,\n    );\n  }\n\n  get _name() {\n    return 'presence';\n  }\n\n  get _actionTypes() {\n    return ObjectMap.prefixKeys(\n      [\n        ...ObjectMap.keys(super._actionTypes),\n        'update',\n        'updateSuccess',\n        'updateError',\n        'notification',\n      ],\n      this._name,\n    );\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n    }\n    super._onStateChange();\n    if (\n      this.ready &&\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      // fetch data on regain connectivity\n      if (this._connectivity && this._hasPermission) {\n        this.fetchData();\n      }\n    }\n  }\n\n  @proxify\n  async _update(params) {\n    if (!this._extensionFeatures.features?.EditPresenceStatus?.available) {\n      return;\n    }\n    try {\n      const { ownerId } = this._auth;\n      const platform = this._client.service.platform();\n      const response = await platform.put(\n        '/restapi/v1.0/account/~/extension/~/presence',\n        params,\n      );\n      const data = await response.json();\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.updateSuccess,\n          data,\n          lastDndStatus: this.dndStatus,\n        });\n      }\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.updateError,\n        error,\n      });\n      throw error;\n    }\n  }\n\n  _getUpdateStatusParams(userStatusParams) {\n    const params = {\n      dndStatus: this.dndStatus,\n      userStatus: userStatusParams,\n    };\n    if (\n      params.dndStatus !== dndStatus.takeAllCalls &&\n      params.dndStatus !== dndStatus.doNotAcceptDepartmentCalls\n    ) {\n      params.dndStatus = this.lastNotDisturbDndStatus || dndStatus.takeAllCalls;\n    }\n    return params;\n  }\n\n  async setAvailable() {\n    if (\n      this.userStatus === presenceStatus.available &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.available);\n    await this._update(params);\n  }\n\n  async setBusy() {\n    if (\n      this.userStatus === presenceStatus.busy &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.busy);\n    await this._update(params);\n  }\n\n  async setDoNotDisturb() {\n    if (this.dndStatus === dndStatus.doNotAcceptAnyCalls) {\n      return;\n    }\n    const params = {\n      dndStatus: dndStatus.doNotAcceptAnyCalls,\n    };\n    await this._update(params);\n  }\n\n  async setInvisible() {\n    if (\n      this.userStatus === presenceStatus.offline &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.offline);\n    await this._update(params);\n  }\n\n  async setPresence(presenceData) {\n    switch (presenceData) {\n      case presenceStatus.available:\n        await this.setAvailable();\n        break;\n      case presenceStatus.busy:\n        await this.setBusy();\n        break;\n      case dndStatus.doNotAcceptAnyCalls:\n        await this.setDoNotDisturb();\n        break;\n      case presenceStatus.offline:\n        await this.setInvisible();\n        break;\n      default:\n        await this.setAvailable();\n        break;\n    }\n  }\n\n  async toggleAcceptCallQueueCalls() {\n    const params = {\n      userStatus: this.userStatus,\n    };\n    if (this.dndStatus === dndStatus.takeAllCalls) {\n      params.dndStatus = dndStatus.doNotAcceptDepartmentCalls;\n    } else if (this.dndStatus === dndStatus.doNotAcceptDepartmentCalls) {\n      params.dndStatus = dndStatus.takeAllCalls;\n    }\n    if (params.dndStatus) {\n      await this._update(params);\n    }\n  }\n\n  /**\n   * @override\n   * @description make sure data returns object so that the property getters\n   *  will not fail.\n   * @returns {Object}\n   */\n  get data() {\n    return super.data || {};\n  }\n\n  get sequence() {\n    return this.data.sequence;\n  }\n\n  @selector\n  activeCalls = [() => this.data.activeCalls, (calls) => calls || []];\n\n  @selector\n  calls = [\n    () => this.activeCalls,\n    (activeCalls) =>\n      removeInboundRingOutLegs(activeCalls).filter((call) => !isEnded(call)),\n  ];\n\n  @selector\n  sessionIdList = [\n    () => this.calls,\n    (calls) => calls.map((call) => call.sessionId),\n  ];\n\n  get telephonyStatus() {\n    return this.data.telephonyStatus;\n  }\n\n  get dndStatus() {\n    return this.data.dndStatus;\n  }\n\n  get lastNotDisturbDndStatus() {\n    return this.data.lastNotDisturbDndStatus;\n  }\n\n  get userStatus() {\n    return this.data.userStatus;\n  }\n\n  get presenceStatus() {\n    return this.data.presenceStatus;\n  }\n\n  get meetingStatus() {\n    return this.data.meetingStatus;\n  }\n\n  get presenceOption() {\n    // available\n    if (\n      this.data.userStatus === presenceStatus.available &&\n      this.data.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return presenceStatus.available;\n    }\n\n    // busy\n    if (\n      this.data.userStatus === presenceStatus.busy &&\n      this.data.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return presenceStatus.busy;\n    }\n\n    // doNotDisturb\n    if (this.data.dndStatus === dndStatus.doNotAcceptAnyCalls) {\n      return dndStatus.doNotAcceptAnyCalls;\n    }\n\n    // invisible\n    if (\n      this.data.userStatus === presenceStatus.offline &&\n      this.data.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return presenceStatus.offline;\n    }\n\n    return presenceStatus.available;\n  }\n\n  get _hasPermission() {\n    return !!this._extensionFeatures.features?.ReadPresenceStatus?.available;\n  }\n}\n"],"file":"index.js"}