{"version":3,"sources":["modules/ContactsV2/Contacts.ts"],"names":["Contacts","name","deps","dep","optional","that","_contactSources","size","checkSourceUpdated","Map","_sourcesLastStatus","_sourcesUpdatedAt","Date","now","_deps","contactSources","source","addSource","auth","loggedIn","sourceModuleReady","pending","ready","sourceName","Error","has","getPresence","getProfileImage","findContact","filterContacts","searchForPhoneNumbers","matchContactsByPhoneNumber","set","updated","Array","from","keys","get","lastStatus","sourceReady","data","contacts","contactId","contact","console","error","searchFilter","sources","values","filter","result","Promise","all","map","promise","resolve","then","items","concat","searchString","phoneNumber","phoneNumbers","useCache","type","syncPromises","sync","push","names","RcModuleV2","proxify"],"mappings":"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","sourcesContent":["import { computed, RcModuleV2 } from '@ringcentral-integration/core';\n\nimport {\n  ContactSource,\n  IContact,\n  TypedContact,\n  TypedPhoneNumber,\n} from '../../interfaces/Contact.model';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { Deps } from './Contacts.interface';\n\n@Module({\n  name: 'Contacts',\n  deps: [\n    'Auth',\n    { dep: 'ContactSources', optional: true },\n    { dep: 'ContactsOptions', optional: true },\n  ],\n})\nexport class Contacts extends RcModuleV2<Deps> {\n  protected _contactSources = new Map<string, ContactSource>();\n\n  protected _sourcesLastStatus = new Map<\n    string,\n    { ready?: boolean; data?: IContact[] }\n  >();\n\n  protected _sourcesUpdatedAt = Date.now();\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    for (const source of this._deps.contactSources ?? []) {\n      this.addSource(source);\n    }\n  }\n\n  _shouldInit() {\n    return this._deps.auth.loggedIn && this.sourceModuleReady && this.pending;\n  }\n\n  _shouldReset() {\n    return (!this._deps.auth.loggedIn || !this.sourceModuleReady) && this.ready;\n  }\n\n  addSource(source: ContactSource) {\n    if (!source.sourceName) {\n      throw new Error('[Contacts > ContactSource > sourceName] is required');\n    }\n    if (this._contactSources.has(source.sourceName)) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > sourceName] already exists`,\n      );\n    }\n    if (source.getPresence && typeof source.getPresence !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getPresence] must be a function`,\n      );\n    }\n    if (\n      source.getProfileImage &&\n      typeof source.getProfileImage !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getProfileImage] must be a function`,\n      );\n    }\n    if (source.findContact && typeof source.findContact !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > findContact] must be a function`,\n      );\n    }\n    if (source.filterContacts && typeof source.filterContacts !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > filterContacts] must be a function`,\n      );\n    }\n    if (\n      source.searchForPhoneNumbers &&\n      typeof source.searchForPhoneNumbers !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] must be a function`,\n      );\n    }\n    if (\n      source.matchContactsByPhoneNumber &&\n      typeof source.matchContactsByPhoneNumber !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] must be a function`,\n      );\n    }\n    this._contactSources.set(source.sourceName, source);\n    this._sourcesLastStatus.set(source.sourceName, {});\n    this._sourcesUpdatedAt = Date.now();\n  }\n\n  checkSourceUpdated() {\n    let updated = false;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      const lastStatus = this._sourcesLastStatus.get(sourceName);\n      if (\n        lastStatus.ready !== source.sourceReady ||\n        lastStatus.data !== source.contacts\n      ) {\n        updated = true;\n        this._sourcesLastStatus.set(sourceName, {\n          ready: source.sourceReady,\n          data: source.contacts,\n        });\n      }\n    }\n    if (updated) {\n      this._sourcesUpdatedAt = Date.now();\n    }\n    return this._sourcesUpdatedAt;\n  }\n\n  async findContact({\n    sourceName,\n    contactId,\n  }: {\n    sourceName: string;\n    contactId: string;\n  }) {\n    let contact = null;\n    const source = this._contactSources.get(sourceName);\n    if (source && typeof source.findContact === 'function') {\n      try {\n        contact = await source.findContact(contactId);\n      } catch (error) {\n        console.error(\n          `[Contacts > ContactSource(${source.sourceName}) > findContact] ${error}`,\n        );\n      }\n    }\n    return contact;\n  }\n\n  async filterContacts(searchFilter: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.filterContacts === 'function',\n    );\n    let result: IContact[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(source.filterContacts(searchFilter));\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > filterContacts] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async searchForPhoneNumbers(searchString: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.searchForPhoneNumbers === 'function',\n    );\n    let result: TypedPhoneNumber[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.searchForPhoneNumbers(searchString),\n        );\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContactsByPhoneNumber(phoneNumber: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.matchContactsByPhoneNumber === 'function',\n    );\n    let result: TypedContact[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.matchContactsByPhoneNumber(phoneNumber),\n        );\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContacts({ phoneNumbers }: { phoneNumbers: string[] }) {\n    const result: Record<string, TypedContact[]> = {};\n    await Promise.all(\n      phoneNumbers.map((phoneNumber) => {\n        const promise = this.matchContactsByPhoneNumber(phoneNumber);\n        return promise.then((items) => {\n          result[phoneNumber] = items;\n        });\n      }),\n    );\n    return result;\n  }\n\n  @proxify\n  async getProfileImage(contact: IContact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getProfileImage) {\n      const result = await source.getProfileImage(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async getPresence(contact: IContact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getPresence) {\n      const result = await source.getPresence(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async sync(...args: unknown[]) {\n    const syncPromises = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source.sync === 'function') {\n        syncPromises.push(source.sync(...args));\n      }\n    }\n    await Promise.all(syncPromises);\n  }\n\n  get sourceModuleReady() {\n    let ready = true;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (!source.ready) {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  }\n\n  @computed((that: Contacts) => [\n    that._contactSources.size,\n    that.checkSourceUpdated(),\n  ])\n  get sourceNames() {\n    const names = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (source.sourceReady) {\n        names.push(sourceName);\n      }\n    }\n    return names;\n  }\n\n  @computed((that: Contacts) => [that.checkSourceUpdated()])\n  get allContacts() {\n    let contacts: IContact[] = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (source.sourceReady && source.contacts) {\n        contacts = contacts.concat(source.contacts);\n      }\n    }\n    return contacts;\n  }\n}\n"],"file":"Contacts.js"}