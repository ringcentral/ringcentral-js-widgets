{"version":3,"sources":["modules/ExtensionInfoV2/ExtensionInfo.ts"],"names":["extensionRegExp","DEFAULT_COUNTRY","id","isoCode","callingCode","ExtensionInfo","name","deps","dep","optional","data","info","_stopWatching","extensionInfoOptions","_deps","polling","_source","DataSource","key","cleanOnReset","fetchFunction","client","account","extension","get","result","response","status","auth","logout","alert","danger","message","permissionsMessages","insufficientPrivilege","ttl","readyCheckFunction","loggedIn","dataFetcherV2","register","ready","disableCache","tabManager","active","test","event","body","hints","includes","subscriptionHints","companyNumbers","limits","features","permissions","videoConfiguration","fetchData","subscription","subscribe","subscriptionFilters","extensionInfo","_handleSubscription","extensionNumber","regionalSettings","homeCountry","departments","isMultipleSiteEnabled","extensionFeatures","SiteCodes","available","site","console","warn","Array","isArray","length","DataFetcherV2Consumer"],"mappings":"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","sourcesContent":["import {\n  ExtensionInfoEvent,\n  GetExtensionInfoResponse,\n} from '@rc-ex/core/definitions';\nimport { computed, watch } from '@ringcentral-integration/core';\nimport { reduce } from 'ramda';\nimport { Unsubscribe } from 'redux';\n\nimport { subscriptionFilters } from '../../enums/subscriptionFilters';\nimport { subscriptionHints } from '../../enums/subscriptionHints';\nimport { Module } from '../../lib/di';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport { permissionsMessages } from '../../enums/permissionsMessages';\nimport { Deps, RemappedServiceInfo } from './ExtensionInfo.interface';\n\nconst extensionRegExp = /.*\\/extension\\/\\d+$/;\nconst DEFAULT_COUNTRY = {\n  id: '1',\n  isoCode: 'US',\n  callingCode: '1',\n};\n\n@Module({\n  name: 'ExtensionInfo',\n  deps: [\n    'Auth',\n    'Client',\n    'DataFetcherV2',\n    'ExtensionFeatures',\n    { dep: 'Subscription', optional: true },\n    'Alert',\n    { dep: 'TabManager', optional: true },\n    { dep: 'ExtensionInfoOptions', optional: true },\n  ],\n})\nexport class ExtensionInfo extends DataFetcherV2Consumer<\n  Deps,\n  GetExtensionInfoResponse\n> {\n  protected _stopWatching: Unsubscribe;\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    const extensionInfoOptions = this._deps.extensionInfoOptions ?? {};\n    const { polling = true } = extensionInfoOptions;\n    this._source = new DataSource({\n      ...extensionInfoOptions,\n      key: 'extensionInfo',\n      polling,\n      cleanOnReset: true,\n      fetchFunction: async () => {\n        try {\n          const result: GetExtensionInfoResponse = await this._deps.client\n            .account()\n            .extension()\n            .get();\n          return result;\n        } catch (error) {\n          if (error.response?.status === 403) {\n            await this._deps.auth.logout();\n            this._deps.alert.danger({\n              message: permissionsMessages.insufficientPrivilege,\n              ttl: 0,\n            });\n            return {} as GetExtensionInfoResponse;\n          }\n          throw error;\n        }\n      },\n      readyCheckFunction: () => this._deps.auth.loggedIn,\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  _handleSubscription(message: ExtensionInfoEvent) {\n    if (\n      this.ready &&\n      (this._source.disableCache || (this._deps.tabManager?.active ?? true)) &&\n      extensionRegExp.test(message?.event) &&\n      !(\n        message.body?.hints?.includes(subscriptionHints.companyNumbers) ||\n        message.body?.hints?.includes(subscriptionHints.limits) ||\n        message.body?.hints?.includes(subscriptionHints.features) ||\n        message.body?.hints?.includes(subscriptionHints.permissions) ||\n        message.body?.hints?.includes(subscriptionHints.videoConfiguration)\n      )\n    ) {\n      this.fetchData();\n    }\n  }\n\n  onInit() {\n    if (this._deps.subscription) {\n      this._deps.subscription.subscribe([subscriptionFilters.extensionInfo]);\n      this._stopWatching = watch(\n        this,\n        () => this._deps.subscription.message,\n        (message) => this._handleSubscription(message),\n      );\n    }\n  }\n\n  onReset() {\n    this._stopWatching?.();\n    this._stopWatching = null;\n  }\n\n  @computed(({ data }: ExtensionInfo) => [data])\n  get info(): GetExtensionInfoResponse {\n    return this.data ?? {};\n  }\n\n  get id() {\n    return this.info.id;\n  }\n\n  get extensionNumber() {\n    return this.info.extensionNumber;\n  }\n\n  get country() {\n    return this.info.regionalSettings?.homeCountry || DEFAULT_COUNTRY;\n  }\n\n  get departments() {\n    return this.info.departments;\n  }\n\n  get isMultipleSiteEnabled() {\n    return !!(this._deps.extensionInfoOptions?.isMultipleSiteEnabled ?? false);\n  }\n\n  @computed(({ info }: ExtensionInfo) => [info])\n  get site() {\n    if (!this.isMultipleSiteEnabled) {\n      return null;\n    }\n    if (\n      this._deps.extensionFeatures.features?.SiteCodes?.available &&\n      !this.info.site\n    ) {\n      console.warn('site code enabled, but cannot retrieve site info');\n    }\n    return this.info.site || null;\n  }\n\n  get isCallQueueMember() {\n    return (\n      !!this.departments &&\n      Array.isArray(this.departments) &&\n      this.departments.length > 0\n    );\n  }\n}\n"],"file":"ExtensionInfo.js"}