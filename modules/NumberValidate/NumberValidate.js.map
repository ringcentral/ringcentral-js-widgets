{"version":3,"file":"NumberValidate.js","names":["_core","require","_phoneNumber","_NumberParserResponse","_cleanNumber","_interopRequireDefault","_contactHelper","_di","_hasNoAreaCode2","_isBlank","_normalizeNumber","_proxify","_callErrors","_NumberValidate","_dec","_class","_class2","obj","__esModule","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","err","undefined","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","prototype","_toPrimitive","_typeof","String","input","hint","prim","Symbol","toPrimitive","res","call","Number","_inherits","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_applyDecoratedDescriptor","property","decorators","context","desc","initializer","slice","reverse","reduce","decorator","NumberValidate","Module","name","deps","dep","optional","_RcModuleV","_super","isNoToNumber","isBlank","_parse","parse","countryCode","_deps","regionSettings","hasInvalidChars","isValid","hasNoAreaCode","_this$_deps$regionSet","areaCode","brand","brandConfig","allowRegionSettings","_isSpecial","phoneNumber","special","getAvailableExtension","extensionNumber","_contacts$find$extens","_contacts$find","maxExtensionNumberLength","isAnExtension","extensionInfo","_this$_deps$extension","isMultipleSiteEnabled","site","_this$_deps$companyCo","companyContacts","filteredContacts","ivrContacts","contacts","concat","find","item","_item$extensionNumber","isExtensionExist","extensionFromContacts","options","siteCode","code","isAvailableExtension","isNotAnExtension","maxExtensionLength","isCompanyExtension","companyNumber","_this$_deps$regionSet2","normalizedCompanyNumber","normalizeNumber","accountInfo","mainCompanyNumber","_validateNumbers","regeneratorRuntime","mark","_callee","phoneNumbers","validateResult","validatedNumbers","wrap","_callee$","_context","prev","next","validateFormat","abrupt","validateWithNumberParser","sent","stop","validateNumbers","_x","_this","errors","type","_validateWithNumberParser","_callee2","_this2","parsedNumbers","validatedPhoneNumbers","_callee2$","_context2","_numberParser","map","_this2$_deps$companyC","isSpecial","number","originalString","isAnExtensionNumber","extensionObj","enableCompanyPublicApi","availableExtension","numbers","_x2","_numberParser2","_callee3","_this$_deps$regionSet3","homeCountry","normalizedNumbers","response","_callee3$","_context3","_numberParserApi","international","country","callingCode","_x3","_numberParserApi2","_callee4","originalStrings","_callee4$","_context4","client","numberParser","post","_x4","_x5","_parsingPhoneNumber2","_callee5","data","_callee5$","_context5","service","platform","json","t0","alert","danger","message","callErrors","numberParseError","payload","_parsingPhoneNumber","_x6","_parseNumbers","_callee6","inputs","_this3","_this$_deps$regionSet4","defaultAreaCode","brandId","_callee6$","_context6","id","cleanNumber","contextSource","contextSourceOption","account","isoCode","outboundCallPrefix","appFeatures","OCPValue","conflictHandling","enableSmartDialPlan","results","handleResult","parseNumbers","_x7","validate","test","resultItem","_resultItem$formats","formatObj","formats","parseResult","isInternational","specialService","parsedNumber","category","Category","SpecialService","national","Extension","handleExtension","Regular","ShortCode","TollFree","e164Extended","e164","dialableExtended","Unknown","dialable","Ambiguous","handleAmbiguous","_resultItem$numberDet","numberDetails","externalNumber","_resultItem$numberDet2","_resultItem$numberDet3","_resultItem$numberDet4","phoneNumberISOCode","regionSettingsCountryCode","isUSOrCAOrPR","RcModuleV2","proxify","exports"],"sources":["modules/NumberValidate/NumberValidate.ts"],"sourcesContent":["import type ParsePhoneNumberResponse from '@rc-ex/core/lib/definitions/ParsePhoneNumberResponse';\nimport { RcModuleV2 } from '@ringcentral-integration/core';\nimport type { CountryCode } from '@ringcentral-integration/phone-number';\nimport { parse, isUSOrCAOrPR } from '@ringcentral-integration/phone-number';\n\nimport type {\n  NumberParserAPIResponse,\n  ParsePhoneNumberResultsItem,\n} from '../../interfaces/NumberParserResponse.interface';\nimport { Category } from '../../interfaces/NumberParserResponse.interface';\nimport cleanNumber from '../../lib/cleanNumber';\nimport { isAnExtension, isExtensionExist } from '../../lib/contactHelper';\nimport { Module } from '../../lib/di';\nimport { hasNoAreaCode } from '../../lib/hasNoAreaCode';\nimport { isBlank } from '../../lib/isBlank';\nimport { normalizeNumber } from '../../lib/normalizeNumber';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { callErrors } from '../Call/callErrors';\nimport type {\n  Deps,\n  ParsePhoneNumberAPIParam,\n  ParseResult,\n  ParseResultItem,\n  ValidatedPhoneNumbers,\n  ValidateFormattedError,\n  ValidateFormattingResult,\n  ValidateParsedError,\n  ValidateParsingResult,\n  ValidateResult,\n} from './NumberValidate.interface';\nimport { contextSourceOption } from './NumberValidate.interface';\n\n@Module({\n  name: 'NumberValidate',\n  deps: [\n    'Brand',\n    'Client',\n    'RegionSettings',\n    'AccountInfo',\n    'CompanyContacts',\n    'AppFeatures',\n    'Alert',\n    { dep: 'ExtensionInfo', optional: true },\n    { dep: 'NumberValidateOptions', optional: true },\n  ],\n})\nexport class NumberValidate extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  isNoToNumber(input: string) {\n    if (isBlank(input)) {\n      return true;\n    }\n    const { hasInvalidChars, isValid } = parse({\n      input,\n      countryCode: this._deps.regionSettings.countryCode,\n    });\n    if (hasInvalidChars || !isValid) {\n      return true;\n    }\n    return false;\n  }\n\n  hasNoAreaCode(input: string) {\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    return (\n      this._deps.brand.brandConfig.allowRegionSettings &&\n      hasNoAreaCode({ input, countryCode, areaCode })\n    );\n  }\n\n  _isSpecial(phoneNumber: { special?: boolean }) {\n    return !!phoneNumber?.special;\n  }\n\n  /**\n   * TODO: Currently we don't have clearly defined business rule on\n   * what extension numbers are considered available for dialing.\n   * @param {*} extensionNumber\n   * @returns {String} extensionNumber | null\n   */\n  getAvailableExtension(extensionNumber: string, maxExtensionNumberLength = 6) {\n    if (!isAnExtension(extensionNumber, maxExtensionNumberLength)) {\n      return null;\n    }\n    if (!this._deps.extensionInfo) {\n      return null;\n    }\n    const { isMultipleSiteEnabled, site } = this._deps.extensionInfo;\n    const { filteredContacts, ivrContacts } = this._deps.companyContacts;\n    const contacts = filteredContacts.concat(ivrContacts);\n    return (\n      contacts.find((item) =>\n        isExtensionExist({\n          extensionNumber,\n          extensionFromContacts: item.extensionNumber ?? '',\n          options: {\n            isMultipleSiteEnabled,\n            siteCode: site?.code,\n          },\n        }),\n      )?.extensionNumber ?? null\n    );\n  }\n\n  isAvailableExtension(extensionNumber: string) {\n    return !!this.getAvailableExtension(extensionNumber);\n  }\n\n  isNotAnExtension(extensionNumber: string, maxExtensionLength = 6) {\n    return (\n      extensionNumber &&\n      extensionNumber.length <= maxExtensionLength &&\n      !this._deps.companyContacts.isAvailableExtension(extensionNumber)\n    );\n  }\n\n  isCompanyExtension(companyNumber: string, extensionNumber: string) {\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    const normalizedCompanyNumber = normalizeNumber({\n      phoneNumber: companyNumber,\n      countryCode,\n      areaCode,\n      maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n    });\n    if (normalizedCompanyNumber !== this._deps.accountInfo.mainCompanyNumber) {\n      return false;\n    }\n    return this._deps.companyContacts.isAvailableExtension(extensionNumber);\n  }\n\n  @proxify\n  async validateNumbers(phoneNumbers: string[]): Promise<ValidateResult> {\n    const validateResult = this.validateFormat(phoneNumbers);\n    if (!validateResult.result) {\n      return validateResult;\n    }\n    const validatedNumbers = await this.validateWithNumberParser(phoneNumbers);\n    return validatedNumbers;\n  }\n\n  validateFormat(phoneNumbers: string[]): ValidateFormattingResult {\n    const errors: ValidateFormattedError = [];\n    phoneNumbers.forEach((phoneNumber) => {\n      if (this.isNoToNumber(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n      } else if (this.hasNoAreaCode(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noAreaCode' });\n      }\n    });\n    return {\n      result: errors.length === 0,\n      errors,\n    };\n  }\n\n  @proxify\n  async validateWithNumberParser(\n    phoneNumbers: string[],\n  ): Promise<ValidateParsingResult> {\n    const maxExtensionNumberLength =\n      this._deps.accountInfo.maxExtensionNumberLength;\n    const parsedNumbers = await this._numberParser(phoneNumbers);\n    const errors: ValidateParsedError = [];\n    const validatedPhoneNumbers: ValidatedPhoneNumbers = [];\n    parsedNumbers.map((phoneNumber) => {\n      const isSpecial = this._isSpecial(phoneNumber);\n      const number = phoneNumber.originalString;\n\n      const isAnExtensionNumber =\n        !isSpecial && isAnExtension(number!, maxExtensionNumberLength);\n      const extensionObj: {\n        availableExtension?: string;\n        isAnExtension?: boolean;\n      } = { isAnExtension: isAnExtensionNumber };\n      if (\n        !this._deps.companyContacts?.enableCompanyPublicApi &&\n        isAnExtensionNumber\n      ) {\n        const availableExtension = this.getAvailableExtension(\n          number!,\n          maxExtensionNumberLength,\n        );\n        if (!availableExtension) {\n          errors.push({\n            // @ts-expect-error\n            phoneNumber: phoneNumber.originalString,\n            type: 'notAnExtension',\n          });\n          return null;\n        }\n\n        extensionObj.availableExtension = availableExtension;\n      }\n      validatedPhoneNumbers.push({ ...phoneNumber, ...extensionObj });\n\n      return null;\n    });\n    return {\n      result: errors.length === 0,\n      numbers: validatedPhoneNumbers,\n      errors,\n    };\n  }\n\n  @proxify\n  async _numberParser(phoneNumbers: string[]) {\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n    const normalizedNumbers = phoneNumbers.map((phoneNumber) =>\n      normalizeNumber({ phoneNumber, countryCode, areaCode }),\n    );\n    const response = await this._numberParserApi(\n      normalizedNumbers,\n      homeCountry,\n    );\n    // @ts-expect-error\n    return response.phoneNumbers.map((phoneNumber) => ({\n      ...phoneNumber,\n      international:\n        !!phoneNumber.country &&\n        // @ts-expect-error\n        phoneNumber.country.callingCode !== response.homeCountry.callingCode,\n    }));\n  }\n\n  @proxify\n  async _numberParserApi(\n    originalStrings: string[],\n    homeCountry: {\n      homeCountry?: string;\n    },\n  ) {\n    const response: ParsePhoneNumberResponse = await this._deps.client\n      .numberParser()\n      .parse()\n      .post(\n        {\n          originalStrings,\n        },\n        homeCountry,\n      );\n    return response;\n  }\n\n  // introduce number parser v2\n  // need to remove private, so that we can test\n  @proxify\n  async _parsingPhoneNumber(\n    data: ParsePhoneNumberAPIParam,\n  ): Promise<NumberParserAPIResponse | null> {\n    try {\n      const response = await this._deps.client.service\n        .platform()\n        .post(`/restapi/v2/number-parser/parse`, data);\n      return response.json();\n    } catch (ex) {\n      this._deps.alert.danger({\n        message: callErrors.numberParseError,\n        payload: ex,\n      });\n      return null;\n    }\n  }\n\n  @proxify\n  async parseNumbers(inputs: string[]): Promise<ParseResult | void> {\n    const { countryCode, defaultAreaCode } = this._deps.regionSettings;\n    const brandId = this._deps.brand.brandConfig.id;\n    const phoneNumbers = inputs.map((input: string) => cleanNumber(input));\n    const data: ParsePhoneNumberAPIParam = {\n      originalStrings: phoneNumbers,\n      contextSource: contextSourceOption.account,\n      context: {\n        brandId,\n        country: {\n          isoCode: countryCode,\n        },\n        defaultAreaCode,\n        outboundCallPrefix: this._deps.appFeatures.OCPValue,\n        conflictHandling: this._deps.appFeatures.enableSmartDialPlan\n          ? 'Client'\n          : 'Default',\n        maxExtensionNumberLength:\n          this._deps.accountInfo.maxExtensionNumberLength,\n      },\n    };\n    const response = await this._parsingPhoneNumber(data);\n    return response?.results.map((result) => this.handleResult(result));\n  }\n\n  // whether the number is an empty string or contains invalid characters\n  validate(numbers: string[]): ValidateFormattingResult {\n    const errors: ValidateFormattedError = [];\n    numbers.forEach((phoneNumber) => {\n      if (isBlank(phoneNumber) || /[^\\d*+#\\-(). ]/.test(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n      }\n    });\n    return {\n      result: errors.length === 0,\n      errors,\n    };\n  }\n\n  private handleResult(\n    resultItem: ParsePhoneNumberResultsItem,\n  ): ParseResultItem {\n    const formatObj = resultItem.formats?.[0];\n    const originalString = resultItem.originalString;\n    let parseResult: ParseResultItem = {\n      originalString,\n      isAnExtension: false,\n      isInternational: false,\n      specialService: false,\n      parsedNumber: resultItem.originalString,\n      availableExtension: null,\n      ...formatObj,\n    };\n    switch (resultItem.category) {\n      case Category.SpecialService:\n        parseResult.specialService = true;\n        parseResult.parsedNumber = formatObj?.national;\n        break;\n      case Category.Extension:\n        parseResult = {\n          ...parseResult,\n          ...this.handleExtension(resultItem),\n        };\n        break;\n      case Category.Regular:\n      case Category.ShortCode:\n      case Category.TollFree:\n        parseResult.isInternational = this.isInternational(resultItem);\n\n        parseResult.parsedNumber =\n          formatObj.e164Extended ||\n          formatObj.e164 ||\n          formatObj.dialableExtended;\n        break;\n      case Category.Unknown:\n        parseResult.parsedNumber =\n          formatObj.dialableExtended || formatObj.dialable;\n        break;\n      case Category.Ambiguous:\n        parseResult = {\n          ...parseResult,\n          ...this.handleAmbiguous(resultItem),\n        };\n        break;\n      default:\n        break;\n    }\n\n    return parseResult;\n  }\n\n  private handleExtension(resultItem: ParsePhoneNumberResultsItem) {\n    const originalString = resultItem.originalString;\n    const maxExtensionNumberLength =\n      this._deps.accountInfo.maxExtensionNumberLength;\n    const parsedNumber =\n      resultItem.numberDetails?.extensionNumber || originalString;\n    const availableExtension = this.getAvailableExtension(\n      parsedNumber,\n      maxExtensionNumberLength,\n    );\n    const isAnExtension = true;\n\n    return {\n      isAnExtension,\n      parsedNumber,\n      availableExtension,\n    };\n  }\n\n  private handleAmbiguous(resultItem: ParsePhoneNumberResultsItem) {\n    const originalString = resultItem.originalString;\n    const maxExtensionNumberLength =\n      this._deps.accountInfo.maxExtensionNumberLength;\n    const availableExtension = this.getAvailableExtension(\n      originalString,\n      maxExtensionNumberLength,\n    );\n    let isInternational = false;\n    let parsedNumber = originalString;\n    let isAnExtension = false;\n    if (availableExtension) {\n      parsedNumber = availableExtension;\n      isAnExtension = true;\n    } else {\n      const externalNumber = resultItem.formats.find(\n        (item) => item.category !== Category.Extension,\n      );\n      isInternational = !!externalNumber && this.isInternational(resultItem);\n      parsedNumber =\n        externalNumber?.e164Extended || externalNumber?.e164 || originalString;\n    }\n\n    return {\n      isAnExtension,\n      parsedNumber,\n      isInternational,\n      availableExtension,\n    };\n  }\n\n  private isInternational(resultItem: ParsePhoneNumberResultsItem): boolean {\n    const phoneNumberISOCode = resultItem.numberDetails?.country?.isoCode ?? '';\n    const regionSettingsCountryCode = this._deps.regionSettings.countryCode;\n\n    // The call between us/ca/pr should not be considered to be the international call, check RCINT-25922/RCINT-26726 for more details\n    if (\n      isUSOrCAOrPR(regionSettingsCountryCode) &&\n      isUSOrCAOrPR(phoneNumberISOCode as CountryCode)\n    ) {\n      return false;\n    }\n\n    // For rest of the cases, check if the number is international\n    return phoneNumberISOCode !== regionSettingsCountryCode;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;AACA,IAAAA,KAAA,GAAAC,OAAA;AAEA,IAAAC,YAAA,GAAAD,OAAA;AAMA,IAAAE,qBAAA,GAAAF,OAAA;AACA,IAAAG,YAAA,GAAAC,sBAAA,CAAAJ,OAAA;AACA,IAAAK,cAAA,GAAAL,OAAA;AACA,IAAAM,GAAA,GAAAN,OAAA;AACA,IAAAO,eAAA,GAAAP,OAAA;AACA,IAAAQ,QAAA,GAAAR,OAAA;AACA,IAAAS,gBAAA,GAAAT,OAAA;AACA,IAAAU,QAAA,GAAAV,OAAA;AACA,IAAAW,WAAA,GAAAX,OAAA;AAaA,IAAAY,eAAA,GAAAZ,OAAA;AAAiE,IAAAa,IAAA,EAAAC,MAAA,EAAAC,OAAA;AAAA,SAAAX,uBAAAY,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAAA,SAAAE,QAAAC,MAAA,EAAAC,cAAA,QAAAC,IAAA,GAAAC,MAAA,CAAAD,IAAA,CAAAF,MAAA,OAAAG,MAAA,CAAAC,qBAAA,QAAAC,OAAA,GAAAF,MAAA,CAAAC,qBAAA,CAAAJ,MAAA,GAAAC,cAAA,KAAAI,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAAJ,MAAA,CAAAK,wBAAA,CAAAR,MAAA,EAAAO,GAAA,EAAAE,UAAA,OAAAP,IAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,IAAA,EAAAG,OAAA,YAAAH,IAAA;AAAA,SAAAU,cAAAC,MAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA,UAAAG,MAAA,WAAAF,SAAA,CAAAD,CAAA,IAAAC,SAAA,CAAAD,CAAA,QAAAA,CAAA,OAAAf,OAAA,CAAAI,MAAA,CAAAc,MAAA,OAAAC,OAAA,WAAAC,GAAA,IAAAC,eAAA,CAAAP,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA,SAAAhB,MAAA,CAAAkB,yBAAA,GAAAlB,MAAA,CAAAmB,gBAAA,CAAAT,MAAA,EAAAV,MAAA,CAAAkB,yBAAA,CAAAJ,MAAA,KAAAlB,OAAA,CAAAI,MAAA,CAAAc,MAAA,GAAAC,OAAA,WAAAC,GAAA,IAAAhB,MAAA,CAAAoB,cAAA,CAAAV,MAAA,EAAAM,GAAA,EAAAhB,MAAA,CAAAK,wBAAA,CAAAS,MAAA,EAAAE,GAAA,iBAAAN,MAAA;AAAA,SAAAO,gBAAAvB,GAAA,EAAAsB,GAAA,EAAAK,KAAA,IAAAL,GAAA,GAAAM,cAAA,CAAAN,GAAA,OAAAA,GAAA,IAAAtB,GAAA,IAAAM,MAAA,CAAAoB,cAAA,CAAA1B,GAAA,EAAAsB,GAAA,IAAAK,KAAA,EAAAA,KAAA,EAAAf,UAAA,QAAAiB,YAAA,QAAAC,QAAA,oBAAA9B,GAAA,CAAAsB,GAAA,IAAAK,KAAA,WAAA3B,GAAA;AAAA,SAAA+B,mBAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,EAAAd,GAAA,EAAAe,GAAA,cAAAC,IAAA,GAAAN,GAAA,CAAAV,GAAA,EAAAe,GAAA,OAAAV,KAAA,GAAAW,IAAA,CAAAX,KAAA,WAAAY,KAAA,IAAAL,MAAA,CAAAK,KAAA,iBAAAD,IAAA,CAAAE,IAAA,IAAAP,OAAA,CAAAN,KAAA,YAAAc,OAAA,CAAAR,OAAA,CAAAN,KAAA,EAAAe,IAAA,CAAAP,KAAA,EAAAC,MAAA;AAAA,SAAAO,kBAAAC,EAAA,6BAAAC,IAAA,SAAAC,IAAA,GAAA5B,SAAA,aAAAuB,OAAA,WAAAR,OAAA,EAAAC,MAAA,QAAAF,GAAA,GAAAY,EAAA,CAAA9B,KAAA,CAAA+B,IAAA,EAAAC,IAAA,YAAAX,MAAAR,KAAA,IAAAI,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,UAAAT,KAAA,cAAAS,OAAAW,GAAA,IAAAhB,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,WAAAW,GAAA,KAAAZ,KAAA,CAAAa,SAAA;AAAA,SAAAC,gBAAAC,QAAA,EAAAC,WAAA,UAAAD,QAAA,YAAAC,WAAA,eAAAC,SAAA;AAAA,SAAAC,kBAAArC,MAAA,EAAAsC,KAAA,aAAArC,CAAA,MAAAA,CAAA,GAAAqC,KAAA,CAAAnC,MAAA,EAAAF,CAAA,UAAAsC,UAAA,GAAAD,KAAA,CAAArC,CAAA,GAAAsC,UAAA,CAAA3C,UAAA,GAAA2C,UAAA,CAAA3C,UAAA,WAAA2C,UAAA,CAAA1B,YAAA,wBAAA0B,UAAA,EAAAA,UAAA,CAAAzB,QAAA,SAAAxB,MAAA,CAAAoB,cAAA,CAAAV,MAAA,EAAAY,cAAA,CAAA2B,UAAA,CAAAjC,GAAA,GAAAiC,UAAA;AAAA,SAAAC,aAAAL,WAAA,EAAAM,UAAA,EAAAC,WAAA,QAAAD,UAAA,EAAAJ,iBAAA,CAAAF,WAAA,CAAAQ,SAAA,EAAAF,UAAA,OAAAC,WAAA,EAAAL,iBAAA,CAAAF,WAAA,EAAAO,WAAA,GAAApD,MAAA,CAAAoB,cAAA,CAAAyB,WAAA,iBAAArB,QAAA,mBAAAqB,WAAA;AAAA,SAAAvB,eAAAS,GAAA,QAAAf,GAAA,GAAAsC,YAAA,CAAAvB,GAAA,oBAAAwB,OAAA,CAAAvC,GAAA,iBAAAA,GAAA,GAAAwC,MAAA,CAAAxC,GAAA;AAAA,SAAAsC,aAAAG,KAAA,EAAAC,IAAA,QAAAH,OAAA,CAAAE,KAAA,kBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAAG,MAAA,CAAAC,WAAA,OAAAF,IAAA,KAAAjB,SAAA,QAAAoB,GAAA,GAAAH,IAAA,CAAAI,IAAA,CAAAN,KAAA,EAAAC,IAAA,oBAAAH,OAAA,CAAAO,GAAA,uBAAAA,GAAA,YAAAhB,SAAA,4DAAAY,IAAA,gBAAAF,MAAA,GAAAQ,MAAA,EAAAP,KAAA;AAAA,SAAAQ,UAAAC,QAAA,EAAAC,UAAA,eAAAA,UAAA,mBAAAA,UAAA,uBAAArB,SAAA,0DAAAoB,QAAA,CAAAb,SAAA,GAAArD,MAAA,CAAAoE,MAAA,CAAAD,UAAA,IAAAA,UAAA,CAAAd,SAAA,IAAAgB,WAAA,IAAAhD,KAAA,EAAA6C,QAAA,EAAA1C,QAAA,QAAAD,YAAA,aAAAvB,MAAA,CAAAoB,cAAA,CAAA8C,QAAA,iBAAA1C,QAAA,gBAAA2C,UAAA,EAAAG,eAAA,CAAAJ,QAAA,EAAAC,UAAA;AAAA,SAAAG,gBAAAC,CAAA,EAAAC,CAAA,IAAAF,eAAA,GAAAtE,MAAA,CAAAyE,cAAA,GAAAzE,MAAA,CAAAyE,cAAA,CAAAC,IAAA,cAAAJ,gBAAAC,CAAA,EAAAC,CAAA,IAAAD,CAAA,CAAAI,SAAA,GAAAH,CAAA,SAAAD,CAAA,YAAAD,eAAA,CAAAC,CAAA,EAAAC,CAAA;AAAA,SAAAI,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,GAAAC,eAAA,CAAAL,OAAA,GAAAM,MAAA,MAAAL,yBAAA,QAAAM,SAAA,GAAAF,eAAA,OAAAb,WAAA,EAAAc,MAAA,GAAAE,OAAA,CAAAC,SAAA,CAAAL,KAAA,EAAArE,SAAA,EAAAwE,SAAA,YAAAD,MAAA,GAAAF,KAAA,CAAAzE,KAAA,OAAAI,SAAA,YAAA2E,0BAAA,OAAAJ,MAAA;AAAA,SAAAI,2BAAAhD,IAAA,EAAAwB,IAAA,QAAAA,IAAA,KAAAR,OAAA,CAAAQ,IAAA,yBAAAA,IAAA,2BAAAA,IAAA,aAAAA,IAAA,yBAAAjB,SAAA,uEAAA0C,sBAAA,CAAAjD,IAAA;AAAA,SAAAiD,uBAAAjD,IAAA,QAAAA,IAAA,yBAAAkD,cAAA,wEAAAlD,IAAA;AAAA,SAAAwC,0BAAA,eAAAM,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAvC,SAAA,CAAAwC,OAAA,CAAA9B,IAAA,CAAAsB,OAAA,CAAAC,SAAA,CAAAM,OAAA,8CAAAE,CAAA;AAAA,SAAAZ,gBAAAX,CAAA,IAAAW,eAAA,GAAAlF,MAAA,CAAAyE,cAAA,GAAAzE,MAAA,CAAA+F,cAAA,CAAArB,IAAA,cAAAQ,gBAAAX,CAAA,WAAAA,CAAA,CAAAI,SAAA,IAAA3E,MAAA,CAAA+F,cAAA,CAAAxB,CAAA,aAAAW,eAAA,CAAAX,CAAA;AAAA,SAAAyB,0BAAAtF,MAAA,EAAAuF,QAAA,EAAAC,UAAA,EAAAjD,UAAA,EAAAkD,OAAA,QAAAC,IAAA,OAAApG,MAAA,CAAAD,IAAA,CAAAkD,UAAA,EAAAlC,OAAA,WAAAC,GAAA,IAAAoF,IAAA,CAAApF,GAAA,IAAAiC,UAAA,CAAAjC,GAAA,OAAAoF,IAAA,CAAA9F,UAAA,KAAA8F,IAAA,CAAA9F,UAAA,EAAA8F,IAAA,CAAA7E,YAAA,KAAA6E,IAAA,CAAA7E,YAAA,iBAAA6E,IAAA,IAAAA,IAAA,CAAAC,WAAA,IAAAD,IAAA,CAAA5E,QAAA,WAAA4E,IAAA,GAAAF,UAAA,CAAAI,KAAA,GAAAC,OAAA,GAAAC,MAAA,WAAAJ,IAAA,EAAAK,SAAA,WAAAA,SAAA,CAAA/F,MAAA,EAAAuF,QAAA,EAAAG,IAAA,KAAAA,IAAA,KAAAA,IAAA,OAAAD,OAAA,IAAAC,IAAA,CAAAC,WAAA,eAAAD,IAAA,CAAA/E,KAAA,GAAA+E,IAAA,CAAAC,WAAA,GAAAD,IAAA,CAAAC,WAAA,CAAAtC,IAAA,CAAAoC,OAAA,YAAAC,IAAA,CAAAC,WAAA,GAAA3D,SAAA,QAAA0D,IAAA,CAAAC,WAAA,eAAArG,MAAA,CAAAoB,cAAA,CAAAV,MAAA,EAAAuF,QAAA,EAAAG,IAAA,GAAAA,IAAA,kBAAAA,IAAA;AAAA,IAgBpDM,cAAc,IAAAnH,IAAA,GAd1B,IAAAoH,UAAM,EAAC;EACNC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,CACJ,OAAO,EACP,QAAQ,EACR,gBAAgB,EAChB,aAAa,EACb,iBAAiB,EACjB,aAAa,EACb,OAAO,EACP;IAAEC,GAAG,EAAE,eAAe;IAAEC,QAAQ,EAAE;EAAK,CAAC,EACxC;IAAED,GAAG,EAAE,uBAAuB;IAAEC,QAAQ,EAAE;EAAK,CAAC;AAEpD,CAAC,CAAC,EAAAxH,IAAA,CAAAC,MAAA,IAAAC,OAAA,0BAAAuH,UAAA;EAAA/C,SAAA,CAAAyC,cAAA,EAAAM,UAAA;EAAA,IAAAC,MAAA,GAAArC,YAAA,CAAA8B,cAAA;EAEA,SAAAA,eAAYG,IAAU,EAAE;IAAAlE,eAAA,OAAA+D,cAAA;IAAA,OAAAO,MAAA,CAAAlD,IAAA,OAChB;MACJ8C,IAAI,EAAJA;IACF,CAAC;EACH;EAAC3D,YAAA,CAAAwD,cAAA;IAAA1F,GAAA;IAAAK,KAAA,WAAA6F,aAEYzD,KAAa,EAAE;MAC1B,IAAI,IAAA0D,gBAAO,EAAC1D,KAAK,CAAC,EAAE;QAClB,OAAO,IAAI;MACb;MAAC,IAAA2D,MAAA,GACoC,IAAAC,kBAAK,EAAC;UACzC5D,KAAK,EAALA,KAAK;UACL6D,WAAW,EAAE,IAAI,CAACC,KAAK,CAACC,cAAc,CAACF;QACzC,CAAC,CAAC;QAHMG,eAAe,GAAAL,MAAA,CAAfK,eAAe;QAAEC,OAAO,GAAAN,MAAA,CAAPM,OAAO;MAIhC,IAAID,eAAe,IAAI,CAACC,OAAO,EAAE;QAC/B,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd;EAAC;IAAA1G,GAAA;IAAAK,KAAA,WAAAsG,cAEalE,KAAa,EAAE;MAAA,IAAAmE,qBAAA,GACO,IAAI,CAACL,KAAK,CAACC,cAAc;QAAnDF,WAAW,GAAAM,qBAAA,CAAXN,WAAW;QAAEO,QAAQ,GAAAD,qBAAA,CAARC,QAAQ;MAC7B,OACE,IAAI,CAACN,KAAK,CAACO,KAAK,CAACC,WAAW,CAACC,mBAAmB,IAChD,IAAAL,6BAAa,EAAC;QAAElE,KAAK,EAALA,KAAK;QAAE6D,WAAW,EAAXA,WAAW;QAAEO,QAAQ,EAARA;MAAS,CAAC,CAAC;IAEnD;EAAC;IAAA7G,GAAA;IAAAK,KAAA,WAAA4G,WAEUC,WAAkC,EAAE;MAC7C,OAAO,CAAC,EAACA,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,OAAO;IAC/B;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAnH,GAAA;IAAAK,KAAA,WAAA+G,sBAMsBC,eAAuB,EAAgC;MAAA,IAAAC,qBAAA,EAAAC,cAAA;MAAA,IAA9BC,wBAAwB,GAAA5H,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA8B,SAAA,GAAA9B,SAAA,MAAG,CAAC;MACzE,IAAI,CAAC,IAAA6H,4BAAa,EAACJ,eAAe,EAAEG,wBAAwB,CAAC,EAAE;QAC7D,OAAO,IAAI;MACb;MACA,IAAI,CAAC,IAAI,CAACjB,KAAK,CAACmB,aAAa,EAAE;QAC7B,OAAO,IAAI;MACb;MAAC,IAAAC,qBAAA,GACuC,IAAI,CAACpB,KAAK,CAACmB,aAAa;QAAxDE,qBAAqB,GAAAD,qBAAA,CAArBC,qBAAqB;QAAEC,IAAI,GAAAF,qBAAA,CAAJE,IAAI;MAAA,IAAAC,qBAAA,GACO,IAAI,CAACvB,KAAK,CAACwB,eAAe;QAA5DC,gBAAgB,GAAAF,qBAAA,CAAhBE,gBAAgB;QAAEC,WAAW,GAAAH,qBAAA,CAAXG,WAAW;MACrC,IAAMC,QAAQ,GAAGF,gBAAgB,CAACG,MAAM,CAACF,WAAW,CAAC;MACrD,QAAAX,qBAAA,IAAAC,cAAA,GACEW,QAAQ,CAACE,IAAI,CAAC,UAACC,IAAI;QAAA,IAAAC,qBAAA;QAAA,OACjB,IAAAC,+BAAgB,EAAC;UACflB,eAAe,EAAfA,eAAe;UACfmB,qBAAqB,GAAAF,qBAAA,GAAED,IAAI,CAAChB,eAAe,cAAAiB,qBAAA,cAAAA,qBAAA,GAAI,EAAE;UACjDG,OAAO,EAAE;YACPb,qBAAqB,EAArBA,qBAAqB;YACrBc,QAAQ,EAAEb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEc;UAClB;QACF,CAAC,CAAC;MAAA,CACJ,CAAC,cAAApB,cAAA,uBATDA,cAAA,CASGF,eAAe,cAAAC,qBAAA,cAAAA,qBAAA,GAAI,IAAI;IAE9B;EAAC;IAAAtH,GAAA;IAAAK,KAAA,WAAAuI,qBAEoBvB,eAAuB,EAAE;MAC5C,OAAO,CAAC,CAAC,IAAI,CAACD,qBAAqB,CAACC,eAAe,CAAC;IACtD;EAAC;IAAArH,GAAA;IAAAK,KAAA,WAAAwI,iBAEgBxB,eAAuB,EAA0B;MAAA,IAAxByB,kBAAkB,GAAAlJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA8B,SAAA,GAAA9B,SAAA,MAAG,CAAC;MAC9D,OACEyH,eAAe,IACfA,eAAe,CAACxH,MAAM,IAAIiJ,kBAAkB,IAC5C,CAAC,IAAI,CAACvC,KAAK,CAACwB,eAAe,CAACa,oBAAoB,CAACvB,eAAe,CAAC;IAErE;EAAC;IAAArH,GAAA;IAAAK,KAAA,WAAA0I,mBAEkBC,aAAqB,EAAE3B,eAAuB,EAAE;MAAA,IAAA4B,sBAAA,GAC/B,IAAI,CAAC1C,KAAK,CAACC,cAAc;QAAnDF,WAAW,GAAA2C,sBAAA,CAAX3C,WAAW;QAAEO,QAAQ,GAAAoC,sBAAA,CAARpC,QAAQ;MAC7B,IAAMqC,uBAAuB,GAAG,IAAAC,gCAAe,EAAC;QAC9CjC,WAAW,EAAE8B,aAAa;QAC1B1C,WAAW,EAAXA,WAAW;QACXO,QAAQ,EAARA,QAAQ;QACRiC,kBAAkB,EAAE,IAAI,CAACvC,KAAK,CAAC6C,WAAW,CAAC5B;MAC7C,CAAC,CAAC;MACF,IAAI0B,uBAAuB,KAAK,IAAI,CAAC3C,KAAK,CAAC6C,WAAW,CAACC,iBAAiB,EAAE;QACxE,OAAO,KAAK;MACd;MACA,OAAO,IAAI,CAAC9C,KAAK,CAACwB,eAAe,CAACa,oBAAoB,CAACvB,eAAe,CAAC;IACzE;EAAC;IAAArH,GAAA;IAAAK,KAAA;MAAA,IAAAiJ,gBAAA,GAAAjI,iBAAA,eAAAkI,kBAAA,CAAAC,IAAA,UAAAC,QAGqBC,YAAsB;QAAA,IAAAC,cAAA,EAAAC,gBAAA;QAAA,OAAAL,kBAAA,CAAAM,IAAA,UAAAC,SAAAC,QAAA;UAAA;YAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBACpCN,cAAc,GAAG,IAAI,CAACO,cAAc,CAACR,YAAY,CAAC;gBAAA,IACnDC,cAAc,CAACxF,MAAM;kBAAA4F,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAA,OAAAF,QAAA,CAAAI,MAAA,WACjBR,cAAc;cAAA;gBAAAI,QAAA,CAAAE,IAAA;gBAAA,OAEQ,IAAI,CAACG,wBAAwB,CAACV,YAAY,CAAC;cAAA;gBAApEE,gBAAgB,GAAAG,QAAA,CAAAM,IAAA;gBAAA,OAAAN,QAAA,CAAAI,MAAA,WACfP,gBAAgB;cAAA;cAAA;gBAAA,OAAAG,QAAA,CAAAO,IAAA;YAAA;UAAA;QAAA,GAAAb,OAAA;MAAA;MAAA,SAAAc,gBAAAC,EAAA;QAAA,OAAAlB,gBAAA,CAAA9J,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAA2K,eAAA;IAAA;EAAA;IAAAvK,GAAA;IAAAK,KAAA,WAAA6J,eAGVR,YAAsB,EAA4B;MAAA,IAAAe,KAAA;MAC/D,IAAMC,MAA8B,GAAG,EAAE;MACzChB,YAAY,CAAC3J,OAAO,CAAC,UAACmH,WAAW,EAAK;QACpC,IAAIuD,KAAI,CAACvE,YAAY,CAACgB,WAAW,CAAC,EAAE;UAClCwD,MAAM,CAACnL,IAAI,CAAC;YAAE2H,WAAW,EAAXA,WAAW;YAAEyD,IAAI,EAAE;UAAa,CAAC,CAAC;QAClD,CAAC,MAAM,IAAIF,KAAI,CAAC9D,aAAa,CAACO,WAAW,CAAC,EAAE;UAC1CwD,MAAM,CAACnL,IAAI,CAAC;YAAE2H,WAAW,EAAXA,WAAW;YAAEyD,IAAI,EAAE;UAAa,CAAC,CAAC;QAClD;MACF,CAAC,CAAC;MACF,OAAO;QACLxG,MAAM,EAAEuG,MAAM,CAAC7K,MAAM,KAAK,CAAC;QAC3B6K,MAAM,EAANA;MACF,CAAC;IACH;EAAC;IAAA1K,GAAA;IAAAK,KAAA;MAAA,IAAAuK,yBAAA,GAAAvJ,iBAAA,eAAAkI,kBAAA,CAAAC,IAAA,UAAAqB,SAICnB,YAAsB;QAAA,IAAAoB,MAAA;QAAA,IAAAtD,wBAAA,EAAAuD,aAAA,EAAAL,MAAA,EAAAM,qBAAA;QAAA,OAAAzB,kBAAA,CAAAM,IAAA,UAAAoB,UAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAAlB,IAAA,GAAAkB,SAAA,CAAAjB,IAAA;cAAA;gBAEhBzC,wBAAwB,GAC5B,IAAI,CAACjB,KAAK,CAAC6C,WAAW,CAAC5B,wBAAwB;gBAAA0D,SAAA,CAAAjB,IAAA;gBAAA,OACrB,IAAI,CAACkB,aAAa,CAACzB,YAAY,CAAC;cAAA;gBAAtDqB,aAAa,GAAAG,SAAA,CAAAb,IAAA;gBACbK,MAA2B,GAAG,EAAE;gBAChCM,qBAA4C,GAAG,EAAE;gBACvDD,aAAa,CAACK,GAAG,CAAC,UAAClE,WAAW,EAAK;kBAAA,IAAAmE,qBAAA;kBACjC,IAAMC,SAAS,GAAGR,MAAI,CAAC7D,UAAU,CAACC,WAAW,CAAC;kBAC9C,IAAMqE,MAAM,GAAGrE,WAAW,CAACsE,cAAc;kBAEzC,IAAMC,mBAAmB,GACvB,CAACH,SAAS,IAAI,IAAA7D,4BAAa,EAAC8D,MAAM,EAAG/D,wBAAwB,CAAC;kBAChE,IAAMkE,YAGL,GAAG;oBAAEjE,aAAa,EAAEgE;kBAAoB,CAAC;kBAC1C,IACE,GAAAJ,qBAAA,GAACP,MAAI,CAACvE,KAAK,CAACwB,eAAe,cAAAsD,qBAAA,uBAA1BA,qBAAA,CAA4BM,sBAAsB,KACnDF,mBAAmB,EACnB;oBACA,IAAMG,kBAAkB,GAAGd,MAAI,CAAC1D,qBAAqB,CACnDmE,MAAM,EACN/D,wBACF,CAAC;oBACD,IAAI,CAACoE,kBAAkB,EAAE;sBACvBlB,MAAM,CAACnL,IAAI,CAAC;wBACV;wBACA2H,WAAW,EAAEA,WAAW,CAACsE,cAAc;wBACvCb,IAAI,EAAE;sBACR,CAAC,CAAC;sBACF,OAAO,IAAI;oBACb;oBAEAe,YAAY,CAACE,kBAAkB,GAAGA,kBAAkB;kBACtD;kBACAZ,qBAAqB,CAACzL,IAAI,CAAAE,aAAA,CAAAA,aAAA,KAAMyH,WAAW,GAAKwE,YAAY,CAAE,CAAC;kBAE/D,OAAO,IAAI;gBACb,CAAC,CAAC;gBAAC,OAAAR,SAAA,CAAAf,MAAA,WACI;kBACLhG,MAAM,EAAEuG,MAAM,CAAC7K,MAAM,KAAK,CAAC;kBAC3BgM,OAAO,EAAEb,qBAAqB;kBAC9BN,MAAM,EAANA;gBACF,CAAC;cAAA;cAAA;gBAAA,OAAAQ,SAAA,CAAAZ,IAAA;YAAA;UAAA;QAAA,GAAAO,QAAA;MAAA;MAAA,SAAAT,yBAAA0B,GAAA;QAAA,OAAAlB,yBAAA,CAAApL,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAAwK,wBAAA;IAAA;EAAA;IAAApK,GAAA;IAAAK,KAAA;MAAA,IAAA0L,cAAA,GAAA1K,iBAAA,eAAAkI,kBAAA,CAAAC,IAAA,UAAAwC,SAIiBtC,YAAsB;QAAA,IAAAuC,sBAAA,EAAA3F,WAAA,EAAAO,QAAA,EAAAqF,WAAA,EAAAC,iBAAA,EAAAC,QAAA;QAAA,OAAA7C,kBAAA,CAAAM,IAAA,UAAAwC,UAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAAtC,IAAA,GAAAsC,SAAA,CAAArC,IAAA;cAAA;gBAAAgC,sBAAA,GACN,IAAI,CAAC1F,KAAK,CAACC,cAAc,EAAnDF,WAAW,GAAA2F,sBAAA,CAAX3F,WAAW,EAAEO,QAAQ,GAAAoF,sBAAA,CAARpF,QAAQ;gBACvBqF,WAAW,GAAG5F,WAAW,GAAG;kBAAE4F,WAAW,EAAE5F;gBAAY,CAAC,GAAG,CAAC,CAAC;gBAC7D6F,iBAAiB,GAAGzC,YAAY,CAAC0B,GAAG,CAAC,UAAClE,WAAW;kBAAA,OACrD,IAAAiC,gCAAe,EAAC;oBAAEjC,WAAW,EAAXA,WAAW;oBAAEZ,WAAW,EAAXA,WAAW;oBAAEO,QAAQ,EAARA;kBAAS,CAAC,CAAC;gBAAA,CACzD,CAAC;gBAAAyF,SAAA,CAAArC,IAAA;gBAAA,OACsB,IAAI,CAACsC,gBAAgB,CAC1CJ,iBAAiB,EACjBD,WACF,CAAC;cAAA;gBAHKE,QAAQ,GAAAE,SAAA,CAAAjC,IAAA;gBAAA,OAAAiC,SAAA,CAAAnC,MAAA,WAKPiC,QAAQ,CAAC1C,YAAY,CAAC0B,GAAG,CAAC,UAAClE,WAAW;kBAAA,OAAAzH,aAAA,CAAAA,aAAA,KACxCyH,WAAW;oBACdsF,aAAa,EACX,CAAC,CAACtF,WAAW,CAACuF,OAAO;oBACrB;oBACAvF,WAAW,CAACuF,OAAO,CAACC,WAAW,KAAKN,QAAQ,CAACF,WAAW,CAACQ;kBAAW;gBAAA,CACtE,CAAC;cAAA;cAAA;gBAAA,OAAAJ,SAAA,CAAAhC,IAAA;YAAA;UAAA;QAAA,GAAA0B,QAAA;MAAA;MAAA,SAAAb,cAAAwB,GAAA;QAAA,OAAAZ,cAAA,CAAAvM,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAAuL,aAAA;IAAA;EAAA;IAAAnL,GAAA;IAAAK,KAAA;MAAA,IAAAuM,iBAAA,GAAAvL,iBAAA,eAAAkI,kBAAA,CAAAC,IAAA,UAAAqD,SAKHC,eAAyB,EACzBZ,WAEC;QAAA,IAAAE,QAAA;QAAA,OAAA7C,kBAAA,CAAAM,IAAA,UAAAkD,UAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAAhD,IAAA,GAAAgD,SAAA,CAAA/C,IAAA;cAAA;gBAAA+C,SAAA,CAAA/C,IAAA;gBAAA,OAEgD,IAAI,CAAC1D,KAAK,CAAC0G,MAAM,CAC/DC,YAAY,CAAC,CAAC,CACd7G,KAAK,CAAC,CAAC,CACP8G,IAAI,CACH;kBACEL,eAAe,EAAfA;gBACF,CAAC,EACDZ,WACF,CAAC;cAAA;gBARGE,QAAkC,GAAAY,SAAA,CAAA3C,IAAA;gBAAA,OAAA2C,SAAA,CAAA7C,MAAA,WASjCiC,QAAQ;cAAA;cAAA;gBAAA,OAAAY,SAAA,CAAA1C,IAAA;YAAA;UAAA;QAAA,GAAAuC,QAAA;MAAA;MAAA,SAAAN,iBAAAa,GAAA,EAAAC,GAAA;QAAA,OAAAT,iBAAA,CAAApN,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAA2M,gBAAA;IAAA,IAGjB;IACA;EAAA;IAAAvM,GAAA;IAAAK,KAAA;MAAA,IAAAiN,oBAAA,GAAAjM,iBAAA,eAAAkI,kBAAA,CAAAC,IAAA,UAAA+D,SAGEC,IAA8B;QAAA,IAAApB,QAAA;QAAA,OAAA7C,kBAAA,CAAAM,IAAA,UAAA4D,UAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAA1D,IAAA,GAAA0D,SAAA,CAAAzD,IAAA;cAAA;gBAAAyD,SAAA,CAAA1D,IAAA;gBAAA0D,SAAA,CAAAzD,IAAA;gBAAA,OAGL,IAAI,CAAC1D,KAAK,CAAC0G,MAAM,CAACU,OAAO,CAC7CC,QAAQ,CAAC,CAAC,CACVT,IAAI,oCAAoCK,IAAI,CAAC;cAAA;gBAF1CpB,QAAQ,GAAAsB,SAAA,CAAArD,IAAA;gBAAA,OAAAqD,SAAA,CAAAvD,MAAA,WAGPiC,QAAQ,CAACyB,IAAI,CAAC,CAAC;cAAA;gBAAAH,SAAA,CAAA1D,IAAA;gBAAA0D,SAAA,CAAAI,EAAA,GAAAJ,SAAA;gBAEtB,IAAI,CAACnH,KAAK,CAACwH,KAAK,CAACC,MAAM,CAAC;kBACtBC,OAAO,EAAEC,sBAAU,CAACC,gBAAgB;kBACpCC,OAAO,EAAAV,SAAA,CAAAI;gBACT,CAAC,CAAC;gBAAC,OAAAJ,SAAA,CAAAvD,MAAA,WACI,IAAI;cAAA;cAAA;gBAAA,OAAAuD,SAAA,CAAApD,IAAA;YAAA;UAAA;QAAA,GAAAiD,QAAA;MAAA;MAAA,SAAAc,oBAAAC,GAAA;QAAA,OAAAhB,oBAAA,CAAA9N,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAAyO,mBAAA;IAAA;EAAA;IAAArO,GAAA;IAAAK,KAAA;MAAA,IAAAkO,aAAA,GAAAlN,iBAAA,eAAAkI,kBAAA,CAAAC,IAAA,UAAAgF,SAKIC,MAAgB;QAAA,IAAAC,MAAA;QAAA,IAAAC,sBAAA,EAAArI,WAAA,EAAAsI,eAAA,EAAAC,OAAA,EAAAnF,YAAA,EAAA8D,IAAA,EAAApB,QAAA;QAAA,OAAA7C,kBAAA,CAAAM,IAAA,UAAAiF,UAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAA/E,IAAA,GAAA+E,SAAA,CAAA9E,IAAA;cAAA;gBAAA0E,sBAAA,GACQ,IAAI,CAACpI,KAAK,CAACC,cAAc,EAA1DF,WAAW,GAAAqI,sBAAA,CAAXrI,WAAW,EAAEsI,eAAe,GAAAD,sBAAA,CAAfC,eAAe;gBAC9BC,OAAO,GAAG,IAAI,CAACtI,KAAK,CAACO,KAAK,CAACC,WAAW,CAACiI,EAAE;gBACzCtF,YAAY,GAAG+E,MAAM,CAACrD,GAAG,CAAC,UAAC3I,KAAa;kBAAA,OAAK,IAAAwM,uBAAW,EAACxM,KAAK,CAAC;gBAAA,EAAC;gBAChE+K,IAA8B,GAAG;kBACrCV,eAAe,EAAEpD,YAAY;kBAC7BwF,aAAa,EAAEC,mCAAmB,CAACC,OAAO;kBAC1CjK,OAAO,EAAE;oBACP0J,OAAO,EAAPA,OAAO;oBACPpC,OAAO,EAAE;sBACP4C,OAAO,EAAE/I;oBACX,CAAC;oBACDsI,eAAe,EAAfA,eAAe;oBACfU,kBAAkB,EAAE,IAAI,CAAC/I,KAAK,CAACgJ,WAAW,CAACC,QAAQ;oBACnDC,gBAAgB,EAAE,IAAI,CAAClJ,KAAK,CAACgJ,WAAW,CAACG,mBAAmB,GACxD,QAAQ,GACR,SAAS;oBACblI,wBAAwB,EACtB,IAAI,CAACjB,KAAK,CAAC6C,WAAW,CAAC5B;kBAC3B;gBACF,CAAC;gBAAAuH,SAAA,CAAA9E,IAAA;gBAAA,OACsB,IAAI,CAACoE,mBAAmB,CAACb,IAAI,CAAC;cAAA;gBAA/CpB,QAAQ,GAAA2C,SAAA,CAAA1E,IAAA;gBAAA,OAAA0E,SAAA,CAAA5E,MAAA,WACPiC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEuD,OAAO,CAACvE,GAAG,CAAC,UAACjH,MAAM;kBAAA,OAAKuK,MAAI,CAACkB,YAAY,CAACzL,MAAM,CAAC;gBAAA,EAAC;cAAA;cAAA;gBAAA,OAAA4K,SAAA,CAAAzE,IAAA;YAAA;UAAA;QAAA,GAAAkE,QAAA;MAAA;MAAA,SAAAqB,aAAAC,GAAA;QAAA,OAAAvB,aAAA,CAAA/O,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAAiQ,YAAA;IAAA,IAGrE;EAAA;IAAA7P,GAAA;IAAAK,KAAA,WAAA0P,SACSlE,OAAiB,EAA4B;MACpD,IAAMnB,MAA8B,GAAG,EAAE;MACzCmB,OAAO,CAAC9L,OAAO,CAAC,UAACmH,WAAW,EAAK;QAC/B,IAAI,IAAAf,gBAAO,EAACe,WAAW,CAAC,IAAI,gBAAgB,CAAC8I,IAAI,CAAC9I,WAAW,CAAC,EAAE;UAC9DwD,MAAM,CAACnL,IAAI,CAAC;YAAE2H,WAAW,EAAXA,WAAW;YAAEyD,IAAI,EAAE;UAAa,CAAC,CAAC;QAClD;MACF,CAAC,CAAC;MACF,OAAO;QACLxG,MAAM,EAAEuG,MAAM,CAAC7K,MAAM,KAAK,CAAC;QAC3B6K,MAAM,EAANA;MACF,CAAC;IACH;EAAC;IAAA1K,GAAA;IAAAK,KAAA,WAAAuP,aAGCK,UAAuC,EACtB;MAAA,IAAAC,mBAAA;MACjB,IAAMC,SAAS,IAAAD,mBAAA,GAAGD,UAAU,CAACG,OAAO,cAAAF,mBAAA,uBAAlBA,mBAAA,CAAqB,CAAC,CAAC;MACzC,IAAM1E,cAAc,GAAGyE,UAAU,CAACzE,cAAc;MAChD,IAAI6E,WAA4B,GAAA5Q,aAAA;QAC9B+L,cAAc,EAAdA,cAAc;QACd/D,aAAa,EAAE,KAAK;QACpB6I,eAAe,EAAE,KAAK;QACtBC,cAAc,EAAE,KAAK;QACrBC,YAAY,EAAEP,UAAU,CAACzE,cAAc;QACvCI,kBAAkB,EAAE;MAAI,GACrBuE,SAAS,CACb;MACD,QAAQF,UAAU,CAACQ,QAAQ;QACzB,KAAKC,8BAAQ,CAACC,cAAc;UAC1BN,WAAW,CAACE,cAAc,GAAG,IAAI;UACjCF,WAAW,CAACG,YAAY,GAAGL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAES,QAAQ;UAC9C;QACF,KAAKF,8BAAQ,CAACG,SAAS;UACrBR,WAAW,GAAA5Q,aAAA,CAAAA,aAAA,KACN4Q,WAAW,GACX,IAAI,CAACS,eAAe,CAACb,UAAU,CAAC,CACpC;UACD;QACF,KAAKS,8BAAQ,CAACK,OAAO;QACrB,KAAKL,8BAAQ,CAACM,SAAS;QACvB,KAAKN,8BAAQ,CAACO,QAAQ;UACpBZ,WAAW,CAACC,eAAe,GAAG,IAAI,CAACA,eAAe,CAACL,UAAU,CAAC;UAE9DI,WAAW,CAACG,YAAY,GACtBL,SAAS,CAACe,YAAY,IACtBf,SAAS,CAACgB,IAAI,IACdhB,SAAS,CAACiB,gBAAgB;UAC5B;QACF,KAAKV,8BAAQ,CAACW,OAAO;UACnBhB,WAAW,CAACG,YAAY,GACtBL,SAAS,CAACiB,gBAAgB,IAAIjB,SAAS,CAACmB,QAAQ;UAClD;QACF,KAAKZ,8BAAQ,CAACa,SAAS;UACrBlB,WAAW,GAAA5Q,aAAA,CAAAA,aAAA,KACN4Q,WAAW,GACX,IAAI,CAACmB,eAAe,CAACvB,UAAU,CAAC,CACpC;UACD;QACF;UACE;MACJ;MAEA,OAAOI,WAAW;IACpB;EAAC;IAAArQ,GAAA;IAAAK,KAAA,WAAAyQ,gBAEuBb,UAAuC,EAAE;MAAA,IAAAwB,qBAAA;MAC/D,IAAMjG,cAAc,GAAGyE,UAAU,CAACzE,cAAc;MAChD,IAAMhE,wBAAwB,GAC5B,IAAI,CAACjB,KAAK,CAAC6C,WAAW,CAAC5B,wBAAwB;MACjD,IAAMgJ,YAAY,GAChB,EAAAiB,qBAAA,GAAAxB,UAAU,CAACyB,aAAa,cAAAD,qBAAA,uBAAxBA,qBAAA,CAA0BpK,eAAe,KAAImE,cAAc;MAC7D,IAAMI,kBAAkB,GAAG,IAAI,CAACxE,qBAAqB,CACnDoJ,YAAY,EACZhJ,wBACF,CAAC;MACD,IAAMC,aAAa,GAAG,IAAI;MAE1B,OAAO;QACLA,aAAa,EAAbA,aAAa;QACb+I,YAAY,EAAZA,YAAY;QACZ5E,kBAAkB,EAAlBA;MACF,CAAC;IACH;EAAC;IAAA5L,GAAA;IAAAK,KAAA,WAAAmR,gBAEuBvB,UAAuC,EAAE;MAC/D,IAAMzE,cAAc,GAAGyE,UAAU,CAACzE,cAAc;MAChD,IAAMhE,wBAAwB,GAC5B,IAAI,CAACjB,KAAK,CAAC6C,WAAW,CAAC5B,wBAAwB;MACjD,IAAMoE,kBAAkB,GAAG,IAAI,CAACxE,qBAAqB,CACnDoE,cAAc,EACdhE,wBACF,CAAC;MACD,IAAI8I,eAAe,GAAG,KAAK;MAC3B,IAAIE,YAAY,GAAGhF,cAAc;MACjC,IAAI/D,aAAa,GAAG,KAAK;MACzB,IAAImE,kBAAkB,EAAE;QACtB4E,YAAY,GAAG5E,kBAAkB;QACjCnE,aAAa,GAAG,IAAI;MACtB,CAAC,MAAM;QACL,IAAMkK,cAAc,GAAG1B,UAAU,CAACG,OAAO,CAAChI,IAAI,CAC5C,UAACC,IAAI;UAAA,OAAKA,IAAI,CAACoI,QAAQ,KAAKC,8BAAQ,CAACG,SAAS;QAAA,CAChD,CAAC;QACDP,eAAe,GAAG,CAAC,CAACqB,cAAc,IAAI,IAAI,CAACrB,eAAe,CAACL,UAAU,CAAC;QACtEO,YAAY,GACV,CAAAmB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAET,YAAY,MAAIS,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAER,IAAI,KAAI3F,cAAc;MAC1E;MAEA,OAAO;QACL/D,aAAa,EAAbA,aAAa;QACb+I,YAAY,EAAZA,YAAY;QACZF,eAAe,EAAfA,eAAe;QACf1E,kBAAkB,EAAlBA;MACF,CAAC;IACH;EAAC;IAAA5L,GAAA;IAAAK,KAAA,WAAAiQ,gBAEuBL,UAAuC,EAAW;MAAA,IAAA2B,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACxE,IAAMC,kBAAkB,IAAAH,sBAAA,IAAAC,sBAAA,GAAG5B,UAAU,CAACyB,aAAa,cAAAG,sBAAA,wBAAAC,sBAAA,GAAxBD,sBAAA,CAA0BpF,OAAO,cAAAqF,sBAAA,uBAAjCA,sBAAA,CAAmCzC,OAAO,cAAAuC,sBAAA,cAAAA,sBAAA,GAAI,EAAE;MAC3E,IAAMI,yBAAyB,GAAG,IAAI,CAACzL,KAAK,CAACC,cAAc,CAACF,WAAW;;MAEvE;MACA,IACE,IAAA2L,yBAAY,EAACD,yBAAyB,CAAC,IACvC,IAAAC,yBAAY,EAACF,kBAAiC,CAAC,EAC/C;QACA,OAAO,KAAK;MACd;;MAEA;MACA,OAAOA,kBAAkB,KAAKC,yBAAyB;IACzD;EAAC;EAAA,OAAAtM,cAAA;AAAA,EA3XiCwM,gBAAU,IAAAlN,yBAAA,CAAAvG,OAAA,CAAA4D,SAAA,sBAyF3C8P,gBAAO,GAAAnT,MAAA,CAAAK,wBAAA,CAAAZ,OAAA,CAAA4D,SAAA,sBAAA5D,OAAA,CAAA4D,SAAA,GAAA2C,yBAAA,CAAAvG,OAAA,CAAA4D,SAAA,+BAyBP8P,gBAAO,GAAAnT,MAAA,CAAAK,wBAAA,CAAAZ,OAAA,CAAA4D,SAAA,+BAAA5D,OAAA,CAAA4D,SAAA,GAAA2C,yBAAA,CAAAvG,OAAA,CAAA4D,SAAA,oBAiDP8P,gBAAO,GAAAnT,MAAA,CAAAK,wBAAA,CAAAZ,OAAA,CAAA4D,SAAA,oBAAA5D,OAAA,CAAA4D,SAAA,GAAA2C,yBAAA,CAAAvG,OAAA,CAAA4D,SAAA,uBAqBP8P,gBAAO,GAAAnT,MAAA,CAAAK,wBAAA,CAAAZ,OAAA,CAAA4D,SAAA,uBAAA5D,OAAA,CAAA4D,SAAA,GAAA2C,yBAAA,CAAAvG,OAAA,CAAA4D,SAAA,0BAqBP8P,gBAAO,GAAAnT,MAAA,CAAAK,wBAAA,CAAAZ,OAAA,CAAA4D,SAAA,0BAAA5D,OAAA,CAAA4D,SAAA,GAAA2C,yBAAA,CAAAvG,OAAA,CAAA4D,SAAA,mBAkBP8P,gBAAO,GAAAnT,MAAA,CAAAK,wBAAA,CAAAZ,OAAA,CAAA4D,SAAA,mBAAA5D,OAAA,CAAA4D,SAAA,IAAA5D,OAAA,MAAAD,MAAA;AAAA4T,OAAA,CAAA1M,cAAA,GAAAA,cAAA"}