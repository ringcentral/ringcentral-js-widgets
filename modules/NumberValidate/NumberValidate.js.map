{"version":3,"file":"NumberValidate.js","names":["_core","require","_phoneNumber","_NumberParserResponse","_cleanNumber","_interopRequireDefault","_contactHelper","_di","_hasNoAreaCode2","_isBlank","_normalizeNumber","_proxify","_callErrors","_NumberValidate","_dec","_class","_class2","e","__esModule","ownKeys","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","asyncGeneratorStep","n","a","c","i","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","_classCallCheck","TypeError","_defineProperties","key","_createClass","prototype","_toPrimitive","_typeof","Symbol","toPrimitive","call","String","Number","_inherits","create","constructor","_setPrototypeOf","setPrototypeOf","bind","__proto__","_createSuper","_isNativeReflectConstruct","_getPrototypeOf","s","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","l","initializer","slice","reverse","reduce","NumberValidate","Module","name","deps","dep","optional","_RcModuleV","_super","isNoToNumber","input","isBlank","_parse","parse","countryCode","_deps","regionSettings","hasInvalidChars","isValid","hasNoAreaCode","_this$_deps$regionSet","areaCode","brand","brandConfig","allowRegionSettings","_isSpecial","phoneNumber","special","getAvailableExtension","extensionNumber","_contacts$find$extens","_contacts$find","maxExtensionNumberLength","undefined","isAnExtension","extensionInfo","_this$_deps$extension","isMultipleSiteEnabled","site","_this$_deps$companyCo","companyContacts","filteredContacts","ivrContacts","contacts","concat","find","item","_item$extensionNumber","isExtensionExist","extensionFromContacts","options","siteCode","code","isAvailableExtension","isNotAnExtension","maxExtensionLength","isCompanyExtension","companyNumber","_this$_deps$regionSet2","normalizedCompanyNumber","normalizeNumber","accountInfo","mainCompanyNumber","_validateNumbers","regeneratorRuntime","mark","_callee","phoneNumbers","validateResult","validatedNumbers","wrap","_callee$","_context","prev","next","validateFormat","result","abrupt","validateWithNumberParser","sent","stop","validateNumbers","_x","_this","errors","type","_validateWithNumberParser","_callee2","_this2","parsedNumbers","validatedPhoneNumbers","_callee2$","_context2","_numberParser","_this2$_deps$companyC","isSpecial","number","originalString","isAnExtensionNumber","extensionObj","enableCompanyPublicApi","availableExtension","numbers","_x2","_numberParser2","_callee3","_this$_deps$regionSet3","homeCountry","normalizedNumbers","response","_callee3$","_context3","map","_numberParserApi","international","country","callingCode","_x3","_numberParserApi2","_callee4","originalStrings","_callee4$","_context4","client","numberParser","post","_x4","_x5","_parsingPhoneNumber2","_callee5","data","_callee5$","_context5","service","platform","json","t0","alert","danger","message","callErrors","numberParseError","payload","_parsingPhoneNumber","_x6","_parseNumbers","_callee6","inputs","_this$_deps$accountIn","_this$_deps$accountIn2","_this3","_this$_deps$regionSet4","defaultAreaCode","brandId","_callee6$","_context6","serviceInfo","id","cleanNumber","contextSource","contextSourceOption","account","context","isoCode","outboundCallPrefix","appFeatures","OCPValue","conflictHandling","enableSmartDialPlan","results","handleResult","parseNumbers","_x7","validate","test","resultItem","_resultItem$formats","formatObj","formats","parseResult","isInternational","specialService","parsedNumber","category","Category","SpecialService","national","Extension","handleExtension","Regular","ShortCode","TollFree","e164Extended","e164","dialableExtended","Unknown","dialable","Ambiguous","handleAmbiguous","_resultItem$numberDet","numberDetails","externalNumber","_resultItem$numberDet2","_resultItem$numberDet3","_resultItem$numberDet4","phoneNumberISOCode","regionSettingsCountryCode","isUSOrCAOrPR","RcModuleV2","proxify","exports"],"sources":["modules/NumberValidate/NumberValidate.ts"],"sourcesContent":["import type ParsePhoneNumberResponse from '@rc-ex/core/lib/definitions/ParsePhoneNumberResponse';\nimport { RcModuleV2 } from '@ringcentral-integration/core';\nimport type { CountryCode } from '@ringcentral-integration/phone-number';\nimport { parse, isUSOrCAOrPR } from '@ringcentral-integration/phone-number';\n\nimport type {\n  NumberParserAPIResponse,\n  ParsePhoneNumberResultsItem,\n} from '../../interfaces/NumberParserResponse.interface';\nimport { Category } from '../../interfaces/NumberParserResponse.interface';\nimport cleanNumber from '../../lib/cleanNumber';\nimport { isAnExtension, isExtensionExist } from '../../lib/contactHelper';\nimport { Module } from '../../lib/di';\nimport { hasNoAreaCode } from '../../lib/hasNoAreaCode';\nimport { isBlank } from '../../lib/isBlank';\nimport { normalizeNumber } from '../../lib/normalizeNumber';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { callErrors } from '../Call/callErrors';\n\nimport type {\n  Deps,\n  ParsePhoneNumberAPIParam,\n  ParseResultItem,\n  ValidatedPhoneNumbers,\n  ValidateFormattedError,\n  ValidateFormattingResult,\n  ValidateParsedError,\n  ValidateParsingResult,\n  ValidateResult,\n} from './NumberValidate.interface';\nimport { contextSourceOption } from './NumberValidate.interface';\n\n@Module({\n  name: 'NumberValidate',\n  deps: [\n    'Brand',\n    'Client',\n    'RegionSettings',\n    'AccountInfo',\n    'CompanyContacts',\n    'AppFeatures',\n    'Alert',\n    { dep: 'ExtensionInfo', optional: true },\n    { dep: 'NumberValidateOptions', optional: true },\n  ],\n})\nexport class NumberValidate extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  isNoToNumber(input: string) {\n    if (isBlank(input)) {\n      return true;\n    }\n    const { hasInvalidChars, isValid } = parse({\n      input,\n      countryCode: this._deps.regionSettings.countryCode,\n    });\n    if (hasInvalidChars || !isValid) {\n      return true;\n    }\n    return false;\n  }\n\n  hasNoAreaCode(input: string) {\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    return (\n      this._deps.brand.brandConfig.allowRegionSettings &&\n      hasNoAreaCode({ input, countryCode, areaCode })\n    );\n  }\n\n  _isSpecial(phoneNumber: { special?: boolean }) {\n    return !!phoneNumber?.special;\n  }\n\n  /**\n   * TODO: Currently we don't have clearly defined business rule on\n   * what extension numbers are considered available for dialing.\n   * @param {*} extensionNumber\n   * @returns {String} extensionNumber | null\n   */\n  getAvailableExtension(extensionNumber: string, maxExtensionNumberLength = 6) {\n    if (!isAnExtension(extensionNumber, maxExtensionNumberLength)) {\n      return null;\n    }\n    if (!this._deps.extensionInfo) {\n      return null;\n    }\n    const { isMultipleSiteEnabled, site } = this._deps.extensionInfo;\n    const { filteredContacts, ivrContacts } = this._deps.companyContacts;\n    const contacts = filteredContacts.concat(ivrContacts);\n    return (\n      contacts.find((item) =>\n        isExtensionExist({\n          extensionNumber,\n          extensionFromContacts: item.extensionNumber ?? '',\n          options: {\n            isMultipleSiteEnabled,\n            siteCode: site?.code,\n          },\n        }),\n      )?.extensionNumber ?? null\n    );\n  }\n\n  isAvailableExtension(extensionNumber: string) {\n    return !!this.getAvailableExtension(extensionNumber);\n  }\n\n  isNotAnExtension(extensionNumber: string, maxExtensionLength = 6) {\n    return (\n      extensionNumber &&\n      extensionNumber.length <= maxExtensionLength &&\n      !this._deps.companyContacts.isAvailableExtension(extensionNumber)\n    );\n  }\n\n  isCompanyExtension(companyNumber: string, extensionNumber: string) {\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    const normalizedCompanyNumber = normalizeNumber({\n      phoneNumber: companyNumber,\n      countryCode,\n      areaCode,\n      maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n    });\n    if (normalizedCompanyNumber !== this._deps.accountInfo.mainCompanyNumber) {\n      return false;\n    }\n    return this._deps.companyContacts.isAvailableExtension(extensionNumber);\n  }\n\n  @proxify\n  async validateNumbers(phoneNumbers: string[]): Promise<ValidateResult> {\n    const validateResult = this.validateFormat(phoneNumbers);\n    if (!validateResult.result) {\n      return validateResult;\n    }\n    const validatedNumbers = await this.validateWithNumberParser(phoneNumbers);\n    return validatedNumbers;\n  }\n\n  validateFormat(phoneNumbers: string[]): ValidateFormattingResult {\n    const errors: ValidateFormattedError = [];\n    phoneNumbers.forEach((phoneNumber) => {\n      if (this.isNoToNumber(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n      } else if (this.hasNoAreaCode(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noAreaCode' });\n      }\n    });\n    return {\n      result: errors.length === 0,\n      errors,\n    };\n  }\n\n  @proxify\n  async validateWithNumberParser(\n    phoneNumbers: string[],\n  ): Promise<ValidateParsingResult> {\n    const maxExtensionNumberLength =\n      this._deps.accountInfo.maxExtensionNumberLength;\n    const parsedNumbers = await this._numberParser(phoneNumbers);\n    const errors: ValidateParsedError = [];\n    const validatedPhoneNumbers: ValidatedPhoneNumbers = [];\n    parsedNumbers.forEach((phoneNumber) => {\n      const isSpecial = this._isSpecial(phoneNumber);\n      const number = phoneNumber.originalString;\n\n      const isAnExtensionNumber =\n        !isSpecial && isAnExtension(number!, maxExtensionNumberLength);\n      const extensionObj: {\n        availableExtension?: string;\n        isAnExtension?: boolean;\n      } = { isAnExtension: isAnExtensionNumber };\n      if (\n        !this._deps.companyContacts?.enableCompanyPublicApi &&\n        isAnExtensionNumber\n      ) {\n        const availableExtension = this.getAvailableExtension(\n          number!,\n          maxExtensionNumberLength,\n        );\n        if (!availableExtension) {\n          errors.push({\n            // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n            phoneNumber: phoneNumber.originalString,\n            type: 'notAnExtension',\n          });\n          return;\n        }\n\n        extensionObj.availableExtension = availableExtension;\n      }\n      validatedPhoneNumbers.push({ ...phoneNumber, ...extensionObj });\n    });\n    return {\n      result: errors.length === 0,\n      numbers: validatedPhoneNumbers,\n      errors,\n    };\n  }\n\n  @proxify\n  async _numberParser(phoneNumbers: string[]) {\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n    const normalizedNumbers = phoneNumbers.map((phoneNumber) =>\n      normalizeNumber({ phoneNumber, countryCode, areaCode }),\n    );\n    const response = await this._numberParserApi(\n      normalizedNumbers,\n      homeCountry,\n    );\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    return response.phoneNumbers.map((phoneNumber) => ({\n      ...phoneNumber,\n      international:\n        !!phoneNumber.country &&\n        // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n        phoneNumber.country.callingCode !== response.homeCountry.callingCode,\n    }));\n  }\n\n  @proxify\n  async _numberParserApi(\n    originalStrings: string[],\n    homeCountry: {\n      homeCountry?: string;\n    },\n  ) {\n    const response: ParsePhoneNumberResponse = await this._deps.client\n      .numberParser()\n      .parse()\n      .post(\n        {\n          originalStrings,\n        },\n        homeCountry,\n      );\n    return response;\n  }\n\n  // introduce number parser v2\n  // need to remove private, so that we can test\n  @proxify\n  async _parsingPhoneNumber(\n    data: ParsePhoneNumberAPIParam,\n  ): Promise<NumberParserAPIResponse | null> {\n    try {\n      const response = await this._deps.client.service\n        .platform()\n        .post(`/restapi/v2/number-parser/parse`, data);\n      return response.json();\n    } catch (ex) {\n      this._deps.alert.danger({\n        message: callErrors.numberParseError,\n        payload: ex,\n      });\n      return null;\n    }\n  }\n\n  @proxify\n  async parseNumbers(inputs: string[]): Promise<ParseResultItem[] | void> {\n    const { countryCode, defaultAreaCode } = this._deps.regionSettings;\n    // TODO: API has not supported sub-brand. As a workaround, we use brandId instead of uBrandId here\n    const brandId =\n      this._deps.accountInfo.serviceInfo?.brand?.id ||\n      this._deps.brand.brandConfig.id;\n    const phoneNumbers = inputs.map((input: string) => cleanNumber(input));\n    const data: ParsePhoneNumberAPIParam = {\n      originalStrings: phoneNumbers,\n      contextSource: contextSourceOption.account,\n      context: {\n        brandId,\n        country: {\n          isoCode: countryCode,\n        },\n        defaultAreaCode,\n        outboundCallPrefix: this._deps.appFeatures.OCPValue,\n        conflictHandling: this._deps.appFeatures.enableSmartDialPlan\n          ? 'Client'\n          : 'Default',\n        maxExtensionNumberLength:\n          this._deps.accountInfo.maxExtensionNumberLength,\n      },\n    };\n    const response = await this._parsingPhoneNumber(data);\n    return response?.results.map((result) => this.handleResult(result));\n  }\n\n  /**\n   * Whether the number is an empty string or contains invalid characters\n   */\n  validate(numbers: string[]): ValidateFormattingResult {\n    const errors: ValidateFormattedError = [];\n    numbers.forEach((phoneNumber) => {\n      if (isBlank(phoneNumber) || /[^\\d*+#\\-(). ]/.test(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n      }\n    });\n    return {\n      result: errors.length === 0,\n      errors,\n    };\n  }\n\n  private handleResult(\n    resultItem: ParsePhoneNumberResultsItem,\n  ): ParseResultItem {\n    const formatObj = resultItem.formats?.[0];\n    const originalString = resultItem.originalString;\n    let parseResult: ParseResultItem = {\n      originalString,\n      isAnExtension: false,\n      isInternational: false,\n      specialService: false,\n      parsedNumber: resultItem.originalString,\n      availableExtension: null,\n      ...formatObj,\n    };\n    switch (resultItem.category) {\n      case Category.SpecialService:\n        parseResult.specialService = true;\n        parseResult.parsedNumber = formatObj?.national;\n        break;\n      case Category.Extension:\n        parseResult = {\n          ...parseResult,\n          ...this.handleExtension(resultItem),\n        };\n        break;\n      case Category.Regular:\n      case Category.ShortCode:\n      case Category.TollFree:\n        parseResult.isInternational = this.isInternational(resultItem);\n\n        parseResult.parsedNumber =\n          formatObj.e164Extended ||\n          formatObj.e164 ||\n          formatObj.dialableExtended;\n        break;\n      case Category.Unknown:\n        parseResult.parsedNumber =\n          formatObj.dialableExtended || formatObj.dialable;\n        break;\n      case Category.Ambiguous:\n        parseResult = {\n          ...parseResult,\n          ...this.handleAmbiguous(resultItem),\n        };\n        break;\n      default:\n        break;\n    }\n\n    return parseResult;\n  }\n\n  private handleExtension(resultItem: ParsePhoneNumberResultsItem) {\n    const originalString = resultItem.originalString;\n    const maxExtensionNumberLength =\n      this._deps.accountInfo.maxExtensionNumberLength;\n    const parsedNumber =\n      resultItem.numberDetails?.extensionNumber || originalString;\n    const availableExtension = this.getAvailableExtension(\n      parsedNumber,\n      maxExtensionNumberLength,\n    );\n    const isAnExtension = true;\n\n    return {\n      isAnExtension,\n      parsedNumber,\n      availableExtension,\n    };\n  }\n\n  private handleAmbiguous(resultItem: ParsePhoneNumberResultsItem) {\n    const originalString = resultItem.originalString;\n    const maxExtensionNumberLength =\n      this._deps.accountInfo.maxExtensionNumberLength;\n    const availableExtension = this.getAvailableExtension(\n      originalString,\n      maxExtensionNumberLength,\n    );\n    let isInternational = false;\n    let parsedNumber = originalString;\n    let isAnExtension = false;\n    if (availableExtension) {\n      parsedNumber = availableExtension;\n      isAnExtension = true;\n    } else {\n      const externalNumber = resultItem.formats.find(\n        (item) => item.category !== Category.Extension,\n      );\n      isInternational = !!externalNumber && this.isInternational(resultItem);\n      parsedNumber =\n        externalNumber?.e164Extended || externalNumber?.e164 || originalString;\n    }\n\n    return {\n      isAnExtension,\n      parsedNumber,\n      isInternational,\n      availableExtension,\n    };\n  }\n\n  private isInternational(resultItem: ParsePhoneNumberResultsItem): boolean {\n    const phoneNumberISOCode = resultItem.numberDetails?.country?.isoCode ?? '';\n    const regionSettingsCountryCode = this._deps.regionSettings.countryCode;\n\n    // The call between us/ca/pr should not be considered to be the international call, check RCINT-25922/RCINT-26726 for more details\n    if (\n      isUSOrCAOrPR(regionSettingsCountryCode) &&\n      isUSOrCAOrPR(phoneNumberISOCode as CountryCode)\n    ) {\n      return false;\n    }\n\n    // For rest of the cases, check if the number is international\n    return phoneNumberISOCode !== regionSettingsCountryCode;\n  }\n}\n"],"mappings":"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","ignoreList":[]}