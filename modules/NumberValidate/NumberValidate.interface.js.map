{"version":3,"file":"NumberValidate.interface.js","names":["contextSourceOption","account","exports"],"sources":["modules/NumberValidate/NumberValidate.interface.ts"],"sourcesContent":["import type PhoneNumberInfoNumberParser from '@rc-ex/core/lib/definitions/PhoneNumberInfoNumberParser';\n\nimport type {\n  ConflictHandling,\n  Country,\n  ResultFormattedItem,\n} from '../../interfaces/NumberParserResponse.interface';\nimport type { AccountInfo } from '../AccountInfo';\nimport type { AppFeatures } from '../AppFeatures';\nimport type { Brand } from '../Brand';\nimport type { CompanyContacts } from '../CompanyContacts';\nimport type { ExtensionInfo } from '../ExtensionInfo';\nimport type { RegionSettings } from '../RegionSettings';\nimport type { Alert } from '../Alert';\n\nexport interface NumberValidateOptions {\n  //\n}\n\nexport interface Deps {\n  brand: Brand;\n  client: any;\n  regionSettings: RegionSettings;\n  accountInfo: AccountInfo;\n  companyContacts: CompanyContacts;\n  extensionInfo?: ExtensionInfo;\n  numberValidateOptions?: NumberValidateOptions;\n  appFeatures: AppFeatures;\n  alert: Alert;\n}\n\nexport type ValidateFormattedError = {\n  phoneNumber: string;\n  type: 'noToNumber' | 'noAreaCode';\n}[];\n\nexport type ValidateParsedError = {\n  phoneNumber: string;\n  type: 'specialNumber' | 'notAnExtension';\n}[];\n\nexport type ValidatedPhoneNumbers = (PhoneNumberInfoNumberParser & {\n  availableExtension?: string;\n})[];\n\nexport type ValidateFormattingResult = {\n  result: boolean;\n  errors: ValidateFormattedError;\n};\n\nexport type ValidateParsingResult = {\n  result: boolean;\n  errors: ValidateParsedError;\n  numbers?: ValidatedPhoneNumbers;\n};\n\nexport type ValidateResult = ValidateFormattingResult | ValidateParsingResult;\n\n// introduce number parser v2\n\nexport const contextSourceOption = {\n  default: 'Default',\n  account: 'Account',\n};\n\nexport interface ParsePhoneNumberAPIParam {\n  originalStrings: Array<string>;\n  contextSource?: (typeof contextSourceOption)[keyof typeof contextSourceOption];\n  context?: {\n    brandId?: string;\n    country?: Pick<Country, 'isoCode'>;\n    defaultAreaCode?: string;\n    vanityPhoneNumbersAllowed?: boolean;\n    maxExtensionNumberLength?: number;\n    shortCodesAllowed?: boolean;\n    siteCode?: string;\n    shortExtensionNumberLength?: number;\n    outboundCallPrefix?: string | null;\n    maskedPhoneNumbersAllowed?: boolean;\n    conflictHandling?: ConflictHandling;\n  };\n  resultContent?: {\n    includeNumberDetails?: boolean;\n    includeDialingDetails?: boolean;\n    includeFormatting?: boolean;\n  };\n}\n\nexport interface ParseResultItem extends ResultFormattedItem {\n  originalString?: string;\n  isAnExtension?: boolean;\n  isInternational?: boolean;\n  specialService?: boolean;\n  parsedNumber?: string;\n  availableExtension?: string | null;\n}\n\nexport type ParseResult = Array<ParseResultItem>;\n"],"mappings":";;;;;;AA0DA;;AAEO,IAAMA,mBAAmB,GAAG;EACjC,WAAS,SAAS;EAClBC,OAAO,EAAE;AACX,CAAC;AAACC,OAAA,CAAAF,mBAAA,GAAAA,mBAAA"}