{"version":3,"sources":["modules/GlipPersons/getReducer.ts"],"names":["getGlipPersonsStatusReducer","types","state","status","idle","type","fetch","fetching","fetchError","fetchSuccess","batchFetchSuccess","getGlipPersonStoreReducer","person","persons","newState","id","forEach","p","cleanUp","resetSuccess","getGlipPostsReducer","reducers","glipPostsStatus"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;AAEO,SAASA,2BAAT,CAAqCC,KAArC,EAA4C;AACjD,SAAO,YAAmC;AAAA,QAAlCC,KAAkC,uEAA1BC,mBAAOC,IAAmB;;AAAA;AAAA,QAAXC,IAAW,QAAXA,IAAW;;AACxC,YAAQA,IAAR;AACE,WAAKJ,KAAK,CAACK,KAAX;AACE,eAAOH,mBAAOI,QAAd;;AACF,WAAKN,KAAK,CAACO,UAAX;AACA,WAAKP,KAAK,CAACQ,YAAX;AACA,WAAKR,KAAK,CAACS,iBAAX;AACE,eAAOP,mBAAOC,IAAd;;AACF;AACE,eAAOF,KAAP;AARJ;AAUD,GAXD;AAYD;;AAEM,SAASS,yBAAT,CAAmCV,KAAnC,EAA0C;AAC/C,SAAO,YAA2C;AAAA,QAA1CC,KAA0C,uEAAlC,EAAkC;;AAAA;AAAA,QAA5BG,IAA4B,SAA5BA,IAA4B;AAAA,QAAtBO,MAAsB,SAAtBA,MAAsB;AAAA,QAAdC,OAAc,SAAdA,OAAc;;AAChD,QAAIC,QAAJ;;AACA,YAAQT,IAAR;AACE,WAAKJ,KAAK,CAACQ,YAAX;AACEK,QAAAA,QAAQ,qBACHZ,KADG,CAAR;AAGAY,QAAAA,QAAQ,CAACF,MAAM,CAACG,EAAR,CAAR,GAAsBH,MAAtB;AACA,eAAOE,QAAP;;AACF,WAAKb,KAAK,CAACS,iBAAX;AACEI,QAAAA,QAAQ,qBACHZ,KADG,CAAR;AAGAW,QAAAA,OAAO,CAACG,OAAR,CAAgB,UAACC,CAAD,EAAO;AACrB,cAAIA,CAAC,CAACF,EAAN,EAAU;AACRD,YAAAA,QAAQ,CAACG,CAAC,CAACF,EAAH,CAAR,GAAiBE,CAAjB;AACD;AACF,SAJD;AAKA,eAAOH,QAAP;;AACF,WAAKb,KAAK,CAACiB,OAAX;AACA,WAAKjB,KAAK,CAACkB,YAAX;AACE,eAAO,EAAP;;AACF;AACE,eAAOjB,KAAP;AArBJ;AAuBD,GAzBD;AA0BD;;AAEc,SAASkB,mBAAT,CAA6BnB,KAA7B,EAAmD;AAAA,MAAfoB,QAAe,uEAAJ,EAAI;AAChE,SAAO,4DACFA,QADE;AAELlB,IAAAA,MAAM,EAAE,wCAAuBF,KAAvB,CAFH;AAGLqB,IAAAA,eAAe,EAAEtB,2BAA2B,CAACC,KAAD;AAHvC,KAAP;AAKD","sourcesContent":["import { combineReducers } from 'redux';\n\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport status from './status';\n\nexport function getGlipPersonsStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.fetch:\n        return status.fetching;\n      case types.fetchError:\n      case types.fetchSuccess:\n      case types.batchFetchSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPersonStoreReducer(types) {\n  return (state = {}, { type, person, persons }) => {\n    let newState;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        newState[person.id] = person;\n        return newState;\n      case types.batchFetchSuccess:\n        newState = {\n          ...state,\n        };\n        persons.forEach((p) => {\n          if (p.id) {\n            newState[p.id] = p;\n          }\n        });\n        return newState;\n      case types.cleanUp:\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getGlipPostsReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    glipPostsStatus: getGlipPersonsStatusReducer(types),\n  });\n}\n"],"file":"getReducer.js"}