{"version":3,"sources":["modules/ContactSearchV2/ContactSearch.ts"],"names":["DefaultMinimalSearchLength","DefaultSearchingState","searchOnSources","searchString","result","ContactSearch","deps","dep","optional","searching","storageKey","enableCache","contactSearchOptions","_searchSources","Map","_searchSourcesFormat","_searchSourcesCheck","_searchIds","_ttl","_deps","ttl","_minimalSearchLength","minimalSearchLength","_debouncedSearchFn","fn","search","threshold","_timeoutId","searchStatus","contactSearchStatus","idle","entities","identity","join","resultMap","forEach","item","id","push","sourceName","data","Object","keys","contactSearch","key","Date","now","timestamp","resetContactSearch","cleanUp","cancel","auth","loggedIn","_readyCheck","ready","searchFn","readyCheckFn","formatFn","Error","has","set","length","setPrepareSearch","_clearTimeout","setTimeout","undefined","Array","from","_searchSource","clearTimeout","searchId","uuid","v4","setSearchStatus","_searchFromCache","_loadSearching","get","_saveSearching","_onSearchError","setSearchSuccess","setContactSearch","list","sort","current","next","currentName","name","currentPhoneNumber","phoneNumber","nextName","nextPhoneNumber","indexOf","RcModuleV2","storage","state","action","proxify"],"mappings":"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","sourcesContent":["import { identity, sortBy } from 'ramda';\nimport * as uuid from 'uuid';\n\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\n\nimport { debounce } from '../../lib/debounce-throttle';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport {\n  ContactSearchState,\n  Deps,\n  Entities,\n  SearchFromCacheOptions,\n  Searching,\n  SearchSource,\n  SearchSourceOptions,\n  SearchStringOptions,\n  SetContactSearchOptions,\n  SetSearchSuccessOptions,\n} from './ContactSearch.interface';\nimport { contactSearchStatus } from './contactSearchStatus';\n\nexport const DefaultMinimalSearchLength = 3;\n\nexport const DefaultSearchingState: Searching = {\n  searchOnSources: [],\n  searchString: '',\n  result: [],\n};\n\n@Module({\n  deps: [\n    'Auth',\n    { dep: 'Storage', optional: true },\n    { dep: 'ContactSearchOptions', optional: true },\n  ],\n})\nexport class ContactSearch extends RcModuleV2<Deps> {\n  protected _searchSources = new Map<\n    SearchSource['sourceName'],\n    SearchSource['searchFn']\n  >();\n\n  protected _searchSourcesFormat = new Map<\n    SearchSource['sourceName'],\n    SearchSource['formatFn']\n  >();\n\n  protected _searchSourcesCheck = new Map<\n    SearchSource['sourceName'],\n    SearchSource['readyCheckFn']\n  >();\n\n  protected _searchIds: Record<string, string> = {};\n\n  protected _ttl = this._deps.contactSearchOptions?.ttl ?? 5 * 60 * 1000;\n\n  protected _minimalSearchLength =\n    this._deps.contactSearchOptions?.minimalSearchLength ??\n    DefaultMinimalSearchLength;\n\n  protected _debouncedSearchFn = debounce({ fn: this.search, threshold: 800 });\n\n  protected _timeoutId: NodeJS.Timeout = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'ContactSearch',\n      enableCache: deps.contactSearchOptions?.enableCache ?? true,\n    });\n  }\n\n  @storage\n  @state\n  contactSearch: Record<string, ContactSearchState> = {};\n\n  @state\n  searchStatus = contactSearchStatus.idle;\n\n  @state\n  searching: Searching = DefaultSearchingState;\n\n  @action\n  setSearchStatus(searchStatus: string) {\n    this.searchStatus = searchStatus;\n  }\n\n  @action\n  setPrepareSearch() {\n    this.searchStatus = contactSearchStatus.idle;\n    this.searching = DefaultSearchingState;\n  }\n\n  @action\n  setSearchSuccess({\n    searchOnSources,\n    searchString,\n    entities,\n  }: SetSearchSuccessOptions) {\n    if (\n      this.searching.searchString === searchString &&\n      sortBy(identity)(this.searching.searchOnSources).join(',') ===\n        sortBy(identity)(searchOnSources).join(',')\n    ) {\n      const resultMap: Record<string, boolean> = {};\n      this.searching.result.forEach((item) => {\n        resultMap[item.id] = true;\n      });\n      entities.forEach((item) => {\n        if (!resultMap[item.id]) {\n          this.searching.result.push(item);\n          resultMap[item.id] = true;\n        }\n      });\n      return;\n    }\n    this.searching = {\n      searchOnSources,\n      searchString,\n      result: entities,\n    };\n  }\n\n  @action\n  setContactSearch({\n    sourceName,\n    searchString,\n    entities,\n    ttl,\n  }: SetContactSearchOptions) {\n    const data: Record<string, ContactSearchState> = {};\n    Object.keys(this.contactSearch).forEach((key) => {\n      if (Date.now() - this.contactSearch[key].timestamp < ttl) {\n        data[key] = this.contactSearch[key];\n      }\n    });\n    const key = `${sourceName}-${searchString}`;\n    data[key] = {\n      entities,\n      timestamp: Date.now(),\n    };\n    this.contactSearch = data;\n  }\n\n  @action\n  cleanUp() {\n    this.contactSearch = {};\n    this.searching = DefaultSearchingState;\n  }\n\n  @action\n  resetContactSearch() {\n    this.contactSearch = {};\n  }\n\n  onInitSuccess() {\n    this.resetContactSearch();\n  }\n\n  onReset() {\n    this.cleanUp();\n    if (this._debouncedSearchFn) {\n      this._debouncedSearchFn.cancel();\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      super._shouldInit() &&\n      this._deps.auth.loggedIn &&\n      this._readyCheck()\n    );\n  }\n\n  _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._deps.auth.loggedIn)\n    );\n  }\n\n  addSearchSource({\n    sourceName,\n    searchFn,\n    readyCheckFn,\n    formatFn,\n  }: SearchSource) {\n    if (!sourceName) {\n      throw new Error(\n        '[ContactSearch > SearchSource > sourceName] is required',\n      );\n    }\n    if (this._searchSources.has(sourceName)) {\n      throw new Error(\n        `[ContactSearch > SearchSource(${sourceName}) > searchFn] already exists`,\n      );\n    }\n    if (this._searchSourcesCheck.has(sourceName)) {\n      throw new Error(\n        `[ContactSearch > SearchSource(${sourceName}) > readyCheckFn] already exists`,\n      );\n    }\n    if (this._searchSourcesFormat.has(sourceName)) {\n      throw new Error(\n        `[ContactSearch > SearchSource(${sourceName}) > formatFn] already exists`,\n      );\n    }\n    if (typeof searchFn !== 'function') {\n      throw new Error(\n        `[ContactSearch > SearchSource(${sourceName}) > searchFn] must be a function`,\n      );\n    }\n    if (typeof readyCheckFn !== 'function') {\n      throw new Error(\n        `[ContactSearch > SearchSource(${sourceName}) > readyCheckFn] must be a function`,\n      );\n    }\n    if (typeof formatFn !== 'function') {\n      throw new Error(\n        `[ContactSearch > SearchSource(${sourceName}) > formatFn] must be a function`,\n      );\n    }\n    this._searchSources.set(sourceName, searchFn);\n    this._searchSourcesFormat.set(sourceName, formatFn);\n    this._searchSourcesCheck.set(sourceName, readyCheckFn);\n  }\n\n  @proxify\n  async debouncedSearch({ searchString }: SearchStringOptions) {\n    this._debouncedSearchFn({ searchString });\n  }\n\n  @proxify\n  async search({ searchString }: SearchStringOptions) {\n    if (\n      !this.ready ||\n      !searchString ||\n      searchString.length < this._minimalSearchLength\n    ) {\n      this.setPrepareSearch();\n      return;\n    }\n    this._clearTimeout();\n    this._timeoutId = setTimeout(async () => {\n      const searching = { ...this.searching };\n      await this.search({ searchString: undefined });\n      await this.search(searching);\n    }, this._ttl);\n    const searchOnSources = Array.from(this._searchSources.keys());\n    for (const sourceName of searchOnSources) {\n      await this._searchSource({\n        searchOnSources,\n        sourceName,\n        searchString,\n      });\n    }\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  // TODO Need to refactor, remove cache, and update data in real time.\n  @proxify\n  async _searchSource({\n    searchOnSources,\n    sourceName,\n    searchString,\n  }: SearchSourceOptions) {\n    const searchId = uuid.v4();\n    this._searchIds[sourceName] = searchId;\n    this.setSearchStatus(contactSearchStatus.searching);\n    try {\n      // search cache\n      let entities: Entities = null;\n      entities = this._searchFromCache({ sourceName, searchString });\n      if (entities) {\n        this._loadSearching({ searchOnSources, searchString, entities });\n        return;\n      }\n      // search source\n      const searchFn = this._searchSources.get(sourceName);\n      entities = await searchFn({ searchString });\n      // format result\n      const formatFn = this._searchSourcesFormat.get(sourceName);\n      entities = formatFn(entities);\n      // save result\n      this._saveSearching({ sourceName, searchString, entities });\n      if (this._searchIds[sourceName] === searchId) {\n        this._loadSearching({ searchOnSources, searchString, entities });\n      }\n    } catch (error) {\n      this._onSearchError();\n    }\n  }\n\n  _searchFromCache({ sourceName, searchString }: SearchFromCacheOptions) {\n    const key = `${sourceName}-${searchString}`;\n    const searching = this.contactSearch[key];\n    const now = Date.now();\n    if (searching && now - searching.timestamp < this._ttl) {\n      return searching.entities;\n    }\n    return null;\n  }\n\n  _readyCheck() {\n    for (const sourceName of this._searchSourcesCheck.keys()) {\n      if (!this._searchSourcesCheck.get(sourceName)()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _onSearchError() {\n    this.setPrepareSearch();\n  }\n\n  _loadSearching({\n    searchOnSources,\n    searchString,\n    entities,\n  }: SetSearchSuccessOptions) {\n    this.setSearchSuccess({\n      searchOnSources,\n      searchString,\n      entities,\n    });\n  }\n\n  _saveSearching({\n    sourceName,\n    searchString,\n    entities,\n  }: Pick<\n    SetContactSearchOptions,\n    Exclude<keyof SetContactSearchOptions, 'ttl'>\n  >) {\n    this.setContactSearch({\n      sourceName,\n      searchString,\n      entities,\n      ttl: this._ttl,\n    });\n  }\n\n  @computed(({ searching }: ContactSearch) => [searching])\n  get searchResult() {\n    return this.searching.result ?? [];\n  }\n\n  @computed(({ searching }: ContactSearch) => [searching])\n  get sortedResult() {\n    const { result = [], searchString = '' } = this.searching;\n    const list = [...result];\n    if (searchString === '') {\n      return list;\n    }\n    return list.sort((current, next) => {\n      const currentName = current.name || '';\n      const currentPhoneNumber = current.phoneNumber || '';\n      const nextName = next.name || '';\n      const nextPhoneNumber = next.phoneNumber || '';\n      return (\n        nextName.indexOf(searchString) -\n        currentName.indexOf(searchString) +\n        (nextPhoneNumber.indexOf(searchString) -\n          currentPhoneNumber.indexOf(searchString))\n      );\n    });\n  }\n}\n"],"file":"ContactSearch.js"}