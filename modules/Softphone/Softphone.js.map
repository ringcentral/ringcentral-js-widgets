{"version":3,"sources":["modules/Softphone/Softphone.ts"],"names":["Softphone","name","deps","dep","optional","that","_deps","brand","brandConfig","accountInfo","serviceInfo","dynamicConfig","data","callWithJupiterConfig","_callHandler","_extensionMode","_useBrandedJupiter","_ignoreModuleReadiness","contactMatcher","softphoneOptions","extensionMode","useBrandedJupiter","callHandler","phoneNumber","softphoneStatus","connecting","connectingPhoneNumber","idle","bowser","parse","window","navigator","userAgent","platform","type","callingMode","command","encodeURIComponent","protocol","spartanProtocol","isJupiterUniversalLink","isCallWithJupiter","callingModes","jupiter","useJupiterUniversalLink","jupiterUniversalLink","jupiterProtocol","uri","startToConnect","getMakeCallUri","openLink","detectPlatform","ActiveXObject","open","msLaunchUri","frame","document","createElement","style","display","body","appendChild","contentWindow","location","href","removeChild","forceMatchNumber","connectComplete","brandId","id","brandConfigs","callWithJupiter","link","allowJupiterUniversalLink","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n} from '@ringcentral-integration/core';\nimport bowser from 'bowser';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport sleep from '../../lib/sleep';\nimport callingModes from '../CallingSettings/callingModes';\nimport { CallHandlerContext, CallUriInfo, Deps } from './Softphone.interface';\nimport { softphoneStatus } from './softphoneStatus';\n\n/**\n * @class\n * @description Softphone module to call softphone\n */\n@Module({\n  name: 'Softphone',\n  deps: [\n    'Brand',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'AccountInfo', optional: true },\n    { dep: 'DynamicConfig', optional: true },\n    { dep: 'SoftphoneOptions', optional: true },\n  ],\n})\nexport class Softphone<T extends Deps = Deps> extends RcModuleV2<T> {\n  protected _callHandler: (context: CallHandlerContext) => any;\n  protected _extensionMode: boolean;\n  protected _useBrandedJupiter: boolean;\n\n  constructor(deps: T) {\n    super({\n      deps,\n    });\n    this._ignoreModuleReadiness(deps.contactMatcher);\n    this._extensionMode = this._deps.softphoneOptions?.extensionMode ?? false;\n    this._useBrandedJupiter =\n      this._deps.softphoneOptions?.useBrandedJupiter ?? false;\n    this._callHandler = this._deps.softphoneOptions?.callHandler;\n  }\n\n  @state\n  connectingPhoneNumber: string = null;\n\n  @state\n  softphoneStatus = softphoneStatus.idle;\n\n  @action\n  startToConnect(phoneNumber: string) {\n    this.softphoneStatus = softphoneStatus.connecting;\n    this.connectingPhoneNumber = phoneNumber;\n  }\n\n  @action\n  connectComplete() {\n    this.softphoneStatus = softphoneStatus.idle;\n    this.connectingPhoneNumber = null;\n  }\n\n  detectPlatform() {\n    return bowser.parse(\n      (window.navigator && window.navigator.userAgent) || 'unknown',\n    ).platform.type;\n  }\n\n  get spartanProtocol() {\n    return this.brandConfig.spartanProtocol;\n  }\n\n  @computed((that: Softphone) => [\n    that._deps.brand.brandConfig,\n    that._deps.accountInfo?.serviceInfo,\n    that._deps.dynamicConfig?.data,\n  ])\n  get callWithJupiterConfig() {\n    const brandId = this._deps.accountInfo?.serviceInfo.brand?.id;\n    if (this._useBrandedJupiter && brandId) {\n      const brandConfigs =\n        this._deps.dynamicConfig?.data.callWithJupiter ??\n        this.brandConfig.callWithJupiter;\n      if (brandConfigs) {\n        return brandConfigs[brandId] ?? brandConfigs.default;\n      }\n    }\n    return this.brandConfig.callWithJupiter.default;\n  }\n\n  get brandConfig() {\n    return this._deps.brand.brandConfig;\n  }\n\n  // currently we only have RingCentral App(rc brand)'s & AT&T universal link\n  get jupiterUniversalLink() {\n    return this.callWithJupiterConfig.link;\n  }\n\n  @computed(({ callWithJupiterConfig }: Softphone) => [callWithJupiterConfig])\n  get jupiterAppName() {\n    return this.callWithJupiterConfig?.name ?? null;\n  }\n\n  // currently we don't have Bt brand uri scheme\n  get jupiterProtocol() {\n    return this.callWithJupiterConfig.protocol;\n  }\n\n  getMakeCallUri(phoneNumber: string, callingMode: string): CallUriInfo {\n    // spartan\n    let command = `call?number=${encodeURIComponent(phoneNumber)}`;\n    let protocol = this.spartanProtocol;\n    let isJupiterUniversalLink = false;\n    // jupiter\n    const isCallWithJupiter = callingMode === callingModes.jupiter;\n    if (isCallWithJupiter) {\n      // jupiter doesn't recognize encoded string for now\n      command = `r/call?number=${phoneNumber}`;\n      isJupiterUniversalLink = this.useJupiterUniversalLink;\n      protocol = isJupiterUniversalLink\n        ? this.jupiterUniversalLink\n        : this.jupiterProtocol;\n    }\n    return {\n      command,\n      protocol,\n      isJupiterUniversalLink,\n      uri: `${protocol}${command}`,\n    };\n  }\n\n  get useJupiterUniversalLink() {\n    // rc brand use scheme, partner brand use universal link\n    return (\n      this._deps.softphoneOptions?.useJupiterUniversalLink ??\n      this.brandConfig.allowJupiterUniversalLink\n    );\n  }\n\n  @proxify\n  async makeCall(phoneNumber: string, callingMode: string) {\n    this.startToConnect(phoneNumber);\n\n    const {\n      protocol,\n      command,\n      uri,\n      isJupiterUniversalLink,\n    } = this.getMakeCallUri(phoneNumber, callingMode);\n\n    if (this._callHandler) {\n      this._callHandler({\n        callingMode,\n        protocol,\n        command,\n        uri,\n        isJupiterUniversalLink,\n        phoneNumber,\n      });\n    } else {\n      /**\n       * 1. Use window.open in extension background scripts to avoid crashing Browsers\n       * 2. Use window.open in non-desktop platforms\n       * 3. to support ie on Windows < 8\n       * 4. for Jupiter universal link, should open link directly\n       */\n      const openLink =\n        isJupiterUniversalLink ||\n        this._extensionMode ||\n        this.detectPlatform() !== 'desktop' ||\n        (window as any).ActiveXObject ||\n        'ActiveXObject' in window;\n\n      if (openLink) {\n        window.open(uri);\n      } else if (window.navigator.msLaunchUri) {\n        // to support ie to start the service\n        window.navigator.msLaunchUri(uri);\n      } else {\n        // open via iframe\n        const frame = document.createElement('iframe');\n        frame.style.display = 'none';\n        document.body.appendChild(frame);\n        await sleep(100);\n        frame.contentWindow.location.href = uri;\n        await sleep(300);\n        document.body.removeChild(frame);\n      }\n    }\n\n    if (this._deps.contactMatcher) {\n      await this._deps.contactMatcher.forceMatchNumber({\n        phoneNumber,\n      });\n    }\n\n    this.connectComplete();\n  }\n}\n"],"file":"Softphone.js"}