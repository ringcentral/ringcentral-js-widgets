{"version":3,"sources":["modules/Softphone/Softphone.ts"],"names":["Softphone","name","deps","dep","optional","_callHandler","_extensionMode","_ignoreModuleReadiness","contactMatcher","_deps","softphoneOptions","extensionMode","callHandler","phoneNumber","softphoneStatus","connecting","connectingPhoneNumber","idle","bowser","parse","window","navigator","userAgent","platform","type","callingMode","command","encodeURIComponent","protocol","spartanProtocol","isJupiterUniversalLink","isCallWithJupiter","callingModes","jupiter","jupiterUniversalLink","includes","_useJupiterUniversalLink","jupiterProtocol","uri","useJupiterUniversalLink","brand","brandConfig","allowJupiterUniversalLink","startToConnect","getMakeCallUri","openLink","detectPlatform","ActiveXObject","open","msLaunchUri","frame","document","createElement","style","display","body","appendChild","contentWindow","location","href","removeChild","forceMatchNumber","connectComplete","callWithSoftphone","callWithJupiter","link","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import bowser from 'bowser';\n\nimport { action, RcModuleV2, state } from '@ringcentral-integration/core';\n\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { sleep } from '../../lib/sleep';\nimport callingModes from '../CallingSettings/callingModes';\nimport { CallHandlerContext, CallUriInfo, Deps } from './Softphone.interface';\nimport { softphoneStatus } from './softphoneStatus';\n\n/**\n * @class\n * @description Softphone module to call softphone\n */\n@Module({\n  name: 'Softphone',\n  deps: [\n    'Brand',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'SoftphoneOptions', optional: true },\n  ],\n})\nexport class Softphone<T extends Deps = Deps> extends RcModuleV2<T> {\n  protected _callHandler: (context: CallHandlerContext) => any;\n  protected _extensionMode: boolean;\n\n  constructor(deps: T) {\n    super({\n      deps,\n    });\n    this._ignoreModuleReadiness(deps.contactMatcher);\n    this._extensionMode = this._deps.softphoneOptions?.extensionMode ?? false;\n    this._callHandler = this._deps.softphoneOptions?.callHandler;\n  }\n\n  @state\n  connectingPhoneNumber: string = null;\n\n  @state\n  softphoneStatus = softphoneStatus.idle;\n\n  @action\n  startToConnect(phoneNumber: string) {\n    this.softphoneStatus = softphoneStatus.connecting;\n    this.connectingPhoneNumber = phoneNumber;\n  }\n\n  @action\n  connectComplete() {\n    this.softphoneStatus = softphoneStatus.idle;\n    this.connectingPhoneNumber = null;\n  }\n\n  detectPlatform() {\n    return bowser.parse(\n      (window.navigator && window.navigator.userAgent) || 'unknown',\n    ).platform.type;\n  }\n\n  get spartanProtocol() {\n    return this._deps.brand.brandConfig.callWithSoftphone.protocol;\n  }\n\n  // currently we only have RingCentral App(rc brand)'s & AT&T universal link\n  get jupiterUniversalLink() {\n    return this._deps.brand.brandConfig.callWithJupiter?.link;\n  }\n\n  get jupiterAppName() {\n    return this._deps.brand.brandConfig.callWithJupiter?.name;\n  }\n\n  // currently we don't have Bt brand uri scheme\n  get jupiterProtocol() {\n    return this._deps.brand.brandConfig.callWithJupiter?.protocol;\n  }\n\n  getMakeCallUri(phoneNumber: string, callingMode: string): CallUriInfo {\n    // spartan\n    let command = `call?number=${encodeURIComponent(phoneNumber)}`;\n    let protocol = this.spartanProtocol;\n    let isJupiterUniversalLink = false;\n    // jupiter\n    const isCallWithJupiter = [\n      callingModes.jupiter,\n      callingModes.jupiterUniversalLink,\n    ].includes(callingMode);\n    if (isCallWithJupiter) {\n      // jupiter doesn't recognize encoded string for now\n      command = `r/call?number=${phoneNumber}`;\n      isJupiterUniversalLink = this._useJupiterUniversalLink(callingMode);\n      protocol = isJupiterUniversalLink\n        ? this.jupiterUniversalLink\n        : this.jupiterProtocol;\n    }\n    return {\n      command,\n      protocol,\n      isJupiterUniversalLink,\n      uri: `${protocol}${command}`,\n    };\n  }\n\n  private _useJupiterUniversalLink(callingMode: string) {\n    // rc brand: call with jupiter, use scheme\n    // rc brand: call with jupiter web, use universal link\n    // partner brand: use universal link\n    if (callingMode === callingModes.jupiterUniversalLink) {\n      return true;\n    }\n    return (\n      this._deps.softphoneOptions?.useJupiterUniversalLink ??\n      this._deps.brand.brandConfig.allowJupiterUniversalLink\n    );\n  }\n\n  @proxify\n  async makeCall(phoneNumber: string, callingMode: string) {\n    this.startToConnect(phoneNumber);\n\n    const { protocol, command, uri, isJupiterUniversalLink } =\n      this.getMakeCallUri(phoneNumber, callingMode);\n\n    if (this._callHandler) {\n      this._callHandler({\n        callingMode,\n        protocol,\n        command,\n        uri,\n        isJupiterUniversalLink,\n        phoneNumber,\n      });\n    } else {\n      /**\n       * 1. Use window.open in extension background scripts to avoid crashing Browsers\n       * 2. Use window.open in non-desktop platforms\n       * 3. to support ie on Windows < 8\n       * 4. for Jupiter universal link, should open link directly\n       */\n      const openLink =\n        isJupiterUniversalLink ||\n        this._extensionMode ||\n        this.detectPlatform() !== 'desktop' ||\n        (window as any).ActiveXObject ||\n        'ActiveXObject' in window;\n\n      if (openLink) {\n        window.open(uri);\n      } else if (window.navigator.msLaunchUri) {\n        // to support ie to start the service\n        window.navigator.msLaunchUri(uri);\n      } else {\n        // open via iframe\n        const frame = document.createElement('iframe');\n        frame.style.display = 'none';\n        document.body.appendChild(frame);\n        await sleep(100);\n        frame.contentWindow.location.href = uri;\n        await sleep(300);\n        document.body.removeChild(frame);\n      }\n    }\n\n    if (this._deps.contactMatcher) {\n      await this._deps.contactMatcher.forceMatchNumber({\n        phoneNumber,\n      });\n    }\n\n    this.connectComplete();\n  }\n}\n"],"file":"Softphone.js"}