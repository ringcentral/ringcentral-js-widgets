{"version":3,"file":"ModalUI.interface.js","names":[],"sources":["modules/ModalUI/ModalUI.interface.ts"],"sourcesContent":["import type { Locale } from '@ringcentral-integration/commons/modules/Locale';\nimport type { RcBaseProps } from '@ringcentral/juno';\nimport type React from 'react';\n\nimport type { ModalProps } from '../../components/ModalV2/interface';\n\nexport interface Deps {\n  locale: Locale;\n}\n\nexport type ModalOptions = RcBaseProps<\n  ModalProps,\n  | 'cancelButtonText'\n  | 'confirmButtonText'\n  | 'disableBackdropClick'\n  | 'disableEscapeKeyDown'\n  | 'title'\n  | 'children'\n  | 'key'\n  | 'open'\n  | 'onBackdropClick'\n> & {\n  /** confirm button text or the id of `registerRenderer` list  */\n  confirmButtonText?: string;\n  /** cancel button text or the id of `registerRenderer` list  */\n  cancelButtonText?: string;\n  /** title text or the id of `registerRenderer` list  */\n  title?: string;\n  /** when you use id with `title`, that will pass to register title render */\n  titleProps?: Record<string, any>;\n  /** footer content or the id of `registerRenderer` list  */\n  footer?: string;\n  /** when you use id with `footer`, that will pass to register footer render */\n  footerProps?: Record<string, any>;\n  /** main content or the id of `registerRenderer` list  */\n  content?: string;\n  /** when you use id with `content`, that will pass to register content render */\n  contentProps?: Record<string, any>;\n  /** trigger when confirm button click  */\n  onConfirm?: HandlerFunction;\n  /** trigger when cancel button click  */\n  onCancel?: HandlerFunction;\n  /**\n   * variant of modal\n   *\n   * - `alert` alert modal with `confirm` button\n   * - `confirm` confirm modal with `confirm` and `cancel` button\n   * - `info` info modal no with any button, and have `close` button\n   */\n  variant?: 'alert' | 'confirm' | 'info';\n  /** auto show loading when `confirm button` click, if that `onConfirm` is promise */\n  useLoadingOverlay?: boolean;\n  /**\n   * auto disableBackdropClick handling when loading,\n   * only works when `disableBackdropClick` is set to `false`\n   *\n   * @default true\n   */\n  autoDisableBackdropClick?: boolean;\n  /**\n   * If `true`, clicking the backdrop will not fire the `onClose` callback.\n   *\n   * @default true\n   */\n  disableBackdropClick?: boolean;\n};\n\nexport type ConfirmModalOptions = RcBaseProps<ModalOptions, 'variant'>;\n\nexport type AlertModalOptions = RcBaseProps<\n  ConfirmModalOptions,\n  'cancelButtonProps' | 'cancelButtonText' | 'onCancel'\n>;\n\nexport type InfoModalOptions = RcBaseProps<\n  AlertModalOptions,\n  'confirmButtonProps' | 'confirmButtonText'\n>;\n\nexport type DehydratedModalState = RcBaseProps<\n  ModalOptions,\n  'onCancel' | 'onConfirm' | 'onExited'\n> & {\n  /** current open state */\n  open: boolean;\n  /** this modal id */\n  id: string;\n  /** onConfirm function id */\n  onConfirm?: string;\n  /** onCancel function id */\n  onCancel?: string;\n  /** onExited function id */\n  onExited?: string;\n  /** this modal handler ids */\n  handlerIDs: string[];\n};\n\nexport type CustomRendererProps = {\n  /** current locale */\n  currentLocale: string;\n} & Pick<ModalProps, 'onConfirm' | 'onCancel' | 'title'> &\n  Record<string, any>;\n\nexport type CustomRenderer<\n  T extends CustomRendererProps = CustomRendererProps,\n> = (props: T) => React.ReactNode;\n\nexport type HandlerFunction = (\n  ...args: any\n) => boolean | Promise<boolean | void> | void;\n"],"mappings":"","ignoreList":[]}