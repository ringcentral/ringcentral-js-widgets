{"version":3,"file":"Contacts.js","names":["_core","require","_di","_proxify","_dec","_dec2","_dec3","_class","_class2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","e","_e","f","TypeError","normalCompletion","didErr","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","_typeof","String","input","hint","prim","toPrimitive","res","Number","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","property","decorators","context","desc","keys","forEach","initializer","reverse","reduce","decorator","Contacts","Module","deps","dep","optional","computed","that","_contactSources","size","checkSourceUpdated","_RcModuleV","_super","_this$_deps$contactSo","_this","Map","_sourcesLastStatus","_sourcesUpdatedAt","Date","now","_iterator","_deps","contactSources","_step","source","addSource","_shouldInit","auth","loggedIn","sourceModuleReady","pending","_shouldReset","ready","sourceName","Error","has","concat","getPresence","getProfileImage","findContact","filterContacts","searchForPhoneNumbers","matchContactsByPhoneNumber","set","updated","_i","_Array$from","get","lastStatus","sourceReady","data","contacts","_findContact","regeneratorRuntime","mark","_callee","_ref","contactId","contact","wrap","_callee$","_context","prev","sent","t0","console","abrupt","stop","_x","_filterContacts","_callee2","searchFilter","sources","_callee2$","_context2","values","filter","all","map","promise","items","_x2","_searchForPhoneNumbers","_callee3","searchString","_callee3$","_context3","_x3","_matchContactsByPhoneNumber","_callee4","phoneNumber","_callee4$","_context4","_x4","_matchContacts","_callee5","_ref2","_this2","phoneNumbers","_callee5$","_context5","matchContacts","_x5","_getProfileImage","_callee6","useCache","_args6","_callee6$","_context6","type","_x6","_getPresence","_callee7","_args7","_callee7$","_context7","_x7","_sync","_callee8","syncPromises","_i2","_Array$from2","_args8","_callee8$","_context8","sync","push","_i3","_Array$from3","names","_i4","_Array$from4","_i5","_Array$from5","RcModuleV2","proxify","getOwnPropertyDescriptor","exports"],"sources":["modules/Contacts/Contacts.ts"],"sourcesContent":["import { computed, RcModuleV2 } from '@ringcentral-integration/core';\n\nimport type {\n  ContactSource,\n  IContact,\n  TypedContact,\n  TypedPhoneNumber,\n} from '../../interfaces/Contact.model';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport type { Deps } from './Contacts.interface';\n\n@Module({\n  name: 'Contacts',\n  deps: [\n    'Auth',\n    { dep: 'ContactSources', optional: true },\n    { dep: 'ContactsOptions', optional: true },\n  ],\n})\nexport class Contacts<T extends Deps = Deps> extends RcModuleV2<T> {\n  protected _contactSources = new Map<string, ContactSource>();\n\n  protected _sourcesLastStatus = new Map<\n    string,\n    { ready?: boolean; data?: IContact[] }\n  >();\n\n  protected _sourcesUpdatedAt = Date.now();\n\n  constructor(deps: T) {\n    super({\n      deps,\n    });\n    for (const source of this._deps.contactSources ?? []) {\n      this.addSource(source);\n    }\n  }\n\n  override _shouldInit() {\n    return this._deps.auth.loggedIn && this.sourceModuleReady && this.pending;\n  }\n\n  override _shouldReset() {\n    return (!this._deps.auth.loggedIn || !this.sourceModuleReady) && this.ready;\n  }\n\n  addSource(source: ContactSource) {\n    if (!source.sourceName) {\n      throw new Error('[Contacts > ContactSource > sourceName] is required');\n    }\n    if (this._contactSources.has(source.sourceName)) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > sourceName] already exists`,\n      );\n    }\n    if (source.getPresence && typeof source.getPresence !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getPresence] must be a function`,\n      );\n    }\n    if (\n      source.getProfileImage &&\n      typeof source.getProfileImage !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getProfileImage] must be a function`,\n      );\n    }\n    if (source.findContact && typeof source.findContact !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > findContact] must be a function`,\n      );\n    }\n    if (source.filterContacts && typeof source.filterContacts !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > filterContacts] must be a function`,\n      );\n    }\n    if (\n      source.searchForPhoneNumbers &&\n      typeof source.searchForPhoneNumbers !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] must be a function`,\n      );\n    }\n    if (\n      source.matchContactsByPhoneNumber &&\n      typeof source.matchContactsByPhoneNumber !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] must be a function`,\n      );\n    }\n    this._contactSources.set(source.sourceName, source);\n    this._sourcesLastStatus.set(source.sourceName, {});\n    this._sourcesUpdatedAt = Date.now();\n  }\n\n  checkSourceUpdated() {\n    let updated = false;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      const lastStatus = this._sourcesLastStatus.get(sourceName);\n      if (\n        source &&\n        lastStatus &&\n        (lastStatus.ready !== source.sourceReady ||\n          lastStatus.data !== source.contacts)\n      ) {\n        updated = true;\n        this._sourcesLastStatus.set(sourceName, {\n          ready: source.sourceReady,\n          data: source.contacts,\n        });\n      }\n    }\n    if (updated) {\n      this._sourcesUpdatedAt = Date.now();\n    }\n    return this._sourcesUpdatedAt;\n  }\n\n  async findContact({\n    sourceName,\n    contactId,\n  }: {\n    sourceName: string;\n    contactId: string;\n  }) {\n    let contact = null;\n    const source = this._contactSources.get(sourceName);\n    if (source && typeof source.findContact === 'function') {\n      try {\n        contact = await source.findContact(contactId);\n      } catch (error: any /** TODO: confirm with instanceof */) {\n        console.error(\n          `[Contacts > ContactSource(${source.sourceName}) > findContact] ${error}`,\n        );\n      }\n    }\n    return contact;\n  }\n\n  async filterContacts(searchFilter: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.filterContacts === 'function',\n    );\n    let result: IContact[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(source.filterContacts!(searchFilter));\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > filterContacts] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async searchForPhoneNumbers(searchString: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.searchForPhoneNumbers === 'function',\n    );\n    let result: TypedPhoneNumber[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.searchForPhoneNumbers!(searchString),\n        );\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContactsByPhoneNumber(phoneNumber: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.matchContactsByPhoneNumber === 'function',\n    );\n    let result: TypedContact[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.matchContactsByPhoneNumber!(phoneNumber),\n        );\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContacts({ phoneNumbers }: { phoneNumbers: string[] }) {\n    const result: Record<string, TypedContact[]> = {};\n    await Promise.all(\n      phoneNumbers.map((phoneNumber) => {\n        const promise = this.matchContactsByPhoneNumber(phoneNumber);\n        return promise.then((items) => {\n          result[phoneNumber] = items;\n        });\n      }),\n    );\n    return result;\n  }\n\n  @proxify\n  async getProfileImage(contact: IContact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getProfileImage) {\n      const result = await source.getProfileImage(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async getPresence(contact: IContact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.sourceReady && source.getPresence) {\n      const result = await source.getPresence(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async sync(...args: unknown[]) {\n    const syncPromises = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source?.sync === 'function') {\n        syncPromises.push(source.sync(...args));\n      }\n    }\n    await Promise.all(syncPromises);\n  }\n\n  get sourceModuleReady() {\n    let ready = true;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (!source?.ready) {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  }\n\n  @computed((that: Contacts) => [\n    that._contactSources.size,\n    that.checkSourceUpdated(),\n  ])\n  get sourceNames() {\n    const names = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (source?.sourceReady) {\n        names.push(sourceName);\n      }\n    }\n    return names;\n  }\n\n  @computed((that: Contacts) => [that.checkSourceUpdated()])\n  get allContacts() {\n    let contacts: IContact[] = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (source?.sourceReady && source.contacts) {\n        contacts = contacts.concat(source.contacts);\n      }\n    }\n    return contacts;\n  }\n\n  get contactSources() {\n    return this._contactSources;\n  }\n}\n"],"mappings":"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"}