{"version":3,"file":"Contacts.js","names":["_core","require","_di","_proxify","_dec","_dec2","_dec3","_class","_class2","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","f","TypeError","call","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","_classCallCheck","_defineProperties","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","prototype","_toPrimitive","_typeof","toPrimitive","String","Number","_inherits","create","_setPrototypeOf","setPrototypeOf","bind","__proto__","_createSuper","_isNativeReflectConstruct","_getPrototypeOf","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","l","keys","forEach","initializer","reverse","reduce","Contacts","Module","deps","dep","optional","computed","that","_contactSources","size","checkSourceUpdated","_RcModuleV","_super","_this$_deps$contactSo","_this","Map","_sourcesLastStatus","_sourcesUpdatedAt","Date","now","_iterator","_deps","contactSources","_step","source","addSource","err","_shouldInit","auth","loggedIn","sourceModuleReady","pending","_shouldReset","ready","sourceName","Error","has","concat","getPresence","getProfileImage","findContact","filterContacts","searchForPhoneNumbers","matchContactsByPhoneNumber","set","updated","_i","_Array$from","get","lastStatus","sourceReady","data","contacts","_findContact","regeneratorRuntime","mark","_callee","_ref","contactId","contact","wrap","_callee$","_context","prev","sent","t0","console","error","abrupt","stop","_x","_filterContacts","_callee2","searchFilter","sources","result","_callee2$","_context2","values","filter","all","map","promise","items","_x2","_searchForPhoneNumbers","_callee3","searchString","_callee3$","_context3","_x3","_matchContactsByPhoneNumber","_callee4","phoneNumber","_callee4$","_context4","_x4","_matchContacts","_callee5","_ref2","_this2","phoneNumbers","_callee5$","_context5","matchContacts","_x5","_getProfileImage","_callee6","useCache","_args6","_callee6$","_context6","undefined","type","_x6","_getPresence","_callee7","_args7","_callee7$","_context7","_x7","_sync","_callee8","syncPromises","_i2","_Array$from2","_args8","_callee8$","_context8","sync","push","_i3","_Array$from3","names","_i4","_Array$from4","_i5","_Array$from5","RcModuleV2","proxify","getOwnPropertyDescriptor","exports"],"sources":["modules/Contacts/Contacts.ts"],"sourcesContent":["import { computed, RcModuleV2 } from '@ringcentral-integration/core';\n\nimport type {\n  ContactSource,\n  IContact,\n  TypedContact,\n  TypedPhoneNumber,\n} from '../../interfaces/Contact.model';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\n\nimport type { Deps } from './Contacts.interface';\n\n@Module({\n  name: 'Contacts',\n  deps: [\n    'Auth',\n    { dep: 'ContactSources', optional: true },\n    { dep: 'ContactsOptions', optional: true },\n  ],\n})\nexport class Contacts<T extends Deps = Deps> extends RcModuleV2<T> {\n  protected _contactSources = new Map<string, ContactSource>();\n\n  protected _sourcesLastStatus = new Map<\n    string,\n    { ready?: boolean; data?: IContact[] }\n  >();\n\n  protected _sourcesUpdatedAt = Date.now();\n\n  constructor(deps: T) {\n    super({\n      deps,\n    });\n    for (const source of this._deps.contactSources ?? []) {\n      this.addSource(source);\n    }\n  }\n\n  override _shouldInit() {\n    return this._deps.auth.loggedIn && this.sourceModuleReady && this.pending;\n  }\n\n  override _shouldReset() {\n    return (!this._deps.auth.loggedIn || !this.sourceModuleReady) && this.ready;\n  }\n\n  addSource(source: ContactSource) {\n    if (!source.sourceName) {\n      throw new Error('[Contacts > ContactSource > sourceName] is required');\n    }\n    if (this._contactSources.has(source.sourceName)) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > sourceName] already exists`,\n      );\n    }\n    if (source.getPresence && typeof source.getPresence !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getPresence] must be a function`,\n      );\n    }\n    if (\n      source.getProfileImage &&\n      typeof source.getProfileImage !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getProfileImage] must be a function`,\n      );\n    }\n    if (source.findContact && typeof source.findContact !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > findContact] must be a function`,\n      );\n    }\n    if (source.filterContacts && typeof source.filterContacts !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > filterContacts] must be a function`,\n      );\n    }\n    if (\n      source.searchForPhoneNumbers &&\n      typeof source.searchForPhoneNumbers !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] must be a function`,\n      );\n    }\n    if (\n      source.matchContactsByPhoneNumber &&\n      typeof source.matchContactsByPhoneNumber !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] must be a function`,\n      );\n    }\n    this._contactSources.set(source.sourceName, source);\n    this._sourcesLastStatus.set(source.sourceName, {});\n    this._sourcesUpdatedAt = Date.now();\n  }\n\n  checkSourceUpdated() {\n    let updated = false;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      const lastStatus = this._sourcesLastStatus.get(sourceName);\n      if (\n        source &&\n        lastStatus &&\n        (lastStatus.ready !== source.sourceReady ||\n          lastStatus.data !== source.contacts)\n      ) {\n        updated = true;\n        this._sourcesLastStatus.set(sourceName, {\n          ready: source.sourceReady,\n          data: source.contacts,\n        });\n      }\n    }\n    if (updated) {\n      this._sourcesUpdatedAt = Date.now();\n    }\n    return this._sourcesUpdatedAt;\n  }\n\n  async findContact({\n    sourceName,\n    contactId,\n  }: {\n    sourceName: string;\n    contactId: string;\n  }) {\n    let contact = null;\n    const source = this._contactSources.get(sourceName);\n    if (source && typeof source.findContact === 'function') {\n      try {\n        contact = await source.findContact(contactId);\n      } catch (error: any /** TODO: confirm with instanceof */) {\n        console.error(\n          `[Contacts > ContactSource(${source.sourceName}) > findContact] ${error}`,\n        );\n      }\n    }\n    return contact;\n  }\n\n  async filterContacts(searchFilter: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.filterContacts === 'function',\n    );\n    let result: IContact[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(source.filterContacts!(searchFilter));\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > filterContacts] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async searchForPhoneNumbers(searchString: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.searchForPhoneNumbers === 'function',\n    );\n    let result: TypedPhoneNumber[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.searchForPhoneNumbers!(searchString),\n        );\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContactsByPhoneNumber(phoneNumber: string) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.matchContactsByPhoneNumber === 'function',\n    );\n    let result: TypedContact[] = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.matchContactsByPhoneNumber!(phoneNumber),\n        );\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContacts({ phoneNumbers }: { phoneNumbers: string[] }) {\n    const result: Record<string, TypedContact[]> = {};\n    await Promise.all(\n      phoneNumbers.map((phoneNumber) => {\n        const promise = this.matchContactsByPhoneNumber(phoneNumber);\n        return promise.then((items) => {\n          result[phoneNumber] = items;\n        });\n      }),\n    );\n    return result;\n  }\n\n  @proxify\n  async getProfileImage(contact: IContact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getProfileImage) {\n      const result = await source.getProfileImage(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async getPresence(contact: IContact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.sourceReady && source.getPresence) {\n      const result = await source.getPresence(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async sync(...args: unknown[]) {\n    const syncPromises = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source?.sync === 'function') {\n        syncPromises.push(source.sync(...args));\n      }\n    }\n    await Promise.all(syncPromises);\n  }\n\n  get sourceModuleReady() {\n    let ready = true;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (!source?.ready) {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  }\n\n  @computed((that: Contacts) => [\n    that._contactSources.size,\n    that.checkSourceUpdated(),\n  ])\n  get sourceNames() {\n    const names = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (source?.sourceReady) {\n        names.push(sourceName);\n      }\n    }\n    return names;\n  }\n\n  @computed((that: Contacts) => [that.checkSourceUpdated()])\n  get allContacts() {\n    let contacts: IContact[] = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (source?.sourceReady && source.contacts) {\n        contacts = contacts.concat(source.contacts);\n      }\n    }\n    return contacts;\n  }\n\n  get contactSources() {\n    return this._contactSources;\n  }\n}\n"],"mappings":"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","ignoreList":[]}