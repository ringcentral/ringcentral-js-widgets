{"version":3,"sources":["modules/Contacts/getContactsReducer.test.ts"],"names":["describe","it","getSearchFilterReducer","to","be","a","reducer","actionTypes","undefined","equal","originalState","type","updateFilter","searchFilter","resetSuccess","getSourceFilterReducer","AllContactSourceName","sourceFilter","getContactsReducer","statusReducer","searchFilterReducer","sourceFilterReducer","deep","status"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\n\nimport { AllContactSourceName } from '../../lib/contactHelper';\nimport { getModuleStatusReducer } from '../../lib/getModuleStatusReducer';\nimport { actionTypes } from './actionTypes';\nimport getContactsReducer, {\n  getSearchFilterReducer,\n  getSourceFilterReducer,\n} from './getContactsReducer';\n\ndescribe('Contacts :: getSearchFilterReducer', () => {\n  it('getSearchFilterReducer should be a function', () => {\n    expect(getSearchFilterReducer).to.be.a('function');\n  });\n  it('getSearchFilterReducer should return a reducer', () => {\n    expect(getSearchFilterReducer()).to.be.a('function');\n  });\n  describe('searchFilterReducer', () => {\n    const reducer = getSearchFilterReducer(actionTypes);\n    it('should have initial state of blank string', () => {\n      expect(reducer(undefined, {})).to.equal('');\n    });\n    it('should return original state of actionTypes is not recognized', () => {\n      const originalState = {};\n      expect(reducer(originalState, { type: 'foo' })).to.equal(originalState);\n    });\n    it('should return new filter on updateFilter', () => {\n      expect(\n        reducer('foo', {\n          type: actionTypes.updateFilter,\n          searchFilter: 'test',\n        }),\n      ).to.equal('test');\n    });\n    it('should return blank string on resetSuccess', () => {\n      expect(\n        reducer('foo', {\n          type: actionTypes.resetSuccess,\n        }),\n      ).to.equal('');\n    });\n    it('should return original filter when searchFilter is undefined on updateFilter', () => {\n      expect(\n        reducer('foo', {\n          type: actionTypes.updateFilter,\n          searchFilter: undefined,\n        }),\n      ).to.equal('foo');\n    });\n    it('should return original filter when searchFilter is null on updateFilter', () => {\n      expect(\n        reducer('foo', {\n          type: actionTypes.updateFilter,\n          searchFilter: null,\n        }),\n      ).to.equal('foo');\n    });\n  });\n});\n\ndescribe('Contacts :: getSourceFilterReducer', () => {\n  it('getSourceFilterReducer should be a function', () => {\n    expect(getSourceFilterReducer).to.be.a('function');\n  });\n  it('getSourceFilterReducer should return a reducer', () => {\n    expect(getSourceFilterReducer()).to.be.a('function');\n  });\n  describe('sourceFilterReducer', () => {\n    const reducer = getSourceFilterReducer(actionTypes);\n    it('should have initial state of AllContactSourceName', () => {\n      expect(reducer(undefined, {})).to.equal(AllContactSourceName);\n    });\n    it('should return original state of actionTypes is not recognized', () => {\n      const originalState = {};\n      expect(reducer(originalState, { type: 'foo' })).to.equal(originalState);\n    });\n    it('should return sourceFilter on updateFilter', () => {\n      expect(\n        reducer('foo', {\n          type: actionTypes.updateFilter,\n          sourceFilter: 'test',\n        }),\n      ).to.equal('test');\n    });\n    it('should return AllContactSourceName on resetSuccess', () => {\n      expect(\n        reducer('foo', {\n          type: actionTypes.resetSuccess,\n        }),\n      ).to.equal(AllContactSourceName);\n    });\n    it('should return original filter when sourceFilter is undefined on updateFilter', () => {\n      expect(\n        reducer('foo', {\n          type: actionTypes.updateFilter,\n          sourceFilter: undefined,\n        }),\n      ).to.equal('foo');\n    });\n    it('should return original filter when sourceFilter is null on updateFilter', () => {\n      expect(\n        reducer('foo', {\n          type: actionTypes.updateFilter,\n          sourceFilter: null,\n        }),\n      ).to.equal('foo');\n    });\n  });\n});\n\ndescribe('getContactsReducer', () => {\n  it('should be a function', () => {\n    expect(getContactsReducer).to.be.a('function');\n  });\n  it('should return a reducer', () => {\n    expect(getContactsReducer(actionTypes)).to.be.a('function');\n  });\n  it('should return a combined reducer', () => {\n    const reducer = getContactsReducer(actionTypes);\n    const statusReducer = getModuleStatusReducer(actionTypes);\n    const searchFilterReducer = getSearchFilterReducer(actionTypes);\n    const sourceFilterReducer = getSourceFilterReducer(actionTypes);\n    expect(reducer(undefined, {})).to.deep.equal({\n      status: statusReducer(undefined, {}),\n      searchFilter: searchFilterReducer(undefined, {}),\n      sourceFilter: sourceFilterReducer(undefined, {}),\n    });\n  });\n});\n"],"file":"getContactsReducer.test.js"}