{"version":3,"sources":["modules/Contacts/index.ts"],"names":["DefaultContactListPageSize","Contacts","deps","dep","optional","auth","contactSources","options","actionTypes","_auth","_contactSources","_sourcesLastStatus","_sourcesUpdatedAt","ensureExist","call","_reducer","Map","Date","now","source","addSource","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","_resetModuleStatus","loggedIn","sourceModuleReady","pending","ready","resetSuccess","sourceFilter","searchFilter","updateFilter","sourceName","Error","has","getPresence","getProfileImage","findContact","filterContacts","searchForPhoneNumbers","matchContactsByPhoneNumber","set","updated","Array","from","keys","get","lastStatus","sourceReady","data","contacts","contactId","contact","console","error","sources","values","filter","result","Promise","all","map","promise","resolve","then","items","concat","searchString","phoneNumber","phoneNumbers","id","toString","find","x","useCache","sync","state","status","RcModule","proxify","selector","size","checkSourceUpdated","names","AllContactSourceName","push","filteredContacts","allContacts"],"mappings":"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","sourcesContent":["import {\n  AllContactSourceName,\n  getFilterContacts,\n  groupByFirstLetterOfName,\n  sortContactItemsByName,\n  uniqueContactItems,\n} from '../../lib/contactHelper';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport isBlank from '../../lib/isBlank';\nimport { proxify } from '../../lib/proxy/proxify';\nimport RcModule from '../../lib/RcModule';\nimport { selector } from '../../lib/selector';\nimport { actionTypes } from './actionTypes';\nimport getContactsReducer from './getContactsReducer';\n\nexport const DefaultContactListPageSize = 20;\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    { dep: 'ContactSources', optional: true },\n    { dep: 'ContactsOptions', optional: true },\n  ],\n})\nexport default class Contacts extends RcModule {\n  _auth: any;\n  _contactSources: Map<any, any>;\n  _sourcesLastStatus: Map<any, any>;\n  _sourcesUpdatedAt: number;\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   */\n  constructor({ auth, contactSources = [], ...options }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = ensureExist.call(this, auth, 'auth');\n    this._reducer = getContactsReducer(this.actionTypes);\n    this._contactSources = new Map();\n    this._sourcesLastStatus = new Map();\n    this._sourcesUpdatedAt = Date.now();\n\n    for (const source of contactSources) {\n      this.addSource(source);\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return this._auth.loggedIn && this.sourceModuleReady && this.pending;\n  }\n\n  _shouldReset() {\n    return (!this._auth.loggedIn || !this.sourceModuleReady) && this.ready;\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async updateFilter({ sourceFilter, searchFilter }) {\n    this.store.dispatch({\n      type: this.actionTypes.updateFilter,\n      sourceFilter,\n      searchFilter,\n    });\n  }\n\n  addSource(source) {\n    if (!source.sourceName) {\n      throw new Error('[Contacts > ContactSource > sourceName] is required');\n    }\n    if (this._contactSources.has(source.sourceName)) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > sourceName] already exists`,\n      );\n    }\n    if (source.getPresence && typeof source.getPresence !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getPresence] must be a function`,\n      );\n    }\n    if (\n      source.getProfileImage &&\n      typeof source.getProfileImage !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > getProfileImage] must be a function`,\n      );\n    }\n    if (source.findContact && typeof source.findContact !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > findContact] must be a function`,\n      );\n    }\n    if (source.filterContacts && typeof source.filterContacts !== 'function') {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > filterContacts] must be a function`,\n      );\n    }\n    if (\n      source.searchForPhoneNumbers &&\n      typeof source.searchForPhoneNumbers !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] must be a function`,\n      );\n    }\n    if (\n      source.matchContactsByPhoneNumber &&\n      typeof source.matchContactsByPhoneNumber !== 'function'\n    ) {\n      throw new Error(\n        `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] must be a function`,\n      );\n    }\n    this._contactSources.set(source.sourceName, source);\n    this._sourcesLastStatus.set(source.sourceName, {});\n    this._sourcesUpdatedAt = Date.now();\n  }\n\n  checkSourceUpdated() {\n    let updated = false;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      const lastStatus = this._sourcesLastStatus.get(sourceName);\n      if (\n        lastStatus.ready !== source.sourceReady ||\n        lastStatus.data !== source.contacts\n      ) {\n        updated = true;\n        this._sourcesLastStatus.set(sourceName, {\n          ready: source.sourceReady,\n          data: source.contacts,\n        });\n      }\n    }\n    if (updated) {\n      this._sourcesUpdatedAt = Date.now();\n    }\n    return this._sourcesUpdatedAt;\n  }\n\n  async findContact({ sourceName, contactId }) {\n    let contact = null;\n    const source = this._contactSources.get(sourceName);\n    if (source && typeof source.findContact === 'function') {\n      try {\n        contact = await source.findContact(contactId);\n      } catch (error) {\n        console.error(\n          `[Contacts > ContactSource(${source.sourceName}) > findContact] ${error}`,\n        );\n      }\n    }\n    return contact;\n  }\n\n  async filterContacts(searchFilter) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.filterContacts === 'function',\n    );\n    let result = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(source.filterContacts(searchFilter));\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > filterContacts] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async searchForPhoneNumbers(searchString) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.searchForPhoneNumbers === 'function',\n    );\n    let result = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.searchForPhoneNumbers(searchString),\n        );\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > searchForPhoneNumbers] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContactsByPhoneNumber(phoneNumber) {\n    const sources = Array.from(this._contactSources.values()).filter(\n      (source) => typeof source.matchContactsByPhoneNumber === 'function',\n    );\n    let result = [];\n    await Promise.all(\n      sources.map((source) => {\n        const promise = Promise.resolve(\n          source.matchContactsByPhoneNumber(phoneNumber),\n        );\n        return promise\n          .then((items) => {\n            if (items) {\n              result = result.concat(items);\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `[Contacts > ContactSource(${source.sourceName}) > matchContactsByPhoneNumber] ${error}`,\n            );\n          });\n      }),\n    );\n    return result;\n  }\n\n  async matchContacts({ phoneNumbers }) {\n    const result = {};\n    await Promise.all(\n      phoneNumbers.map((phoneNumber) => {\n        const promise = this.matchContactsByPhoneNumber(phoneNumber);\n        return promise.then((items) => {\n          result[phoneNumber] = items;\n        });\n      }),\n    );\n    return result;\n  }\n\n  find({ type, id }) {\n    const contactId = (id || '').toString();\n    const source = this._contactSources.get(type);\n    if (source) {\n      return source.contacts.find((x) => x.id.toString() === contactId);\n    }\n    return null;\n  }\n\n  @proxify\n  async getProfileImage(contact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getProfileImage) {\n      const result = await source.getProfileImage(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async getPresence(contact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getPresence) {\n      const result = await source.getPresence(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async sync(...args) {\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source.sync === 'function') {\n        await source.sync(...args);\n      }\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get sourceModuleReady() {\n    let ready = true;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (!source.ready) {\n        ready = false;\n      }\n    }\n    return ready;\n  }\n\n  get companyContacts() {\n    const source = this._contactSources.get('company');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  get personalContacts() {\n    const source = this._contactSources.get('personal');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  get searchFilter() {\n    return this.state.searchFilter;\n  }\n\n  get sourceFilter() {\n    return this.state.sourceFilter;\n  }\n\n  @selector\n  sourceNames = [\n    () => this._contactSources.size,\n    () => this.checkSourceUpdated(),\n    () => {\n      const names = [AllContactSourceName];\n      for (const sourceName of Array.from(this._contactSources.keys())) {\n        const source = this._contactSources.get(sourceName);\n        if (source.sourceReady) {\n          names.push(sourceName);\n        }\n      }\n      return names;\n    },\n  ];\n\n  @selector\n  allContacts = [\n    () => this.checkSourceUpdated(),\n    () => {\n      let contacts = [];\n      for (const sourceName of Array.from(this._contactSources.keys())) {\n        const source = this._contactSources.get(sourceName);\n        if (source.sourceReady && source.contacts) {\n          contacts = contacts.concat(source.contacts);\n        }\n      }\n      return contacts;\n    },\n  ];\n\n  @selector\n  contactGroups = [\n    () => this.filteredContacts,\n    (filteredContacts) =>\n      groupByFirstLetterOfName(\n        sortContactItemsByName(uniqueContactItems(filteredContacts)),\n      ),\n  ];\n\n  @selector\n  filteredContacts = [\n    () => this.searchFilter,\n    () => this.sourceFilter,\n    () => this.checkSourceUpdated(),\n    (searchFilter, sourceFilter) => {\n      let contacts;\n      if (\n        isBlank(searchFilter) &&\n        (sourceFilter === AllContactSourceName || isBlank(sourceFilter))\n      ) {\n        return this.allContacts;\n      }\n      if (sourceFilter !== AllContactSourceName && !isBlank(sourceFilter)) {\n        const source = this._contactSources.get(sourceFilter);\n        if (source && source.sourceReady) {\n          /* eslint { \"prefer-destructuring\": 0 } */\n          contacts = source.contacts;\n        } else {\n          contacts = [];\n        }\n      } else {\n        contacts = this.allContacts;\n      }\n      if (!isBlank(searchFilter)) {\n        contacts = getFilterContacts(contacts, searchFilter);\n      }\n      return contacts;\n    },\n  ];\n}\n"],"file":"index.js"}