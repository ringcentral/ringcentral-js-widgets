{"version":3,"sources":["modules/ExtensionPhoneNumber/index.js"],"names":["ExtensionPhoneNumber","deps","dep","optional","client","extensionFeatures","options","subscriptionFilters","extensionInfo","subscriptionHandler","message","_subscriptionHandleFn","fetchFunction","params","account","extension","phoneNumber","list","map","number","country","readyCheckFn","_extensionFeatures","ready","cleanOnReset","body","hints","includes","subscriptionHints","companyNumbers","fetchData","features","ReadExtensionPhoneNumbers","available","DataFetcher","selector","data","numbers","phoneNumbers","filter","p","usageType","indexOf","status"],"mappings":"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","sourcesContent":["import { find } from 'ramda';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport subscriptionHints from '../../enums/subscriptionHints';\nimport DataFetcher from '../../lib/DataFetcher';\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport removeUri from '../../lib/removeUri';\nimport { selector } from '../../lib/selector';\n\n/**\n * @class\n * @description Extension phone number list module\n */\n@Module({\n  deps: [\n    'Client',\n    'ExtensionFeatures',\n    { dep: 'ExtensionPhoneNumberOptions', optional: true },\n  ],\n})\nexport default class ExtensionPhoneNumber extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({ client, extensionFeatures, ...options }) {\n    super({\n      client,\n      subscriptionFilters: [subscriptionFilters.extensionInfo],\n      subscriptionHandler: async (message) => {\n        await this._subscriptionHandleFn(message);\n      },\n      fetchFunction: async () =>\n        (\n          await fetchList((params) =>\n            client.account().extension().phoneNumber().list(params),\n          )\n        ).map((number) => ({\n          ...number,\n          country: removeUri(number.country),\n        })),\n      readyCheckFn: () => this._extensionFeatures.ready,\n      cleanOnReset: true,\n      ...options,\n    });\n\n    this._extensionFeatures = extensionFeatures;\n  }\n\n  get _name() {\n    return 'extensionPhoneNumber';\n  }\n\n  async _subscriptionHandleFn(message) {\n    if (\n      message &&\n      message.body &&\n      message.body.hints &&\n      message.body.hints.includes(subscriptionHints.companyNumbers)\n    ) {\n      await this.fetchData();\n    }\n  }\n\n  @selector\n  numbers = [() => this.data, (data) => data || []];\n\n  @selector\n  companyNumbers = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      phoneNumbers.filter((p) => p.usageType === 'CompanyNumber'),\n  ];\n\n  @selector\n  mainCompanyNumber = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      find((p) => p.usageType === 'MainCompanyNumber', phoneNumbers),\n  ];\n\n  @selector\n  directNumbers = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      phoneNumbers.filter((p) => p.usageType === 'DirectNumber'),\n  ];\n\n  @selector\n  callerIdNumbers = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      phoneNumbers.filter(\n        (p) =>\n          (p.features && p.features.indexOf('CallerId') !== -1) ||\n          (p.usageType === 'ForwardedNumber' &&\n            // TODO: we should remove these special case after confirming that backend should list\n            // these numbers with CallerId feature\n            (p.status === 'PortedIn' || p.status === 'Normal')) ||\n          (p.usageType === 'ForwardedCompanyNumber' &&\n            (p.status === 'PortedIn' || p.status === 'Normal')),\n      ),\n  ];\n\n  @selector\n  smsSenderNumbers = [\n    () => this.numbers,\n    (phoneNumbers) =>\n      phoneNumbers.filter(\n        (p) => p.features && p.features.indexOf('SmsSender') !== -1,\n      ),\n  ];\n\n  get _hasPermission() {\n    return !!this._extensionFeatures.features?.ReadExtensionPhoneNumbers\n      ?.available;\n  }\n}\n"],"file":"index.js"}