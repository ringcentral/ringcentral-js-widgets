{"version":3,"sources":["modules/ContactDetailsUI/ContactDetailsUI.ts"],"names":["DEFAULT_DIALER_ROUTE","DEFAULT_COMPOSE_TEXT_ROUTE","ContactDetailsUI","name","deps","dep","optional","trackEvents","clickToCall","clickToSMS","readyState","contact","currentContactReadyState","currentContact","_setCurrentContact","contactReadyStates","pending","contactType","contactId","loading","_deps","contacts","findContact","sourceName","loaded","getProfileImage","getPresence","id","type","direct","routerInteraction","push","phoneNumber","recipient","call","isIdle","contactDetailsUIOptions","dialerRoute","dialerUI","_trackClickToCall","composeTextRoute","composeText","addToNumber","typingToNumber","cleanTypingToNumber","_trackClickToSMS","currentLocale","locale","isMultipleSiteEnabled","extensionInfo","isCallButtonDisabled","connectivityManager","isOfflineMode","isWebphoneUnavailableMode","isWebphoneInitializing","rateLimiter","throttling","disableLinks","isVoipOnlyMode","showSpinner","ready","contactSearch","appFeatures","params","onVisitPage","initCurrentContact","onLeavingPage","resetCurrentContact","formatNumber","cleanedNumber","toString","isE164Number","formattedNumber","countryCode","regionSettings","site","code","siteCode","canTextButtonShow","phoneType","outboundSmsPermission","hasOutboundSMSPermission","internalSmsPermission","hasInternalSMSPermission","isClickToTextEnabled","phoneTypes","fax","extension","canCallButtonShow","isClickToDialEnabled","isCallingEnabled","onBackClick","goBack","onClickToDial","handleClickToDial","onClickToSMS","handleClickToSMS","RcUIModuleV2","state","action","background","proxify"],"mappings":"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","sourcesContent":["import {\n  track,\n  state,\n  action,\n  RcUIModuleV2,\n} from '@ringcentral-integration/core';\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport background from '@ringcentral-integration/commons/lib/background';\nimport proxify from '@ringcentral-integration/commons/lib/proxy/proxify';\nimport {\n  isE164,\n  parseIncompletePhoneNumber,\n} from '@ringcentral-integration/phone-number';\nimport { phoneTypes } from '@ringcentral-integration/commons/enums/phoneTypes';\nimport { formatNumber } from '@ringcentral-integration/commons/lib/formatNumber';\nimport { ContactModel } from '@ringcentral-integration/commons/interfaces/Contact.model';\nimport {\n  ContactDetailsViewProps,\n  ContactDetailsViewFunctionProps,\n} from '../../components/ContactDetailsView/ContactDetailsView.interface';\nimport {\n  Deps,\n  RouteParams,\n  InitParams,\n  GetUIFunctions,\n} from './ContactDetailsUI.interface';\nimport { trackEvents } from './trackEvents';\nimport { contactReadyStates, ContactReadyState } from './contactReadyStates';\n\nconst DEFAULT_DIALER_ROUTE = '/dialer';\nconst DEFAULT_COMPOSE_TEXT_ROUTE = '/composeText';\n\n@Module({\n  name: 'ContactDetailsUI',\n  deps: [\n    'Locale',\n    'RouterInteraction',\n    'ContactSearch',\n    'Contacts',\n    'ExtensionInfo',\n    'AppFeatures',\n    'RateLimiter',\n    'RegionSettings',\n    'ConnectivityManager',\n    'Call',\n    'DialerUI',\n    'ComposeText',\n    {\n      dep: 'ContactDetailsUIOptions',\n      optional: true,\n    },\n  ],\n})\nexport class ContactDetailsUI extends RcUIModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({ deps });\n  }\n\n  @state\n  currentContact: ContactModel = null;\n\n  @state\n  currentContactReadyState: ContactReadyState = contactReadyStates.pending;\n\n  @action\n  private _setCurrentContact(\n    readyState: ContactReadyState,\n    contact: ContactModel,\n  ) {\n    this.currentContactReadyState = readyState;\n    this.currentContact = contact;\n  }\n\n  @background\n  async resetCurrentContact() {\n    this._setCurrentContact(contactReadyStates.pending, null);\n  }\n\n  @background\n  async initCurrentContact({ contactType, contactId }: InitParams) {\n    if (this.currentContactReadyState !== contactReadyStates.pending) {\n      return;\n    }\n    this._setCurrentContact(contactReadyStates.loading, null);\n    const contact = await this._deps.contacts.findContact({\n      sourceName: contactType,\n      contactId,\n    });\n    // ignore result when it is reset during loading\n    if (this.currentContactReadyState !== contactReadyStates.loading) {\n      return;\n    }\n    this._setCurrentContact(contactReadyStates.loaded, contact as ContactModel);\n    if (contact) {\n      this._deps.contacts.getProfileImage(contact, false);\n      this._deps.contacts.getPresence(contact, false);\n    }\n  }\n\n  @proxify\n  async showContactDetails({ id, type, direct = false }: RouteParams) {\n    this._deps.routerInteraction.push(\n      `/contacts/${type}/${id}${direct ? '?direct=true' : ''}`,\n    );\n  }\n\n  @proxify\n  async handleClickToDial(contact: ContactModel, phoneNumber: string) {\n    const recipient = {\n      ...contact,\n      phoneNumber,\n    };\n    if (this._deps.call.isIdle) {\n      this._deps.routerInteraction.push(\n        this._deps.contactDetailsUIOptions?.dialerRoute ?? DEFAULT_DIALER_ROUTE,\n      );\n      this._deps.dialerUI.call({ recipient });\n    }\n    this._trackClickToCall();\n  }\n\n  @proxify\n  async handleClickToSMS(contact: ContactModel, phoneNumber: string) {\n    const recipient = {\n      ...contact,\n      phoneNumber,\n    };\n    this._deps.routerInteraction.push(\n      this._deps.contactDetailsUIOptions?.composeTextRoute ??\n        DEFAULT_COMPOSE_TEXT_ROUTE,\n    );\n    this._deps.composeText.addToNumber(recipient);\n    if (this._deps.composeText.typingToNumber === recipient.phoneNumber) {\n      this._deps.composeText.cleanTypingToNumber();\n    }\n    this._trackClickToSMS();\n  }\n\n  @track(trackEvents.clickToCall)\n  private _trackClickToCall() {}\n\n  @track(trackEvents.clickToSMS)\n  private _trackClickToSMS() {}\n\n  getUIProps(): ContactDetailsViewProps {\n    return {\n      currentLocale: this._deps.locale.currentLocale,\n      contact: this.currentContact,\n      isMultipleSiteEnabled:\n        this._deps.extensionInfo.isMultipleSiteEnabled ?? false,\n      isCallButtonDisabled: !!(\n        this._deps.connectivityManager?.isOfflineMode ||\n        this._deps.connectivityManager?.isWebphoneUnavailableMode ||\n        this._deps.connectivityManager?.isWebphoneInitializing ||\n        this._deps.rateLimiter?.throttling\n      ),\n      disableLinks: !!(\n        this._deps.connectivityManager?.isOfflineMode ||\n        this._deps.connectivityManager?.isVoipOnlyMode ||\n        this._deps.rateLimiter?.throttling\n      ),\n      showSpinner: !(\n        this.currentContactReadyState === contactReadyStates.loaded &&\n        this._deps.locale.ready &&\n        this._deps.contactSearch.ready &&\n        this._deps.appFeatures.ready\n      ),\n    };\n  }\n\n  getUIFunctions({ params }: GetUIFunctions): ContactDetailsViewFunctionProps {\n    return {\n      onVisitPage: () => {\n        this.initCurrentContact(params);\n      },\n      onLeavingPage: () => {\n        this.resetCurrentContact();\n      },\n      formatNumber: (phoneNumber: string = '') => {\n        if (!phoneNumber) {\n          return phoneNumber;\n        }\n        // if the cleaned phone number is not a E164 format\n        // we will show it directly, doesn't format it.\n        const cleanedNumber: string = parseIncompletePhoneNumber(\n          phoneNumber.toString(),\n        );\n        const isE164Number = isE164(cleanedNumber);\n        if (isE164Number) {\n          const formattedNumber: string = formatNumber({\n            phoneNumber,\n            countryCode: this._deps.regionSettings.countryCode,\n          });\n          return formattedNumber;\n        }\n        // if multi-site is enabled then we will try to remove site code with same site\n        if (\n          this._deps.extensionInfo.isMultipleSiteEnabled &&\n          this._deps.extensionInfo.site?.code\n        ) {\n          const formattedNumber: string = formatNumber({\n            phoneNumber,\n            countryCode: this._deps.regionSettings.countryCode,\n            siteCode: this._deps.extensionInfo.site?.code,\n            isMultipleSiteEnabled: this._deps.extensionInfo\n              .isMultipleSiteEnabled,\n          });\n          return formattedNumber;\n        }\n        return phoneNumber;\n      },\n      canTextButtonShow: (phoneType: string) => {\n        const outboundSmsPermission = this._deps.appFeatures\n          .hasOutboundSMSPermission;\n        const internalSmsPermission = this._deps.appFeatures\n          .hasInternalSMSPermission;\n        // guess this statement is to avoid exception\n        const isClickToTextEnabled = !!this._deps.composeText;\n        return (\n          isClickToTextEnabled &&\n          phoneType !== phoneTypes.fax &&\n          (phoneType === phoneTypes.extension\n            ? internalSmsPermission\n            : outboundSmsPermission)\n        );\n      },\n      canCallButtonShow: (phoneType: string) => {\n        const isClickToDialEnabled = !!(\n          this._deps.dialerUI && this._deps.appFeatures.isCallingEnabled\n        );\n        return isClickToDialEnabled && phoneType !== phoneTypes.fax;\n      },\n      onBackClick: () => {\n        this._deps.routerInteraction.goBack();\n      },\n      onClickToDial: (contact: ContactModel, phoneNumber: string) =>\n        this.handleClickToDial(contact, phoneNumber),\n      onClickToSMS: (contact: ContactModel, phoneNumber: string) =>\n        this.handleClickToSMS(contact, phoneNumber),\n    };\n  }\n}\n"],"file":"ContactDetailsUI.js"}