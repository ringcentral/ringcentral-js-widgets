{"version":3,"sources":["modules/GlipCompanyV2/GlipCompany.ts"],"names":["GlipCompany","name","deps","dep","optional","data","_source","DataSource","glipCompanyOptions","key","fetchFunction","_deps","client","glip","companies","get","response","readyCheckFunction","extensionFeatures","ready","permissionCheckFunction","features","Glip","available","dataFetcherV2","register","info","domain","id","DataFetcherV2Consumer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYaA,W,WATZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,aADA;AAENC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,eAFI,EAGJ,mBAHI,EAIJ;AAAEC,IAAAA,GAAG,EAAE,oBAAP;AAA6BC,IAAAA,QAAQ,EAAE;AAAvC,GAJI;AAFA,CAAP,C,UA4BE,oBAAS;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,SAA2B,CAACA,IAAD,CAA3B;AAAA,CAAT,C;;;;;AAlBD,uBAAYH,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA;AADI,KAAN;AAGA,UAAKI,OAAL,GAAe,IAAIC,wBAAJ,iCACVL,IAAI,CAACM,kBADK;AAEbC,MAAAA,GAAG,EAAE,aAFQ;AAGbC,MAAAA,aAAa;AAAA,qFAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACU,MAAKC,KAAL,CAAWC,MAAX,CAAkBC,IAAlB,GAAyBC,SAAzB,CAAmC,GAAnC,EAAwCC,GAAxC,EADV;;AAAA;AACPC,kBAAAA,QADO;AAAA,mDAENA,QAFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SAHA;AAObC,MAAAA,kBAAkB,EAAE;AAAA,eAAM,MAAKN,KAAL,CAAWO,iBAAX,CAA6BC,KAAnC;AAAA,OAPP;AAQbC,MAAAA,uBAAuB,EAAE;AAAA;;AAAA,kEACvB,MAAKT,KAAL,CAAWO,iBAAX,CAA6BG,QADN,qFACvB,uBAAuCC,IADhB,2DACvB,uBAA6CC,SADtB,yEACmC,KADnC;AAAA;AARZ,OAAf;;AAWA,UAAKZ,KAAL,CAAWa,aAAX,CAAyBC,QAAzB,CAAkC,MAAKnB,OAAvC;;AAfsB;AAgBvB;;;;wBAGU;AAAA;;AACT,2BAAO,KAAKD,IAAZ,mDAAoB,EAApB;AACD;;;wBAEU;AACT,aAAO,KAAKqB,IAAL,CAAUzB,IAAjB;AACD;;;wBAEY;AACX,aAAO,KAAKyB,IAAL,CAAUC,MAAjB;AACD;;;wBAEQ;AACP,aAAO,KAAKD,IAAL,CAAUE,EAAjB;AACD;;;;EAlC8BC,mC","sourcesContent":["import { GlipCompany as GlipCompanyType } from '@rc-ex/core/definitions';\nimport { computed } from '@ringcentral-integration/core';\nimport { Module } from '../../lib/di';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport { Deps } from './GlipCompany.interface';\n\n@Module({\n  name: 'GlipCompany',\n  deps: [\n    'Client',\n    'DataFetcherV2',\n    'ExtensionFeatures',\n    { dep: 'GlipCompanyOptions', optional: true },\n  ],\n})\nexport class GlipCompany extends DataFetcherV2Consumer<Deps, GlipCompanyType> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    this._source = new DataSource({\n      ...deps.glipCompanyOptions,\n      key: 'glipCompany',\n      fetchFunction: async (): Promise<GlipCompanyType> => {\n        const response = await this._deps.client.glip().companies('~').get();\n        return response;\n      },\n      readyCheckFunction: () => this._deps.extensionFeatures.ready,\n      permissionCheckFunction: () =>\n        this._deps.extensionFeatures.features?.Glip?.available ?? false,\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  @computed(({ data }: GlipCompany) => [data])\n  get info() {\n    return this.data ?? {};\n  }\n\n  get name() {\n    return this.info.name;\n  }\n\n  get domain() {\n    return this.info.domain;\n  }\n\n  get id() {\n    return this.info.id;\n  }\n}\n"],"file":"GlipCompany.js"}