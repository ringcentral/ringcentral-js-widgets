{"version":3,"sources":["modules/EnvironmentV2/Environment.ts"],"names":["DEFAULT_RECORDING_HOST","Environment","name","deps","dep","optional","enableGlobalCache","storageKey","recordingHostState","_defaultRecordingHost","_initClientService","server","recordingHost","enabled","environmentChanged","changeCounter","_deps","client","service","SDK","sdkConfig","discoveryServer","newConfig","_changeEnvironment","setEnvData","environmentOptions","defaultRecordingHost","RcModuleV2","globalStorage","state","sandbox","action","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAMA;;AAGA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,sBAAsB,GAC1B,gEADF;IAYaC,W,WATZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,aADA;AAENC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,eAFI,EAGJ,WAHI,EAIJ;AAAEC,IAAAA,GAAG,EAAE,oBAAP;AAA6BC,IAAAA,QAAQ,EAAE;AAAvC,GAJI;AAFA,CAAP,C;;;;;AAUC,uBAAYF,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA,IADI;AAEJG,MAAAA,iBAAiB,EAAE,IAFf;AAGJC,MAAAA,UAAU,EAAE;AAHR,KAAN;;AADsB;;AAAA;;AAAA;;AAAA;;AAMtB,UAAKC,kBAAL,GAA0B,MAAKC,qBAA/B;AANsB;AAOvB;;;;6BAiBQ;AACP,WAAKC,kBAAL;AACD;;;qCAQkB;AAAA,UAJjBC,MAIiB,QAJjBA,MAIiB;AAAA,UAHjBC,aAGiB,QAHjBA,aAGiB;AAAA,UAFjBC,OAEiB,QAFjBA,OAEiB;AAAA,UADjBC,kBACiB,QADjBA,kBACiB;AACjB,WAAKH,MAAL,GAAcA,MAAd;AACA,WAAKH,kBAAL,GAA0BI,aAA1B;AACA,WAAKC,OAAL,GAAeA,OAAf;;AACA,UAAIC,kBAAJ,EAAwB;AACtB,aAAKC,aAAL;AACD;AACF;;;yCAE4B;AAC3B,UAAI,KAAKF,OAAT,EAAkB;AAChB,aAAKG,KAAL,CAAWC,MAAX,CAAkBC,OAAlB,GAA4B,IAAIC,QAAJ,iCACvB,KAAKH,KAAL,CAAWI,SADY;AAE1BC,UAAAA,eAAe,EAAE,KAAKV,MAFI;AAG1BA,UAAAA,MAAM,EAAE,KAAKA;AAHa,WAA5B;AAKD;AACF;;;uCAE0BE,O,EAAkBF,M,EAA6B;AACxE,UAAMW,SAAS,qBACV,KAAKN,KAAL,CAAWI,SADD,CAAf;;AAGA,UAAIP,OAAJ,EAAa;AACXS,QAAAA,SAAS,CAACX,MAAV,GAAmBA,MAAnB;AACAW,QAAAA,SAAS,CAACD,eAAV,GAA4BV,MAA5B;AACD;;AACD,WAAKK,KAAL,CAAWC,MAAX,CAAkBC,OAAlB,GAA4B,IAAIC,QAAJ,CAAQG,SAAR,CAA5B;AACD;;;;;;;;;;AAGeX,gBAAAA,M,SAAAA,M,EAAQC,a,SAAAA,a,EAAeC,O,SAAAA,O;AAC/BC,gBAAAA,kB,GACJ,KAAKD,OAAL,KAAiBA,OAAjB,IAA6BA,OAAO,IAAI,KAAKF,MAAL,KAAgBA,M;;AAC1D,oBAAIG,kBAAJ,EAAwB;AACtB;AACA,uBAAKS,kBAAL,CAAwBV,OAAxB,EAAiCF,MAAjC;AACD;;AAED,qBAAKa,UAAL,CAAgB;AACdb,kBAAAA,MAAM,EAANA,MADc;AAEdC,kBAAAA,aAAa,EAAbA,aAFc;AAGdC,kBAAAA,OAAO,EAAPA,OAHc;AAIdC,kBAAAA,kBAAkB,EAAlBA;AAJc,iBAAhB;;;;;;;;;;;;;;;;;;wBAQkB;AAClB,aAAO,KAAKD,OAAL,GAAe,KAAKL,kBAApB,GAAyC,KAAKC,qBAArD;AACD;;;wBAEqC;AAAA;;AACpC,gEACE,KAAKO,KAAL,CAAWS,kBADb,2DACE,uBAA+BC,oBADjC,yEAEE1B,sBAFF;AAID;;;;EA3F8B2B,gB,0EAU9BC,mB,EACAC,W;;;;;WAC6BV,SAAIR,MAAJ,CAAWmB,O;;uFAExCF,mB,EACAC,W;;;;;WAC4B,I;;4EAE5BD,mB,EACAC,W;;;;;WACS,K;;kFAETA,W;;;;;WACe,C;;gEAMfE,Y,kJAoCAC,gB","sourcesContent":["import {\n  action,\n  globalStorage,\n  RcModuleV2,\n  state,\n} from '@ringcentral-integration/core';\nimport { SDK } from '@ringcentral/sdk';\n\nimport { SDKConfig } from '../../lib/createSdkConfig';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { Deps, SetDataOptions } from './Environment.interface';\n\nconst DEFAULT_RECORDING_HOST =\n  'https://apps.ringcentral.com/integrations/recording/index.html';\n\n@Module({\n  name: 'Environment',\n  deps: [\n    'Client',\n    'GlobalStorage',\n    'SdkConfig',\n    { dep: 'EnvironmentOptions', optional: true },\n  ],\n})\nexport class Environment extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableGlobalCache: true,\n      storageKey: 'environment',\n    });\n    this.recordingHostState = this._defaultRecordingHost;\n  }\n\n  @globalStorage\n  @state\n  server: SDKConfig['server'] = SDK.server.sandbox;\n\n  @globalStorage\n  @state\n  recordingHostState: string = null;\n\n  @globalStorage\n  @state\n  enabled = false;\n\n  @state\n  changeCounter = 0;\n\n  onInit() {\n    this._initClientService();\n  }\n\n  @action\n  setEnvData({\n    server,\n    recordingHost,\n    enabled,\n    environmentChanged,\n  }: SetDataOptions) {\n    this.server = server;\n    this.recordingHostState = recordingHost;\n    this.enabled = enabled;\n    if (environmentChanged) {\n      this.changeCounter++;\n    }\n  }\n\n  private _initClientService() {\n    if (this.enabled) {\n      this._deps.client.service = new SDK({\n        ...this._deps.sdkConfig,\n        discoveryServer: this.server,\n        server: this.server,\n      });\n    }\n  }\n\n  private _changeEnvironment(enabled: boolean, server: SDKConfig['server']) {\n    const newConfig = {\n      ...this._deps.sdkConfig,\n    };\n    if (enabled) {\n      newConfig.server = server;\n      newConfig.discoveryServer = server;\n    }\n    this._deps.client.service = new SDK(newConfig);\n  }\n\n  @proxify\n  async setData({ server, recordingHost, enabled }: SetDataOptions) {\n    const environmentChanged =\n      this.enabled !== enabled || (enabled && this.server !== server);\n    if (environmentChanged) {\n      // recordingHost changed no need to set to SDK\n      this._changeEnvironment(enabled, server);\n    }\n\n    this.setEnvData({\n      server,\n      recordingHost,\n      enabled,\n      environmentChanged,\n    });\n  }\n\n  get recordingHost() {\n    return this.enabled ? this.recordingHostState : this._defaultRecordingHost;\n  }\n\n  protected get _defaultRecordingHost() {\n    return (\n      this._deps.environmentOptions?.defaultRecordingHost ??\n      DEFAULT_RECORDING_HOST\n    );\n  }\n}\n"],"file":"Environment.js"}