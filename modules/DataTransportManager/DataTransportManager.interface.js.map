{"version":3,"file":"DataTransportManager.interface.js","names":[],"sources":["modules/DataTransportManager/DataTransportManager.interface.ts"],"sourcesContent":["import {\n  BrowserExtensionsGenericTransport,\n  BrowserExtensionsMainTransport,\n  BrowserExtensionsClientTransport,\n  BrowserExtensionsGenericTransportOptions,\n  BrowserExtensionsMainTransportOptions,\n  BrowserExtensionsClientTransportOptions,\n} from 'data-transport';\n\nexport interface Transports {\n  BrowserExtensions: BrowserExtensionsGenericTransport;\n  BrowserExtensionsMain: BrowserExtensionsMainTransport;\n  BrowserExtensionsClient: BrowserExtensionsClientTransport;\n}\nexport interface TransportOptionsMap {\n  BrowserExtensions: BrowserExtensionsGenericTransportOptions;\n  BrowserExtensionsMain: BrowserExtensionsMainTransportOptions;\n  BrowserExtensionsClient: BrowserExtensionsClientTransportOptions;\n}\nexport interface CustomKeyNameMap {\n  extensionClient: 'BrowserExtensionsClient';\n  genericExtensionClient: 'BrowserExtensions';\n}\nexport type TransportMap<T extends keyof CustomKeyNameMap> = Map<\n  T,\n  Transports[CustomKeyNameMap[T]]\n>;\nexport interface TransportMapParams<T extends keyof CustomKeyNameMap> {\n  key: T;\n  name: CustomKeyNameMap[T];\n  options: TransportOptionsMap[CustomKeyNameMap[T]];\n}\n\nexport interface Deps {}\nexport interface IDataTransportManager<T extends keyof CustomKeyNameMap> {\n  addTransport(params: TransportMapParams<T>): void;\n  getItem(key: T): Transports[CustomKeyNameMap[T]];\n  deleteTransport(key: T): void;\n}\n"],"mappings":"","ignoreList":[]}