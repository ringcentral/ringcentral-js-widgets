{"version":3,"file":"AddressBook.js","names":["_core","require","_utils","_ramda","_availabilityTypes","_phoneSources","_contactHelper","_di","_proxify","_DataFetcherV","_helpers","_dec","_dec2","_dec3","_dec4","_class","_class2","_descriptor","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","_objectSpread","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_initializerDefineProperty","l","initializer","call","_classCallCheck","TypeError","_defineProperties","key","_createClass","prototype","_toPrimitive","_typeof","Symbol","toPrimitive","String","Number","_inherits","create","constructor","_setPrototypeOf","setPrototypeOf","bind","__proto__","_createSuper","_isNativeReflectConstruct","_getPrototypeOf","s","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","slice","reverse","reduce","_initializerWarningHelper","Error","DEFAULT_FETCH_INTERVAL","exports","DEFAULT_CONTACTS_PER_PAGE","INVALID_TOKEN_ERROR_CODES","AddressBook","Module","name","deps","dep","optional","computed","_ref","data","_ref2","that","contacts","_ref3","_super","_deps$addressBookOpti","_deps$addressBookOpti2","_this$_deps$addressBo","_this","enableCache","addressBookOptions","disableCache","storageKey","_ref4","_deps","_ref4$polling","polling","_source","DataSource","cleanOnReset","permissionCheckFunction","_this$_deps$extension","_this$_deps$extension2","_this$_deps$extension3","extensionFeatures","features","ReadPersonalContacts","available","readyCheckFunction","ready","fetchFunction","_fetchFunction","regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","_sync","sent","setAddressBookData","abrupt","stop","dataFetcherV2","register","addressBookData","onInit","getData","syncToken","updateData","Date","now","_fetch2","_callee2","perPage","pageId","params","_callee2$","_context2","getSyncParams","t0","processAddressBookResponse","client","account","extension","addressBookSync","list","t1","_fetch","_x","_x2","_x3","_processISyncData","records","_this$data$records","_this$data","updatedRecords","processedIDMap","record","availability","availabilityTypes","alive","id","_fetchAll2","_callee3","_response$records","response","_response$records2","_callee3$","_context3","_perPage","concat","nextPageId","sleep","_fetchInterval","syncInfo","syncType","_fetchAll","_x4","_sync2","_callee4","_error$response","_error$response2","_responseResult$error","_error$response3","error","responseResult","_data","_callee4$","_context4","status","clone","json","errors","some","_ref5","undefined","_ref5$errorCode","errorCode","includes","console","_sync3","_callee5","_callee5$","_context5","fetchData","sync","findContact","contactId","find","x","filterContacts","searchFilter","getFilterContacts","searchForPhoneNumbers","searchString","getSearchForPhoneNumbers","entityType","phoneSources","contact","matchContactsByPhoneNumber","phoneNumber","getMatchContactsByPhoneNumber","rcContact","get","_this$_deps$addressBo2","_this$_deps$addressBo3","fetchInterval","_this$_deps$addressBo4","_this$_deps$addressBo5","_this$data2","_this2","_this$data$records2","_this$data3","map","rawContact","_rawContact$firstName","_rawContact$lastName","type","sourceName","phoneNumbers","emails","firstName","lastName","email","email2","email3","test","addPhoneToContact","_this$data$records3","_this$data4","rcPersonalMapping","item","DataFetcherV2Consumer","storage","state","action","proxify"],"sources":["modules/AddressBook/AddressBook.ts"],"sourcesContent":["import {\n  action,\n  computed,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { sleep } from '@ringcentral-integration/utils';\nimport type { ApiError } from '@ringcentral/sdk';\nimport { forEach, map } from 'ramda';\n\nimport { availabilityTypes } from '../../enums/availabilityTypes';\nimport { phoneSources } from '../../enums/phoneSources';\nimport type {\n  ContactModel,\n  ContactSource,\n} from '../../interfaces/Contact.model';\nimport {\n  addPhoneToContact,\n  getFilterContacts,\n  getMatchContactsByPhoneNumber,\n  getSearchForPhoneNumbers,\n} from '../../lib/contactHelper';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\n\nimport type {\n  AddressBookData,\n  Deps,\n  PersonalContactResource,\n} from './AddressBook.interface';\nimport { getSyncParams, processAddressBookResponse } from './helpers';\n\nexport const DEFAULT_FETCH_INTERVAL = 1000;\nexport const DEFAULT_CONTACTS_PER_PAGE = 250;\n\n// reference: https://developers.ringcentral.com/api-reference/External-Contacts/syncAddressBook\nconst INVALID_TOKEN_ERROR_CODES = [\n  // 400 CMN-101 Parameter [${parameterName}] value is invalid.\n  'CMN-101',\n];\n\n@Module({\n  name: 'AddressBook',\n  deps: [\n    'Client',\n    'ExtensionFeatures',\n    'DataFetcherV2',\n    'Storage',\n    { dep: 'AddressBookOptions', optional: true },\n  ],\n})\nexport class AddressBook\n  extends DataFetcherV2Consumer<Deps, Partial<AddressBookData>>\n  implements ContactSource\n{\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: !(deps.addressBookOptions?.disableCache ?? false),\n      storageKey: 'AddressBook',\n    });\n    const { polling = true } = this._deps.addressBookOptions ?? {};\n    this._source = new DataSource({\n      ...this._deps.addressBookOptions,\n      key: 'addressBook',\n      polling,\n      cleanOnReset: true,\n      permissionCheckFunction: () =>\n        this._deps.extensionFeatures.features?.ReadPersonalContacts\n          ?.available ?? false,\n      readyCheckFunction: () => this._deps.extensionFeatures.ready,\n      fetchFunction: async () => {\n        const data = await this._sync();\n        this.setAddressBookData(data);\n        return {};\n      },\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  @storage\n  @state\n  addressBookData: Partial<AddressBookData> = {};\n\n  @action\n  setAddressBookData(data: Partial<AddressBookData>) {\n    this.addressBookData = data;\n  }\n\n  override onInit() {\n    // for compatibility with old version cache\n    const data = this._deps.dataFetcherV2.getData(this._source);\n    if (data?.syncToken) {\n      this._deps.dataFetcherV2.updateData(this._source, {}, Date.now());\n      this.setAddressBookData(data);\n    }\n  }\n\n  // just a workaround for the update performance issue\n  // TODO: refactor with type\n  override get data() {\n    return this.addressBookData;\n  }\n\n  protected get _fetchInterval() {\n    return (\n      this._deps.addressBookOptions?.fetchInterval ?? DEFAULT_FETCH_INTERVAL\n    );\n  }\n\n  protected get _perPage() {\n    return this._deps.addressBookOptions?.perPage ?? DEFAULT_CONTACTS_PER_PAGE;\n  }\n\n  get syncToken() {\n    return this.data?.syncToken;\n  }\n\n  protected async _fetch(perPage: number, syncToken?: string, pageId?: number) {\n    const params = getSyncParams({\n      perPage,\n      syncToken,\n      pageId,\n    });\n    return processAddressBookResponse(\n      await this._deps.client\n        .account()\n        .extension()\n        .addressBookSync()\n        .list(params),\n    );\n  }\n\n  protected _processISyncData(records: PersonalContactResource[]) {\n    if (records?.length > 0) {\n      const updatedRecords: PersonalContactResource[] = [];\n      // @ts-expect-error TS(2344): Type 'number | undefined' does not satisfy the con... Remove this comment to see the full error message\n      const processedIDMap: Record<PersonalContactResource['id'], true> = {};\n      forEach((record) => {\n        if (record.availability === availabilityTypes.alive) {\n          // Only keep entries that is 'alive', omit 'purged' and 'deleted'\n          updatedRecords.push(record);\n        }\n        // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n        processedIDMap[record.id] = true;\n      }, records);\n      forEach((record) => {\n        // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n        if (!processedIDMap[record.id]) {\n          // record has no updates\n          updatedRecords.push(record);\n        }\n      }, this.data?.records ?? []);\n      return updatedRecords;\n    }\n    return this.data.records;\n  }\n\n  protected async _fetchAll(syncToken?: string) {\n    const perPage = this._perPage;\n    let records: PersonalContactResource[] = [];\n    let response = await this._fetch(perPage, syncToken);\n    records = records.concat(response.records ?? []);\n    while (response.nextPageId) {\n      await sleep(this._fetchInterval);\n      response = await this._fetch(perPage, syncToken, response.nextPageId);\n      records = records.concat(response.records ?? []);\n    }\n    if (response.syncInfo!.syncType === 'ISync') {\n      // @ts-expect-error TS(2322): Type 'PersonalContactResource[] | undefined' is no... Remove this comment to see the full error message\n      records = this._processISyncData(records);\n    }\n    return {\n      syncToken: response.syncInfo!.syncToken,\n      records,\n    };\n  }\n\n  protected async _sync(): Promise<AddressBookData> {\n    try {\n      const data = await this._fetchAll(this.syncToken);\n      return data;\n    } catch (e: unknown) {\n      const error = e as ApiError;\n\n      // 403 Forbidden\n      if (error.response?.status === 403) {\n        return {} as AddressBookData;\n      }\n\n      // try Full Sync\n      const responseResult = await error.response?.clone().json();\n      if (\n        responseResult?.errors?.some(({ errorCode = '' } = {}) =>\n          INVALID_TOKEN_ERROR_CODES.includes(errorCode),\n        )\n      ) {\n        const data = await this._fetchAll();\n        return data;\n      }\n\n      // exception\n      console.error('[AddressBook] > _sync', error.response?.status, error);\n      throw error;\n    }\n  }\n\n  // interface of ContactSource\n  @proxify\n  async sync() {\n    await this._deps.dataFetcherV2.fetchData(this._source);\n  }\n\n  // interface of ContactSource\n  findContact(contactId: string) {\n    return this.contacts.find((x) => x.id === contactId);\n  }\n\n  // interface of ContactSource\n  filterContacts(searchFilter: string) {\n    return getFilterContacts(this.contacts, searchFilter);\n  }\n\n  // interface of ContactSource\n  searchForPhoneNumbers(searchString: string) {\n    return getSearchForPhoneNumbers({\n      contacts: this.contacts,\n      searchString,\n      entityType: phoneSources.contact,\n    });\n  }\n\n  // interface of ContactSource\n  matchContactsByPhoneNumber(phoneNumber: string) {\n    return getMatchContactsByPhoneNumber({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: phoneSources.rcContact,\n    });\n  }\n\n  // interface of ContactSource\n  get sourceName() {\n    return 'personal';\n  }\n\n  // interface of ContactSource\n  @computed(({ data }: AddressBook) => [data])\n  get contacts() {\n    return map((rawContact) => {\n      const contact: ContactModel = {\n        ...rawContact,\n        type: this.sourceName,\n        phoneNumbers: [],\n        emails: [],\n        id: `${rawContact.id}`,\n        name: `${rawContact.firstName ?? ''} ${rawContact.lastName ?? ''}`,\n      };\n      if (rawContact.email) {\n        contact.emails.push(rawContact.email);\n      }\n      if (rawContact.email2) {\n        contact.emails.push(rawContact.email2);\n      }\n      if (rawContact.email3) {\n        contact.emails.push(rawContact.email3);\n      }\n      forEach((key) => {\n        if (/Phone|Fax/.test(key) && typeof contact[key] === 'string') {\n          addPhoneToContact(contact, contact[key] as string, key);\n        }\n      }, Object.keys(contact) as (keyof typeof contact)[]);\n      return contact;\n    }, this.data?.records ?? []);\n  }\n\n  // interface of ContactSource\n  @computed(({ data }: AddressBook) => [data])\n  get rawContacts() {\n    return this.data?.records ?? [];\n  }\n\n  @computed((that: AddressBook) => [that.contacts])\n  get rcPersonalMapping() {\n    const rcPersonalMapping: any = {};\n    this.contacts.forEach((item: any) => {\n      rcPersonalMapping[item.id] = item;\n    });\n    return rcPersonalMapping;\n  }\n\n  // interface of ContactSource\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"mappings":"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","ignoreList":[]}