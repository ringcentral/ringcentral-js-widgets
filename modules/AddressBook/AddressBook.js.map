{"version":3,"file":"AddressBook.js","names":["_ramda","require","_core","_utils","_availabilityTypes","_phoneSources","_contactHelper","_di","_proxify","_DataFetcherV","_helpers","_dec","_dec2","_dec3","_dec4","_class","_class2","_descriptor","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","target","i","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","_toPropertyKey","configurable","writable","_initializerDefineProperty","property","descriptor","context","initializer","call","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","_createClass","protoProps","staticProps","prototype","_toPrimitive","_typeof","String","input","hint","prim","Symbol","toPrimitive","res","Number","_inherits","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_applyDecoratedDescriptor","decorators","desc","slice","reverse","reduce","decorator","_initializerWarningHelper","Error","DEFAULT_FETCH_INTERVAL","exports","DEFAULT_CONTACTS_PER_PAGE","AddressBook","Module","name","deps","dep","optional","computed","_ref","data","_ref2","that","contacts","_ref3","_super","_deps$addressBookOpti","_deps$addressBookOpti2","_this$_deps$addressBo","_this","enableCache","addressBookOptions","disableCache","storageKey","_ref4","_deps","_ref4$polling","polling","_source","DataSource","cleanOnReset","permissionCheckFunction","_this$_deps$extension","_this$_deps$extension2","_this$_deps$extension3","extensionFeatures","features","ReadPersonalContacts","available","readyCheckFunction","ready","fetchFunction","_fetchFunction","regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","_sync","sent","setAddressBookData","abrupt","stop","dataFetcherV2","register","addressBookData","onInit","getData","syncToken","updateData","Date","now","_fetch2","_callee2","perPage","pageId","params","_callee2$","_context2","getSyncParams","t0","processAddressBookResponse","client","account","extension","addressBookSync","list","t1","_fetch","_x","_x2","_x3","_processISyncData","records","_this$data$records","_this$data","updatedRecords","processedIDMap","record","availability","availabilityTypes","alive","id","_sync2","_callee3","_response$records","response","_response$records2","_response","_callee3$","_context3","_perPage","concat","nextPageId","sleep","_fetchInterval","syncInfo","syncType","status","_sync3","_callee4","_callee4$","_context4","fetchData","sync","findContact","contactId","find","x","filterContacts","searchFilter","getFilterContacts","searchForPhoneNumbers","searchString","getSearchForPhoneNumbers","entityType","phoneSources","contact","matchContactsByPhoneNumber","phoneNumber","getMatchContactsByPhoneNumber","rcContact","get","_this$_deps$addressBo2","_this$_deps$addressBo3","fetchInterval","_this$_deps$addressBo4","_this$_deps$addressBo5","_this$data2","_this2","_this$data$records2","_this$data3","map","rawContact","_rawContact$firstName","_rawContact$lastName","type","sourceName","phoneNumbers","emails","firstName","lastName","email","email2","email3","test","addPhoneToContact","_this$data$records3","_this$data4","rcPersonalMapping","item","DataFetcherV2Consumer","storage","state","action","proxify"],"sources":["modules/AddressBook/AddressBook.ts"],"sourcesContent":["import { forEach, map } from 'ramda';\nimport {\n  action,\n  computed,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { sleep } from '@ringcentral-integration/utils';\nimport type { ApiError } from '@ringcentral/sdk';\nimport { availabilityTypes } from '../../enums/availabilityTypes';\nimport { phoneSources } from '../../enums/phoneSources';\nimport type {\n  ContactModel,\n  ContactSource,\n} from '../../interfaces/Contact.model';\nimport {\n  addPhoneToContact,\n  getFilterContacts,\n  getMatchContactsByPhoneNumber,\n  getSearchForPhoneNumbers,\n} from '../../lib/contactHelper';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport type {\n  AddressBookData,\n  Deps,\n  PersonalContactResource,\n} from './AddressBook.interface';\nimport { getSyncParams, processAddressBookResponse } from './helpers';\n\nexport const DEFAULT_FETCH_INTERVAL = 1000;\nexport const DEFAULT_CONTACTS_PER_PAGE = 250;\n\n@Module({\n  name: 'AddressBook',\n  deps: [\n    'Client',\n    'ExtensionFeatures',\n    'DataFetcherV2',\n    'Storage',\n    { dep: 'AddressBookOptions', optional: true },\n  ],\n})\nexport class AddressBook\n  extends DataFetcherV2Consumer<Deps, Partial<AddressBookData>>\n  implements ContactSource\n{\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: !(deps.addressBookOptions?.disableCache ?? false),\n      storageKey: 'AddressBook',\n    });\n    const { polling = true } = this._deps.addressBookOptions ?? {};\n    this._source = new DataSource({\n      ...this._deps.addressBookOptions,\n      key: 'addressBook',\n      polling,\n      cleanOnReset: true,\n      permissionCheckFunction: () =>\n        this._deps.extensionFeatures.features?.ReadPersonalContacts\n          ?.available ?? false,\n      readyCheckFunction: () => this._deps.extensionFeatures.ready,\n      fetchFunction: async () => {\n        const data = await this._sync();\n        this.setAddressBookData(data);\n        return {};\n      },\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  @storage\n  @state\n  addressBookData: Partial<AddressBookData> = {};\n\n  @action\n  setAddressBookData(data: Partial<AddressBookData>) {\n    this.addressBookData = data;\n  }\n\n  override onInit() {\n    // for compatibility with old version cache\n    const data = this._deps.dataFetcherV2.getData(this._source);\n    if (data?.syncToken) {\n      this._deps.dataFetcherV2.updateData(this._source, {}, Date.now());\n      this.setAddressBookData(data);\n    }\n  }\n\n  // just a workaround for the update performance issue\n  // TODO: refactor with type\n  override get data() {\n    return this.addressBookData;\n  }\n\n  protected get _fetchInterval() {\n    return (\n      this._deps.addressBookOptions?.fetchInterval ?? DEFAULT_FETCH_INTERVAL\n    );\n  }\n\n  protected get _perPage() {\n    return this._deps.addressBookOptions?.perPage ?? DEFAULT_CONTACTS_PER_PAGE;\n  }\n\n  get syncToken() {\n    return this.data?.syncToken;\n  }\n\n  protected async _fetch(perPage: number, syncToken: string, pageId?: number) {\n    const params = getSyncParams({\n      perPage,\n      syncToken,\n      pageId,\n    });\n    return processAddressBookResponse(\n      await this._deps.client\n        .account()\n        .extension()\n        .addressBookSync()\n        .list(params),\n    );\n  }\n\n  protected _processISyncData(records: PersonalContactResource[]) {\n    if (records?.length > 0) {\n      const updatedRecords: PersonalContactResource[] = [];\n      // @ts-expect-error\n      const processedIDMap: Record<PersonalContactResource['id'], true> = {};\n      forEach((record) => {\n        if (record.availability === availabilityTypes.alive) {\n          // Only keep entries that is 'alive', omit 'purged' and 'deleted'\n          updatedRecords.push(record);\n        }\n        // @ts-expect-error\n        processedIDMap[record.id] = true;\n      }, records);\n      forEach((record) => {\n        // @ts-expect-error\n        if (!processedIDMap[record.id]) {\n          // record has no updates\n          updatedRecords.push(record);\n        }\n      }, this.data?.records ?? []);\n      return updatedRecords;\n    }\n    return this.data.records;\n  }\n\n  protected async _sync(): Promise<AddressBookData> {\n    try {\n      const syncToken = this.syncToken;\n      const perPage = this._perPage;\n      let records: PersonalContactResource[] = [];\n      // @ts-expect-error\n      let response = await this._fetch(perPage, syncToken);\n      records = records.concat(response.records ?? []);\n      while (response.nextPageId) {\n        await sleep(this._fetchInterval);\n        // @ts-expect-error\n        response = await this._fetch(perPage, syncToken, response.nextPageId);\n        records = records.concat(response.records ?? []);\n      }\n      if (response.syncInfo!.syncType === 'ISync') {\n        // @ts-expect-error\n        records = this._processISyncData(records);\n      }\n      return {\n        syncToken: response.syncInfo!.syncToken,\n        records,\n      };\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      if ((error as ApiError)?.response?.status === 403) {\n        return {} as AddressBookData;\n      }\n      throw error;\n    }\n  }\n\n  // interface of ContactSource\n  @proxify\n  async sync() {\n    await this._deps.dataFetcherV2.fetchData(this._source);\n  }\n\n  // interface of ContactSource\n  findContact(contactId: string) {\n    return this.contacts.find((x) => x.id === contactId);\n  }\n\n  // interface of ContactSource\n  filterContacts(searchFilter: string) {\n    return getFilterContacts(this.contacts, searchFilter);\n  }\n\n  // interface of ContactSource\n  searchForPhoneNumbers(searchString: string) {\n    return getSearchForPhoneNumbers({\n      contacts: this.contacts,\n      searchString,\n      entityType: phoneSources.contact,\n    });\n  }\n\n  // interface of ContactSource\n  matchContactsByPhoneNumber(phoneNumber: string) {\n    return getMatchContactsByPhoneNumber({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: phoneSources.rcContact,\n    });\n  }\n\n  // interface of ContactSource\n  get sourceName() {\n    return 'personal';\n  }\n\n  // interface of ContactSource\n  @computed(({ data }: AddressBook) => [data])\n  get contacts() {\n    return map((rawContact) => {\n      const contact: ContactModel = {\n        ...rawContact,\n        type: this.sourceName,\n        phoneNumbers: [],\n        emails: [],\n        id: `${rawContact.id}`,\n        name: `${rawContact.firstName ?? ''} ${rawContact.lastName ?? ''}`,\n      };\n      if (rawContact.email) {\n        contact.emails.push(rawContact.email);\n      }\n      if (rawContact.email2) {\n        contact.emails.push(rawContact.email2);\n      }\n      if (rawContact.email3) {\n        contact.emails.push(rawContact.email3);\n      }\n      forEach((key) => {\n        if (/Phone|Fax/.test(key) && typeof contact[key] === 'string') {\n          addPhoneToContact(contact, contact[key] as string, key);\n        }\n      }, Object.keys(contact) as (keyof typeof contact)[]);\n      return contact;\n    }, this.data?.records ?? []);\n  }\n\n  // interface of ContactSource\n  @computed(({ data }: AddressBook) => [data])\n  get rawContacts() {\n    return this.data?.records ?? [];\n  }\n\n  @computed((that: AddressBook) => [that.contacts])\n  get rcPersonalMapping() {\n    const rcPersonalMapping: any = {};\n    this.contacts.forEach((item: any) => {\n      rcPersonalMapping[item.id] = item;\n    });\n    return rcPersonalMapping;\n  }\n\n  // interface of ContactSource\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"mappings":"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"}