{"version":3,"sources":["modules/ConferenceCallV2/ConferenceCall.ts"],"names":["ConferenceCall","name","deps","dep","optional","trackEvents","clickHangupParticipantList","cancelRemoveRemoveParticipantsModal","clickRemoveRemoveParticipantsModal","that","_deps","webphone","sessions","mergingPair","fromSessionId","partyProfiles","currentConferenceId","conferences","_eventEmitter","EventEmitter","_timers","_fromSessionId","_ttl","DEFAULT_TTL","_timeout","conferenceCallOptions","timeout","DEFAULT_TIMEOUT","_capacity","capacity","MAXIMUM_CAPACITY","_pulling","pulling","_lastCallInfo","state","isMerging","id","val","conferenceCallStatus","idle","requesting","conference","sessionId","setConferencesState","profiles","partyProfile","res","findConferenceWithSession","session","c","setConferenceCallStatus","client","service","platform","get","rawResponse","json","response","storedConference","parties","length","updateAConference","availabilityMonitor","alert","conferenceData","hangup","removeConference","checkIfHAError","warning","message","conferenceCallErrors","terminateConferenceFailed","webphoneSession","propagate","connectivityMonitor","conferenceState","ready","isOverload","connectivity","danger","modeError","ttl","_getProfile","post","partyData","updateConferenceStatus","newConference","newParties","bringInParty","partyId","removeFromConferenceFailed","callingSettings","_checkPermission","permissionsMessages","insufficientPrivilege","callingMode","callingModes","_makeConference","webphoneSessions","isConferenceSession","bringInFailed","setIsMerging","conferenceId","sipInstances","_sessions","sessionIds","x","setSessionCaching","pSips","instance","p","Promise","resolve","on","all","_mergeToConference","then","setMergingPair","Object","values","emit","mergeEvents","mergeSucceeded","e","console","error","terminateConference","clearSessionCaching","toSessionId","reduce","accum","party","idx","status","code","toLowerCase","partyStatusCode","disconnected","push","map","filter","i","getOnlineParties","Array","countOnlineParties","window","setTimeout","stopPollingConferenceStatus","startPollingConferenceStatus","clearTimeout","Error","func","isOnce","once","off","setCurrentConferenceId","resetSuccess","hasPermission","forEach","evt","bringInToConference","makeConference","conferenceAccepted","race","reject","sipSession","call","phoneNumber","voiceCallToken","isConference","prototype","toString","_hookConference","makeConferenceFailed","contactMatcher","rcId","avatarUrl","calleeType","calleeTypes","unknown","partyName","direction","callDirections","outbound","toUserName","fromUserName","partyNumber","to","from","matchedContact","contactMatch","nameMatches","dataMapping","profileImageUrl","contacts","sessionIdToMergeWith","sessionToMergeWith","validateCallRecording","conferenceSession","setMergeParty","mergeToConference","resume","currentConferenceSession","isCurrentConferenceOnHold","isOnHold","callIsRecording","auth","loggedIn","appFeatures","hasConferenceCall","sessionName","sessionNumber","sessionStatus","fromSession","find","callStatus","lastCalleeType","sessionStatusEnum","finished","partiesAvatarUrls","profile","extraNum","lastCallContact","getOnlinePartyProfiles","RcModuleV2","action","proxify"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { filter, find, is, map, values } from 'ramda';\n\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  track,\n} from '@ringcentral-integration/core';\n\nimport callDirections from '../../enums/callDirections';\nimport calleeTypes from '../../enums/calleeTypes';\nimport { permissionsMessages } from '../../enums/permissionsMessages';\nimport {\n  NormalizedSession,\n  WebphoneSession,\n} from '../../interfaces/Webphone.interface';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { trackEvents } from '../Analytics';\nimport callingModes from '../CallingSettings/callingModes';\nimport sessionStatusEnum from '../Webphone/sessionStatus';\nimport { isConferenceSession, isRecording } from '../Webphone/webphoneHelper';\nimport {\n  Conference,\n  ConferencesState,\n  ConferenceState,\n  Deps,\n  LastCallInfo,\n  MergingPair,\n  Party,\n  PartyState,\n} from './ConferenceCall.interfaces';\nimport { conferenceCallErrors } from './conferenceCallErrors';\nimport {\n  ascendSortParties,\n  conferenceCallStatus,\n  DEFAULT_TIMEOUT,\n  DEFAULT_TTL,\n  MAXIMUM_CAPACITY,\n  mergeEvents,\n  mergeParty,\n  partyStatusCode,\n} from './lib';\n\n@Module({\n  name: 'ConferenceCall',\n  deps: [\n    'Auth',\n    'Alert',\n    'Call',\n    'CallingSettings',\n    'ConnectivityMonitor',\n    'Client',\n    'AppFeatures',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'ConferenceCallOptions', optional: true },\n  ],\n})\nexport class ConferenceCall extends RcModuleV2<Deps> {\n  private _eventEmitter = new EventEmitter();\n  private _timers: {\n    [key: string]: number;\n  } = {};\n\n  private _fromSessionId: string;\n  private _ttl: number = DEFAULT_TTL;\n  private _timeout: number =\n    this._deps.conferenceCallOptions?.timeout ?? DEFAULT_TIMEOUT;\n  private _capacity: number =\n    this._deps.conferenceCallOptions?.capacity ?? MAXIMUM_CAPACITY;\n  protected _pulling: boolean =\n    this._deps.conferenceCallOptions?.pulling ?? true;\n  private _lastCallInfo: {\n    calleeType: string;\n    extraNum: number;\n    phoneNumber?: string;\n    status: string;\n    lastCallContact?: any;\n    avatarUrl?: string;\n    name?: string;\n  };\n\n  @state\n  conferences: ConferencesState = {};\n\n  @state\n  conferenceCallStatus = conferenceCallStatus.idle;\n\n  @state\n  mergingPair: MergingPair = {};\n\n  @state\n  currentConferenceId: string = null;\n\n  @state\n  isMerging = false;\n\n  constructor(deps: Deps) {\n    super({ deps });\n  }\n\n  @action\n  setIsMerging(state: boolean) {\n    this.isMerging = state;\n  }\n\n  @action\n  setCurrentConferenceId(id: string) {\n    this.currentConferenceId = id;\n  }\n\n  @action\n  setMergingPair(val: MergingPair) {\n    this.mergingPair = val;\n  }\n\n  @action\n  setConferencesState(val: ConferencesState) {\n    this.conferences = val;\n  }\n\n  @action\n  toggleConferenceCallStatus() {\n    if (this.conferenceCallStatus === conferenceCallStatus.idle) {\n      this.conferenceCallStatus = conferenceCallStatus.requesting as any;\n      return;\n    }\n    this.conferenceCallStatus = conferenceCallStatus.idle as any;\n  }\n\n  @action\n  setConferenceCallStatus(val: conferenceCallStatus) {\n    this.conferenceCallStatus = val;\n  }\n\n  @proxify\n  async updateAConference(conference: Conference, sessionId: string) {\n    this.setConferencesState({\n      ...this.conferences,\n      [conference.id]: {\n        conference,\n        sessionId,\n        profiles:\n          (this.conferences[conference.id] &&\n            this.conferences[conference.id].profiles) ||\n          [],\n      } as ConferenceState,\n    });\n  }\n\n  bringInParty(\n    conference: Conference,\n    sessionId: string,\n    partyProfile: PartyState,\n  ) {\n    this.setConferencesState({\n      ...this.conferences,\n      [conference.id]: {\n        conference,\n        sessionId,\n        profiles: [...this.conferences[conference.id].profiles, partyProfile],\n      },\n    });\n  }\n\n  @action\n  removeConference(id: string) {\n    delete this.conferences[id];\n  }\n\n  isConferenceSession(sessionId: string) {\n    const { webphone } = this._deps;\n    // only can be used after webphone._onCallStartFunc\n    let res = !!this.findConferenceWithSession(sessionId);\n\n    if (this.isMerging && !res) {\n      const session = find(\n        (session) => session.id === sessionId,\n        webphone.sessions,\n      );\n      res = isConferenceSession(session);\n    }\n\n    return res;\n  }\n\n  findConferenceWithSession(sessionId: string) {\n    return find((c) => c.sessionId === sessionId, values(this.conferences));\n  }\n\n  @proxify\n  async updateConferenceStatus(id: string) {\n    this.setConferenceCallStatus(conferenceCallStatus.requesting);\n    const { client } = this._deps;\n    try {\n      const rawResponse = await client.service\n        .platform()\n        .get(`/restapi/v1.0/account/~/telephony/sessions/${id}`);\n      const response = await rawResponse.json();\n      const storedConference = this.conferences[response.id];\n      const conference = { ...storedConference.conference };\n      conference.parties =\n        // if BE session hasn't been updated\n        conference.parties.length > response.parties.length\n          ? mergeParty(response.parties, conference.parties)\n          : response.parties;\n      const { sessionId } = storedConference;\n      this.updateAConference(conference, sessionId);\n    } finally {\n      this.setConferenceCallStatus(conferenceCallStatus.idle);\n      // eslint-disable-next-line no-unsafe-finally\n      return this.conferences[id];\n    }\n  }\n\n  @proxify\n  async terminateConference(id: string) {\n    if (this.conferenceCallStatus === conferenceCallStatus.requesting) {\n      return;\n    }\n    this.setConferenceCallStatus(conferenceCallStatus.requesting);\n    const { webphone, client, availabilityMonitor, alert } = this._deps;\n    const conferenceData = this.conferences[id];\n    try {\n      if (!conferenceData) {\n        return;\n      }\n      if (webphone) {\n        webphone.hangup(conferenceData.sessionId);\n      }\n      await client.service\n        .platform()\n        .delete(`/restapi/v1.0/account/~/telephony/sessions/${id}`);\n      this.removeConference(id);\n    } catch (e) {\n      if (\n        !availabilityMonitor ||\n        !(await availabilityMonitor.checkIfHAError(e))\n      ) {\n        alert.warning({\n          message: conferenceCallErrors.terminateConferenceFailed,\n        });\n      }\n    } finally {\n      this.setConferenceCallStatus(conferenceCallStatus.idle);\n      // eslint-disable-next-line no-unsafe-finally\n      return conferenceData;\n    }\n  }\n\n  @proxify\n  async bringInToConference(\n    id: string,\n    webphoneSession: NormalizedSession,\n    propagate: boolean = false,\n  ) {\n    const { connectivityMonitor, alert, client } = this._deps;\n    const conferenceState = this.conferences[id];\n    if (\n      !conferenceState ||\n      !this.ready ||\n      !webphoneSession ||\n      this.isOverload(id) ||\n      !connectivityMonitor.connectivity\n    ) {\n      alert.danger({\n        message: conferenceCallErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    const { sessionId } = conferenceState;\n    let { conference } = conferenceState;\n    this.setConferenceCallStatus(conferenceCallStatus.requesting);\n\n    try {\n      const partyProfile = this._getProfile(webphoneSession.id);\n      await client.service\n        .platform()\n        .post(\n          `/restapi/v1.0/account/~/telephony/sessions/${id}/parties/bring-in`,\n          webphoneSession.partyData,\n        );\n      const newConference = await this.updateConferenceStatus(id);\n      conference = newConference.conference;\n\n      if (partyProfile) {\n        const conferenceState = this.conferences[id];\n        const newParties = ascendSortParties(\n          conferenceState.conference.parties,\n        );\n        (partyProfile as PartyState).id = newParties[newParties.length - 1].id;\n        this.bringInParty(conference, sessionId, partyProfile as PartyState);\n      }\n      // else using BE push notification to get the new party data\n      return id;\n    } catch (e) {\n      if (!propagate) {\n        return;\n      }\n      throw e;\n    } finally {\n      this.setConferenceCallStatus(conferenceCallStatus.idle);\n    }\n  }\n\n  @proxify\n  async removeFromConference(id: string, partyId: string) {\n    const { client, availabilityMonitor, alert } = this._deps;\n    this.setConferenceCallStatus(conferenceCallStatus.requesting);\n    try {\n      await client.service\n        .platform()\n        .delete(\n          `/restapi/v1.0/account/~/telephony/sessions/${id}/parties/${partyId}`,\n        );\n      await this.updateConferenceStatus(id);\n    } catch (e) {\n      if (\n        !availabilityMonitor ||\n        !(await availabilityMonitor.checkIfHAError(e))\n      ) {\n        alert.warning({\n          message: conferenceCallErrors.removeFromConferenceFailed,\n        });\n      }\n    } finally {\n      this.setConferenceCallStatus(conferenceCallStatus.idle);\n      // eslint-disable-next-line no-unsafe-finally\n      return this.conferences[id];\n    }\n  }\n\n  @proxify\n  async makeConference(propagate = false) {\n    const { connectivityMonitor, alert, callingSettings } = this._deps;\n    if (!this.ready || !connectivityMonitor.connectivity) {\n      alert.danger({\n        message: conferenceCallErrors.modeError,\n        ttl: 0,\n      });\n\n      return null;\n    }\n    if (!this._checkPermission()) {\n      // TODO investigate whether this could potentially show 2 notifications at once\n      if (!propagate) {\n        alert.danger({\n          message: permissionsMessages.insufficientPrivilege,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    if (!(callingSettings.callingMode === callingModes.webphone)) {\n      if (!propagate) {\n        alert.danger({\n          message: conferenceCallErrors.modeError,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    const conference = await this._makeConference(propagate);\n    return conference;\n  }\n\n  /**\n   * Merge calls to (or create) a conference.\n   * @param {webphone.sessions} webphoneSessions\n   * FIXME: dynamically construct this function during the construction\n   * to avoid `webphone` criterias to improve performance ahead of time\n   */\n  @proxify\n  async mergeToConference(webphoneSessions: NormalizedSession[] = []) {\n    const { alert, webphone, availabilityMonitor } = this._deps;\n\n    webphoneSessions = filter(\n      (session) => !this.isConferenceSession(session.id),\n      filter((session) => !!session, webphoneSessions),\n    );\n\n    if (!webphoneSessions.length) {\n      alert.warning({\n        message: conferenceCallErrors.bringInFailed,\n      });\n      return;\n    }\n    this.setIsMerging(true);\n    let sipInstances;\n    let conferenceId = null;\n\n    if (webphone) {\n      /**\n       * Because the concurrency behaviour of the server,\n       * we cannot sure the merging process is over when\n       * the function's procedure has finshed.\n       */\n      sipInstances = map(\n        (webphoneSession) => webphone._sessions.get(webphoneSession.id),\n        webphoneSessions,\n      );\n      /**\n       * HACK: we need to preserve the merging session in prevent the glitch of\n       * the call control page.\n       */\n      const sessionIds = map((x) => x.id, webphoneSessions);\n      webphone.setSessionCaching(sessionIds);\n\n      const pSips = map((instance) => {\n        const p = new Promise((resolve) => {\n          instance.on('terminated', () => {\n            resolve(null);\n          });\n        });\n        return p;\n      }, sipInstances);\n\n      await Promise.all([\n        this._mergeToConference(webphoneSessions),\n        ...pSips,\n      ]).then(\n        () => {\n          this.setIsMerging(false);\n          this.setMergingPair({});\n          const conferenceState = Object.values(this.conferences)[0];\n\n          this._eventEmitter.emit(mergeEvents.mergeSucceeded, conferenceState);\n        },\n        (e) => {\n          console.error(e);\n          const conferenceState = Object.values(this.conferences)[0];\n\n          /**\n           * if create conference successfully but failed to bring-in,\n           *  then terminate the conference.\n           */\n          if (conferenceState && conferenceState.profiles.length < 1) {\n            this.terminateConference(conferenceState.conference.id);\n          }\n          alert.warning({\n            message: conferenceCallErrors.bringInFailed,\n          });\n          this.setIsMerging(false);\n        },\n      );\n      webphone.clearSessionCaching();\n    } else {\n      try {\n        conferenceId = await this._mergeToConference(webphoneSessions);\n\n        this.setIsMerging(false);\n        this.setMergingPair({});\n        this._eventEmitter.emit(mergeEvents.mergeSucceeded);\n      } catch (e) {\n        const conferenceState = Object.values(this.conferences)[0];\n        /**\n         * if create conference successfully but failed to bring-in,\n         *  then terminate the conference.\n         */\n        if (\n          conferenceState &&\n          conferenceState?.conference?.parties?.length < 1\n        ) {\n          this.terminateConference(conferenceState.conference.id);\n        }\n\n        if (\n          !availabilityMonitor ||\n          !(await availabilityMonitor.checkIfHAError(e))\n        ) {\n          alert.warning({\n            message: conferenceCallErrors.bringInFailed,\n          });\n        }\n      }\n\n      if (!sipInstances || conferenceId === null) {\n        this.setIsMerging(false);\n      }\n    }\n  }\n\n  @proxify\n  async setMergeParty({\n    fromSessionId,\n    toSessionId,\n  }: {\n    fromSessionId?: string;\n    toSessionId?: string;\n  }) {\n    if (fromSessionId) {\n      this.setMergingPair({ fromSessionId });\n      return;\n    }\n    this.setMergingPair({\n      ...this.mergingPair,\n      ...(toSessionId && { toSessionId }),\n    });\n  }\n\n  @proxify\n  async closeMergingPair() {\n    if (!this.mergingPair.fromSessionId) {\n      return;\n    }\n    this.setMergingPair({});\n  }\n\n  getOnlinePartyProfiles(id: string): (Party & PartyState)[] {\n    const conferenceData = this.conferences[id];\n\n    if (!conferenceData) {\n      return null;\n    }\n\n    return ascendSortParties(conferenceData.conference.parties)\n      .reduce((accum, party, idx) => {\n        if (\n          party?.status?.code.toLowerCase() !== partyStatusCode.disconnected\n        ) {\n          // 0 position is the host\n          accum.push({ idx, party });\n        }\n        return accum;\n      }, [])\n      .map(({ idx, party }) => ({\n        ...party,\n        ...conferenceData.profiles[idx],\n      }))\n      .filter((i) => !!i);\n  }\n\n  getOnlineParties(id: string) {\n    const conferenceData = this.conferences[id];\n    if (!conferenceData) {\n      return null;\n    }\n    return filter(\n      (p) => p?.status?.code?.toLowerCase() !== partyStatusCode.disconnected,\n      conferenceData.conference.parties,\n    );\n  }\n\n  countOnlineParties(id: string) {\n    const res = this.getOnlineParties(id);\n    return is(Array, res) ? res.length : null;\n  }\n\n  isOverload(id: string) {\n    return this.countOnlineParties(id) >= this._capacity;\n  }\n\n  @proxify\n  async startPollingConferenceStatus(id: string) {\n    if (this._timers[id] || !this._pulling) {\n      return;\n    }\n\n    await this.updateConferenceStatus(id);\n    this._timers[id] = window.setTimeout(async () => {\n      await this.updateConferenceStatus(id);\n      this.stopPollingConferenceStatus(id);\n      if (this.conferences[id]) {\n        this.startPollingConferenceStatus(id);\n      }\n    }, this._ttl);\n  }\n\n  stopPollingConferenceStatus(id: string) {\n    clearTimeout(this._timers[id]);\n    delete this._timers[id];\n  }\n\n  openPulling() {\n    this._pulling = true;\n  }\n\n  closePulling() {\n    this._pulling = false;\n  }\n\n  togglePulling() {\n    this._pulling = !this._pulling;\n  }\n\n  setCapacity(capacity = MAXIMUM_CAPACITY) {\n    if (typeof capacity !== 'number') {\n      throw new Error('The capcity must be a number');\n    }\n    this._capacity = capacity;\n    return capacity;\n  }\n\n  setTimeout(timeout: number = DEFAULT_TIMEOUT) {\n    if (typeof timeout !== 'number') {\n      throw new Error('The timeout must be a number');\n    }\n    this._timeout = timeout;\n    return timeout;\n  }\n\n  onMergeSuccess(func: (...args: any[]) => void, isOnce?: boolean) {\n    if (isOnce) {\n      this._eventEmitter.once(mergeEvents.mergeSucceeded, func);\n      return;\n    }\n    this._eventEmitter.on(mergeEvents.mergeSucceeded, func);\n  }\n\n  removeMergeSuccess(func: (...args: any[]) => void) {\n    this._eventEmitter.off(mergeEvents.mergeSucceeded, func);\n  }\n\n  @proxify\n  async loadConference(conferenceId: string) {\n    this.setCurrentConferenceId(conferenceId);\n  }\n\n  onReset() {\n    this.resetSuccess();\n  }\n\n  get hasPermission() {\n    return this._deps.appFeatures.hasConferenceCall;\n  }\n\n  private _checkPermission() {\n    if (!this.hasPermission) {\n      this._deps.alert.danger({\n        message: permissionsMessages.insufficientPrivilege,\n        ttl: 0,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  @proxify\n  private async _hookConference(\n    conference: Conference,\n    session: WebphoneSession,\n  ) {\n    ['accepted'].forEach((evt) =>\n      session.on(evt as any, () =>\n        this.startPollingConferenceStatus(conference.id),\n      ),\n    );\n    ['terminated', 'failed', 'rejected'].forEach((evt) =>\n      session.on(evt as any, () => {\n        this.setConferenceCallStatus(conferenceCallStatus.idle);\n        this.removeConference(conference.id);\n        this.stopPollingConferenceStatus(conference.id);\n      }),\n    );\n  }\n\n  @proxify\n  private async _mergeToConference(webphoneSessions: NormalizedSession[] = []) {\n    const { webphone } = this._deps;\n    const conferenceState = Object.values(this.conferences)[0];\n    if (conferenceState) {\n      const conferenceId = conferenceState.conference.id;\n      this.stopPollingConferenceStatus(conferenceId);\n      // for the sake of participants ordering, we can't concurrently bring in the participants\n      for (const webphoneSession of webphoneSessions) {\n        await this.bringInToConference(conferenceId, webphoneSession, true);\n      }\n      if (!this.conferences[conferenceId].profiles.length) {\n        throw new Error(\n          'bring-in operations failed, not all intended parties were brought in',\n        );\n      }\n      this.startPollingConferenceStatus(conferenceId);\n      return conferenceId;\n    }\n    const { id } = await this.makeConference(true);\n    let conferenceAccepted = false;\n    await Promise.race([\n      new Promise((resolve, reject) => {\n        const sipSession = webphone._sessions.get(\n          this.conferences[id].sessionId,\n        );\n        sipSession.on('accepted', () => {\n          conferenceAccepted = true;\n          resolve(null);\n        });\n        sipSession.on('cancel', () => reject(new Error('conferencing cancel')));\n        sipSession.on('failed', () => reject(new Error('conferencing failed')));\n        sipSession.on('rejected', () =>\n          reject(new Error('conferencing rejected')),\n        );\n        sipSession.on('terminated', () =>\n          reject(new Error('conferencing terminated')),\n        );\n      }),\n      new Promise((resolve, reject) => {\n        setTimeout(\n          () =>\n            conferenceAccepted\n              ? resolve(null)\n              : reject(new Error('conferencing timeout')),\n          this._timeout,\n        );\n      }),\n    ]);\n    await this._mergeToConference(webphoneSessions);\n    return id;\n  }\n\n  @proxify\n  private async _makeConference(propagate = false) {\n    const { client, call, availabilityMonitor, alert } = this._deps;\n    this.setConferenceCallStatus(conferenceCallStatus.requesting);\n    try {\n      // TODO: replace with SDK function chaining calls\n      const rawResponse = await client.service\n        .platform()\n        .post('/restapi/v1.0/account/~/telephony/conference', {});\n      const response = await rawResponse.json();\n      const conference = response.session as Conference;\n      const phoneNumber = conference.voiceCallToken;\n      // whether to mutate the session to mark the conference?\n      const session = await call.call({\n        phoneNumber,\n        isConference: true,\n      } as any);\n      if (\n        typeof session === 'object' &&\n        Object.prototype.toString.call(session.on).toLowerCase() ===\n          '[object function]'\n      ) {\n        this._hookConference(conference, session);\n        this.updateAConference(conference, session.id);\n      }\n      return conference;\n    } catch (e) {\n      console.error(e);\n      if (\n        !propagate ||\n        !availabilityMonitor ||\n        !(await availabilityMonitor.checkIfHAError(e))\n      ) {\n        alert.warning({\n          message: conferenceCallErrors.makeConferenceFailed,\n        });\n\n        return null;\n      }\n      // need to propagate to out side try...catch block\n      throw e;\n    } finally {\n      this.setConferenceCallStatus(conferenceCallStatus.idle);\n    }\n  }\n\n  // get profile the a webphone session\n  private _getProfile(sessionId: string) {\n    const { webphone, contactMatcher } = this._deps;\n    const session = find(\n      (session) => session.id === sessionId,\n      webphone.sessions,\n    );\n\n    let rcId;\n    let avatarUrl;\n    let calleeType = calleeTypes.unknown;\n    let partyName =\n      session.direction === callDirections.outbound\n        ? session.toUserName\n        : session.fromUserName;\n    const partyNumber =\n      session.direction === callDirections.outbound ? session.to : session.from;\n\n    let matchedContact = session.contactMatch;\n    if (!matchedContact && contactMatcher) {\n      const nameMatches = contactMatcher.dataMapping[partyNumber];\n      if (nameMatches && nameMatches.length) {\n        matchedContact = nameMatches[0];\n      }\n    }\n\n    if (matchedContact) {\n      rcId = matchedContact.id;\n      avatarUrl = (matchedContact as any).profileImageUrl;\n      partyName = (matchedContact as any).name;\n      calleeType = calleeTypes.contacts;\n    }\n\n    return {\n      rcId,\n      avatarUrl,\n      partyName,\n      partyNumber,\n      calleeType,\n    } as Omit<PartyState, 'id'>;\n  }\n\n  @proxify\n  async parseMergingSessions({\n    sessionId,\n    sessionIdToMergeWith,\n  }: {\n    sessionId: string;\n    sessionIdToMergeWith?: string;\n  }) {\n    const { webphone } = this._deps;\n    const session = find((x) => x.id === sessionId, webphone.sessions);\n\n    const sessionToMergeWith = find(\n      (x) => x.id === (sessionIdToMergeWith || this.mergingPair.fromSessionId),\n      webphone.sessions,\n    );\n\n    const webphoneSessions = sessionToMergeWith\n      ? [sessionToMergeWith, session]\n      : [session];\n\n    for (const session of webphoneSessions) {\n      if (!this.validateCallRecording(session)) {\n        return null;\n      }\n    }\n\n    const conferenceState = Object.values(this.conferences)[0];\n    if (conferenceState) {\n      const conferenceSession = find(\n        (x) => x.id === conferenceState.sessionId,\n        webphone.sessions,\n      );\n      if (!this.validateCallRecording(conferenceSession)) {\n        return null;\n      }\n    }\n\n    return {\n      session,\n      sessionToMergeWith,\n    };\n  }\n\n  @proxify\n  async mergeSessions({\n    session,\n    sessionToMergeWith,\n  }: {\n    session: NormalizedSession;\n    sessionToMergeWith: NormalizedSession;\n  }) {\n    this.setMergeParty({\n      toSessionId: session.id,\n    });\n    const { webphone } = this._deps;\n    const webphoneSessions = sessionToMergeWith\n      ? [sessionToMergeWith, session]\n      : [session];\n    await this.mergeToConference(webphoneSessions);\n\n    const conferenceData = Object.values(this.conferences)[0];\n    if (!conferenceData) {\n      await webphone.resume(session.id);\n      return null;\n    }\n    const currentConferenceSession = find(\n      (x) => x.id === conferenceData.sessionId,\n      webphone.sessions,\n    );\n    const isCurrentConferenceOnHold = currentConferenceSession.isOnHold;\n\n    if (isCurrentConferenceOnHold) {\n      webphone.resume(conferenceData.sessionId);\n    }\n\n    return conferenceData;\n  }\n\n  validateCallRecording(session: NormalizedSession) {\n    if (isRecording(session)) {\n      this._deps.alert.warning({\n        message: conferenceCallErrors.callIsRecording,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  @action\n  resetSuccess() {\n    this.setIsMerging(false);\n    this.setMergingPair({});\n    this.setCurrentConferenceId(null);\n    this.conferenceCallStatus = conferenceCallStatus.idle as any;\n    this.conferences = {};\n  }\n\n  /*\n   * User action track dispatchs\n   * */\n  @track(trackEvents.clickHangupParticipantList)\n  participantListClickHangupTrack() {}\n\n  @track(trackEvents.cancelRemoveRemoveParticipantsModal)\n  removeParticipantClickCancelTrack() {}\n\n  @track(trackEvents.clickRemoveRemoveParticipantsModal)\n  removeParticipantClickRemoveTrack() {}\n\n  _shouldInit() {\n    const { auth } = this._deps;\n    return auth.loggedIn && super._shouldInit();\n  }\n\n  _shouldReset() {\n    const { auth } = this._deps;\n\n    return super._shouldReset() || (this.ready && !auth.loggedIn);\n  }\n\n  @computed((that: ConferenceCall) => [\n    that._deps.webphone.sessions,\n    that.mergingPair.fromSessionId,\n    that.partyProfiles,\n  ])\n  get lastCallInfo(): LastCallInfo {\n    const { sessions } = this._deps.webphone;\n    const {\n      partyProfiles,\n      mergingPair: { fromSessionId },\n    } = this;\n    if (!fromSessionId) {\n      this._lastCallInfo = null;\n      return this._lastCallInfo;\n    }\n\n    let sessionName;\n    let sessionNumber;\n    let sessionStatus;\n    let matchedContact;\n    const fromSession = sessions.find(\n      (session) => session.id === fromSessionId,\n    );\n    if (fromSession) {\n      sessionName =\n        fromSession.direction === callDirections.outbound\n          ? fromSession.toUserName\n          : fromSession.fromUserName;\n      sessionNumber =\n        fromSession.direction === callDirections.outbound\n          ? fromSession.to\n          : fromSession.from;\n      sessionStatus = fromSession.callStatus;\n      matchedContact = fromSession.contactMatch;\n      if (!matchedContact && this._deps.contactMatcher) {\n        const nameMatches =\n          this._deps.contactMatcher.dataMapping[sessionNumber];\n        if (nameMatches && nameMatches.length) {\n          matchedContact = nameMatches[0];\n        }\n      }\n    }\n\n    let lastCalleeType;\n    if (fromSession) {\n      if (matchedContact) {\n        lastCalleeType = calleeTypes.contacts;\n      } else if (this.isConferenceSession(fromSession.id)) {\n        lastCalleeType = calleeTypes.conference;\n      } else {\n        lastCalleeType = calleeTypes.unknown;\n      }\n    } else if (\n      this._fromSessionId === fromSessionId &&\n      this._lastCallInfo &&\n      this._lastCallInfo.calleeType\n    ) {\n      this._lastCallInfo = {\n        ...this._lastCallInfo,\n        status: sessionStatusEnum.finished,\n      };\n      return this._lastCallInfo;\n    } else {\n      return {\n        calleeType: calleeTypes.unknown,\n      };\n    }\n\n    let partiesAvatarUrls = null;\n    if (lastCalleeType === calleeTypes.conference) {\n      partiesAvatarUrls = (partyProfiles || []).map(\n        (profile) => profile.avatarUrl,\n      );\n    }\n    switch (lastCalleeType) {\n      case calleeTypes.conference:\n        this._lastCallInfo = {\n          calleeType: calleeTypes.conference,\n          avatarUrl: partiesAvatarUrls[0],\n          extraNum: partiesAvatarUrls.length - 1,\n          name: null,\n          phoneNumber: null,\n          status: sessionStatus,\n          lastCallContact: null,\n        };\n        break;\n      case calleeTypes.contacts:\n        this._lastCallInfo = {\n          calleeType: calleeTypes.contacts,\n          avatarUrl: (matchedContact as any).profileImageUrl,\n          name: (matchedContact as any).name,\n          status: sessionStatus,\n          phoneNumber: sessionNumber,\n          extraNum: 0,\n          lastCallContact: matchedContact,\n        };\n        break;\n      default:\n        this._lastCallInfo = {\n          calleeType: calleeTypes.unknown,\n          avatarUrl: null,\n          name: sessionName,\n          status: sessionStatus,\n          phoneNumber: sessionNumber,\n          extraNum: 0,\n          lastCallContact: null,\n        };\n    }\n\n    this._fromSessionId = fromSessionId;\n    return this._lastCallInfo;\n  }\n\n  @computed((that: ConferenceCall) => [\n    that.currentConferenceId,\n    that.conferences,\n  ])\n  get partyProfiles() {\n    const { currentConferenceId, conferences } = this;\n    const conferenceData = conferences && conferences[currentConferenceId];\n    if (!conferenceData) {\n      return [];\n    }\n    return this.getOnlinePartyProfiles(currentConferenceId);\n  }\n}\n"],"file":"ConferenceCall.js"}