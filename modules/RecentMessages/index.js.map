{"version":3,"sources":["modules/RecentMessages/index.ts"],"names":["RecentMessages","deps","client","messageStore","options","actionTypes","_client","ensureExist","call","_messageStore","_reducer","_prevMessageStoreTimestamp","store","subscribe","_onStateChange","pending","ready","dispatch","type","initSuccess","resetSuccess","Object","keys","messages","length","timestamp","contacts","key","getMessages","currentContact","sessionId","indexOf","split","fromLocale","forceUpdate","fromLocal","contactId","id","initLoad","_getRecentMessages","textConversations","loadSuccess","contact","loadReset","conversations","daySpan","dateFrom","recentMessages","_getLocalRecentMessages","dateTo","Date","creationTime","undefined","_fetchRemoteRecentMessages","toISOString","concat","console","error","_dedup","slice","phoneNumbers","matches","i","conversation","messageList","conversationStore","conversationId","find","_filterPhoneNumber","sort","sortByDate","message","phoneNumber","from","to","extensionNumber","params","messageType","perPage","recentMessagesPromise","reduce","acc","promise","_fetchMessageList","then","_flattenToMessageRecords","_markAsRemoteMessage","_sortMessages","account","extension","list","cur","readStatus","allMessages","records","a","b","map","fromRemote","hash","state","messageStatus","loaded","status","RcModule","selector","unreadCounts","proxify"],"mappings":"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","sourcesContent":["import concurrentExecute from '../../lib/concurrentExecute';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport getDateFrom from '../../lib/getDateFrom';\nimport { sortByDate } from '../../lib/messageHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport RcModule from '../../lib/RcModule';\nimport { selector } from '../../lib/selector';\nimport actionTypes from './actionTypes';\nimport getRecentMessagesReducer from './getRecentMessagesReducer';\nimport messageStatus from './messageStatus';\n\n/**\n * @class\n * @description Retrieve all recent messages related to a specified contact.\n */\n@Module({\n  deps: ['Client', 'MessageStore'],\n})\nexport default class RecentMessages extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({ client, messageStore, ...options }) {\n    super({\n      actionTypes,\n      ...options,\n    });\n    this._client = ensureExist.call(this, client, 'client');\n    this._messageStore = ensureExist.call(this, messageStore, 'messageStore');\n    this._reducer = getRecentMessagesReducer(this.actionTypes);\n    this._prevMessageStoreTimestamp = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this.pending && this._messageStore.ready) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this.ready && !this._messageStore.ready) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (Object.keys(this.messages).length > 0) {\n      // Listen to messageStore state changes\n      if (this._messageStore.timestamp !== this._prevMessageStoreTimestamp) {\n        this._prevMessageStoreTimestamp = this._messageStore.timestamp;\n        // for (const contact of Object.values(this.contacts)) {\n        //   this.getMessages(contact, false, true);\n        // }\n        for (const key of Object.keys(this.contacts)) {\n          this.getMessages({\n            currentContact: this.contacts[key],\n            sessionId: key.indexOf('-') > -1 ? key.split('-')[1] : null,\n            fromLocale: false,\n            forceUpdate: true,\n          });\n        }\n      }\n    }\n  }\n\n  get contacts() {\n    return this.state.contacts;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  @selector\n  unreadMessageCounts = [\n    () => this.messages,\n    (messages) =>\n      Object.keys(messages).reduce((unreadCounts, contactId) => {\n        unreadCounts[contactId] = messages[contactId].reduce(\n          (acc, cur) => acc + (cur.readStatus !== 'Read' ? 1 : 0),\n          0,\n        );\n        return unreadCounts;\n      }, {}),\n  ];\n\n  get isMessagesLoaded() {\n    return this.state.messageStatus === messageStatus.loaded;\n  }\n\n  @proxify\n  async getMessages({\n    currentContact,\n    sessionId = null,\n    fromLocal = false,\n    forceUpdate = false,\n  }) {\n    // No need to calculate recent messages of the same contact repeatly\n    if (!currentContact) {\n      return;\n    }\n    const contactId = currentContact.id;\n    if (\n      !forceUpdate &&\n      !!this.messages[sessionId ? `${contactId}-${sessionId}` : contactId]\n    ) {\n      return;\n    }\n    this._prevMessageStoreTimestamp = this._messageStore.timestamp;\n    this.store.dispatch({\n      type: this.actionTypes.initLoad,\n    });\n    const messages = await this._getRecentMessages(\n      currentContact,\n      this._messageStore.textConversations,\n      fromLocal,\n    );\n    this.store.dispatch({\n      type: this.actionTypes.loadSuccess,\n      messages,\n      contact: currentContact,\n      sessionId,\n    });\n  }\n\n  cleanUpMessages({ contact, sessionId = null }) {\n    this.store.dispatch({\n      type: this.actionTypes.loadReset,\n      contact,\n      sessionId,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  /**\n   * Searching for recent messages of specific contact.\n   * @param {Object} currentContact - Current contact\n   * @param {Array} messages - Messages in messageStore\n   * @param {Boolean} fromLocal - Only get recent messages locally\n   * @param {Number} daySpan - Find messages within certain days\n   * @param {Number} length - Maximum length of recent messages\n   * @return {Array}\n   * @private\n   */\n  async _getRecentMessages(\n    currentContact,\n    conversations = [],\n    fromLocal,\n    daySpan = 60,\n    length = 5,\n  ) {\n    const dateFrom = getDateFrom(daySpan);\n    let recentMessages = this._getLocalRecentMessages(\n      currentContact,\n      conversations,\n      dateFrom,\n      length,\n    );\n\n    // If we could not find enough recent messages,\n    // we need to search for messages on server.\n    if (!fromLocal && recentMessages.length < length) {\n      const dateTo =\n        recentMessages.length > 0\n          ? new Date(recentMessages[recentMessages.length - 1].creationTime)\n          : undefined;\n\n      try {\n        // This will always be sorted\n        recentMessages = recentMessages.concat(\n          await this._fetchRemoteRecentMessages(\n            currentContact,\n            dateFrom.toISOString(),\n            dateTo && dateTo.toISOString(),\n            length,\n          ),\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    recentMessages = this._dedup(recentMessages);\n    return recentMessages.length > length\n      ? recentMessages.slice(0, length)\n      : recentMessages;\n  }\n\n  /**\n   * Get recent messages from messageStore.\n   * @param {Object} currentContact\n   * @param {Array} messages\n   * @param {Date} dateFrom\n   * @param {Number} length\n   */\n  _getLocalRecentMessages({ phoneNumbers }, conversations, dateFrom, length) {\n    // Get all messages related to this contact\n    let recentMessages = [];\n    let matches;\n    for (let i = conversations.length - 1; i >= 0; i -= 1) {\n      const conversation = conversations[i];\n      const messageList =\n        this._messageStore.conversationStore[conversation.conversationId] || [];\n      matches = phoneNumbers.find(this._filterPhoneNumber(conversation));\n      // Check if message is within certain days\n      if (!!matches && new Date(conversation.creationTime) > dateFrom) {\n        recentMessages = recentMessages.concat(messageList);\n      }\n      if (recentMessages.length >= length) break;\n    }\n    return recentMessages.sort(sortByDate).slice(0, length);\n  }\n\n  _filterPhoneNumber(message) {\n    return ({ phoneNumber }) =>\n      phoneNumber === message.from.phoneNumber ||\n      !!message.to.find((to) => to.phoneNumber === phoneNumber) ||\n      phoneNumber === message.from.extensionNumber ||\n      !!message.to.find((to) => to.extensionNumber === phoneNumber);\n  }\n\n  /**\n   * Fetch recent messages from server by given current contact.\n   * @param {Object} currentContact\n   * @param {String} dateFrom\n   * @param {String} dateTo\n   * @param {Number} length The number of messages\n   * @return {Array}\n   */\n  _fetchRemoteRecentMessages(\n    { phoneNumbers },\n    dateFrom,\n    dateTo = new Date().toISOString(),\n    length,\n  ) {\n    const params = {\n      dateTo,\n      dateFrom,\n      messageType: ['SMS', 'Text', 'Pager'],\n      perPage: length,\n    };\n    const recentMessagesPromise = phoneNumbers.reduce(\n      (acc, { phoneNumber }) => {\n        if (phoneNumber) {\n          const promise = this._fetchMessageList({\n            ...params,\n            phoneNumber,\n          });\n          return acc.concat(promise);\n        }\n        return acc;\n      },\n      [],\n    );\n\n    // TODO: Because we need to navigate to the message page,\n    // So we may need to push new messages to messageStore\n    return concurrentExecute(recentMessagesPromise, 5, 500)\n      .then(this._flattenToMessageRecords)\n      .then(this._markAsRemoteMessage)\n      .then((messages) => this._sortMessages(messages));\n  }\n\n  _fetchMessageList(params) {\n    return () => this._client.account().extension().messageStore().list(params);\n  }\n\n  _countUnreadMessages(messages) {\n    return messages.reduce(\n      (acc, cur) => acc + (cur.readStatus !== 'Read' ? 1 : 0),\n      0,\n    );\n  }\n\n  _flattenToMessageRecords(allMessages) {\n    return allMessages.reduce((acc, { records }) => acc.concat(records), []);\n  }\n\n  _sortMessages(recentMessages) {\n    // Sort by time in descending order\n    return recentMessages.sort(\n      (a, b) => new Date(b.creationTime) - new Date(a.creationTime),\n    );\n  }\n\n  _markAsRemoteMessage(messages) {\n    return messages.map((message) => {\n      message.fromRemote = true;\n      return message;\n    });\n  }\n\n  _dedup(messages) {\n    const hash = {};\n    return messages.reduce((acc, cur) => {\n      if (hash[cur.id]) return acc;\n      hash[cur.id] = true;\n      return acc.concat(cur);\n    }, []);\n  }\n}\n"],"file":"index.js"}