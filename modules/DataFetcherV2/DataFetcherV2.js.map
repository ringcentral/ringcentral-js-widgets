{"version":3,"file":"DataFetcherV2.js","names":["_ramda","require","_core","_di","_proxify","_sourceStatus","_dec","_class","_class2","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_initializerDefineProperty","target","property","descriptor","context","Object","defineProperty","enumerable","configurable","writable","initializer","call","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","i","length","_toPropertyKey","_createClass","protoProps","staticProps","prototype","_toPrimitive","_typeof","String","input","hint","prim","Symbol","toPrimitive","res","Number","_get","Reflect","get","bind","receiver","base","_superPropBase","desc","getOwnPropertyDescriptor","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_applyDecoratedDescriptor","decorators","keys","forEach","slice","reverse","reduce","decorator","_initializerWarningHelper","Error","DataFetcherV2","Module","name","deps","dep","optional","_RcModuleV","_super","_this","storageKey","enableCache","_sources","Set","_timeoutIds","Map","_promises","_deps","sleepDetector","on","events","detected","_handleSleepDetected","_shouldInit","auth","loggedIn","_shouldReset","ready","_setFetching","isFetching","getFetching","source","_setData","disableCache","data","timestamp","Date","now","timestamps","storageData","cachedData","cachedTimestamps","updateData","_fetchData2","regeneratorRuntime","mark","_callee","ownerId","wrap","_callee$","_context","prev","next","fetchFunction","sent","polling","_startPolling","t0","timeToRetry","_retry","stop","_fetchData","_x","_clearTimeout","has","clearTimeout","_this2","t","getTimestamp","pollingInterval","set","setTimeout","_checkIsActiveTab","readyCheckFunction","permissionCheckFunction","_expired","fetchData","_this3","_fetchData3","_callee2","_callee2$","_context2","abrupt","_x2","ttl","_shouldFetch","isFreshLogin","tabManager","active","_tryInitializeSource2","_callee3","_callee3$","_context3","getSourceStatus","sourceStatus","pending","_setSourceStatus","initializing","getData","_tryInitializeSource","_x3","status","_processSources","_this4","readyCheck","permissionCheck","cleanOnReset","Array","from","_this5","_getRegisteredKeys","add","_getInvalidCachedKeys","registeredKeys","k","_deleteKeys","_this6","_cleanCache","onInit","onReset","_this7","onStateChange","register","RcModuleV2","state","storage","action","proxify","exports"],"sources":["modules/DataFetcherV2/DataFetcherV2.ts"],"sourcesContent":["import { forEach } from 'ramda';\n\nimport {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\n\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport type { Deps } from './DataFetcherV2.interface';\nimport type { DataSource } from './DataSource';\nimport { sourceStatus } from './sourceStatus';\nimport type { SourceStatusType } from './sourceStatus';\n\n@Module({\n  name: 'DataFetcherV2',\n  deps: [\n    'Auth',\n    'Storage',\n    'SleepDetector',\n    { dep: 'TabManager', optional: true },\n    { dep: 'DataFetcherV2Options', optional: true },\n  ],\n})\nexport class DataFetcherV2 extends RcModuleV2<Deps> {\n  protected _sources = new Set<DataSource<any>>();\n  protected _timeoutIds = new Map<string, NodeJS.Timeout>();\n  protected _promises = new Map<string, Promise<void>>();\n\n  constructor(deps: Deps) {\n    super({\n      storageKey: 'dataFetcherV2',\n      enableCache: true,\n      deps,\n    });\n    this._deps.sleepDetector.on(this._deps.sleepDetector.events.detected, () =>\n      this._handleSleepDetected(),\n    );\n  }\n\n  override _shouldInit() {\n    return this._deps.auth.loggedIn && super._shouldInit();\n  }\n\n  override _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._deps.auth.loggedIn)\n    );\n  }\n\n  @state\n  sourceStatus: Record<string, SourceStatusType> = {};\n\n  get cachedData() {\n    return this.storageData.cachedData;\n  }\n\n  get cachedTimestamps() {\n    return this.storageData.cachedTimestamps;\n  }\n\n  @storage\n  @state\n  storageData: {\n    cachedData: Record<string, any>;\n    cachedTimestamps: Record<string, number>;\n  } = {\n    cachedData: {},\n    cachedTimestamps: {},\n  };\n\n  @state\n  data: Record<string, any> = {};\n\n  @state\n  timestamps: Record<string, number> = {};\n\n  @state\n  isFetching: Record<string, boolean> = {};\n\n  @action\n  protected _setFetching(key: string, isFetching: boolean) {\n    this.isFetching[key] = isFetching;\n  }\n\n  getFetching<T>(source: DataSource<T>) {\n    return !!this.isFetching[source.key];\n  }\n\n  @action\n  protected _setData<T>(\n    key: string,\n    disableCache: boolean,\n    data: T,\n    timestamp = Date.now(),\n  ): void {\n    if (disableCache) {\n      this.data[key] = data;\n      this.timestamps[key] = timestamp;\n    } else {\n      this.storageData.cachedData[key] = data;\n      this.storageData.cachedTimestamps[key] = timestamp;\n    }\n  }\n\n  updateData<T>(source: DataSource<T>, data: T, timestamp: number): void {\n    this._setData(source.key, source.disableCache, data, timestamp);\n  }\n\n  @proxify\n  protected async _fetchData<T>(source: DataSource<T>): Promise<void> {\n    this._setFetching(source.key, true);\n    const { ownerId } = this._deps.auth;\n    try {\n      const data = await source.fetchFunction();\n      if (this._deps.auth.ownerId === ownerId) {\n        this._setData(source.key, source.disableCache, data, Date.now());\n        this._setFetching(source.key, false);\n        if (source.polling) {\n          this._startPolling(source);\n        }\n        this._promises.delete(source.key);\n      }\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      if (this._deps.auth.ownerId === ownerId) {\n        this._promises.delete(source.key);\n        this._setFetching(source.key, false);\n        if (source.polling) {\n          this._startPolling(source, source.timeToRetry);\n        } else {\n          this._retry(source);\n        }\n        throw error;\n      }\n    }\n  }\n\n  protected _clearTimeout<T>(source: DataSource<T>) {\n    if (this._timeoutIds.has(source.key)) {\n      clearTimeout(this._timeoutIds.get(source.key));\n      this._timeoutIds.delete(source.key);\n    }\n  }\n\n  protected _startPolling<T>(\n    source: DataSource<T>,\n    // @ts-expect-error\n    t = this.getTimestamp(source) + source.pollingInterval + 10 - Date.now(),\n  ) {\n    this._clearTimeout(source);\n    this._timeoutIds.set(\n      source.key,\n      setTimeout(() => {\n        this._timeoutIds.delete(source.key);\n        if (\n          this.ready &&\n          this._checkIsActiveTab(source) &&\n          source.readyCheckFunction() &&\n          source.permissionCheckFunction()\n        ) {\n          if (this._expired(source)) {\n            this.fetchData(source);\n          } else {\n            this._startPolling(source);\n          }\n        } else if (!this._expired(source)) {\n          this._startPolling(source);\n        } else {\n          this._startPolling(source, source.timeToRetry);\n        }\n      }, t),\n    );\n  }\n\n  protected _retry<T>(source: DataSource<T>, t = source.timeToRetry) {\n    this._clearTimeout(source);\n    this._timeoutIds.set(\n      source.key,\n      setTimeout(() => {\n        if (this._expired(source)) {\n          if (\n            this.ready &&\n            this._checkIsActiveTab(source) &&\n            source.readyCheckFunction() &&\n            source.permissionCheckFunction()\n          ) {\n            this.fetchData(source);\n          } else {\n            this._retry(source);\n          }\n        }\n      }, t),\n    );\n  }\n\n  @proxify\n  async fetchData(source: DataSource<any>): Promise<void> {\n    if (!this._promises.get(source.key)) {\n      this._promises.set(source.key, this._fetchData(source));\n    }\n    return this._promises.get(source.key);\n  }\n\n  getTimestamp<T>(source: DataSource<T>) {\n    if (source.disableCache) {\n      return this.timestamps[source.key] || null;\n    }\n    return this.cachedTimestamps[source.key] || null;\n  }\n\n  get sources() {\n    return this._sources;\n  }\n\n  protected _expired<T>(source: DataSource<T>) {\n    // @ts-expect-error\n    return Date.now() - this.getTimestamp(source) > source.ttl;\n  }\n\n  protected _shouldFetch<T>(source: DataSource<T>, isFreshLogin = false) {\n    return (\n      this._checkIsActiveTab<T>(source) &&\n      (isFreshLogin || this._expired(source))\n    );\n  }\n\n  private _checkIsActiveTab<T>(source: DataSource<T>) {\n    // if cache is disabled, then each tab should fetch its own data\n    // therefore tabManager should be ignored\n    return (\n      source.disableCache ||\n      !this._deps.tabManager ||\n      this._deps.tabManager.active\n    );\n  }\n\n  protected async _tryInitializeSource<T>(\n    source: DataSource<T>,\n  ): Promise<void> {\n    if (this.getSourceStatus(source) === sourceStatus.pending) {\n      this._setSourceStatus(source.key, sourceStatus.initializing);\n      if (this._shouldFetch(source)) {\n        try {\n          await this.fetchData(source);\n        } catch {\n          this._retry(source);\n        }\n      } else if (source.polling) {\n        this._startPolling(source);\n      } else {\n        this._retry(source);\n      }\n      return;\n    }\n    if (this.getData(source) !== null && this.getTimestamp(source) !== null) {\n      this._setSourceStatus(source.key, sourceStatus.ready);\n    }\n  }\n\n  @action\n  protected _setSourceStatus(key: string, status: SourceStatusType) {\n    this.sourceStatus[key] = status;\n  }\n\n  getSourceStatus<T>(source: DataSource<T>) {\n    return this.sourceStatus[source.key];\n  }\n\n  protected _processSources() {\n    if (this.ready) {\n      forEach((source) => {\n        if (!this.getSourceStatus(source)) {\n          this._setSourceStatus(source.key, sourceStatus.pending);\n        }\n        const status = this.getSourceStatus(source);\n        const readyCheck = this.ready && source.readyCheckFunction();\n        const permissionCheck = readyCheck && source.permissionCheckFunction();\n        if (readyCheck) {\n          if (\n            status === sourceStatus.pending ||\n            status === sourceStatus.initializing\n          ) {\n            // if user has no permission to fetch data, bypass the initialization process\n            if (!permissionCheck) {\n              this._setSourceStatus(source.key, sourceStatus.ready);\n              this._setData(source.key, source.disableCache, null, 0);\n            } else {\n              this._tryInitializeSource(source);\n            }\n          } else if (status === sourceStatus.ready) {\n            if (\n              !permissionCheck &&\n              this.getData(source) !== null &&\n              this.getTimestamp(source) !== null\n            ) {\n              // no permission but has data, set data to null\n              // use 0 for timestamp so we know this is on purpose\n              this._setData(source.key, source.disableCache, null, 0);\n            } else if (\n              permissionCheck &&\n              this.getData(source) === null &&\n              this.getTimestamp(source) === 0 &&\n              !this._promises.get(source.key)\n            ) {\n              // if the data set to null due to permission before\n              // but now there is permission, then fetch data\n              this.fetchData(source);\n            }\n          }\n        } else if (status === sourceStatus.ready) {\n          this._setSourceStatus(source.key, sourceStatus.pending);\n          if (source.cleanOnReset) {\n            // @ts-expect-error\n            this._setData(source.key, source.disableCache, null, null);\n          }\n        }\n      }, Array.from(this._sources));\n    }\n  }\n\n  protected _handleSleepDetected() {\n    forEach((source) => {\n      if (this.ready && this._shouldFetch(source)) {\n        this.fetchData(source);\n      }\n    }, Array.from(this._sources));\n  }\n\n  protected _getRegisteredKeys() {\n    const keys = new Set<string>();\n    this._sources.forEach((source) => {\n      keys.add(source.key);\n    });\n    return keys;\n  }\n\n  protected _getInvalidCachedKeys() {\n    const registeredKeys = this._getRegisteredKeys();\n    const keys = new Set<string>();\n    for (const k in this.cachedData) {\n      if (\n        Object.prototype.hasOwnProperty.call(this.cachedData, k) &&\n        !registeredKeys.has(k)\n      ) {\n        keys.add(k);\n      }\n    }\n    for (const k in this.cachedTimestamps) {\n      if (\n        Object.prototype.hasOwnProperty.call(this.cachedTimestamps, k) &&\n        !registeredKeys.has(k)\n      ) {\n        keys.add(k);\n      }\n    }\n    return keys;\n  }\n\n  @action\n  protected _deleteKeys(keys: Set<string>) {\n    keys.forEach((k) => {\n      delete this.cachedData[k];\n      delete this.cachedTimestamps[k];\n    });\n  }\n\n  protected _cleanCache() {\n    this._deleteKeys(this._getInvalidCachedKeys());\n  }\n\n  override onInit() {\n    // clean up cached sources that are no longer exist\n    this._cleanCache();\n  }\n\n  override onReset() {\n    forEach((source) => {\n      // clear all pollings or retries\n      this._clearTimeout(source);\n      // clear all pending requests\n      this._promises.delete(source.key);\n      // reset isFetching\n      this._setFetching(source.key, false);\n      if (this.getSourceStatus(source) !== sourceStatus.pending) {\n        this._setSourceStatus(source.key, sourceStatus.pending);\n      }\n      if (\n        source.cleanOnReset &&\n        this.getData(source) !== null &&\n        this.getTimestamp(source) !== null\n      ) {\n        // @ts-expect-error\n        this._setData(source.key, source.disableCache, null, null);\n      }\n    }, Array.from(this._sources));\n  }\n\n  override onStateChange() {\n    this._processSources();\n  }\n\n  register<T>(source: DataSource<T>) {\n    this._sources.add(source);\n  }\n\n  getData<T>(source: DataSource<T>): T {\n    if (this._sources.has(source)) {\n      if (source.disableCache) {\n        return this.data[source.key] || null;\n      }\n      return this.cachedData[source.key] || null;\n    }\n    // @ts-expect-error\n    return null;\n  }\n}\n"],"mappings":"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"}