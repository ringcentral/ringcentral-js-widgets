{"version":3,"file":"DataFetcherV2.js","names":["_core","require","_ramda","_di","_proxify","_sourceStatus","_dec","_class","_class2","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_initializerDefineProperty","l","Object","defineProperty","enumerable","configurable","writable","initializer","call","_classCallCheck","TypeError","_defineProperties","length","_toPropertyKey","key","_createClass","prototype","_toPrimitive","_typeof","Symbol","toPrimitive","String","Number","_get","Reflect","get","bind","p","_superPropBase","getOwnPropertyDescriptor","hasOwnProperty","_getPrototypeOf","_inherits","create","constructor","_setPrototypeOf","setPrototypeOf","__proto__","_createSuper","_isNativeReflectConstruct","s","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","keys","forEach","slice","reverse","reduce","_initializerWarningHelper","Error","DataFetcherV2","Module","name","deps","dep","optional","_RcModuleV","_super","_this","storageKey","enableCache","_sources","Set","_timeoutIds","Map","_promises","_handleSleepDetected","source","ready","_shouldFetch","tryFetchData","Array","from","_shouldInit","_deps","auth","loggedIn","_shouldReset","_setFetching","isFetching","getFetching","_setData","disableCache","data","timestamp","undefined","Date","now","timestamps","storageData","cachedData","cachedTimestamps","updateData","_fetchData2","regeneratorRuntime","mark","_callee","ownerId","wrap","_callee$","_context","prev","next","fetchFunction","sent","polling","_startPolling","t0","timeToRetry","_retry","stop","_fetchData","_x","_clearTimeout","has","clearTimeout","_this2","getTimestamp","pollingInterval","set","setTimeout","_checkIsActiveTab","readyCheckFunction","permissionCheckFunction","_expired","_this3","_tryFetchData","_callee2","callerName","_callee2$","_context2","fetchData","console","error","concat","_x2","_x3","_fetchData3","_callee3","_callee3$","_context3","abrupt","_x4","ttl","isFreshLogin","tabManager","active","_tryInitializeSource2","_callee4","_callee4$","_context4","getSourceStatus","sourceStatus","pending","_setSourceStatus","initializing","getData","_tryInitializeSource","_x5","status","_processSources","_this4","readyCheck","permissionCheck","cleanOnReset","_getRegisteredKeys","add","_getInvalidCachedKeys","registeredKeys","k","_deleteKeys","_this5","_cleanCache","onInit","sleepDetector","on","events","detected","onReset","_this6","off","onStateChange","register","RcModuleV2","state","storage","action","proxify","exports"],"sources":["modules/DataFetcherV2/DataFetcherV2.ts"],"sourcesContent":["import {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { forEach } from 'ramda';\n\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\n\nimport type { Deps } from './DataFetcherV2.interface';\nimport type { DataSource } from './DataSource';\nimport { sourceStatus } from './sourceStatus';\nimport type { SourceStatusType } from './sourceStatus';\n\n@Module({\n  name: 'DataFetcherV2',\n  deps: [\n    'Auth',\n    'Storage',\n    'SleepDetector',\n    { dep: 'TabManager', optional: true },\n    { dep: 'DataFetcherV2Options', optional: true },\n  ],\n})\nexport class DataFetcherV2 extends RcModuleV2<Deps> {\n  protected _sources = new Set<DataSource<any>>();\n  protected _timeoutIds = new Map<string, NodeJS.Timeout>();\n  protected _promises = new Map<string, Promise<void>>();\n\n  constructor(deps: Deps) {\n    super({\n      storageKey: 'dataFetcherV2',\n      enableCache: true,\n      deps,\n    });\n  }\n\n  override _shouldInit() {\n    return this._deps.auth.loggedIn && super._shouldInit();\n  }\n\n  override _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._deps.auth.loggedIn)\n    );\n  }\n\n  @state\n  sourceStatus: Record<string, SourceStatusType> = {};\n\n  get cachedData() {\n    return this.storageData.cachedData;\n  }\n\n  get cachedTimestamps() {\n    return this.storageData.cachedTimestamps;\n  }\n\n  @storage\n  @state\n  storageData: {\n    cachedData: Record<string, any>;\n    cachedTimestamps: Record<string, number>;\n  } = {\n    cachedData: {},\n    cachedTimestamps: {},\n  };\n\n  @state\n  data: Record<string, any> = {};\n\n  @state\n  timestamps: Record<string, number> = {};\n\n  @state\n  isFetching: Record<string, boolean> = {};\n\n  @action\n  protected _setFetching(key: string, isFetching: boolean) {\n    this.isFetching[key] = isFetching;\n  }\n\n  getFetching<T>(source: DataSource<T>) {\n    return !!this.isFetching[source.key];\n  }\n\n  @action\n  protected _setData<T>(\n    key: string,\n    disableCache: boolean,\n    data: T,\n    timestamp = Date.now(),\n  ): void {\n    if (disableCache) {\n      this.data[key] = data;\n      this.timestamps[key] = timestamp;\n    } else {\n      this.storageData.cachedData[key] = data;\n      this.storageData.cachedTimestamps[key] = timestamp;\n    }\n  }\n\n  updateData<T>(source: DataSource<T>, data: T, timestamp: number): void {\n    this._setData(source.key, source.disableCache, data, timestamp);\n  }\n\n  @proxify\n  protected async _fetchData<T>(source: DataSource<T>): Promise<void> {\n    this._setFetching(source.key, true);\n    const { ownerId } = this._deps.auth;\n    try {\n      const data = await source.fetchFunction();\n      if (this._deps.auth.ownerId === ownerId) {\n        this._setData(source.key, source.disableCache, data, Date.now());\n        this._setFetching(source.key, false);\n        if (source.polling) {\n          this._startPolling(source);\n        }\n        this._promises.delete(source.key);\n      }\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      if (this._deps.auth.ownerId === ownerId) {\n        this._promises.delete(source.key);\n        this._setFetching(source.key, false);\n        if (source.polling) {\n          this._startPolling(source, source.timeToRetry);\n        } else {\n          this._retry(source);\n        }\n        throw error;\n      }\n    }\n  }\n\n  protected _clearTimeout<T>(source: DataSource<T>) {\n    if (this._timeoutIds.has(source.key)) {\n      clearTimeout(this._timeoutIds.get(source.key));\n      this._timeoutIds.delete(source.key);\n    }\n  }\n\n  protected _startPolling<T>(\n    source: DataSource<T>,\n    // @ts-expect-error TS(2531): Object is possibly 'null'.\n    t = this.getTimestamp(source) + source.pollingInterval + 10 - Date.now(),\n  ) {\n    this._clearTimeout(source);\n    this._timeoutIds.set(\n      source.key,\n      setTimeout(() => {\n        this._timeoutIds.delete(source.key);\n        if (\n          this.ready &&\n          this._checkIsActiveTab(source) &&\n          source.readyCheckFunction() &&\n          source.permissionCheckFunction()\n        ) {\n          if (this._expired(source)) {\n            this.tryFetchData(source, '_startPolling');\n          } else {\n            this._startPolling(source);\n          }\n        } else if (!this._expired(source)) {\n          this._startPolling(source);\n        } else {\n          this._startPolling(source, source.timeToRetry);\n        }\n      }, t),\n    );\n  }\n\n  protected _retry<T>(source: DataSource<T>, t = source.timeToRetry) {\n    this._clearTimeout(source);\n    this._timeoutIds.set(\n      source.key,\n      setTimeout(() => {\n        if (this._expired(source)) {\n          if (\n            this.ready &&\n            this._checkIsActiveTab(source) &&\n            source.readyCheckFunction() &&\n            source.permissionCheckFunction()\n          ) {\n            this.tryFetchData(source, '_retry');\n          } else {\n            this._retry(source);\n          }\n        }\n      }, t),\n    );\n  }\n\n  @proxify\n  async tryFetchData<T>(source: DataSource<T>, callerName: string) {\n    try {\n      await this.fetchData(source);\n    } catch (ex) {\n      console.error(\n        `[DataFetcherV2] > ${callerName} > fetchData`,\n        `source \"${source.key}\"`,\n        ex,\n      );\n    }\n  }\n\n  @proxify\n  async fetchData<T>(source: DataSource<T>): Promise<void> {\n    if (!this._promises.get(source.key)) {\n      this._promises.set(source.key, this._fetchData(source));\n    }\n    return this._promises.get(source.key);\n  }\n\n  getTimestamp<T>(source: DataSource<T>) {\n    if (source.disableCache) {\n      return this.timestamps[source.key] || null;\n    }\n    return this.cachedTimestamps[source.key] || null;\n  }\n\n  get sources() {\n    return this._sources;\n  }\n\n  protected _expired<T>(source: DataSource<T>) {\n    // @ts-expect-error TS(2531): Object is possibly 'null'.\n    return Date.now() - this.getTimestamp(source) > source.ttl;\n  }\n\n  protected _shouldFetch<T>(source: DataSource<T>, isFreshLogin = false) {\n    return (\n      this._checkIsActiveTab<T>(source) &&\n      (isFreshLogin || this._expired(source))\n    );\n  }\n\n  private _checkIsActiveTab<T>(source: DataSource<T>) {\n    // if cache is disabled, then each tab should fetch its own data\n    // therefore tabManager should be ignored\n    return (\n      source.disableCache ||\n      !this._deps.tabManager ||\n      this._deps.tabManager.active\n    );\n  }\n\n  protected async _tryInitializeSource<T>(\n    source: DataSource<T>,\n  ): Promise<void> {\n    if (this.getSourceStatus(source) === sourceStatus.pending) {\n      this._setSourceStatus(source.key, sourceStatus.initializing);\n      if (this._shouldFetch(source)) {\n        try {\n          await this.fetchData(source);\n        } catch {\n          this._retry(source);\n        }\n      } else if (source.polling) {\n        this._startPolling(source);\n      } else {\n        this._retry(source);\n      }\n      return;\n    }\n    if (this.getData(source) !== null && this.getTimestamp(source) !== null) {\n      this._setSourceStatus(source.key, sourceStatus.ready);\n    }\n  }\n\n  @action\n  protected _setSourceStatus(key: string, status: SourceStatusType) {\n    this.sourceStatus[key] = status;\n  }\n\n  getSourceStatus<T>(source: DataSource<T>) {\n    return this.sourceStatus[source.key];\n  }\n\n  protected _processSources() {\n    if (this.ready) {\n      forEach((source) => {\n        if (!this.getSourceStatus(source)) {\n          this._setSourceStatus(source.key, sourceStatus.pending);\n        }\n        const status = this.getSourceStatus(source);\n        const readyCheck = this.ready && source.readyCheckFunction();\n        const permissionCheck = readyCheck && source.permissionCheckFunction();\n        if (readyCheck) {\n          if (\n            status === sourceStatus.pending ||\n            status === sourceStatus.initializing\n          ) {\n            // if user has no permission to fetch data, bypass the initialization process\n            if (!permissionCheck) {\n              this._setSourceStatus(source.key, sourceStatus.ready);\n              this._setData(source.key, source.disableCache, null, 0);\n            } else {\n              this._tryInitializeSource(source);\n            }\n          } else if (status === sourceStatus.ready) {\n            if (\n              !permissionCheck &&\n              this.getData(source) !== null &&\n              this.getTimestamp(source) !== null\n            ) {\n              // no permission but has data, set data to null\n              // use 0 for timestamp so we know this is on purpose\n              this._setData(source.key, source.disableCache, null, 0);\n            } else if (\n              permissionCheck &&\n              this.getData(source) === null &&\n              this.getTimestamp(source) === 0 &&\n              !this._promises.get(source.key)\n            ) {\n              // if the data set to null due to permission before\n              // but now there is permission, then fetch data\n              this.tryFetchData(source, '_processSources');\n            }\n          }\n        } else if (status === sourceStatus.ready) {\n          this._setSourceStatus(source.key, sourceStatus.pending);\n          if (source.cleanOnReset) {\n            // @ts-expect-error TS(2345): Argument of type 'null' is not assignable to param... Remove this comment to see the full error message\n            this._setData(source.key, source.disableCache, null, null);\n          }\n        }\n      }, Array.from(this._sources));\n    }\n  }\n\n  protected _handleSleepDetected = () => {\n    forEach((source) => {\n      if (this.ready && this._shouldFetch(source)) {\n        this.tryFetchData(source, '_handleSleepDetected');\n      }\n    }, Array.from(this._sources));\n  };\n\n  protected _getRegisteredKeys() {\n    const keys = new Set<string>();\n    this._sources.forEach((source) => {\n      keys.add(source.key);\n    });\n    return keys;\n  }\n\n  protected _getInvalidCachedKeys() {\n    const registeredKeys = this._getRegisteredKeys();\n    const keys = new Set<string>();\n    for (const k in this.cachedData) {\n      if (\n        Object.prototype.hasOwnProperty.call(this.cachedData, k) &&\n        !registeredKeys.has(k)\n      ) {\n        keys.add(k);\n      }\n    }\n    for (const k in this.cachedTimestamps) {\n      if (\n        Object.prototype.hasOwnProperty.call(this.cachedTimestamps, k) &&\n        !registeredKeys.has(k)\n      ) {\n        keys.add(k);\n      }\n    }\n    return keys;\n  }\n\n  @action\n  protected _deleteKeys(keys: Set<string>) {\n    keys.forEach((k) => {\n      delete this.cachedData[k];\n      delete this.cachedTimestamps[k];\n    });\n  }\n\n  protected _cleanCache() {\n    this._deleteKeys(this._getInvalidCachedKeys());\n  }\n\n  override onInit() {\n    this._deps.sleepDetector.on(\n      this._deps.sleepDetector.events.detected,\n      this._handleSleepDetected,\n    );\n    // clean up cached sources that are no longer exist\n    this._cleanCache();\n  }\n\n  override onReset() {\n    this._deps.sleepDetector.off(\n      this._deps.sleepDetector.events.detected,\n      this._handleSleepDetected,\n    );\n    forEach((source) => {\n      // clear all pollings or retries\n      this._clearTimeout(source);\n      // clear all pending requests\n      this._promises.delete(source.key);\n      // reset isFetching\n      this._setFetching(source.key, false);\n      if (this.getSourceStatus(source) !== sourceStatus.pending) {\n        this._setSourceStatus(source.key, sourceStatus.pending);\n      }\n      if (\n        source.cleanOnReset &&\n        this.getData(source) !== null &&\n        this.getTimestamp(source) !== null\n      ) {\n        // @ts-expect-error TS(2345): Argument of type 'null' is not assignable to param... Remove this comment to see the full error message\n        this._setData(source.key, source.disableCache, null, null);\n      }\n    }, Array.from(this._sources));\n  }\n\n  override onStateChange() {\n    this._processSources();\n  }\n\n  register<T>(source: DataSource<T>) {\n    this._sources.add(source);\n  }\n\n  getData<T>(source: DataSource<T>): T {\n    if (this._sources.has(source)) {\n      if (source.disableCache) {\n        return this.data[source.key] || null;\n      }\n      return this.cachedData[source.key] || null;\n    }\n    // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'T'.\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]}