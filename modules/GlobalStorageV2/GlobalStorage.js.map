{"version":3,"sources":["modules/GlobalStorageV2/GlobalStorage.ts"],"names":["GlobalStorage","name","deps","dep","optional","StorageProvider","globalStorageOptions","_storage","_storageHandler","storedData","ready","currentData","data","key","setItem","storageKey","prefix","_StorageProvider","getData","_storageReducers","removeItem","setData","Object","prototype","hasOwnProperty","call","value","syncData","on","StorageBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOaA,a,WAJZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,eADA;AAENC,EAAAA,IAAI,EAAE,CAAC;AAAEC,IAAAA,GAAG,EAAE,sBAAP;AAA+BC,IAAAA,QAAQ,EAAE;AAAzC,GAAD;AAFA,CAAP,C;;;;;AAcC,yBAAYF,IAAZ,EAAwB;AAAA;;AAAA;;AAAA;;AACtB,8BAAMA,IAAN,EAAY;AACVD,MAAAA,IAAI,EAAE,eADI;AAEVI,MAAAA,eAAe,2BAAEH,IAAI,CAACI,oBAAP,0DAAE,sBAA2BD;AAFlC,KAAZ;AADsB,UATdE,QASc;AAAA,UARdC,eAQc,GAFX,IAEW;AAAA,UAOxBC,UAPwB,GAOU,EAPV;AAAA;AAKvB;;;;oCAIe;AACd,UAAI,KAAKC,KAAT,EAAgB;AACd,YAAMC,WAAW,GAAG,KAAKC,IAAzB,CADc,CAEd;;AACA,aAAK,IAAMC,GAAX,IAAkBF,WAAlB,EAA+B;AAC7B,cAAI,KAAKF,UAAL,CAAgBI,GAAhB,MAAyBF,WAAW,CAACE,GAAD,CAAxC,EAA+C;AAC7C,iBAAKN,QAAL,CAAcO,OAAd,CAAsBD,GAAtB,EAA2BF,WAAW,CAACE,GAAD,CAAtC;;AACA,iBAAKJ,UAAL,CAAgBI,GAAhB,IAAuBF,WAAW,CAACE,GAAD,CAAlC;AACD;AACF;AACF;AACF;;;;;;;;;;;AAGOE,gBAAAA,U,aAAgB,KAAKC,MAAL,aAAiB,KAAKA,MAAtB,SAAkC,E;AACxD,qBAAKT,QAAL,GAAgB,IAAI,KAAKU,gBAAT,CAA0B;AACxCF,kBAAAA,UAAU,EAAVA;AADwC,iBAA1B,CAAhB;;uBAGwB,KAAKR,QAAL,CAAcW,OAAd,E;;;AAAxB,qBAAKT,U;sDACa,KAAKA,U;;;;;;;;AAAZI,gBAAAA,G;;oBACJ,KAAKM,gBAAL,CAAsBN,GAAtB,C;;;;;AACH,uBAAO,KAAKJ,UAAL,CAAgBI,GAAhB,CAAP;;uBACM,KAAKN,QAAL,CAAca,UAAd,CAAyBP,GAAzB,C;;;;;;;AAGV,qBAAKQ,OAAL,iCACK,KAAKT,IADV,GAEK,KAAKH,UAFV;AAIME,gBAAAA,W,GAAc,KAAKC,I;;AACzB,qBAAWC,IAAX,IAAkBF,WAAlB,EAA+B;AAC7B,sBAAI,CAACW,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAKhB,UAA1C,EAAsDI,IAAtD,CAAL,EAAiE;AAC/D,yBAAKN,QAAL,CAAcO,OAAd,CAAsBD,IAAtB,EAA2BF,WAAW,CAACE,IAAD,CAAtC;AACD;AACF;;;;;;;;;;;;;;;;;;oCAGa;AAAA;;AACd,WAAKL,eAAL,GAAuB,gBAAoB;AAAA,YAAjBK,GAAiB,QAAjBA,GAAiB;AAAA,YAAZa,KAAY,QAAZA,KAAY;;AACzC,YAAI,MAAI,CAAChB,KAAT,EAAgB;AACd,UAAA,MAAI,CAACD,UAAL,CAAgBI,GAAhB,IAAuBa,KAAvB;;AACA,UAAA,MAAI,CAACC,QAAL,CAAcd,GAAd,EAAmBa,KAAnB;AACD;AACF,OALD;;AAMA,WAAKnB,QAAL,CAAcqB,EAAd,CAAiB,SAAjB,EAA4B,KAAKpB,eAAjC;AACD;;;;EAhEgCqB,yB","sourcesContent":["import { Module } from '../../lib/di';\nimport { IStorage, StorageBase } from '../../lib/StorageBaseV2';\nimport { Deps } from './GlobalStorage.interface';\n\n@Module({\n  name: 'GlobalStorage',\n  deps: [{ dep: 'GlobalStorageOptions', optional: true }],\n})\nexport class GlobalStorage extends StorageBase<Deps> {\n  protected _storage: IStorage;\n  protected _storageHandler: ({\n    key,\n    value,\n  }: {\n    key: string;\n    value: unknown;\n  }) => void = null;\n\n  constructor(deps: Deps) {\n    super(deps, {\n      name: 'globalStorage',\n      StorageProvider: deps.globalStorageOptions?.StorageProvider,\n    });\n  }\n\n  storedData: Record<string, any> = {};\n\n  onStateChange() {\n    if (this.ready) {\n      const currentData = this.data;\n      // save new data to storage when changed\n      for (const key in currentData) {\n        if (this.storedData[key] !== currentData[key]) {\n          this._storage.setItem(key, currentData[key]);\n          this.storedData[key] = currentData[key];\n        }\n      }\n    }\n  }\n\n  async onInit() {\n    const storageKey = `${this.prefix ? `${this.prefix}-` : ''}GlobalStorage`;\n    this._storage = new this._StorageProvider({\n      storageKey,\n    });\n    this.storedData = await this._storage.getData();\n    for (const key in this.storedData) {\n      if (!this._storageReducers[key]) {\n        delete this.storedData[key];\n        await this._storage.removeItem(key);\n      }\n    }\n    this.setData({\n      ...this.data,\n      ...this.storedData,\n    });\n    const currentData = this.data;\n    for (const key in currentData) {\n      if (!Object.prototype.hasOwnProperty.call(this.storedData, key)) {\n        this._storage.setItem(key, currentData[key]);\n      }\n    }\n  }\n\n  onInitSuccess() {\n    this._storageHandler = ({ key, value }) => {\n      if (this.ready) {\n        this.storedData[key] = value;\n        this.syncData(key, value);\n      }\n    };\n    this._storage.on('storage', this._storageHandler);\n  }\n}\n"],"file":"GlobalStorage.js"}