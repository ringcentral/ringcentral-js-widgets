{"version":3,"file":"MediaRecorderHelper.js","names":["_const","require","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","a","n","TypeError","_defineProperties","e","r","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","i","_toPrimitive","toPrimitive","call","String","Number","MediaRecorderHelper","_this","recordingTimer","mediaRecorder","recordedMedia","recordedChunks","recordingTime","recordingCompleteCallback","updateRecordingTimeCallback","onRecordingComplete","_this$recordingComple","cleanupRecording","blob","Blob","type","MEDIA_TYPE","URL","createObjectURL","value","setRecordingTime","_this$updateRecording","setUpdateRecordingTimeCallback","callback","setRecordingCompleteCallback","startRecording","stream","_this2","MediaRecorder","mimeType","ondataavailable","push","data","onstop","recordingStarted","Date","now","start","setInterval","MAX_RECORDING_TIME","stopRecording","state","stop","error","console","clearInterval","revokeObjectURL","get","Math","ceil","exports"],"sources":["modules/VolumeInspector/MediaRecorderHelper.ts"],"sourcesContent":["import { MAX_RECORDING_TIME, MEDIA_TYPE } from './const';\n\nexport class MediaRecorderHelper {\n  private recordingTimer: ReturnType<typeof setTimeout> | null = null;\n  private mediaRecorder: MediaRecorder | null = null;\n  private recordedMedia: string | null = null;\n  private recordedChunks: Blob[] = [];\n  private recordingTime = 0;\n  private recordingCompleteCallback:\n    | ((src: string, recordingTime: number) => void)\n    | null = null;\n  private updateRecordingTimeCallback:\n    | ((recordingTime: number) => void)\n    | null = null;\n  get countDown() {\n    return Math.ceil((MAX_RECORDING_TIME - this.recordingTime) / 1000);\n  }\n\n  setRecordingTime(recordingTime: number) {\n    this.recordingTime = recordingTime;\n    this.updateRecordingTimeCallback?.(recordingTime);\n  }\n\n  setUpdateRecordingTimeCallback(callback: any) {\n    this.updateRecordingTimeCallback = callback;\n  }\n\n  setRecordingCompleteCallback(callback: any) {\n    this.recordingCompleteCallback = callback;\n  }\n\n  startRecording(stream: MediaStream) {\n    this.cleanupRecording();\n    this.recordedChunks = [];\n    this.mediaRecorder = new MediaRecorder(stream, { mimeType: MEDIA_TYPE });\n    this.mediaRecorder.ondataavailable = (e) => {\n      this.recordedChunks.push(e.data);\n    };\n    this.mediaRecorder.onstop = this.onRecordingComplete;\n    const recordingStarted = Date.now();\n    this.mediaRecorder.start();\n    this.recordingTimer = setInterval(() => {\n      const recordingTime = Date.now() - recordingStarted;\n      this.setRecordingTime(recordingTime);\n      if (recordingTime >= MAX_RECORDING_TIME) {\n        this.stopRecording();\n      }\n    }, 1000);\n  }\n\n  stopRecording() {\n    if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n      try {\n        this.mediaRecorder.stop();\n      } catch (error) {\n        console.error('Recording stop failed', error);\n        this.cleanupRecording();\n        throw error;\n      }\n    }\n  }\n\n  private cleanupRecording() {\n    if (this.recordingTimer) {\n      clearInterval(this.recordingTimer);\n      this.recordingTimer = null;\n    }\n    if (this.recordedMedia) {\n      URL.revokeObjectURL(this.recordedMedia);\n    }\n    this.setRecordingTime(0);\n  }\n\n  private readonly onRecordingComplete = () => {\n    const recordingTime = this.recordingTime;\n    this.cleanupRecording();\n    const blob = new Blob(this.recordedChunks, { type: MEDIA_TYPE });\n    this.recordedMedia = URL.createObjectURL(blob);\n    this.recordingCompleteCallback?.(this.recordedMedia, recordingTime);\n  };\n}\n"],"mappings":"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","ignoreList":[]}