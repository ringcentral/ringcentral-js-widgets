{"version":3,"file":"RTCAudioMeter.js","names":["LOG_TAG","kFftSize","kMinDecibels","kMaxDecibels","kSmoothingTimeConstant","RTCAudioMeter","_createClass","key","value","_prepareAudioContext","_audioCtx","AudioCtxConstr","window","AudioContext","webkitAudioContext","console","info","_classCallCheck","_source","_analyser","_data","_initialize","_this","warn","isDuplicateAudioMeter","_audioMeters","find","item","push","concat","length","createAnalyser","fftSize","minDecibels","maxDecibels","smoothingTimeConstant","Uint8Array","frequencyBinCount","byteLength","e","message","_updateInputStream","_asyncToGenerator","regeneratorRuntime","mark","_callee","input","_RTCAudioMeter$_audio","wrap","_callee$","_context","prev","next","abrupt","Promise","reject","Error","disconnect","state","resume","HTMLMediaElement","createMediaElementSource","createMediaStreamSource","connect","t0","resolve","stop","updateInputStream","_x","apply","arguments","getMicLevel","_RTCAudioMeter$_audio2","_this$_analyser$getBy","_this$_analyser","getByteFrequencyData","call","audioEnergy","i","audioEnergyFloat","exports"],"sources":["modules/VolumeInspector/RTCAudioMeter.ts"],"sourcesContent":["const LOG_TAG = 'RTCAudioMeter';\nconst kFftSize = 32;\nconst kMinDecibels = -90;\nconst kMaxDecibels = -30;\nconst kSmoothingTimeConstant = 0.0;\n\nexport class RTCAudioMeter {\n  private static _audioCtx: AudioContext | null;\n  private _source:\n    | MediaStreamAudioSourceNode\n    | MediaElementAudioSourceNode\n    | undefined;\n  private _analyser: AnalyserNode | undefined;\n  private _data: Uint8Array | undefined;\n  private static _audioMeters: RTCAudioMeter[] = [];\n\n  private static _prepareAudioContext(): void {\n    if (!RTCAudioMeter._audioCtx) {\n      // @ts-expect-error\n      const AudioCtxConstr = window.AudioContext || window.webkitAudioContext;\n      RTCAudioMeter._audioCtx = new AudioCtxConstr();\n      console.info(LOG_TAG, `prepare audio context success`);\n    }\n  }\n\n  constructor() {\n    this._initialize();\n  }\n\n  private _initialize(): void {\n    try {\n      RTCAudioMeter._prepareAudioContext();\n      if (!RTCAudioMeter._audioCtx) {\n        console.warn(LOG_TAG, `initialize fail because audio context is null`);\n        return;\n      }\n      const isDuplicateAudioMeter = RTCAudioMeter._audioMeters.find(\n        (item: any) => item === this,\n      );\n      if (!isDuplicateAudioMeter) {\n        RTCAudioMeter._audioMeters.push(this);\n        console.info(\n          LOG_TAG,\n          `Add user, length: ${RTCAudioMeter._audioMeters.length}`,\n        );\n      }\n      this._analyser = RTCAudioMeter._audioCtx.createAnalyser();\n      this._analyser.fftSize = kFftSize;\n      this._analyser.minDecibels = kMinDecibels;\n      this._analyser.maxDecibels = kMaxDecibels;\n      this._analyser.smoothingTimeConstant = kSmoothingTimeConstant;\n      this._data = new Uint8Array(this._analyser.frequencyBinCount);\n      console.info(\n        LOG_TAG,\n        `data length is ${this._data.length} ${this._data.byteLength}`,\n      );\n    } catch (e) {\n      console.warn(LOG_TAG, `initialize error: ${(e as Error).message}`);\n    }\n  }\n\n  async updateInputStream(\n    input: MediaStream | HTMLMediaElement,\n  ): Promise<void> {\n    console.info(LOG_TAG, `update input stream`);\n    if (!RTCAudioMeter._audioCtx || !this._analyser) {\n      console.info(LOG_TAG, 'There is no audioContext or audioNode');\n      return Promise.reject(new Error('There is no audioContext or audioNode'));\n    }\n    if (this._source) {\n      console.info(LOG_TAG, 'There is an old audio source, disconnect');\n      this._source.disconnect();\n      delete this._source;\n    }\n    try {\n      if (RTCAudioMeter._audioCtx.state === 'suspended') {\n        console.info(LOG_TAG, `Try to activate audioContext`);\n        await RTCAudioMeter._audioCtx?.resume();\n      }\n      this._source =\n        input instanceof HTMLMediaElement\n          ? RTCAudioMeter._audioCtx.createMediaElementSource(input)\n          : RTCAudioMeter._audioCtx.createMediaStreamSource(input);\n      this._source.connect(this._analyser);\n    } catch (e) {\n      console.warn(\n        LOG_TAG,\n        `update media stream error: ${(e as Error).message}`,\n      );\n      return Promise.reject(e);\n    }\n    return Promise.resolve();\n  }\n\n  getMicLevel(): number {\n    try {\n      if (\n        !this._source ||\n        !this._analyser ||\n        !this._data ||\n        !RTCAudioMeter._audioCtx ||\n        RTCAudioMeter._audioCtx?.state !== 'running'\n      ) {\n        return 0;\n      }\n      this._analyser.getByteFrequencyData?.(this._data);\n      let audioEnergy = 0;\n      for (let i = 0; i < this._data.length / 2; i++) {\n        audioEnergy += this._data[i];\n      }\n      const audioEnergyFloat = audioEnergy / ((255 * this._data.length) / 2);\n      return audioEnergyFloat;\n    } catch (e) {\n      console.warn(LOG_TAG, `get mic Level error: ${(e as Error).message}`);\n      return 0;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}