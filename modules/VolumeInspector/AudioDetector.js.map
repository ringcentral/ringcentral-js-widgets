{"version":3,"file":"AudioDetector.js","names":["_DetectorListener","require","_RTCAudioMeter","_typeof","o","Symbol","iterator","constructor","prototype","asyncGeneratorStep","n","t","e","r","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","TypeError","_defineProperties","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","_toPrimitive","toPrimitive","call","String","Number","AudioDetector","_this","_audioMeter","RTCAudioMeter","_listeners","_audioInput","_startListenCallback","intervalId","push","_disposeListenCallback","idx","indexOf","splice","_connect","regeneratorRuntime","mark","_callee","input","wrap","_callee$","_context","prev","next","console","warn","abrupt","disconnect","updateInputStream","t0","error","message","stop","connect","_x","registerListener","dataCallback","DetectorListener","_genListenerHandle","forEach","clearInterval","_this2","volumeLevel","getMicLevel","exports"],"sources":["modules/VolumeInspector/AudioDetector.ts"],"sourcesContent":["import { DetectorListener } from './DetectorListener';\nimport { RTCAudioMeter } from './RTCAudioMeter';\n\nexport class AudioDetector {\n  private _audioMeter = new RTCAudioMeter();\n  private _listeners: Array<number> = [];\n  private _audioInput?: MediaStream | HTMLMediaElement;\n\n  /**\n   * connect to audio MediaStream or HTMLMediaElement for detecting\n   * @param input MediaStream | HTMLMediaElement\n   */\n  public async connect(input: MediaStream | HTMLMediaElement) {\n    if (!input || this._audioInput === input) {\n      console.warn('The same audio input has connected.');\n      return;\n    }\n    // disconnect an old audio input if exists.\n    this.disconnect();\n    console.warn('Connect to the new media input.');\n    try {\n      await this._audioMeter.updateInputStream(input);\n    } catch (e) {\n      console.error('update input stream error, msg:', (e as Error).message);\n      return;\n    }\n    this._audioInput = input;\n  }\n\n  /**\n   * Add a new listener for the specified audioSource,\n   * The listener will call dataCallback(volume) cyclically after it calls start().\n   * The volume will be a number from [0,1].\n   * @param dataCallback (volume: number) => {}\n   * @return DetectorListener |\n   */\n  public registerListener(dataCallback: (volume: number) => void) {\n    return new DetectorListener(\n      this._startListenCallback,\n      this._genListenerHandle(dataCallback),\n      this._disposeListenCallback,\n    );\n  }\n\n  /**\n   * disconnect to the audioSource, and clear all listeners.\n   */\n  public disconnect(): void {\n    if (this._listeners.length > 0) {\n      this._listeners.forEach(clearInterval);\n      this._listeners = [];\n    }\n    if (this._audioInput) {\n      delete this._audioInput;\n    }\n  }\n\n  // manager listener for starting listening\n  private _startListenCallback = (intervalId: number) => {\n    this._listeners.push(intervalId);\n  };\n\n  // generate a listener handle by dataCallback\n  private _genListenerHandle(dataCallback: (volume: number) => void) {\n    return () => {\n      let volumeLevel: number;\n      try {\n        volumeLevel = this._audioMeter.getMicLevel();\n      } catch (e) {\n        console.warn('getVolume Error, return volume = 0, err:', e);\n        volumeLevel = 0;\n      }\n      dataCallback(volumeLevel);\n    };\n  }\n\n  // disposer listener by intervalId\n  private _disposeListenCallback = (intervalId: number) => {\n    const idx = this._listeners.indexOf(intervalId);\n    if (idx >= 0) {\n      this._listeners.splice(idx, 1);\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}