{"version":3,"sources":["modules/CallLogUI/CallLogUI.tsx"],"names":["CallLogCallControlRenderer","currentLocale","telephonySessionId","isWide","isCurrentDeviceCall","CallLogUIBase","name","deps","dep","optional","options","_deps","locale","callLogger","rateLimiter","regionSettings","dateTimeFormat","callLogSection","routerInteraction","activeCallControl","appFeatures","connectivityMonitor","callingSettings","forwardingNumber","currentNotificationIdentify","currentIdentify","isInTransferPage","currentPath","match","header","showSpinner","ready","disableLinks","connectivity","throttling","currentSession","getActiveSession","sessionIdToTelephonySessionIdMapping","activeSession","isWebRTC","callWith","callingOptions","browser","forwardingNumbers","formatPhone","phoneNumber","areaCode","countryCode","i18n","getString","goBack","closeLogSection","closeLogNotification","renderCallLogCallControl","onSaveNotification","saveAndHandleNotification","onDiscardNotification","discardAndHandleNotification","onCloseNotification","onExpandNotification","expandLogNotification","onReject","sessionId","reject","onHangup","hangUp","onIgnore","ignore","onForward","push","forward","endAndAnswer","answerAndEnd","holdAndAnswer","answerAndHold","toVoicemail","answer","clickForwardTrack","RcUIModuleV2","CallLogUI"],"mappings":"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","sourcesContent":["import { RcModuleOptions, RcUIModuleV2 } from '@ringcentral-integration/core';\nimport React from 'react';\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport formatNumber from '@ringcentral-integration/commons/lib/formatNumber';\nimport { callingOptions } from '@ringcentral-integration/commons/modules/CallingSettingsV2/callingOptions';\nimport { CallLogCallCtrlContainer } from '../../containers/CallLogCallCtrlContainer';\nimport {\n  CallLogUIFunctions,\n  CallLogUIInterface,\n  CallLogUIProps,\n  Deps,\n} from './CallLogUI.interface';\nimport i18n from './i18n';\n\nconst CallLogCallControlRenderer = (\n  currentLocale: string,\n  telephonySessionId: string,\n  isWide: boolean,\n  isCurrentDeviceCall: boolean,\n) => (\n  <CallLogCallCtrlContainer\n    currentLocale={currentLocale}\n    telephonySessionId={telephonySessionId}\n    isCurrentDeviceCall={isCurrentDeviceCall}\n    isWide={isWide}\n  />\n);\n\n@Module({\n  name: 'CallLogUI',\n  deps: [\n    'Locale',\n    'CallLogger',\n    'RateLimiter',\n    'RegionSettings',\n    'DateTimeFormat',\n    'CallLogSection',\n    'RouterInteraction',\n    'ActiveCallControl',\n    'AppFeatures',\n    'ConnectivityMonitor',\n    'CallingSettings',\n    'ForwardingNumber',\n    { dep: 'CallLogUIOptions', optional: true },\n  ],\n})\nexport abstract class CallLogUIBase<T extends Deps = Deps>\n  extends RcUIModuleV2<Deps & T>\n  implements CallLogUIInterface {\n  constructor({ deps, ...options }: RcModuleOptions<Deps & T>) {\n    super({\n      deps,\n      ...options,\n    });\n  }\n\n  getUIProps(): CallLogUIProps {\n    const {\n      locale,\n      callLogger,\n      rateLimiter,\n      regionSettings,\n      dateTimeFormat,\n      callLogSection,\n      routerInteraction,\n      activeCallControl,\n      appFeatures,\n      connectivityMonitor,\n      callingSettings,\n      forwardingNumber,\n    } = this._deps;\n    const { currentNotificationIdentify, currentIdentify } = callLogSection;\n    const isInTransferPage =\n      routerInteraction.currentPath.match('^/transfer/') !== null;\n\n    return {\n      currentLocale: locale.currentLocale,\n      header: true,\n      showSpinner: !(\n        locale.ready &&\n        regionSettings.ready &&\n        dateTimeFormat.ready &&\n        appFeatures.ready &&\n        (!callLogger || callLogger.ready)\n      ),\n      isInTransferPage,\n      disableLinks: !connectivityMonitor.connectivity || rateLimiter.throttling,\n      currentIdentify,\n      // notification props\n      currentNotificationIdentify,\n      currentSession: activeCallControl.getActiveSession(\n        activeCallControl.sessionIdToTelephonySessionIdMapping[\n          currentNotificationIdentify\n        ],\n      ),\n      activeSession: activeCallControl.activeSession,\n      isWebRTC: callingSettings.callWith === callingOptions.browser,\n      forwardingNumbers: forwardingNumber.forwardingNumbers,\n    };\n  }\n\n  getUIFunctions(): CallLogUIFunctions {\n    const {\n      regionSettings,\n      callLogSection,\n      locale,\n      activeCallControl,\n      routerInteraction,\n    } = this._deps;\n    return {\n      formatPhone: (phoneNumber: string) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: regionSettings.areaCode,\n          countryCode: regionSettings.countryCode,\n        }) || i18n.getString('unknown', locale.currentLocale),\n      goBack: () => {\n        callLogSection.closeLogSection();\n        callLogSection.closeLogNotification();\n      },\n      renderCallLogCallControl: (\n        telephonySessionId,\n        isWide,\n        isCurrentDeviceCall,\n      ) =>\n        CallLogCallControlRenderer(\n          locale.currentLocale,\n          telephonySessionId,\n          isWide,\n          isCurrentDeviceCall,\n        ),\n      // notification props\n      onSaveNotification: () => callLogSection.saveAndHandleNotification(),\n      onDiscardNotification: () =>\n        callLogSection.discardAndHandleNotification(),\n      onCloseNotification: () => callLogSection.closeLogNotification(),\n      onExpandNotification: () => callLogSection.expandLogNotification(),\n      onReject(sessionId) {\n        const telephonySessionId =\n          activeCallControl.sessionIdToTelephonySessionIdMapping[sessionId];\n        return activeCallControl.reject(telephonySessionId);\n      },\n      onHangup(sessionId) {\n        const telephonySessionId =\n          activeCallControl.sessionIdToTelephonySessionIdMapping[sessionId];\n        return activeCallControl.hangUp(telephonySessionId);\n      },\n      onIgnore: (telephonySessionId: string) => {\n        activeCallControl.ignore?.(telephonySessionId);\n        callLogSection.closeLogNotification();\n      },\n      onForward: (phoneNumber: string, telephonySessionId: string) => {\n        if (phoneNumber === 'custom') {\n          routerInteraction.push(`/forward/${telephonySessionId}`);\n        } else {\n          activeCallControl.forward?.(phoneNumber, telephonySessionId);\n          callLogSection.closeLogNotification();\n        }\n      },\n      endAndAnswer: (telephonySessionId: string) => {\n        activeCallControl.answerAndEnd?.(telephonySessionId);\n        callLogSection.discardAndHandleNotification();\n      },\n      holdAndAnswer: (telephonySessionId: string) => {\n        activeCallControl.answerAndHold?.(telephonySessionId);\n        callLogSection.discardAndHandleNotification();\n      },\n      toVoicemail: (telephonySessionId: string) => {\n        activeCallControl.reject(telephonySessionId);\n        callLogSection.closeLogNotification();\n      },\n      answer: (telephonySessionId: string) => {\n        activeCallControl.answer?.(telephonySessionId);\n        callLogSection.discardAndHandleNotification();\n      },\n      clickForwardTrack: () => activeCallControl.clickForwardTrack?.(),\n    };\n  }\n}\n\n@Module()\nexport class CallLogUI extends CallLogUIBase {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n}\n"],"file":"CallLogUI.js"}