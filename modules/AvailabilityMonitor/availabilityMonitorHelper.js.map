{"version":3,"file":"availabilityMonitorHelper.js","names":["_ramda","require","_availabilityStatus","_highAvailabilityAPI","_createForOfIteratorHelper","r","e","t","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","o","a","u","call","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","TMP_HA_ERROR_CODE","exports","HA_ERROR_CODE","HA_ERROR_STATUS","extractUrl","_ref","_url$match","url","filteredUrl","match","splitUrl","split","isHAError","error","status","pathOr","errors","errorCodeIn","_iterator","_step","err","validHAError","resErrorCode","generateRandomNumber","max","arguments","undefined","min","Math","random","getAvailabilityLevel","path","method","_iterator2","highAvailabilityAPI","_step2","api","reg","isHAEnabledAPI","_ref2","condition","console","concat","availability","HIGH"],"sources":["modules/AvailabilityMonitor/availabilityMonitorHelper.ts"],"sourcesContent":["import type { ApiError } from '@ringcentral/sdk';\nimport { pathOr } from 'ramda';\n\nimport type { ErrorMessages } from './AvailabilityMonitor.interface';\nimport { availability } from './availabilityStatus';\nimport { highAvailabilityAPI } from './highAvailabilityAPI';\n\nexport const TMP_HA_ERROR_CODE = 'MaintenanceMode';\nexport const HA_ERROR_CODE = 'CMN-211';\nexport const HA_ERROR_STATUS = 503;\n\nexport function extractUrl({ url }: { url: string }) {\n  if (url === '') {\n    return '';\n  }\n\n  const filteredUrl =\n    (url.match(/\\/restapi(.*)/gi) && url.match(/\\/restapi(.*)/gi)?.[0]) || '';\n  const splitUrl = filteredUrl.split('?')[0] || '';\n  return splitUrl;\n}\n\n/** Check if this damn error is HA error. */\nexport function isHAError(error: ApiError) {\n  const status = pathOr<number>(-1, ['response', 'status'], error);\n  const errors = pathOr<ErrorMessages['_json']>(\n    [],\n    ['response', '_json', 'errors'],\n    error,\n  );\n\n  let errorCodeIn = false;\n  for (const e of errors) {\n    if (pathOr<string>('', ['errorCode'], e) === HA_ERROR_CODE) {\n      errorCodeIn = true;\n      break;\n    }\n  }\n\n  // Result from `status` and `errorCode`.\n  let validHAError = status === HA_ERROR_STATUS && errorCodeIn;\n  if (!validHAError) {\n    // Result from temp error code, expecially for `presence`.\n    const resErrorCode = pathOr(\n      null,\n      ['response', '_json', 'errorCode'],\n      error,\n    );\n    validHAError = resErrorCode === TMP_HA_ERROR_CODE;\n  }\n\n  return validHAError;\n}\n\n/**\n * Generate 1 ~ 120 seconds\n */\nexport function generateRandomNumber(max = 120, min = 1) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Get availability level by path of url\n * TODO: Use lru cache to improve performance?\n */\nfunction getAvailabilityLevel(path: string, method: string) {\n  for (const api of highAvailabilityAPI) {\n    if (path.match(api.reg) && method in api) {\n      return (api as Record<string, any>)[method] as string;\n    }\n  }\n}\n\n/**\n * Check if an api is *High* or *Limited*\n *\n */\nexport function isHAEnabledAPI({\n  url,\n  method,\n}: {\n  url: string;\n  method: string;\n}) {\n  const filteredUrl = extractUrl({ url });\n  if (!filteredUrl) {\n    return false;\n  }\n\n  const condition = getAvailabilityLevel(filteredUrl, method);\n  if (!condition) {\n    console.error(\n      `url: ${url} method: ${method} is not set in high or limited available API`,\n    );\n    // If a core API is not in the list, the request should be launched.\n    return true;\n  }\n\n  return condition === availability.HIGH;\n}\n"],"mappings":";;;;;;;;;;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AAGA,IAAAC,mBAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAF,OAAA;AAA4D,SAAAG,2BAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,yBAAAC,MAAA,IAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,qBAAAE,CAAA,QAAAG,KAAA,CAAAC,OAAA,CAAAN,CAAA,MAAAE,CAAA,GAAAK,2BAAA,CAAAP,CAAA,MAAAC,CAAA,IAAAD,CAAA,uBAAAA,CAAA,CAAAQ,MAAA,IAAAN,CAAA,KAAAF,CAAA,GAAAE,CAAA,OAAAO,EAAA,MAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,WAAAH,EAAA,IAAAT,CAAA,CAAAQ,MAAA,KAAAK,IAAA,WAAAA,IAAA,MAAAC,KAAA,EAAAd,CAAA,CAAAS,EAAA,UAAAR,CAAA,WAAAA,EAAAD,CAAA,UAAAA,CAAA,KAAAe,CAAA,EAAAL,CAAA,gBAAAM,SAAA,iJAAAC,CAAA,EAAAC,CAAA,OAAAC,CAAA,gBAAAR,CAAA,WAAAA,EAAA,IAAAT,CAAA,GAAAA,CAAA,CAAAkB,IAAA,CAAApB,CAAA,MAAAY,CAAA,WAAAA,EAAA,QAAAZ,CAAA,GAAAE,CAAA,CAAAmB,IAAA,WAAAH,CAAA,GAAAlB,CAAA,CAAAa,IAAA,EAAAb,CAAA,KAAAC,CAAA,WAAAA,EAAAD,CAAA,IAAAmB,CAAA,OAAAF,CAAA,GAAAjB,CAAA,KAAAe,CAAA,WAAAA,EAAA,UAAAG,CAAA,YAAAhB,CAAA,cAAAA,CAAA,8BAAAiB,CAAA,QAAAF,CAAA;AAAA,SAAAV,4BAAAP,CAAA,EAAAkB,CAAA,QAAAlB,CAAA,2BAAAA,CAAA,SAAAsB,iBAAA,CAAAtB,CAAA,EAAAkB,CAAA,OAAAhB,CAAA,MAAAqB,QAAA,CAAAH,IAAA,CAAApB,CAAA,EAAAwB,KAAA,6BAAAtB,CAAA,IAAAF,CAAA,CAAAyB,WAAA,KAAAvB,CAAA,GAAAF,CAAA,CAAAyB,WAAA,CAAAC,IAAA,aAAAxB,CAAA,cAAAA,CAAA,GAAAG,KAAA,CAAAsB,IAAA,CAAA3B,CAAA,oBAAAE,CAAA,+CAAA0B,IAAA,CAAA1B,CAAA,IAAAoB,iBAAA,CAAAtB,CAAA,EAAAkB,CAAA;AAAA,SAAAI,kBAAAtB,CAAA,EAAAkB,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAAlB,CAAA,CAAAQ,MAAA,MAAAU,CAAA,GAAAlB,CAAA,CAAAQ,MAAA,YAAAP,CAAA,MAAAW,CAAA,GAAAP,KAAA,CAAAa,CAAA,GAAAjB,CAAA,GAAAiB,CAAA,EAAAjB,CAAA,MAAAW,CAAA,CAAAX,CAAA,IAAAD,CAAA,CAAAC,CAAA,YAAAW,CAAA;AAErD,IAAMiB,iBAAiB,GAAG,iBAAiB;AAACC,OAAA,CAAAD,iBAAA,GAAAA,iBAAA;AAC5C,IAAME,aAAa,GAAG,SAAS;AAACD,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAChC,IAAMC,eAAe,GAAG,GAAG;AAACF,OAAA,CAAAE,eAAA,GAAAA,eAAA;AAE5B,SAASC,UAAUA,CAAAC,IAAA,EAA2B;EAAA,IAAAC,UAAA;EAAA,IAAxBC,GAAG,GAAAF,IAAA,CAAHE,GAAG;EAC9B,IAAIA,GAAG,KAAK,EAAE,EAAE;IACd,OAAO,EAAE;EACX;EAEA,IAAMC,WAAW,GACdD,GAAG,CAACE,KAAK,CAAC,iBAAiB,CAAC,MAAAH,UAAA,GAAIC,GAAG,CAACE,KAAK,CAAC,iBAAiB,CAAC,cAAAH,UAAA,uBAA5BA,UAAA,CAA+B,CAAC,CAAC,KAAK,EAAE;EAC3E,IAAMI,QAAQ,GAAGF,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;EAChD,OAAOD,QAAQ;AACjB;;AAEA;AACO,SAASE,SAASA,CAACC,KAAe,EAAE;EACzC,IAAMC,MAAM,GAAG,IAAAC,aAAM,EAAS,CAAC,CAAC,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAEF,KAAK,CAAC;EAChE,IAAMG,MAAM,GAAG,IAAAD,aAAM,EACnB,EAAE,EACF,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,EAC/BF,KACF,CAAC;EAED,IAAII,WAAW,GAAG,KAAK;EAAC,IAAAC,SAAA,GAAAhD,0BAAA,CACR8C,MAAM;IAAAG,KAAA;EAAA;IAAtB,KAAAD,SAAA,CAAApC,CAAA,MAAAqC,KAAA,GAAAD,SAAA,CAAAnC,CAAA,IAAAC,IAAA,GAAwB;MAAA,IAAbZ,CAAC,GAAA+C,KAAA,CAAAlC,KAAA;MACV,IAAI,IAAA8B,aAAM,EAAS,EAAE,EAAE,CAAC,WAAW,CAAC,EAAE3C,CAAC,CAAC,KAAK8B,aAAa,EAAE;QAC1De,WAAW,GAAG,IAAI;QAClB;MACF;IACF;;IAEA;EAAA,SAAAG,GAAA;IAAAF,SAAA,CAAA9C,CAAA,CAAAgD,GAAA;EAAA;IAAAF,SAAA,CAAAhC,CAAA;EAAA;EACA,IAAImC,YAAY,GAAGP,MAAM,KAAKX,eAAe,IAAIc,WAAW;EAC5D,IAAI,CAACI,YAAY,EAAE;IACjB;IACA,IAAMC,YAAY,GAAG,IAAAP,aAAM,EACzB,IAAI,EACJ,CAAC,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC,EAClCF,KACF,CAAC;IACDQ,YAAY,GAAGC,YAAY,KAAKtB,iBAAiB;EACnD;EAEA,OAAOqB,YAAY;AACrB;;AAEA;AACA;AACA;AACO,SAASE,oBAAoBA,CAAA,EAAqB;EAAA,IAApBC,GAAG,GAAAC,SAAA,CAAA9C,MAAA,QAAA8C,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;EAAA,IAAEE,GAAG,GAAAF,SAAA,CAAA9C,MAAA,QAAA8C,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EACrD,OAAOG,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIL,GAAG,GAAGG,GAAG,CAAC,GAAGA,GAAG;AAC1C;;AAEA;AACA;AACA;AACA;AACA,SAASG,oBAAoBA,CAACC,IAAY,EAAEC,MAAc,EAAE;EAAA,IAAAC,UAAA,GAAA/D,0BAAA,CACxCgE,wCAAmB;IAAAC,MAAA;EAAA;IAArC,KAAAF,UAAA,CAAAnD,CAAA,MAAAqD,MAAA,GAAAF,UAAA,CAAAlD,CAAA,IAAAC,IAAA,GAAuC;MAAA,IAA5BoD,GAAG,GAAAD,MAAA,CAAAlD,KAAA;MACZ,IAAI8C,IAAI,CAACtB,KAAK,CAAC2B,GAAG,CAACC,GAAG,CAAC,IAAIL,MAAM,IAAII,GAAG,EAAE;QACxC,OAAQA,GAAG,CAAyBJ,MAAM,CAAC;MAC7C;IACF;EAAC,SAAAZ,GAAA;IAAAa,UAAA,CAAA7D,CAAA,CAAAgD,GAAA;EAAA;IAAAa,UAAA,CAAA/C,CAAA;EAAA;AACH;;AAEA;AACA;AACA;AACA;AACO,SAASoD,cAAcA,CAAAC,KAAA,EAM3B;EAAA,IALDhC,GAAG,GAAAgC,KAAA,CAAHhC,GAAG;IACHyB,MAAM,GAAAO,KAAA,CAANP,MAAM;EAKN,IAAMxB,WAAW,GAAGJ,UAAU,CAAC;IAAEG,GAAG,EAAHA;EAAI,CAAC,CAAC;EACvC,IAAI,CAACC,WAAW,EAAE;IAChB,OAAO,KAAK;EACd;EAEA,IAAMgC,SAAS,GAAGV,oBAAoB,CAACtB,WAAW,EAAEwB,MAAM,CAAC;EAC3D,IAAI,CAACQ,SAAS,EAAE;IACdC,OAAO,CAAC5B,KAAK,SAAA6B,MAAA,CACHnC,GAAG,eAAAmC,MAAA,CAAYV,MAAM,iDAC/B,CAAC;IACD;IACA,OAAO,IAAI;EACb;EAEA,OAAOQ,SAAS,KAAKG,gCAAY,CAACC,IAAI;AACxC","ignoreList":[]}