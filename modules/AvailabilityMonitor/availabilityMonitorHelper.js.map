{"version":3,"file":"availabilityMonitorHelper.js","names":["_ramda","require","_availabilityStatus","_highAvailabilityAPI","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","TMP_HA_ERROR_CODE","exports","HA_ERROR_CODE","HA_ERROR_STATUS","extractUrl","_ref","_url$match","url","filteredUrl","match","splitUrl","split","isHAError","error","status","pathOr","errors","errorCodeIn","_iterator","_step","validHAError","resErrorCode","generateRandomNumber","max","arguments","undefined","min","Math","random","getAvailabilityLevel","path","method","_iterator2","highAvailabilityAPI","_step2","api","reg","isHAEnabledAPI","_ref2","condition","console","concat","availability","HIGH"],"sources":["modules/AvailabilityMonitor/availabilityMonitorHelper.ts"],"sourcesContent":["import { pathOr } from 'ramda';\n\nimport type { ApiError } from '@ringcentral/sdk';\n\nimport type { ErrorMessages } from './AvailabilityMonitor.interface';\nimport { availability } from './availabilityStatus';\nimport { highAvailabilityAPI } from './highAvailabilityAPI';\n\nexport const TMP_HA_ERROR_CODE = 'MaintenanceMode';\nexport const HA_ERROR_CODE = 'CMN-211';\nexport const HA_ERROR_STATUS = 503;\n\nexport function extractUrl({ url }: { url: string }) {\n  if (url === '') {\n    return '';\n  }\n\n  const filteredUrl =\n    (url.match(/\\/restapi(.*)/gi) && url.match(/\\/restapi(.*)/gi)?.[0]) || '';\n  const splitUrl = filteredUrl.split('?')[0] || '';\n  return splitUrl;\n}\n\n/** Check if this damn error is HA error. */\nexport function isHAError(error: ApiError) {\n  const status = pathOr<number>(-1, ['response', 'status'], error);\n  const errors = pathOr<ErrorMessages['_json']>(\n    [],\n    ['response', '_json', 'errors'],\n    error,\n  );\n\n  let errorCodeIn = false;\n  for (const e of errors) {\n    if (pathOr<string>('', ['errorCode'], e) === HA_ERROR_CODE) {\n      errorCodeIn = true;\n      break;\n    }\n  }\n\n  // Result from `status` and `errorCode`.\n  let validHAError = status === HA_ERROR_STATUS && errorCodeIn;\n  if (!validHAError) {\n    // Result from temp error code, expecially for `presence`.\n    const resErrorCode = pathOr(\n      null,\n      ['response', '_json', 'errorCode'],\n      error,\n    );\n    validHAError = resErrorCode === TMP_HA_ERROR_CODE;\n  }\n\n  return validHAError;\n}\n\n/**\n * Generate 1 ~ 120 seconds\n */\nexport function generateRandomNumber(max = 120, min = 1) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Get availability level by path of url\n * TODO: Use lru cache to improve performance?\n */\nfunction getAvailabilityLevel(path: string, method: string) {\n  for (const api of highAvailabilityAPI) {\n    if (path.match(api.reg) && method in api) {\n      return (api as Record<string, any>)[method] as string;\n    }\n  }\n}\n\n/**\n * Check if an api is *High* or *Limited*\n *\n */\nexport function isHAEnabledAPI({\n  url,\n  method,\n}: {\n  url: string;\n  method: string;\n}) {\n  const filteredUrl = extractUrl({ url });\n  if (!filteredUrl) {\n    return false;\n  }\n\n  const condition = getAvailabilityLevel(filteredUrl, method);\n  if (!condition) {\n    console.error(\n      `url: ${url} method: ${method} is not set in high or limited available API`,\n    );\n    // If a core API is not in the list, the request should be launched.\n    return true;\n  }\n\n  return condition === availability.HIGH;\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAKA,IAAAC,mBAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAF,OAAA;AAA4D,SAAAG,2BAAAC,CAAA,EAAAC,cAAA,QAAAC,EAAA,UAAAC,MAAA,oBAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,qBAAAE,EAAA,QAAAG,KAAA,CAAAC,OAAA,CAAAN,CAAA,MAAAE,EAAA,GAAAK,2BAAA,CAAAP,CAAA,MAAAC,cAAA,IAAAD,CAAA,WAAAA,CAAA,CAAAQ,MAAA,qBAAAN,EAAA,EAAAF,CAAA,GAAAE,EAAA,MAAAO,CAAA,UAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,QAAAH,CAAA,IAAAT,CAAA,CAAAQ,MAAA,WAAAK,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAd,CAAA,CAAAS,CAAA,UAAAM,CAAA,WAAAA,EAAAC,EAAA,UAAAA,EAAA,KAAAC,CAAA,EAAAP,CAAA,gBAAAQ,SAAA,iJAAAC,gBAAA,SAAAC,MAAA,UAAAC,GAAA,WAAAV,CAAA,WAAAA,EAAA,IAAAT,EAAA,GAAAA,EAAA,CAAAoB,IAAA,CAAAtB,CAAA,MAAAY,CAAA,WAAAA,EAAA,QAAAW,IAAA,GAAArB,EAAA,CAAAsB,IAAA,IAAAL,gBAAA,GAAAI,IAAA,CAAAV,IAAA,SAAAU,IAAA,KAAAR,CAAA,WAAAA,EAAAU,GAAA,IAAAL,MAAA,SAAAC,GAAA,GAAAI,GAAA,KAAAR,CAAA,WAAAA,EAAA,eAAAE,gBAAA,IAAAjB,EAAA,oBAAAA,EAAA,8BAAAkB,MAAA,QAAAC,GAAA;AAAA,SAAAd,4BAAAP,CAAA,EAAA0B,MAAA,SAAA1B,CAAA,qBAAAA,CAAA,sBAAA2B,iBAAA,CAAA3B,CAAA,EAAA0B,MAAA,OAAAd,CAAA,GAAAgB,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAAR,IAAA,CAAAtB,CAAA,EAAA+B,KAAA,aAAAnB,CAAA,iBAAAZ,CAAA,CAAAgC,WAAA,EAAApB,CAAA,GAAAZ,CAAA,CAAAgC,WAAA,CAAAC,IAAA,MAAArB,CAAA,cAAAA,CAAA,mBAAAP,KAAA,CAAA6B,IAAA,CAAAlC,CAAA,OAAAY,CAAA,+DAAAuB,IAAA,CAAAvB,CAAA,UAAAe,iBAAA,CAAA3B,CAAA,EAAA0B,MAAA;AAAA,SAAAC,kBAAAS,GAAA,EAAAC,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAD,GAAA,CAAA5B,MAAA,EAAA6B,GAAA,GAAAD,GAAA,CAAA5B,MAAA,WAAAC,CAAA,MAAA6B,IAAA,OAAAjC,KAAA,CAAAgC,GAAA,GAAA5B,CAAA,GAAA4B,GAAA,EAAA5B,CAAA,MAAA6B,IAAA,CAAA7B,CAAA,IAAA2B,GAAA,CAAA3B,CAAA,YAAA6B,IAAA;AAErD,IAAMC,iBAAiB,GAAG,iBAAiB;AAACC,OAAA,CAAAD,iBAAA,GAAAA,iBAAA;AAC5C,IAAME,aAAa,GAAG,SAAS;AAACD,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAChC,IAAMC,eAAe,GAAG,GAAG;AAACF,OAAA,CAAAE,eAAA,GAAAA,eAAA;AAE5B,SAASC,UAAUA,CAAAC,IAAA,EAA2B;EAAA,IAAAC,UAAA;EAAA,IAAxBC,GAAG,GAAAF,IAAA,CAAHE,GAAG;EAC9B,IAAIA,GAAG,KAAK,EAAE,EAAE;IACd,OAAO,EAAE;EACX;EAEA,IAAMC,WAAW,GACdD,GAAG,CAACE,KAAK,CAAC,iBAAiB,CAAC,MAAAH,UAAA,GAAIC,GAAG,CAACE,KAAK,CAAC,iBAAiB,CAAC,cAAAH,UAAA,uBAA5BA,UAAA,CAA+B,CAAC,CAAC,KAAK,EAAE;EAC3E,IAAMI,QAAQ,GAAGF,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;EAChD,OAAOD,QAAQ;AACjB;;AAEA;AACO,SAASE,SAASA,CAACC,KAAe,EAAE;EACzC,IAAMC,MAAM,GAAG,IAAAC,aAAM,EAAS,CAAC,CAAC,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAEF,KAAK,CAAC;EAChE,IAAMG,MAAM,GAAG,IAAAD,aAAM,EACnB,EAAE,EACF,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,EAC/BF,KACF,CAAC;EAED,IAAII,WAAW,GAAG,KAAK;EAAC,IAAAC,SAAA,GAAA1D,0BAAA,CACRwD,MAAM;IAAAG,KAAA;EAAA;IAAtB,KAAAD,SAAA,CAAA9C,CAAA,MAAA+C,KAAA,GAAAD,SAAA,CAAA7C,CAAA,IAAAC,IAAA,GAAwB;MAAA,IAAbE,CAAC,GAAA2C,KAAA,CAAA5C,KAAA;MACV,IAAI,IAAAwC,aAAM,EAAS,EAAE,EAAE,CAAC,WAAW,CAAC,EAAEvC,CAAC,CAAC,KAAK0B,aAAa,EAAE;QAC1De,WAAW,GAAG,IAAI;QAClB;MACF;IACF;;IAEA;EAAA,SAAAnC,GAAA;IAAAoC,SAAA,CAAA1C,CAAA,CAAAM,GAAA;EAAA;IAAAoC,SAAA,CAAAxC,CAAA;EAAA;EACA,IAAI0C,YAAY,GAAGN,MAAM,KAAKX,eAAe,IAAIc,WAAW;EAC5D,IAAI,CAACG,YAAY,EAAE;IACjB;IACA,IAAMC,YAAY,GAAG,IAAAN,aAAM,EACzB,IAAI,EACJ,CAAC,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC,EAClCF,KACF,CAAC;IACDO,YAAY,GAAGC,YAAY,KAAKrB,iBAAiB;EACnD;EAEA,OAAOoB,YAAY;AACrB;;AAEA;AACA;AACA;AACO,SAASE,oBAAoBA,CAAA,EAAqB;EAAA,IAApBC,GAAG,GAAAC,SAAA,CAAAvD,MAAA,QAAAuD,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;EAAA,IAAEE,GAAG,GAAAF,SAAA,CAAAvD,MAAA,QAAAuD,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EACrD,OAAOG,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIL,GAAG,GAAGG,GAAG,CAAC,GAAGA,GAAG;AAC1C;;AAEA;AACA;AACA;AACA;AACA,SAASG,oBAAoBA,CAACC,IAAY,EAAEC,MAAc,EAAE;EAAA,IAAAC,UAAA,GAAAxE,0BAAA,CACxCyE,wCAAmB;IAAAC,MAAA;EAAA;IAArC,KAAAF,UAAA,CAAA5D,CAAA,MAAA8D,MAAA,GAAAF,UAAA,CAAA3D,CAAA,IAAAC,IAAA,GAAuC;MAAA,IAA5B6D,GAAG,GAAAD,MAAA,CAAA3D,KAAA;MACZ,IAAIuD,IAAI,CAACrB,KAAK,CAAC0B,GAAG,CAACC,GAAG,CAAC,IAAIL,MAAM,IAAII,GAAG,EAAE;QACxC,OAAQA,GAAG,CAAyBJ,MAAM,CAAC;MAC7C;IACF;EAAC,SAAAjD,GAAA;IAAAkD,UAAA,CAAAxD,CAAA,CAAAM,GAAA;EAAA;IAAAkD,UAAA,CAAAtD,CAAA;EAAA;AACH;;AAEA;AACA;AACA;AACA;AACO,SAAS2D,cAAcA,CAAAC,KAAA,EAM3B;EAAA,IALD/B,GAAG,GAAA+B,KAAA,CAAH/B,GAAG;IACHwB,MAAM,GAAAO,KAAA,CAANP,MAAM;EAKN,IAAMvB,WAAW,GAAGJ,UAAU,CAAC;IAAEG,GAAG,EAAHA;EAAI,CAAC,CAAC;EACvC,IAAI,CAACC,WAAW,EAAE;IAChB,OAAO,KAAK;EACd;EAEA,IAAM+B,SAAS,GAAGV,oBAAoB,CAACrB,WAAW,EAAEuB,MAAM,CAAC;EAC3D,IAAI,CAACQ,SAAS,EAAE;IACdC,OAAO,CAAC3B,KAAK,SAAA4B,MAAA,CACHlC,GAAG,eAAAkC,MAAA,CAAYV,MAAM,iDAC/B,CAAC;IACD;IACA,OAAO,IAAI;EACb;EAEA,OAAOQ,SAAS,KAAKG,gCAAY,CAACC,IAAI;AACxC"}