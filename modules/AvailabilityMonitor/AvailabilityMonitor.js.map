{"version":3,"file":"AvailabilityMonitor.js","names":["_core","require","_ramda","_debounceThrottle","_di","_validateIsOffline","_interopRequireDefault","_availabilityMonitorHelper","_errorMessages","_dec","_dec2","_dec3","_class","_class2","_descriptor","_descriptor2","_descriptor3","_descriptor4","e","__esModule","ownKeys","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","asyncGeneratorStep","n","a","c","i","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","_initializerDefineProperty","l","initializer","call","_classCallCheck","TypeError","_defineProperties","key","_createClass","prototype","_toPrimitive","_typeof","Symbol","toPrimitive","String","Number","_inherits","create","constructor","_setPrototypeOf","setPrototypeOf","bind","__proto__","_createSuper","_isNativeReflectConstruct","_getPrototypeOf","s","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","slice","reverse","reduce","_initializerWarningHelper","Error","HEALTH_CHECK_INTERVAL","exports","STATUS_END_POINT","DEFAULT_TIME","SHARED_STATE_EXPIRATION","AvailabilityMonitor","Module","name","deps","dep","optional","computed","that","sharedStates","_RcModuleV","_super","_this$_deps$availabil","_this$_deps$availabil2","_this","_enabled","_deps","availabilityMonitorOptions","enabled","_randomTime","_limitedTimeout","_normalTimeout","_promise","_healthRetryTime","_unbindHandlers","_beforeRequestHandler","params","isLimitedAvailabilityMode","requestUrl","pathOr","requestMethod","extractUrl","url","isHAEnabledAPI","method","errorMessages","serviceLimited","_requestErrorHandler","_ref","regeneratorRuntime","mark","_callee","error","extractedUrl","headers","retryAfter","wrap","_callee$","_context","prev","next","attachErrorResponse","isHAError","hasLimitedStatusError","setLimitedModeStatusError","abrupt","_retrieveRetryAfter","_switchToLimitedMode","_retry","stop","_x","_refreshErrorHandler","_ref2","_callee2","isOffline","platform","RES_STATUS","refreshTokenValid","_callee2$","_context2","validateIsOffline","message","client","service","response","status","t0","auth","sent","_switchToVoIPOnlyMode","_x2","_refreshSuccessHandler","isVoIPOnlyMode","setVoIPOnlyReset","_clearLimitedTimeout","setVoIPOnlyMode","_switchToNormalMode","setNormalMode","_clearNormalTimeout","healthCheck","promisedThrottle","fn","_this2","_callee3","_callee3$","_context3","_healthCheck","manual","_sharedStatesKey","_currentTabKeys","isLimitedMode","setLimitedMode","onInit","_bindHandlers","onInitOnce","_this3","_initLocalStorage","watch","_this3$_deps$environm","environment","changeCounter","_this3$_deps$environm2","ready","_this4","on","events","beforeRequest","requestError","addListener","loginSuccess","logoutSuccess","logoutError","refreshError","refreshSuccess","removeListener","parseFloat","concat","get","isNaN","clearTimeout","_getStatus2","_callee4","res","_callee4$","_context4","skipAuthCheck","Authorization","accessToken","_getStatus","_this5","setTimeout","_healthCheck2","_callee5","_this6","_ref3","_ref3$manual","_args5","_callee5$","_context5","undefined","console","finish","generateRandomNumber","_checkIfHAError","_callee6","errMessage","_callee6$","_context6","checkIfHAError","_x3","_attachErrorResponse","_callee7","_callee7$","_context7","_json","clone","json","err","_x4","_writeSharedStates","JSON","stringify","localStorage","setItem","_retrieveSharedStates","getItem","parse","_this7","prefix","isUnloading","window","addEventListener","ev","_unloadSharedStates","_this8","states","tabManager","tabId","id","_cleanSharedStates","_this9","state","Date","now","timestamp","actualTabIds","includes","setSharedState","_this$_deps$tabManage","current","_this10","some","hasCallSession","_this11","webSocketReady","RcModuleV2","action"],"sources":["modules/AvailabilityMonitor/AvailabilityMonitor.ts"],"sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  watch,\n} from '@ringcentral-integration/core';\nimport type { ApiError } from '@ringcentral/sdk';\nimport { pathOr } from 'ramda';\n\nimport { promisedThrottle } from '../../lib/debounce-throttle';\nimport { Module } from '../../lib/di';\nimport validateIsOffline from '../../lib/validateIsOffline';\n\nimport type {\n  Deps,\n  ErrorMessages,\n  SharedState,\n} from './AvailabilityMonitor.interface';\nimport {\n  extractUrl,\n  generateRandomNumber,\n  isHAEnabledAPI,\n  isHAError,\n} from './availabilityMonitorHelper';\nimport { errorMessages } from './errorMessages';\n\nexport const HEALTH_CHECK_INTERVAL = 60 * 1000;\nexport const STATUS_END_POINT = '/restapi/v1.0/status';\nconst DEFAULT_TIME = 0;\nconst SHARED_STATE_EXPIRATION = 12 * 60 * 60 * 1000;\n\n@Module({\n  name: 'AvailabilityMonitor',\n  deps: [\n    'Auth',\n    'Client',\n    { dep: 'Prefix', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'Environment', optional: true },\n    { dep: 'AvailabilityMonitorOptions', optional: true },\n  ],\n})\nexport class AvailabilityMonitor extends RcModuleV2<Deps> {\n  protected _enabled = this._deps.availabilityMonitorOptions?.enabled ?? false;\n\n  protected _randomTime = DEFAULT_TIME;\n\n  protected _limitedTimeout: NodeJS.Timeout | null = null;\n\n  protected _normalTimeout: NodeJS.Timeout | null = null;\n\n  protected _promise: Promise<Response> | null = null;\n\n  _healthRetryTime = HEALTH_CHECK_INTERVAL;\n\n  _unbindHandlers: (() => void) | null = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  /**\n   * When App is in Limited Mode and Status check met a non-503 error\n   */\n  @state\n  hasLimitedStatusError = false;\n\n  @state\n  isLimitedMode = false;\n\n  @state\n  isVoIPOnlyMode = false;\n\n  @action\n  setLimitedModeStatusError() {\n    this.hasLimitedStatusError = true;\n  }\n\n  @action\n  setNormalMode() {\n    this.hasLimitedStatusError = false;\n    this.isLimitedMode = false;\n    this.isVoIPOnlyMode = false;\n  }\n\n  @action\n  setLimitedMode() {\n    this.isLimitedMode = true;\n  }\n\n  @action\n  setVoIPOnlyMode() {\n    this.isVoIPOnlyMode = true;\n  }\n\n  @action\n  setVoIPOnlyReset() {\n    this.isVoIPOnlyMode = false;\n  }\n\n  override onInit() {\n    this._bindHandlers();\n  }\n\n  override onInitOnce() {\n    this._initLocalStorage();\n    watch(\n      this,\n      () => this._deps.environment?.changeCounter,\n      () => {\n        if (this.ready && this._deps.environment?.ready) {\n          this._bindHandlers();\n        }\n      },\n    );\n  }\n\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n\n    const client = this._deps.client.service.client();\n    const platform = this._deps.client.service.platform();\n\n    // TODO: in other modules, when they catch error first check if app is in HA mode.\n    client.on(client.events.beforeRequest, this._beforeRequestHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    platform.addListener(\n      platform.events.loginSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(\n      platform.events.logoutSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(platform.events.logoutError, this._switchToNormalMode);\n    platform.addListener(\n      platform.events.refreshError,\n      this._refreshErrorHandler,\n    );\n    platform.addListener(\n      platform.events.refreshSuccess,\n      this._refreshSuccessHandler,\n    );\n\n    this._unbindHandlers = () => {\n      client.removeListener(\n        client.events.beforeRequest,\n        this._beforeRequestHandler,\n      );\n      client.removeListener(\n        client.events.requestError,\n        this._requestErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.loginSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutError,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.refreshError,\n        this._refreshErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.refreshSuccess,\n        this._refreshSuccessHandler,\n      );\n      this._unbindHandlers = null;\n    };\n  }\n\n  _beforeRequestHandler = (params: Request) => {\n    if (!this.isLimitedAvailabilityMode || !this._enabled) {\n      return;\n    }\n\n    const requestUrl = pathOr<string | null>(null, ['_request', 'url'], params);\n    const requestMethod = pathOr<string | null>(\n      null,\n      ['_request', 'method'],\n      params,\n    );\n\n    if (!requestUrl || !requestMethod) {\n      return;\n    }\n\n    // In the limited availability mode, should not block status check api\n    // or highly availability api.\n    if (\n      extractUrl({ url: requestUrl }) === STATUS_END_POINT ||\n      isHAEnabledAPI({ url: requestUrl, method: requestMethod })\n    ) {\n      return;\n    }\n\n    throw new Error(errorMessages.serviceLimited);\n  };\n\n  /**\n   * Retrieve retry after value from response headers\n   */\n  _retrieveRetryAfter(headers: Response['headers']) {\n    try {\n      const retryAfter = parseFloat(`${headers.get('Retry-After') || -1}`);\n      return Number.isNaN(retryAfter) ? -1 : retryAfter;\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      return -1;\n    }\n  }\n\n  /**\n   * Check if app can enter LA mode.\n   * If this module is not enabled, just return.\n   *\n   */\n  _requestErrorHandler = async (error: ApiError) => {\n    await this.attachErrorResponse(error);\n\n    const requestUrl = pathOr<Request['url']>('', ['request', 'url'], error);\n    const extractedUrl = extractUrl({\n      url: requestUrl,\n    });\n\n    // If app is in Limited Mode and staus API met a status which is not 200 nor 503\n    if (\n      this.isLimitedAvailabilityMode &&\n      extractedUrl === STATUS_END_POINT &&\n      !isHAError(error)\n    ) {\n      if (!this.hasLimitedStatusError) {\n        this.setLimitedModeStatusError();\n      }\n      return;\n    }\n\n    if (!isHAError(error) || !this._enabled) {\n      return;\n    }\n\n    const headers = pathOr(\n      {},\n      ['response', 'headers'],\n      error,\n    ) as Response['headers'];\n    const retryAfter = this._retrieveRetryAfter(headers);\n\n    if (retryAfter > 0) {\n      // Retry-After unit is secons, make it mili-secons\n      this._healthRetryTime = retryAfter * 1000;\n    } else {\n      this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    }\n\n    this._switchToLimitedMode();\n    this._retry();\n  };\n\n  _refreshErrorHandler = async (error: ApiError) => {\n    const isOffline = validateIsOffline(error.message);\n\n    const platform = this._deps.client.service.platform();\n    const RES_STATUS = (error.response && error.response.status) || null;\n    const refreshTokenValid =\n      (isOffline || Number(RES_STATUS) >= 500) &&\n      (await platform.auth().refreshTokenValid());\n    if (refreshTokenValid) {\n      this._switchToVoIPOnlyMode();\n    }\n  };\n\n  _refreshSuccessHandler = () => {\n    if (this.isVoIPOnlyMode) {\n      this.setVoIPOnlyReset();\n    }\n    this._clearLimitedTimeout();\n  };\n\n  _switchToVoIPOnlyMode = () => {\n    if (this.isVoIPOnlyMode) {\n      return;\n    }\n\n    this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    this.setVoIPOnlyMode();\n    this._retry();\n  };\n\n  _switchToLimitedMode() {\n    if (this.isLimitedMode) {\n      return;\n    }\n\n    this.setLimitedMode();\n  }\n\n  _switchToNormalMode = () => {\n    if (!this.isLimitedAvailabilityMode) {\n      return;\n    }\n\n    this.setNormalMode();\n\n    this._clearLimitedTimeout();\n    this._clearNormalTimeout();\n  };\n\n  _clearLimitedTimeout() {\n    if (this._limitedTimeout) {\n      clearTimeout(this._limitedTimeout);\n      this._limitedTimeout = null;\n    }\n  }\n\n  _clearNormalTimeout() {\n    if (this._normalTimeout) {\n      clearTimeout(this._normalTimeout);\n      this._normalTimeout = null;\n    }\n  }\n\n  async _getStatus() {\n    // !!This API must be always called with OAuth token in Authorization header\n    // !! (same as in case of regular API calls) in order to ensure the request is routed to proper POD/partition.\n    // Client app can even continue use expired access token with this API - backend will pass such requests through.\n    // The result of the API call is unpredictable when it is called without access token!\n    //\n    // Reference: https://wiki_domain/display/PLAT/High+Availability+Guidelines+for+API+Clients\n\n    const res: Response = await this._deps.client.service\n      .platform()\n      .get('/restapi/v1.0/status', null, {\n        skipAuthCheck: true,\n        headers: {\n          Authorization: `Bearer ${this._deps.auth.accessToken}`,\n        },\n      });\n    return res;\n  }\n\n  _retry() {\n    if (!this._limitedTimeout) {\n      this._limitedTimeout = setTimeout(() => {\n        this._clearLimitedTimeout();\n        this._healthCheck();\n      }, this._healthRetryTime);\n    }\n  }\n\n  /**\n   * Inner method of health checking\n   */\n  async _healthCheck({ manual = false } = {}) {\n    if (this._promise) return;\n    try {\n      this._promise = this._getStatus();\n      const response = await this._promise;\n      if (!response || response.status !== 200) {\n        return;\n      }\n    } catch (err) {\n      console.error('error from request of /restapi/v1.0/status.');\n      return;\n    } finally {\n      this._promise = null;\n    }\n    if (manual) {\n      this._clearNormalTimeout();\n      this._switchToNormalMode();\n      return;\n    }\n    // In the described situation Client Application should follow an \"Exponential Backoff\" approach:\n    // The retries exponentially increase the waiting time up to a certain threshold.\n    // The idea is that if the server is down temporarily,\n    // it is not overwhelmed with requests hitting at the same time when it comes back up.\n    //\n    // Reference: https://wiki_domain/display/PLAT/Error+Handling+Guidelines+for+API+Clients\n\n    this._randomTime = this._randomTime || generateRandomNumber(); // Generate random seconds (1 ~ 121)\n    this._normalTimeout = setTimeout(() => {\n      this._clearNormalTimeout();\n      this._switchToNormalMode();\n    }, this._randomTime * 1000);\n  }\n\n  /**\n   * Health check with status API\n   */\n  healthCheck = promisedThrottle({\n    async fn(this: AvailabilityMonitor) {\n      return this._healthCheck({ manual: true });\n    },\n  });\n\n  /**\n   * Check if the error is Survival Mode error,\n   * Or if app is already in Survival Mode and current request is blocked with an error.\n   */\n  async checkIfHAError(error: ApiError) {\n    const errMessage = pathOr<string | null>(null, ['message'], error);\n    await this.attachErrorResponse(error);\n\n    return isHAError(error) || errMessage === errorMessages.serviceLimited;\n  }\n\n  private async attachErrorResponse(error: ApiError) {\n    const response = error.response as ApiError['response'] & ErrorMessages;\n    if (response && !response._json) {\n      try {\n        response._json = await response.clone().json();\n      } catch (err) {\n        // ignore response json error\n        console.error('error from response.json()', { error, err });\n      }\n    }\n  }\n\n  /**\n   * Is App in limited mode\n   */\n  get isLimitedAvailabilityMode() {\n    return this.isLimitedMode || this.isVoIPOnlyMode;\n  }\n\n  /**\n   * Custom storage with localStorage in synchronous way\n   * ! Be aware that these states are shared across multiple tabs !\n   */\n  @state\n  sharedStates: Record<string, SharedState> = {};\n\n  @computed((that: AvailabilityMonitor) => [that.sharedStates])\n  get hasCallSession() {\n    return Object.keys(this.sharedStates).some(\n      (key) => this.sharedStates[key].hasCallSession,\n    );\n  }\n\n  @computed((that: AvailabilityMonitor) => [that.sharedStates])\n  get hasWebSocketReady() {\n    return Object.keys(this.sharedStates).some(\n      (key) => this.sharedStates[key].webSocketReady,\n    );\n  }\n\n  _sharedStatesKey!: string;\n  _currentTabKeys: string[] = [];\n\n  _writeSharedStates() {\n    const json = JSON.stringify(this.sharedStates);\n    localStorage.setItem(this._sharedStatesKey, json);\n  }\n\n  @action\n  _retrieveSharedStates() {\n    const json = localStorage.getItem(this._sharedStatesKey);\n    this.sharedStates = JSON.parse(json ?? '{}');\n  }\n\n  _initLocalStorage() {\n    this._sharedStatesKey = `${this._deps.prefix}-AvailabilityMonitor-sharedStates`;\n    this._retrieveSharedStates();\n    let isUnloading: boolean | undefined;\n    window.addEventListener('storage', (ev) => {\n      if (!isUnloading && ev.key === this._sharedStatesKey) {\n        this._retrieveSharedStates();\n      }\n    });\n    window.addEventListener('pagehide', () => {\n      isUnloading = true;\n      this._unloadSharedStates();\n    });\n  }\n\n  @action\n  _unloadSharedStates() {\n    let states: Record<string, SharedState> = {\n      ...this.sharedStates,\n    };\n\n    // unload base on cached keys\n    this._currentTabKeys.forEach((key) => {\n      delete states[key];\n    });\n    this._currentTabKeys = [];\n\n    // unload base on tabId\n    if (this._deps.tabManager) {\n      Object.keys(states).forEach((key) => {\n        if (states[key].tabId === this._deps.tabManager!.id) {\n          delete states[key];\n        }\n      });\n    }\n\n    // clean\n    states = this._cleanSharedStates(states);\n\n    // write\n    this.sharedStates = states;\n    this._writeSharedStates();\n  }\n\n  _cleanSharedStates(states: Record<string, SharedState>) {\n    Object.keys(states).forEach((key) => {\n      const state = states[key];\n      if (\n        // timestamp expired\n        Date.now() - state.timestamp > SHARED_STATE_EXPIRATION ||\n        // tabs expired/closed\n        (state.tabId &&\n          this._deps.tabManager &&\n          !this._deps.tabManager.actualTabIds.includes(state.tabId))\n      ) {\n        delete states[key];\n      }\n    });\n    return states;\n  }\n\n  @action\n  setSharedState(\n    key: string,\n    state?: Omit<SharedState, 'tabId' | 'timestamp'>,\n  ) {\n    let states: Record<string, SharedState> = {\n      ...this.sharedStates,\n    };\n\n    // update\n    if (state) {\n      const current = states[key];\n      states[key] = {\n        ...current,\n        ...state,\n        timestamp: Date.now(),\n        tabId: this._deps.tabManager?.id,\n      };\n    } else {\n      delete states[key];\n    }\n\n    // clean\n    states = this._cleanSharedStates(states);\n\n    // write storage\n    this.sharedStates = states;\n    this._writeSharedStates();\n\n    // cache keys\n    if (!this._currentTabKeys.includes(key)) {\n      this._currentTabKeys.push(key);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}