{"version":3,"file":"AvailabilityMonitor.js","names":["_ramda","require","_core","_debounceThrottle","_di","_validateIsOffline","_interopRequireDefault","_availabilityMonitorHelper","_errorMessages","_dec","_dec2","_dec3","_class","_class2","_descriptor","_descriptor2","_descriptor3","_descriptor4","obj","__esModule","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","err","undefined","_initializerDefineProperty","property","descriptor","context","initializer","call","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","_createClass","protoProps","staticProps","prototype","_toPrimitive","_typeof","String","input","hint","prim","Symbol","toPrimitive","res","Number","_inherits","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_applyDecoratedDescriptor","decorators","desc","slice","reverse","reduce","decorator","_initializerWarningHelper","Error","HEALTH_CHECK_INTERVAL","exports","STATUS_END_POINT","DEFAULT_TIME","SHARED_STATE_EXPIRATION","AvailabilityMonitor","Module","name","deps","dep","optional","computed","that","sharedStates","_RcModuleV","_super","_this$_deps$availabil","_this$_deps$availabil2","_this","_enabled","_deps","availabilityMonitorOptions","enabled","_randomTime","_limitedTimeout","_normalTimeout","_promise","_healthRetryTime","_unbindHandlers","_beforeRequestHandler","params","isLimitedAvailabilityMode","requestUrl","pathOr","requestMethod","extractUrl","url","isHAEnabledAPI","method","errorMessages","serviceLimited","_requestErrorHandler","_ref","regeneratorRuntime","mark","_callee","extractedUrl","headers","retryAfter","wrap","_callee$","_context","prev","next","response","_json","clone","json","sent","isHAError","hasLimitedStatusError","setLimitedModeStatusError","abrupt","_retrieveRetryAfter","_switchToLimitedMode","_retry","stop","_x","_refreshErrorHandler","_ref2","_callee2","isOffline","platform","RES_STATUS","refreshTokenValid","_callee2$","_context2","validateIsOffline","message","client","service","status","t0","auth","_switchToVoIPOnlyMode","_x2","_refreshSuccessHandler","isVoIPOnlyMode","setVoIPOnlyReset","_clearLimitedTimeout","setVoIPOnlyMode","_switchToNormalMode","setNormalMode","_clearNormalTimeout","healthCheck","promisedThrottle","_this2","_callee3","_callee3$","_context3","_healthCheck","manual","_sharedStatesKey","_currentTabKeys","isLimitedMode","setLimitedMode","onInit","_bindHandlers","onInitOnce","_this3","_initLocalStorage","watch","_this3$_deps$environm","environment","changeCounter","_this3$_deps$environm2","ready","_this4","on","events","beforeRequest","requestError","addListener","loginSuccess","logoutSuccess","logoutError","refreshError","refreshSuccess","removeListener","parseFloat","concat","get","isNaN","clearTimeout","_getStatus2","_callee4","_callee4$","_context4","skipAuthCheck","Authorization","accessToken","_getStatus","_this5","setTimeout","_healthCheck2","_callee5","_this6","_ref3","_ref3$manual","_args5","_callee5$","_context5","console","finish","generateRandomNumber","_checkIfHAError","_callee6","errMessage","_callee6$","_context6","checkIfHAError","_x3","_writeSharedStates","JSON","stringify","localStorage","setItem","_retrieveSharedStates","getItem","parse","_this7","prefix","isUnloading","window","addEventListener","ev","_unloadSharedStates","_this8","states","tabManager","tabId","id","_cleanSharedStates","_this9","state","Date","now","timestamp","actualTabIds","includes","setSharedState","_this$_deps$tabManage","current","_this10","some","hasCallSession","_this11","webSocketReady","RcModuleV2","action"],"sources":["modules/AvailabilityMonitor/AvailabilityMonitor.ts"],"sourcesContent":["import { pathOr } from 'ramda';\n\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  watch,\n} from '@ringcentral-integration/core';\nimport type { ApiError } from '@ringcentral/sdk';\n\nimport { promisedThrottle } from '../../lib/debounce-throttle';\nimport { Module } from '../../lib/di';\nimport validateIsOffline from '../../lib/validateIsOffline';\nimport type {\n  Deps,\n  ErrorMessages,\n  SharedState,\n} from './AvailabilityMonitor.interface';\nimport {\n  extractUrl,\n  generateRandomNumber,\n  isHAEnabledAPI,\n  isHAError,\n} from './availabilityMonitorHelper';\nimport { errorMessages } from './errorMessages';\n\nexport const HEALTH_CHECK_INTERVAL = 60 * 1000;\nexport const STATUS_END_POINT = '/restapi/v1.0/status';\nconst DEFAULT_TIME = 0;\nconst SHARED_STATE_EXPIRATION = 12 * 60 * 60 * 1000;\n\n@Module({\n  name: 'AvailabilityMonitor',\n  deps: [\n    'Auth',\n    'Client',\n    { dep: 'Prefix', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'Environment', optional: true },\n    { dep: 'AvailabilityMonitorOptions', optional: true },\n  ],\n})\nexport class AvailabilityMonitor extends RcModuleV2<Deps> {\n  protected _enabled = this._deps.availabilityMonitorOptions?.enabled ?? false;\n\n  protected _randomTime = DEFAULT_TIME;\n\n  protected _limitedTimeout: NodeJS.Timeout | null = null;\n\n  protected _normalTimeout: NodeJS.Timeout | null = null;\n\n  protected _promise: Promise<Response> | null = null;\n\n  protected _healthRetryTime = HEALTH_CHECK_INTERVAL;\n\n  protected _unbindHandlers: (() => void) | null = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  /**\n   * When App is in Limited Mode and Status check met a non-503 error\n   */\n  @state\n  hasLimitedStatusError = false;\n\n  @state\n  isLimitedMode = false;\n\n  @state\n  isVoIPOnlyMode = false;\n\n  @action\n  setLimitedModeStatusError() {\n    this.hasLimitedStatusError = true;\n  }\n\n  @action\n  setNormalMode() {\n    this.hasLimitedStatusError = false;\n    this.isLimitedMode = false;\n    this.isVoIPOnlyMode = false;\n  }\n\n  @action\n  setLimitedMode() {\n    this.isLimitedMode = true;\n  }\n\n  @action\n  setVoIPOnlyMode() {\n    this.isVoIPOnlyMode = true;\n  }\n\n  @action\n  setVoIPOnlyReset() {\n    this.isVoIPOnlyMode = false;\n  }\n\n  override onInit() {\n    this._bindHandlers();\n  }\n\n  override onInitOnce() {\n    this._initLocalStorage();\n    watch(\n      this,\n      () => this._deps.environment?.changeCounter,\n      () => {\n        if (this.ready && this._deps.environment?.ready) {\n          this._bindHandlers();\n        }\n      },\n    );\n  }\n\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n\n    const client = this._deps.client.service.client();\n    const platform = this._deps.client.service.platform();\n\n    // TODO: in other modules, when they catch error first check if app is in HA mode.\n    client.on(client.events.beforeRequest, this._beforeRequestHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    platform.addListener(\n      platform.events.loginSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(\n      platform.events.logoutSuccess,\n      this._switchToNormalMode,\n    );\n    platform.addListener(platform.events.logoutError, this._switchToNormalMode);\n    platform.addListener(\n      platform.events.refreshError,\n      this._refreshErrorHandler,\n    );\n    platform.addListener(\n      platform.events.refreshSuccess,\n      this._refreshSuccessHandler,\n    );\n\n    this._unbindHandlers = () => {\n      client.removeListener(\n        client.events.beforeRequest,\n        this._beforeRequestHandler,\n      );\n      client.removeListener(\n        client.events.requestError,\n        this._requestErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.loginSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutSuccess,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.logoutError,\n        this._switchToNormalMode,\n      );\n      platform.removeListener(\n        platform.events.refreshError,\n        this._refreshErrorHandler,\n      );\n      platform.removeListener(\n        platform.events.refreshSuccess,\n        this._refreshSuccessHandler,\n      );\n      this._unbindHandlers = null;\n    };\n  }\n\n  _beforeRequestHandler = (params: Request) => {\n    if (!this.isLimitedAvailabilityMode || !this._enabled) {\n      return;\n    }\n\n    const requestUrl = pathOr<string | null>(null, ['_request', 'url'], params);\n    const requestMethod = pathOr<string | null>(\n      null,\n      ['_request', 'method'],\n      params,\n    );\n\n    if (!requestUrl || !requestMethod) {\n      return;\n    }\n\n    // In the limited availability mode, should not block status check api\n    // or highly availability api.\n    if (\n      extractUrl({ url: requestUrl }) === STATUS_END_POINT ||\n      isHAEnabledAPI({ url: requestUrl, method: requestMethod })\n    ) {\n      return;\n    }\n\n    throw new Error(errorMessages.serviceLimited);\n  };\n\n  /**\n   * Retrieve retry after value from response headers\n   */\n  _retrieveRetryAfter(headers: Response['headers']) {\n    try {\n      const retryAfter = parseFloat(`${headers.get('Retry-After') || -1}`);\n      return Number.isNaN(retryAfter) ? -1 : retryAfter;\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      return -1;\n    }\n  }\n\n  /**\n   * Check if app can enter LA mode.\n   * If this module is not enabled, just return.\n   *\n   */\n  _requestErrorHandler = async (error: ApiError) => {\n    if (\n      error.response &&\n      !(error.response as ApiError['response'] & ErrorMessages)._json\n    ) {\n      (error.response as ApiError['response'] & ErrorMessages)._json =\n        await error.response.clone().json();\n    }\n    const requestUrl = pathOr<Request['url']>('', ['request', 'url'], error);\n    const extractedUrl = extractUrl({\n      url: requestUrl,\n    });\n\n    // If app is in Limited Mode and staus API met a status which is not 200 nor 503\n    if (\n      this.isLimitedAvailabilityMode &&\n      extractedUrl === STATUS_END_POINT &&\n      !isHAError(error)\n    ) {\n      if (!this.hasLimitedStatusError) {\n        this.setLimitedModeStatusError();\n      }\n      return;\n    }\n\n    if (!isHAError(error) || !this._enabled) {\n      return;\n    }\n\n    const headers = pathOr(\n      {},\n      ['response', 'headers'],\n      error,\n    ) as Response['headers'];\n    const retryAfter = this._retrieveRetryAfter(headers);\n\n    if (retryAfter > 0) {\n      // Retry-After unit is secons, make it mili-secons\n      this._healthRetryTime = retryAfter * 1000;\n    } else {\n      this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    }\n\n    this._switchToLimitedMode();\n    this._retry();\n  };\n\n  _refreshErrorHandler = async (error: ApiError) => {\n    const isOffline = validateIsOffline(error.message);\n\n    const platform = this._deps.client.service.platform();\n    const RES_STATUS = (error.response && error.response.status) || null;\n    const refreshTokenValid =\n      (isOffline || Number(RES_STATUS) >= 500) &&\n      (await platform.auth().refreshTokenValid());\n    if (refreshTokenValid) {\n      this._switchToVoIPOnlyMode();\n    }\n  };\n\n  _refreshSuccessHandler = () => {\n    if (this.isVoIPOnlyMode) {\n      this.setVoIPOnlyReset();\n    }\n    this._clearLimitedTimeout();\n  };\n\n  _switchToVoIPOnlyMode = () => {\n    if (this.isVoIPOnlyMode) {\n      return;\n    }\n\n    this._healthRetryTime = HEALTH_CHECK_INTERVAL;\n    this.setVoIPOnlyMode();\n    this._retry();\n  };\n\n  _switchToLimitedMode() {\n    if (this.isLimitedMode) {\n      return;\n    }\n\n    this.setLimitedMode();\n  }\n\n  _switchToNormalMode = () => {\n    if (!this.isLimitedAvailabilityMode) {\n      return;\n    }\n\n    this.setNormalMode();\n\n    this._clearLimitedTimeout();\n    this._clearNormalTimeout();\n  };\n\n  _clearLimitedTimeout() {\n    if (this._limitedTimeout) {\n      clearTimeout(this._limitedTimeout);\n      this._limitedTimeout = null;\n    }\n  }\n\n  _clearNormalTimeout() {\n    if (this._normalTimeout) {\n      clearTimeout(this._normalTimeout);\n      this._normalTimeout = null;\n    }\n  }\n\n  async _getStatus() {\n    // !!This API must be always called with OAuth token in Authorization header\n    // !! (same as in case of regular API calls) in order to ensure the request is routed to proper POD/partition.\n    // Client app can even continue use expired access token with this API - backend will pass such requests through.\n    // The result of the API call is unpredictable when it is called without access token!\n    //\n    // Reference: https://wiki.ringcentral.com/display/PLAT/High+Availability+Guidelines+for+API+Clients\n\n    const res: Response = await this._deps.client.service\n      .platform()\n      .get('/restapi/v1.0/status', null, {\n        skipAuthCheck: true,\n        headers: {\n          Authorization: `Bearer ${this._deps.auth.accessToken}`,\n        },\n      });\n    return res;\n  }\n\n  _retry() {\n    if (!this._limitedTimeout) {\n      this._limitedTimeout = setTimeout(() => {\n        this._clearLimitedTimeout();\n        this._healthCheck();\n      }, this._healthRetryTime);\n    }\n  }\n\n  /**\n   * Inner method of health checking\n   */\n  async _healthCheck({ manual = false } = {}) {\n    if (this._promise) return;\n    try {\n      this._promise = this._getStatus();\n      const response = await this._promise;\n      if (!response || response.status !== 200) {\n        return;\n      }\n    } catch (err) {\n      console.error('error from request of /restapi/v1.0/status.');\n      return;\n    } finally {\n      this._promise = null;\n    }\n    if (manual) {\n      this._clearNormalTimeout();\n      this._switchToNormalMode();\n      return;\n    }\n    // In the described situation Client Application should follow an \"Exponential Backoff\" approach:\n    // The retries exponentially increase the waiting time up to a certain threshold.\n    // The idea is that if the server is down temporarily,\n    // it is not overwhelmed with requests hitting at the same time when it comes back up.\n    //\n    // Reference: https://wiki.ringcentral.com/display/PLAT/Error+Handling+Guidelines+for+API+Clients\n\n    this._randomTime = this._randomTime || generateRandomNumber(); // Generate random seconds (1 ~ 121)\n    this._normalTimeout = setTimeout(() => {\n      this._clearNormalTimeout();\n      this._switchToNormalMode();\n    }, this._randomTime * 1000);\n  }\n\n  /**\n   * Health check with status API\n   */\n  healthCheck = promisedThrottle({\n    async fn(this: AvailabilityMonitor) {\n      return this._healthCheck({ manual: true });\n    },\n  });\n\n  /**\n   * Check if the error is Survival Mode error,\n   * Or if app is already in Survival Mode and current request is blocked with an error.\n   */\n  async checkIfHAError(error: ApiError) {\n    const errMessage = pathOr<string | null>(null, ['message'], error);\n    if (error.response) {\n      (error.response as ApiError['response'] & ErrorMessages)._json =\n        await error.response.clone().json();\n    }\n    return isHAError(error) || errMessage === errorMessages.serviceLimited;\n  }\n\n  /**\n   * Is App in limited mode\n   */\n  get isLimitedAvailabilityMode() {\n    return this.isLimitedMode || this.isVoIPOnlyMode;\n  }\n\n  /**\n   * Custom storage with localStorage in synchronous way\n   * ! Be aware that these states are shared across multiple tabs !\n   */\n  @state\n  sharedStates: Record<string, SharedState> = {};\n\n  @computed((that: AvailabilityMonitor) => [that.sharedStates])\n  get hasCallSession() {\n    return Object.keys(this.sharedStates).some(\n      (key) => this.sharedStates[key].hasCallSession,\n    );\n  }\n\n  @computed((that: AvailabilityMonitor) => [that.sharedStates])\n  get hasWebSocketReady() {\n    return Object.keys(this.sharedStates).some(\n      (key) => this.sharedStates[key].webSocketReady,\n    );\n  }\n\n  _sharedStatesKey!: string;\n  _currentTabKeys: string[] = [];\n\n  _writeSharedStates() {\n    const json = JSON.stringify(this.sharedStates);\n    localStorage.setItem(this._sharedStatesKey, json);\n  }\n\n  @action\n  _retrieveSharedStates() {\n    const json = localStorage.getItem(this._sharedStatesKey);\n    this.sharedStates = JSON.parse(json ?? '{}');\n  }\n\n  _initLocalStorage() {\n    this._sharedStatesKey = `${this._deps.prefix}-AvailabilityMonitor-sharedStates`;\n    this._retrieveSharedStates();\n    let isUnloading: boolean | undefined;\n    window.addEventListener('storage', (ev) => {\n      if (!isUnloading && ev.key === this._sharedStatesKey) {\n        this._retrieveSharedStates();\n      }\n    });\n    window.addEventListener('unload', () => {\n      isUnloading = true;\n      this._unloadSharedStates();\n    });\n  }\n\n  @action\n  _unloadSharedStates() {\n    let states: Record<string, SharedState> = {\n      ...this.sharedStates,\n    };\n\n    // unload base on cached keys\n    this._currentTabKeys.forEach((key) => {\n      delete states[key];\n    });\n    this._currentTabKeys = [];\n\n    // unload base on tabId\n    if (this._deps.tabManager) {\n      Object.keys(states).forEach((key) => {\n        if (states[key].tabId === this._deps.tabManager!.id) {\n          delete states[key];\n        }\n      });\n    }\n\n    // clean\n    states = this._cleanSharedStates(states);\n\n    // write\n    this.sharedStates = states;\n    this._writeSharedStates();\n  }\n\n  _cleanSharedStates(states: Record<string, SharedState>) {\n    Object.keys(states).forEach((key) => {\n      const state = states[key];\n      if (\n        // timestamp expired\n        Date.now() - state.timestamp > SHARED_STATE_EXPIRATION ||\n        // tabs expired/closed\n        (state.tabId &&\n          this._deps.tabManager &&\n          !this._deps.tabManager.actualTabIds.includes(state.tabId))\n      ) {\n        delete states[key];\n      }\n    });\n    return states;\n  }\n\n  @action\n  setSharedState(\n    key: string,\n    state?: Omit<SharedState, 'tabId' | 'timestamp'>,\n  ) {\n    let states: Record<string, SharedState> = {\n      ...this.sharedStates,\n    };\n\n    // update\n    if (state) {\n      const current = states[key];\n      states[key] = {\n        ...current,\n        ...state,\n        timestamp: Date.now(),\n        tabId: this._deps.tabManager?.id,\n      };\n    } else {\n      delete states[key];\n    }\n\n    // clean\n    states = this._cleanSharedStates(states);\n\n    // write storage\n    this.sharedStates = states;\n    this._writeSharedStates();\n\n    // cache keys\n    if (!this._currentTabKeys.includes(key)) {\n      this._currentTabKeys.push(key);\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,KAAA,GAAAD,OAAA;AASA,IAAAE,iBAAA,GAAAF,OAAA;AACA,IAAAG,GAAA,GAAAH,OAAA;AACA,IAAAI,kBAAA,GAAAC,sBAAA,CAAAL,OAAA;AAMA,IAAAM,0BAAA,GAAAN,OAAA;AAMA,IAAAO,cAAA,GAAAP,OAAA;AAAgD,IAAAQ,IAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,MAAA,EAAAC,OAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA;AAAA,SAAAX,uBAAAY,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAAA,SAAAE,QAAAC,MAAA,EAAAC,cAAA,QAAAC,IAAA,GAAAC,MAAA,CAAAD,IAAA,CAAAF,MAAA,OAAAG,MAAA,CAAAC,qBAAA,QAAAC,OAAA,GAAAF,MAAA,CAAAC,qBAAA,CAAAJ,MAAA,GAAAC,cAAA,KAAAI,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAAJ,MAAA,CAAAK,wBAAA,CAAAR,MAAA,EAAAO,GAAA,EAAAE,UAAA,OAAAP,IAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,IAAA,EAAAG,OAAA,YAAAH,IAAA;AAAA,SAAAU,cAAAC,MAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA,UAAAG,MAAA,WAAAF,SAAA,CAAAD,CAAA,IAAAC,SAAA,CAAAD,CAAA,QAAAA,CAAA,OAAAf,OAAA,CAAAI,MAAA,CAAAc,MAAA,OAAAC,OAAA,WAAAC,GAAA,IAAAC,eAAA,CAAAP,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA,SAAAhB,MAAA,CAAAkB,yBAAA,GAAAlB,MAAA,CAAAmB,gBAAA,CAAAT,MAAA,EAAAV,MAAA,CAAAkB,yBAAA,CAAAJ,MAAA,KAAAlB,OAAA,CAAAI,MAAA,CAAAc,MAAA,GAAAC,OAAA,WAAAC,GAAA,IAAAhB,MAAA,CAAAoB,cAAA,CAAAV,MAAA,EAAAM,GAAA,EAAAhB,MAAA,CAAAK,wBAAA,CAAAS,MAAA,EAAAE,GAAA,iBAAAN,MAAA;AAAA,SAAAO,gBAAAvB,GAAA,EAAAsB,GAAA,EAAAK,KAAA,IAAAL,GAAA,GAAAM,cAAA,CAAAN,GAAA,OAAAA,GAAA,IAAAtB,GAAA,IAAAM,MAAA,CAAAoB,cAAA,CAAA1B,GAAA,EAAAsB,GAAA,IAAAK,KAAA,EAAAA,KAAA,EAAAf,UAAA,QAAAiB,YAAA,QAAAC,QAAA,oBAAA9B,GAAA,CAAAsB,GAAA,IAAAK,KAAA,WAAA3B,GAAA;AAAA,SAAA+B,mBAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,EAAAd,GAAA,EAAAe,GAAA,cAAAC,IAAA,GAAAN,GAAA,CAAAV,GAAA,EAAAe,GAAA,OAAAV,KAAA,GAAAW,IAAA,CAAAX,KAAA,WAAAY,KAAA,IAAAL,MAAA,CAAAK,KAAA,iBAAAD,IAAA,CAAAE,IAAA,IAAAP,OAAA,CAAAN,KAAA,YAAAc,OAAA,CAAAR,OAAA,CAAAN,KAAA,EAAAe,IAAA,CAAAP,KAAA,EAAAC,MAAA;AAAA,SAAAO,kBAAAC,EAAA,6BAAAC,IAAA,SAAAC,IAAA,GAAA5B,SAAA,aAAAuB,OAAA,WAAAR,OAAA,EAAAC,MAAA,QAAAF,GAAA,GAAAY,EAAA,CAAA9B,KAAA,CAAA+B,IAAA,EAAAC,IAAA,YAAAX,MAAAR,KAAA,IAAAI,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,UAAAT,KAAA,cAAAS,OAAAW,GAAA,IAAAhB,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,WAAAW,GAAA,KAAAZ,KAAA,CAAAa,SAAA;AAAA,SAAAC,2BAAAjC,MAAA,EAAAkC,QAAA,EAAAC,UAAA,EAAAC,OAAA,SAAAD,UAAA,UAAA7C,MAAA,CAAAoB,cAAA,CAAAV,MAAA,EAAAkC,QAAA,IAAAtC,UAAA,EAAAuC,UAAA,CAAAvC,UAAA,EAAAiB,YAAA,EAAAsB,UAAA,CAAAtB,YAAA,EAAAC,QAAA,EAAAqB,UAAA,CAAArB,QAAA,EAAAH,KAAA,EAAAwB,UAAA,CAAAE,WAAA,GAAAF,UAAA,CAAAE,WAAA,CAAAC,IAAA,CAAAF,OAAA;AAAA,SAAAG,gBAAAC,QAAA,EAAAC,WAAA,UAAAD,QAAA,YAAAC,WAAA,eAAAC,SAAA;AAAA,SAAAC,kBAAA3C,MAAA,EAAA4C,KAAA,aAAA3C,CAAA,MAAAA,CAAA,GAAA2C,KAAA,CAAAzC,MAAA,EAAAF,CAAA,UAAAkC,UAAA,GAAAS,KAAA,CAAA3C,CAAA,GAAAkC,UAAA,CAAAvC,UAAA,GAAAuC,UAAA,CAAAvC,UAAA,WAAAuC,UAAA,CAAAtB,YAAA,wBAAAsB,UAAA,EAAAA,UAAA,CAAArB,QAAA,SAAAxB,MAAA,CAAAoB,cAAA,CAAAV,MAAA,EAAAY,cAAA,CAAAuB,UAAA,CAAA7B,GAAA,GAAA6B,UAAA;AAAA,SAAAU,aAAAJ,WAAA,EAAAK,UAAA,EAAAC,WAAA,QAAAD,UAAA,EAAAH,iBAAA,CAAAF,WAAA,CAAAO,SAAA,EAAAF,UAAA,OAAAC,WAAA,EAAAJ,iBAAA,CAAAF,WAAA,EAAAM,WAAA,GAAAzD,MAAA,CAAAoB,cAAA,CAAA+B,WAAA,iBAAA3B,QAAA,mBAAA2B,WAAA;AAAA,SAAA7B,eAAAS,GAAA,QAAAf,GAAA,GAAA2C,YAAA,CAAA5B,GAAA,oBAAA6B,OAAA,CAAA5C,GAAA,iBAAAA,GAAA,GAAA6C,MAAA,CAAA7C,GAAA;AAAA,SAAA2C,aAAAG,KAAA,EAAAC,IAAA,QAAAH,OAAA,CAAAE,KAAA,kBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAAG,MAAA,CAAAC,WAAA,OAAAF,IAAA,KAAAtB,SAAA,QAAAyB,GAAA,GAAAH,IAAA,CAAAhB,IAAA,CAAAc,KAAA,EAAAC,IAAA,oBAAAH,OAAA,CAAAO,GAAA,uBAAAA,GAAA,YAAAf,SAAA,4DAAAW,IAAA,gBAAAF,MAAA,GAAAO,MAAA,EAAAN,KAAA;AAAA,SAAAO,UAAAC,QAAA,EAAAC,UAAA,eAAAA,UAAA,mBAAAA,UAAA,uBAAAnB,SAAA,0DAAAkB,QAAA,CAAAZ,SAAA,GAAA1D,MAAA,CAAAwE,MAAA,CAAAD,UAAA,IAAAA,UAAA,CAAAb,SAAA,IAAAe,WAAA,IAAApD,KAAA,EAAAiD,QAAA,EAAA9C,QAAA,QAAAD,YAAA,aAAAvB,MAAA,CAAAoB,cAAA,CAAAkD,QAAA,iBAAA9C,QAAA,gBAAA+C,UAAA,EAAAG,eAAA,CAAAJ,QAAA,EAAAC,UAAA;AAAA,SAAAG,gBAAAC,CAAA,EAAAC,CAAA,IAAAF,eAAA,GAAA1E,MAAA,CAAA6E,cAAA,GAAA7E,MAAA,CAAA6E,cAAA,CAAAC,IAAA,cAAAJ,gBAAAC,CAAA,EAAAC,CAAA,IAAAD,CAAA,CAAAI,SAAA,GAAAH,CAAA,SAAAD,CAAA,YAAAD,eAAA,CAAAC,CAAA,EAAAC,CAAA;AAAA,SAAAI,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,GAAAC,eAAA,CAAAL,OAAA,GAAAM,MAAA,MAAAL,yBAAA,QAAAM,SAAA,GAAAF,eAAA,OAAAb,WAAA,EAAAc,MAAA,GAAAE,OAAA,CAAAC,SAAA,CAAAL,KAAA,EAAAzE,SAAA,EAAA4E,SAAA,YAAAD,MAAA,GAAAF,KAAA,CAAA7E,KAAA,OAAAI,SAAA,YAAA+E,0BAAA,OAAAJ,MAAA;AAAA,SAAAI,2BAAApD,IAAA,EAAAS,IAAA,QAAAA,IAAA,KAAAY,OAAA,CAAAZ,IAAA,yBAAAA,IAAA,2BAAAA,IAAA,aAAAA,IAAA,yBAAAI,SAAA,uEAAAwC,sBAAA,CAAArD,IAAA;AAAA,SAAAqD,uBAAArD,IAAA,QAAAA,IAAA,yBAAAsD,cAAA,wEAAAtD,IAAA;AAAA,SAAA4C,0BAAA,eAAAM,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAtC,SAAA,CAAAuC,OAAA,CAAAjD,IAAA,CAAAyC,OAAA,CAAAC,SAAA,CAAAM,OAAA,8CAAAE,CAAA;AAAA,SAAAZ,gBAAAX,CAAA,IAAAW,eAAA,GAAAtF,MAAA,CAAA6E,cAAA,GAAA7E,MAAA,CAAAmG,cAAA,CAAArB,IAAA,cAAAQ,gBAAAX,CAAA,WAAAA,CAAA,CAAAI,SAAA,IAAA/E,MAAA,CAAAmG,cAAA,CAAAxB,CAAA,aAAAW,eAAA,CAAAX,CAAA;AAAA,SAAAyB,0BAAA1F,MAAA,EAAAkC,QAAA,EAAAyD,UAAA,EAAAxD,UAAA,EAAAC,OAAA,QAAAwD,IAAA,OAAAtG,MAAA,CAAAD,IAAA,CAAA8C,UAAA,EAAA9B,OAAA,WAAAC,GAAA,IAAAsF,IAAA,CAAAtF,GAAA,IAAA6B,UAAA,CAAA7B,GAAA,OAAAsF,IAAA,CAAAhG,UAAA,KAAAgG,IAAA,CAAAhG,UAAA,EAAAgG,IAAA,CAAA/E,YAAA,KAAA+E,IAAA,CAAA/E,YAAA,iBAAA+E,IAAA,IAAAA,IAAA,CAAAvD,WAAA,IAAAuD,IAAA,CAAA9E,QAAA,WAAA8E,IAAA,GAAAD,UAAA,CAAAE,KAAA,GAAAC,OAAA,GAAAC,MAAA,WAAAH,IAAA,EAAAI,SAAA,WAAAA,SAAA,CAAAhG,MAAA,EAAAkC,QAAA,EAAA0D,IAAA,KAAAA,IAAA,KAAAA,IAAA,OAAAxD,OAAA,IAAAwD,IAAA,CAAAvD,WAAA,eAAAuD,IAAA,CAAAjF,KAAA,GAAAiF,IAAA,CAAAvD,WAAA,GAAAuD,IAAA,CAAAvD,WAAA,CAAAC,IAAA,CAAAF,OAAA,YAAAwD,IAAA,CAAAvD,WAAA,GAAAL,SAAA,QAAA4D,IAAA,CAAAvD,WAAA,eAAA/C,MAAA,CAAAoB,cAAA,CAAAV,MAAA,EAAAkC,QAAA,EAAA0D,IAAA,GAAAA,IAAA,kBAAAA,IAAA;AAAA,SAAAK,0BAAA9D,UAAA,EAAAC,OAAA,cAAA8D,KAAA;AAEzC,IAAMC,qBAAqB,GAAG,EAAE,GAAG,IAAI;AAACC,OAAA,CAAAD,qBAAA,GAAAA,qBAAA;AACxC,IAAME,gBAAgB,GAAG,sBAAsB;AAACD,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AACvD,IAAMC,YAAY,GAAG,CAAC;AACtB,IAAMC,uBAAuB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;AAAC,IAavCC,mBAAmB,IAAAjI,IAAA,GAX/B,IAAAkI,UAAM,EAAC;EACNC,IAAI,EAAE,qBAAqB;EAC3BC,IAAI,EAAE,CACJ,MAAM,EACN,QAAQ,EACR;IAAEC,GAAG,EAAE,QAAQ;IAAEC,QAAQ,EAAE;EAAK,CAAC,EACjC;IAAED,GAAG,EAAE,YAAY;IAAEC,QAAQ,EAAE;EAAK,CAAC,EACrC;IAAED,GAAG,EAAE,aAAa;IAAEC,QAAQ,EAAE;EAAK,CAAC,EACtC;IAAED,GAAG,EAAE,4BAA4B;IAAEC,QAAQ,EAAE;EAAK,CAAC;AAEzD,CAAC,CAAC,EAAArI,KAAA,GA2YC,IAAAsI,cAAQ,EAAC,UAACC,IAAyB;EAAA,OAAK,CAACA,IAAI,CAACC,YAAY,CAAC;AAAA,EAAC,EAAAvI,KAAA,GAO5D,IAAAqI,cAAQ,EAAC,UAACC,IAAyB;EAAA,OAAK,CAACA,IAAI,CAACC,YAAY,CAAC;AAAA,EAAC,EAAAzI,IAAA,CAAAG,MAAA,IAAAC,OAAA,0BAAAsI,UAAA;EAAAtD,SAAA,CAAA6C,mBAAA,EAAAS,UAAA;EAAA,IAAAC,MAAA,GAAA5C,YAAA,CAAAkC,mBAAA;EAlY7D,SAAAA,oBAAYG,IAAU,EAAE;IAAA,IAAAQ,qBAAA,EAAAC,sBAAA;IAAA,IAAAC,KAAA;IAAA9E,eAAA,OAAAiE,mBAAA;IACtBa,KAAA,GAAAH,MAAA,CAAA5E,IAAA,OAAM;MACJqE,IAAI,EAAJA;IACF,CAAC;IAAEU,KAAA,CAjBKC,QAAQ,IAAAH,qBAAA,IAAAC,sBAAA,GAAGC,KAAA,CAAKE,KAAK,CAACC,0BAA0B,cAAAJ,sBAAA,uBAArCA,sBAAA,CAAuCK,OAAO,cAAAN,qBAAA,cAAAA,qBAAA,GAAI,KAAK;IAAAE,KAAA,CAElEK,WAAW,GAAGpB,YAAY;IAAAe,KAAA,CAE1BM,eAAe,GAA0B,IAAI;IAAAN,KAAA,CAE7CO,cAAc,GAA0B,IAAI;IAAAP,KAAA,CAE5CQ,QAAQ,GAA6B,IAAI;IAAAR,KAAA,CAEzCS,gBAAgB,GAAG3B,qBAAqB;IAAAkB,KAAA,CAExCU,eAAe,GAAwB,IAAI;IAQrD;AACF;AACA;IAFE9F,0BAAA,CAAAoF,KAAA,2BAAAzI,WAAA,EAAAsG,sBAAA,CAAAmC,KAAA;IAAApF,0BAAA,CAAAoF,KAAA,mBAAAxI,YAAA,EAAAqG,sBAAA,CAAAmC,KAAA;IAAApF,0BAAA,CAAAoF,KAAA,oBAAAvI,YAAA,EAAAoG,sBAAA,CAAAmC,KAAA;IAAAA,KAAA,CAsHAW,qBAAqB,GAAG,UAACC,MAAe,EAAK;MAC3C,IAAI,CAACZ,KAAA,CAAKa,yBAAyB,IAAI,CAACb,KAAA,CAAKC,QAAQ,EAAE;QACrD;MACF;MAEA,IAAMa,UAAU,GAAG,IAAAC,aAAM,EAAgB,IAAI,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC,EAAEH,MAAM,CAAC;MAC3E,IAAMI,aAAa,GAAG,IAAAD,aAAM,EAC1B,IAAI,EACJ,CAAC,UAAU,EAAE,QAAQ,CAAC,EACtBH,MACF,CAAC;MAED,IAAI,CAACE,UAAU,IAAI,CAACE,aAAa,EAAE;QACjC;MACF;;MAEA;MACA;MACA,IACE,IAAAC,qCAAU,EAAC;QAAEC,GAAG,EAAEJ;MAAW,CAAC,CAAC,KAAK9B,gBAAgB,IACpD,IAAAmC,yCAAc,EAAC;QAAED,GAAG,EAAEJ,UAAU;QAAEM,MAAM,EAAEJ;MAAc,CAAC,CAAC,EAC1D;QACA;MACF;MAEA,MAAM,IAAInC,KAAK,CAACwC,4BAAa,CAACC,cAAc,CAAC;IAC/C,CAAC;IAcD;AACF;AACA;AACA;AACA;IAJEtB,KAAA,CAKAuB,oBAAoB;MAAA,IAAAC,IAAA,GAAAlH,iBAAA,eAAAmH,kBAAA,CAAAC,IAAA,CAAG,SAAAC,QAAOzH,KAAe;QAAA,IAAA4G,UAAA,EAAAc,YAAA,EAAAC,OAAA,EAAAC,UAAA;QAAA,OAAAL,kBAAA,CAAAM,IAAA,UAAAC,SAAAC,QAAA;UAAA;YAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBAAA,MAEzCjI,KAAK,CAACkI,QAAQ,IACd,CAAElI,KAAK,CAACkI,QAAQ,CAA0CC,KAAK;kBAAAJ,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAAF,QAAA,CAAAE,IAAA;gBAAA,OAGvDjI,KAAK,CAACkI,QAAQ,CAACE,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;cAAA;gBADpCrI,KAAK,CAACkI,QAAQ,CAA0CC,KAAK,GAAAJ,QAAA,CAAAO,IAAA;cAAA;gBAG1D1B,UAAU,GAAG,IAAAC,aAAM,EAAiB,EAAE,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE7G,KAAK,CAAC;gBAClE0H,YAAY,GAAG,IAAAX,qCAAU,EAAC;kBAC9BC,GAAG,EAAEJ;gBACP,CAAC,CAAC,EAEF;gBAAA,MAEEd,KAAA,CAAKa,yBAAyB,IAC9Be,YAAY,KAAK5C,gBAAgB,IACjC,CAAC,IAAAyD,oCAAS,EAACvI,KAAK,CAAC;kBAAA+H,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAEjB,IAAI,CAACnC,KAAA,CAAK0C,qBAAqB,EAAE;kBAC/B1C,KAAA,CAAK2C,yBAAyB,CAAC,CAAC;gBAClC;gBAAC,OAAAV,QAAA,CAAAW,MAAA;cAAA;gBAAA,MAIC,CAAC,IAAAH,oCAAS,EAACvI,KAAK,CAAC,IAAI,CAAC8F,KAAA,CAAKC,QAAQ;kBAAAgC,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAA,OAAAF,QAAA,CAAAW,MAAA;cAAA;gBAIjCf,OAAO,GAAG,IAAAd,aAAM,EACpB,CAAC,CAAC,EACF,CAAC,UAAU,EAAE,SAAS,CAAC,EACvB7G,KACF,CAAC;gBACK4H,UAAU,GAAG9B,KAAA,CAAK6C,mBAAmB,CAAChB,OAAO,CAAC;gBAEpD,IAAIC,UAAU,GAAG,CAAC,EAAE;kBAClB;kBACA9B,KAAA,CAAKS,gBAAgB,GAAGqB,UAAU,GAAG,IAAI;gBAC3C,CAAC,MAAM;kBACL9B,KAAA,CAAKS,gBAAgB,GAAG3B,qBAAqB;gBAC/C;gBAEAkB,KAAA,CAAK8C,oBAAoB,CAAC,CAAC;gBAC3B9C,KAAA,CAAK+C,MAAM,CAAC,CAAC;cAAC;cAAA;gBAAA,OAAAd,QAAA,CAAAe,IAAA;YAAA;UAAA;QAAA,GAAArB,OAAA;MAAA,CACf;MAAA,iBAAAsB,EAAA;QAAA,OAAAzB,IAAA,CAAA/I,KAAA,OAAAI,SAAA;MAAA;IAAA;IAAAmH,KAAA,CAEDkD,oBAAoB;MAAA,IAAAC,KAAA,GAAA7I,iBAAA,eAAAmH,kBAAA,CAAAC,IAAA,CAAG,SAAA0B,SAAOlJ,KAAe;QAAA,IAAAmJ,SAAA,EAAAC,QAAA,EAAAC,UAAA,EAAAC,iBAAA;QAAA,OAAA/B,kBAAA,CAAAM,IAAA,UAAA0B,UAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAAxB,IAAA,GAAAwB,SAAA,CAAAvB,IAAA;cAAA;gBACrCkB,SAAS,GAAG,IAAAM,6BAAiB,EAACzJ,KAAK,CAAC0J,OAAO,CAAC;gBAE5CN,QAAQ,GAAGtD,KAAA,CAAKE,KAAK,CAAC2D,MAAM,CAACC,OAAO,CAACR,QAAQ,CAAC,CAAC;gBAC/CC,UAAU,GAAIrJ,KAAK,CAACkI,QAAQ,IAAIlI,KAAK,CAACkI,QAAQ,CAAC2B,MAAM,IAAK,IAAI;gBAAAL,SAAA,CAAAM,EAAA,GAEjEX,SAAS,IAAIhH,MAAM,CAACkH,UAAU,CAAC,IAAI,GAAG;gBAAA,KAAAG,SAAA,CAAAM,EAAA;kBAAAN,SAAA,CAAAvB,IAAA;kBAAA;gBAAA;gBAAAuB,SAAA,CAAAvB,IAAA;gBAAA,OAChCmB,QAAQ,CAACW,IAAI,CAAC,CAAC,CAACT,iBAAiB,CAAC,CAAC;cAAA;gBAAAE,SAAA,CAAAM,EAAA,GAAAN,SAAA,CAAAlB,IAAA;cAAA;gBAFtCgB,iBAAiB,GAAAE,SAAA,CAAAM,EAAA;gBAGvB,IAAIR,iBAAiB,EAAE;kBACrBxD,KAAA,CAAKkE,qBAAqB,CAAC,CAAC;gBAC9B;cAAC;cAAA;gBAAA,OAAAR,SAAA,CAAAV,IAAA;YAAA;UAAA;QAAA,GAAAI,QAAA;MAAA,CACF;MAAA,iBAAAe,GAAA;QAAA,OAAAhB,KAAA,CAAA1K,KAAA,OAAAI,SAAA;MAAA;IAAA;IAAAmH,KAAA,CAEDoE,sBAAsB,GAAG,YAAM;MAC7B,IAAIpE,KAAA,CAAKqE,cAAc,EAAE;QACvBrE,KAAA,CAAKsE,gBAAgB,CAAC,CAAC;MACzB;MACAtE,KAAA,CAAKuE,oBAAoB,CAAC,CAAC;IAC7B,CAAC;IAAAvE,KAAA,CAEDkE,qBAAqB,GAAG,YAAM;MAC5B,IAAIlE,KAAA,CAAKqE,cAAc,EAAE;QACvB;MACF;MAEArE,KAAA,CAAKS,gBAAgB,GAAG3B,qBAAqB;MAC7CkB,KAAA,CAAKwE,eAAe,CAAC,CAAC;MACtBxE,KAAA,CAAK+C,MAAM,CAAC,CAAC;IACf,CAAC;IAAA/C,KAAA,CAUDyE,mBAAmB,GAAG,YAAM;MAC1B,IAAI,CAACzE,KAAA,CAAKa,yBAAyB,EAAE;QACnC;MACF;MAEAb,KAAA,CAAK0E,aAAa,CAAC,CAAC;MAEpB1E,KAAA,CAAKuE,oBAAoB,CAAC,CAAC;MAC3BvE,KAAA,CAAK2E,mBAAmB,CAAC,CAAC;IAC5B,CAAC;IAgFD;AACF;AACA;IAFE3E,KAAA,CAGA4E,WAAW,GAAG,IAAAC,kCAAgB,EAAC;MACvBtK,EAAE,WAAAA,GAAA,EAA4B;QAAA,IAAAuK,MAAA;QAAA,OAAAxK,iBAAA,eAAAmH,kBAAA,CAAAC,IAAA,UAAAqD,SAAA;UAAA,OAAAtD,kBAAA,CAAAM,IAAA,UAAAiD,UAAAC,SAAA;YAAA;cAAA,QAAAA,SAAA,CAAA/C,IAAA,GAAA+C,SAAA,CAAA9C,IAAA;gBAAA;kBAAA,OAAA8C,SAAA,CAAArC,MAAA,WAC3BkC,MAAI,CAACI,YAAY,CAAC;oBAAEC,MAAM,EAAE;kBAAK,CAAC,CAAC;gBAAA;gBAAA;kBAAA,OAAAF,SAAA,CAAAjC,IAAA;cAAA;YAAA;UAAA,GAAA+B,QAAA;QAAA;MAC5C;IACF,CAAC,CAAC;IAsBF;AACF;AACA;AACA;IAHEnK,0BAAA,CAAAoF,KAAA,kBAAAtI,YAAA,EAAAmG,sBAAA,CAAAmC,KAAA;IAAAA,KAAA,CAqBAoF,gBAAgB;IAAApF,KAAA,CAChBqF,eAAe,GAAa,EAAE;IAAA,OAAArF,KAAA;EAtY9B;EAACxE,YAAA,CAAA2D,mBAAA;IAAAlG,GAAA;IAAAK,KAAA,WAAAqJ,0BAAA,EAe2B;MAC1B,IAAI,CAACD,qBAAqB,GAAG,IAAI;IACnC;EAAC;IAAAzJ,GAAA;IAAAK,KAAA,WAAAoL,cAAA,EAGe;MACd,IAAI,CAAChC,qBAAqB,GAAG,KAAK;MAClC,IAAI,CAAC4C,aAAa,GAAG,KAAK;MAC1B,IAAI,CAACjB,cAAc,GAAG,KAAK;IAC7B;EAAC;IAAApL,GAAA;IAAAK,KAAA,WAAAiM,eAAA,EAGgB;MACf,IAAI,CAACD,aAAa,GAAG,IAAI;IAC3B;EAAC;IAAArM,GAAA;IAAAK,KAAA,WAAAkL,gBAAA,EAGiB;MAChB,IAAI,CAACH,cAAc,GAAG,IAAI;IAC5B;EAAC;IAAApL,GAAA;IAAAK,KAAA,WAAAgL,iBAAA,EAGkB;MACjB,IAAI,CAACD,cAAc,GAAG,KAAK;IAC7B;EAAC;IAAApL,GAAA;IAAAK,KAAA,WAAAkM,OAAA,EAEiB;MAChB,IAAI,CAACC,aAAa,CAAC,CAAC;IACtB;EAAC;IAAAxM,GAAA;IAAAK,KAAA,WAAAoM,WAAA,EAEqB;MAAA,IAAAC,MAAA;MACpB,IAAI,CAACC,iBAAiB,CAAC,CAAC;MACxB,IAAAC,WAAK,EACH,IAAI,EACJ;QAAA,IAAAC,qBAAA;QAAA,QAAAA,qBAAA,GAAMH,MAAI,CAACzF,KAAK,CAAC6F,WAAW,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,aAAa;MAAA,GAC3C,YAAM;QAAA,IAAAC,sBAAA;QACJ,IAAIN,MAAI,CAACO,KAAK,MAAAD,sBAAA,GAAIN,MAAI,CAACzF,KAAK,CAAC6F,WAAW,cAAAE,sBAAA,uBAAtBA,sBAAA,CAAwBC,KAAK,GAAE;UAC/CP,MAAI,CAACF,aAAa,CAAC,CAAC;QACtB;MACF,CACF,CAAC;IACH;EAAC;IAAAxM,GAAA;IAAAK,KAAA,WAAAmM,cAAA,EAEe;MAAA,IAAAU,MAAA;MACd,IAAI,IAAI,CAACzF,eAAe,EAAE;QACxB,IAAI,CAACA,eAAe,CAAC,CAAC;MACxB;MAEA,IAAMmD,MAAM,GAAG,IAAI,CAAC3D,KAAK,CAAC2D,MAAM,CAACC,OAAO,CAACD,MAAM,CAAC,CAAC;MACjD,IAAMP,QAAQ,GAAG,IAAI,CAACpD,KAAK,CAAC2D,MAAM,CAACC,OAAO,CAACR,QAAQ,CAAC,CAAC;;MAErD;MACAO,MAAM,CAACuC,EAAE,CAACvC,MAAM,CAACwC,MAAM,CAACC,aAAa,EAAE,IAAI,CAAC3F,qBAAqB,CAAC;MAClEkD,MAAM,CAACuC,EAAE,CAACvC,MAAM,CAACwC,MAAM,CAACE,YAAY,EAAE,IAAI,CAAChF,oBAAoB,CAAC;MAChE+B,QAAQ,CAACkD,WAAW,CAClBlD,QAAQ,CAAC+C,MAAM,CAACI,YAAY,EAC5B,IAAI,CAAChC,mBACP,CAAC;MACDnB,QAAQ,CAACkD,WAAW,CAClBlD,QAAQ,CAAC+C,MAAM,CAACK,aAAa,EAC7B,IAAI,CAACjC,mBACP,CAAC;MACDnB,QAAQ,CAACkD,WAAW,CAAClD,QAAQ,CAAC+C,MAAM,CAACM,WAAW,EAAE,IAAI,CAAClC,mBAAmB,CAAC;MAC3EnB,QAAQ,CAACkD,WAAW,CAClBlD,QAAQ,CAAC+C,MAAM,CAACO,YAAY,EAC5B,IAAI,CAAC1D,oBACP,CAAC;MACDI,QAAQ,CAACkD,WAAW,CAClBlD,QAAQ,CAAC+C,MAAM,CAACQ,cAAc,EAC9B,IAAI,CAACzC,sBACP,CAAC;MAED,IAAI,CAAC1D,eAAe,GAAG,YAAM;QAC3BmD,MAAM,CAACiD,cAAc,CACnBjD,MAAM,CAACwC,MAAM,CAACC,aAAa,EAC3BH,MAAI,CAACxF,qBACP,CAAC;QACDkD,MAAM,CAACiD,cAAc,CACnBjD,MAAM,CAACwC,MAAM,CAACE,YAAY,EAC1BJ,MAAI,CAAC5E,oBACP,CAAC;QACD+B,QAAQ,CAACwD,cAAc,CACrBxD,QAAQ,CAAC+C,MAAM,CAACI,YAAY,EAC5BN,MAAI,CAAC1B,mBACP,CAAC;QACDnB,QAAQ,CAACwD,cAAc,CACrBxD,QAAQ,CAAC+C,MAAM,CAACK,aAAa,EAC7BP,MAAI,CAAC1B,mBACP,CAAC;QACDnB,QAAQ,CAACwD,cAAc,CACrBxD,QAAQ,CAAC+C,MAAM,CAACM,WAAW,EAC3BR,MAAI,CAAC1B,mBACP,CAAC;QACDnB,QAAQ,CAACwD,cAAc,CACrBxD,QAAQ,CAAC+C,MAAM,CAACO,YAAY,EAC5BT,MAAI,CAACjD,oBACP,CAAC;QACDI,QAAQ,CAACwD,cAAc,CACrBxD,QAAQ,CAAC+C,MAAM,CAACQ,cAAc,EAC9BV,MAAI,CAAC/B,sBACP,CAAC;QACD+B,MAAI,CAACzF,eAAe,GAAG,IAAI;MAC7B,CAAC;IACH;EAAC;IAAAzH,GAAA;IA8BD;AACF;AACA;IAFEK,KAAA,WAAAuJ,oBAGoBhB,OAA4B,EAAE;MAChD,IAAI;QACF,IAAMC,UAAU,GAAGiF,UAAU,IAAAC,MAAA,CAAInF,OAAO,CAACoF,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC;QACpE,OAAO5K,MAAM,CAAC6K,KAAK,CAACpF,UAAU,CAAC,GAAG,CAAC,CAAC,GAAGA,UAAU;MACnD,CAAC,CAAC,OAAO5H,KAAU,EAAuC;QACxD,OAAO,CAAC,CAAC;MACX;IACF;EAAC;IAAAjB,GAAA;IAAAK,KAAA,WAAAwJ,qBAAA,EAoFsB;MACrB,IAAI,IAAI,CAACwC,aAAa,EAAE;QACtB;MACF;MAEA,IAAI,CAACC,cAAc,CAAC,CAAC;IACvB;EAAC;IAAAtM,GAAA;IAAAK,KAAA,WAAAiL,qBAAA,EAasB;MACrB,IAAI,IAAI,CAACjE,eAAe,EAAE;QACxB6G,YAAY,CAAC,IAAI,CAAC7G,eAAe,CAAC;QAClC,IAAI,CAACA,eAAe,GAAG,IAAI;MAC7B;IACF;EAAC;IAAArH,GAAA;IAAAK,KAAA,WAAAqL,oBAAA,EAEqB;MACpB,IAAI,IAAI,CAACpE,cAAc,EAAE;QACvB4G,YAAY,CAAC,IAAI,CAAC5G,cAAc,CAAC;QACjC,IAAI,CAACA,cAAc,GAAG,IAAI;MAC5B;IACF;EAAC;IAAAtH,GAAA;IAAAK,KAAA;MAAA,IAAA8N,WAAA,GAAA9M,iBAAA,eAAAmH,kBAAA,CAAAC,IAAA,UAAA2F,SAAA;QAAA,IAAAjL,GAAA;QAAA,OAAAqF,kBAAA,CAAAM,IAAA,UAAAuF,UAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAArF,IAAA,GAAAqF,SAAA,CAAApF,IAAA;cAAA;gBAAAoF,SAAA,CAAApF,IAAA;gBAAA,OAU6B,IAAI,CAACjC,KAAK,CAAC2D,MAAM,CAACC,OAAO,CAClDR,QAAQ,CAAC,CAAC,CACV2D,GAAG,CAAC,sBAAsB,EAAE,IAAI,EAAE;kBACjCO,aAAa,EAAE,IAAI;kBACnB3F,OAAO,EAAE;oBACP4F,aAAa,YAAAT,MAAA,CAAY,IAAI,CAAC9G,KAAK,CAAC+D,IAAI,CAACyD,WAAW;kBACtD;gBACF,CAAC,CAAC;cAAA;gBAPEtL,GAAa,GAAAmL,SAAA,CAAA/E,IAAA;gBAAA,OAAA+E,SAAA,CAAA3E,MAAA,WAQZxG,GAAG;cAAA;cAAA;gBAAA,OAAAmL,SAAA,CAAAvE,IAAA;YAAA;UAAA;QAAA,GAAAqE,QAAA;MAAA;MAAA,SAAAM,WAAA;QAAA,OAAAP,WAAA,CAAA3O,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAA8O,UAAA;IAAA;EAAA;IAAA1O,GAAA;IAAAK,KAAA,WAAAyJ,OAAA,EAGH;MAAA,IAAA6E,MAAA;MACP,IAAI,CAAC,IAAI,CAACtH,eAAe,EAAE;QACzB,IAAI,CAACA,eAAe,GAAGuH,UAAU,CAAC,YAAM;UACtCD,MAAI,CAACrD,oBAAoB,CAAC,CAAC;UAC3BqD,MAAI,CAAC1C,YAAY,CAAC,CAAC;QACrB,CAAC,EAAE,IAAI,CAACzE,gBAAgB,CAAC;MAC3B;IACF;IAEA;AACF;AACA;EAFE;IAAAxH,GAAA;IAAAK,KAAA;MAAA,IAAAwO,aAAA,GAAAxN,iBAAA,eAAAmH,kBAAA,CAAAC,IAAA,UAAAqG,SAAA;QAAA,IAAAC,MAAA;QAAA,IAAAC,KAAA;UAAAC,YAAA;UAAA/C,MAAA;UAAA/C,QAAA;UAAA+F,MAAA,GAAAtP,SAAA;QAAA,OAAA4I,kBAAA,CAAAM,IAAA,UAAAqG,UAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAAnG,IAAA,GAAAmG,SAAA,CAAAlG,IAAA;cAAA;gBAAA8F,KAAA,GAAAE,MAAA,CAAArP,MAAA,QAAAqP,MAAA,QAAAxN,SAAA,GAAAwN,MAAA,MAGwC,CAAC,CAAC,EAAAD,YAAA,GAAAD,KAAA,CAArB9C,MAAM,EAANA,MAAM,GAAA+C,YAAA,cAAG,KAAK,GAAAA,YAAA;gBAAA,KAC7B,IAAI,CAAC1H,QAAQ;kBAAA6H,SAAA,CAAAlG,IAAA;kBAAA;gBAAA;gBAAA,OAAAkG,SAAA,CAAAzF,MAAA;cAAA;gBAAAyF,SAAA,CAAAnG,IAAA;gBAEf,IAAI,CAAC1B,QAAQ,GAAG,IAAI,CAACmH,UAAU,CAAC,CAAC;gBAACU,SAAA,CAAAlG,IAAA;gBAAA,OACX,IAAI,CAAC3B,QAAQ;cAAA;gBAA9B4B,QAAQ,GAAAiG,SAAA,CAAA7F,IAAA;gBAAA,MACV,CAACJ,QAAQ,IAAIA,QAAQ,CAAC2B,MAAM,KAAK,GAAG;kBAAAsE,SAAA,CAAAlG,IAAA;kBAAA;gBAAA;gBAAA,OAAAkG,SAAA,CAAAzF,MAAA;cAAA;gBAAAyF,SAAA,CAAAlG,IAAA;gBAAA;cAAA;gBAAAkG,SAAA,CAAAnG,IAAA;gBAAAmG,SAAA,CAAArE,EAAA,GAAAqE,SAAA;gBAIxCC,OAAO,CAACpO,KAAK,CAAC,6CAA6C,CAAC;gBAAC,OAAAmO,SAAA,CAAAzF,MAAA;cAAA;gBAAAyF,SAAA,CAAAnG,IAAA;gBAG7D,IAAI,CAAC1B,QAAQ,GAAG,IAAI;gBAAC,OAAA6H,SAAA,CAAAE,MAAA;cAAA;gBAAA,KAEnBpD,MAAM;kBAAAkD,SAAA,CAAAlG,IAAA;kBAAA;gBAAA;gBACR,IAAI,CAACwC,mBAAmB,CAAC,CAAC;gBAC1B,IAAI,CAACF,mBAAmB,CAAC,CAAC;gBAAC,OAAA4D,SAAA,CAAAzF,MAAA;cAAA;gBAG7B;gBACA;gBACA;gBACA;gBACA;gBACA;;gBAEA,IAAI,CAACvC,WAAW,GAAG,IAAI,CAACA,WAAW,IAAI,IAAAmI,+CAAoB,EAAC,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAACjI,cAAc,GAAGsH,UAAU,CAAC,YAAM;kBACrCG,MAAI,CAACrD,mBAAmB,CAAC,CAAC;kBAC1BqD,MAAI,CAACvD,mBAAmB,CAAC,CAAC;gBAC5B,CAAC,EAAE,IAAI,CAACpE,WAAW,GAAG,IAAI,CAAC;cAAC;cAAA;gBAAA,OAAAgI,SAAA,CAAArF,IAAA;YAAA;UAAA;QAAA,GAAA+E,QAAA;MAAA;MAAA,SAAA7C,aAAA;QAAA,OAAA4C,aAAA,CAAArP,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAAqM,YAAA;IAAA;EAAA;IAAAjM,GAAA;IAY9B;AACF;AACA;AACA;IAHEK,KAAA;MAAA,IAAAmP,eAAA,GAAAnO,iBAAA,eAAAmH,kBAAA,CAAAC,IAAA,UAAAgH,SAIqBxO,KAAe;QAAA,IAAAyO,UAAA;QAAA,OAAAlH,kBAAA,CAAAM,IAAA,UAAA6G,UAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAA3G,IAAA,GAAA2G,SAAA,CAAA1G,IAAA;cAAA;gBAC5BwG,UAAU,GAAG,IAAA5H,aAAM,EAAgB,IAAI,EAAE,CAAC,SAAS,CAAC,EAAE7G,KAAK,CAAC;gBAAA,KAC9DA,KAAK,CAACkI,QAAQ;kBAAAyG,SAAA,CAAA1G,IAAA;kBAAA;gBAAA;gBAAA0G,SAAA,CAAA1G,IAAA;gBAAA,OAERjI,KAAK,CAACkI,QAAQ,CAACE,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;cAAA;gBADpCrI,KAAK,CAACkI,QAAQ,CAA0CC,KAAK,GAAAwG,SAAA,CAAArG,IAAA;cAAA;gBAAA,OAAAqG,SAAA,CAAAjG,MAAA,WAGzD,IAAAH,oCAAS,EAACvI,KAAK,CAAC,IAAIyO,UAAU,KAAKtH,4BAAa,CAACC,cAAc;cAAA;cAAA;gBAAA,OAAAuH,SAAA,CAAA7F,IAAA;YAAA;UAAA;QAAA,GAAA0F,QAAA;MAAA;MAAA,SAAAI,eAAAC,GAAA;QAAA,OAAAN,eAAA,CAAAhQ,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAAiQ,cAAA;IAAA;IAGxE;AACF;AACA;EAFE;IAAA7P,GAAA;IAAAK,KAAA,WAAA0P,mBAAA,EA+BqB;MACnB,IAAMzG,IAAI,GAAG0G,IAAI,CAACC,SAAS,CAAC,IAAI,CAACvJ,YAAY,CAAC;MAC9CwJ,YAAY,CAACC,OAAO,CAAC,IAAI,CAAChE,gBAAgB,EAAE7C,IAAI,CAAC;IACnD;EAAC;IAAAtJ,GAAA;IAAAK,KAAA,WAAA+P,sBAAA,EAGuB;MACtB,IAAM9G,IAAI,GAAG4G,YAAY,CAACG,OAAO,CAAC,IAAI,CAAClE,gBAAgB,CAAC;MACxD,IAAI,CAACzF,YAAY,GAAGsJ,IAAI,CAACM,KAAK,CAAChH,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,IAAI,CAAC;IAC9C;EAAC;IAAAtJ,GAAA;IAAAK,KAAA,WAAAsM,kBAAA,EAEmB;MAAA,IAAA4D,MAAA;MAClB,IAAI,CAACpE,gBAAgB,MAAA4B,MAAA,CAAM,IAAI,CAAC9G,KAAK,CAACuJ,MAAM,sCAAmC;MAC/E,IAAI,CAACJ,qBAAqB,CAAC,CAAC;MAC5B,IAAIK,WAAgC;MACpCC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,UAACC,EAAE,EAAK;QACzC,IAAI,CAACH,WAAW,IAAIG,EAAE,CAAC5Q,GAAG,KAAKuQ,MAAI,CAACpE,gBAAgB,EAAE;UACpDoE,MAAI,CAACH,qBAAqB,CAAC,CAAC;QAC9B;MACF,CAAC,CAAC;MACFM,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,YAAM;QACtCF,WAAW,GAAG,IAAI;QAClBF,MAAI,CAACM,mBAAmB,CAAC,CAAC;MAC5B,CAAC,CAAC;IACJ;EAAC;IAAA7Q,GAAA;IAAAK,KAAA,WAAAwQ,oBAAA,EAGqB;MAAA,IAAAC,MAAA;MACpB,IAAIC,MAAmC,GAAAtR,aAAA,KAClC,IAAI,CAACiH,YAAY,CACrB;;MAED;MACA,IAAI,CAAC0F,eAAe,CAACrM,OAAO,CAAC,UAACC,GAAG,EAAK;QACpC,OAAO+Q,MAAM,CAAC/Q,GAAG,CAAC;MACpB,CAAC,CAAC;MACF,IAAI,CAACoM,eAAe,GAAG,EAAE;;MAEzB;MACA,IAAI,IAAI,CAACnF,KAAK,CAAC+J,UAAU,EAAE;QACzBhS,MAAM,CAACD,IAAI,CAACgS,MAAM,CAAC,CAAChR,OAAO,CAAC,UAACC,GAAG,EAAK;UACnC,IAAI+Q,MAAM,CAAC/Q,GAAG,CAAC,CAACiR,KAAK,KAAKH,MAAI,CAAC7J,KAAK,CAAC+J,UAAU,CAAEE,EAAE,EAAE;YACnD,OAAOH,MAAM,CAAC/Q,GAAG,CAAC;UACpB;QACF,CAAC,CAAC;MACJ;;MAEA;MACA+Q,MAAM,GAAG,IAAI,CAACI,kBAAkB,CAACJ,MAAM,CAAC;;MAExC;MACA,IAAI,CAACrK,YAAY,GAAGqK,MAAM;MAC1B,IAAI,CAAChB,kBAAkB,CAAC,CAAC;IAC3B;EAAC;IAAA/P,GAAA;IAAAK,KAAA,WAAA8Q,mBAEkBJ,MAAmC,EAAE;MAAA,IAAAK,MAAA;MACtDpS,MAAM,CAACD,IAAI,CAACgS,MAAM,CAAC,CAAChR,OAAO,CAAC,UAACC,GAAG,EAAK;QACnC,IAAMqR,KAAK,GAAGN,MAAM,CAAC/Q,GAAG,CAAC;QACzB;QACE;QACAsR,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK,CAACG,SAAS,GAAGvL,uBAAuB;QACtD;QACCoL,KAAK,CAACJ,KAAK,IACVG,MAAI,CAACnK,KAAK,CAAC+J,UAAU,IACrB,CAACI,MAAI,CAACnK,KAAK,CAAC+J,UAAU,CAACS,YAAY,CAACC,QAAQ,CAACL,KAAK,CAACJ,KAAK,CAAE,EAC5D;UACA,OAAOF,MAAM,CAAC/Q,GAAG,CAAC;QACpB;MACF,CAAC,CAAC;MACF,OAAO+Q,MAAM;IACf;EAAC;IAAA/Q,GAAA;IAAAK,KAAA,WAAAsR,eAIC3R,GAAW,EACXqR,KAAgD,EAChD;MACA,IAAIN,MAAmC,GAAAtR,aAAA,KAClC,IAAI,CAACiH,YAAY,CACrB;;MAED;MACA,IAAI2K,KAAK,EAAE;QAAA,IAAAO,qBAAA;QACT,IAAMC,OAAO,GAAGd,MAAM,CAAC/Q,GAAG,CAAC;QAC3B+Q,MAAM,CAAC/Q,GAAG,CAAC,GAAAP,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACNoS,OAAO,GACPR,KAAK;UACRG,SAAS,EAAEF,IAAI,CAACC,GAAG,CAAC,CAAC;UACrBN,KAAK,GAAAW,qBAAA,GAAE,IAAI,CAAC3K,KAAK,CAAC+J,UAAU,cAAAY,qBAAA,uBAArBA,qBAAA,CAAuBV;QAAE,EACjC;MACH,CAAC,MAAM;QACL,OAAOH,MAAM,CAAC/Q,GAAG,CAAC;MACpB;;MAEA;MACA+Q,MAAM,GAAG,IAAI,CAACI,kBAAkB,CAACJ,MAAM,CAAC;;MAExC;MACA,IAAI,CAACrK,YAAY,GAAGqK,MAAM;MAC1B,IAAI,CAAChB,kBAAkB,CAAC,CAAC;;MAEzB;MACA,IAAI,CAAC,IAAI,CAAC3D,eAAe,CAACsF,QAAQ,CAAC1R,GAAG,CAAC,EAAE;QACvC,IAAI,CAACoM,eAAe,CAAC7M,IAAI,CAACS,GAAG,CAAC;MAChC;IACF;EAAC;IAAAA,GAAA;IAAAgO,GAAA,WAAAA,IAAA,EArI+B;MAC9B,OAAO,IAAI,CAAC3B,aAAa,IAAI,IAAI,CAACjB,cAAc;IAClD;EAAC;IAAApL,GAAA;IAAAgO,GAAA,WAAAA,IAAA,EAUoB;MAAA,IAAA8D,OAAA;MACnB,OAAO9S,MAAM,CAACD,IAAI,CAAC,IAAI,CAAC2H,YAAY,CAAC,CAACqL,IAAI,CACxC,UAAC/R,GAAG;QAAA,OAAK8R,OAAI,CAACpL,YAAY,CAAC1G,GAAG,CAAC,CAACgS,cAAc;MAAA,CAChD,CAAC;IACH;EAAC;IAAAhS,GAAA;IAAAgO,GAAA,WAAAA,IAAA,EAGuB;MAAA,IAAAiE,OAAA;MACtB,OAAOjT,MAAM,CAACD,IAAI,CAAC,IAAI,CAAC2H,YAAY,CAAC,CAACqL,IAAI,CACxC,UAAC/R,GAAG;QAAA,OAAKiS,OAAI,CAACvL,YAAY,CAAC1G,GAAG,CAAC,CAACkS,cAAc;MAAA,CAChD,CAAC;IACH;EAAC;EAAA,OAAAhM,mBAAA;AAAA,EAtZsCiM,gBAAU,IAAA7T,WAAA,GAAA8G,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,4BAwBhD2O,WAAK;EAAA9Q,YAAA;EAAAjB,UAAA;EAAAkB,QAAA;EAAAuB,WAAA,WAAAA,YAAA;IAAA,OACkB,KAAK;EAAA;AAAA,IAAAxD,YAAA,GAAA6G,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,oBAE5B2O,WAAK;EAAA9Q,YAAA;EAAAjB,UAAA;EAAAkB,QAAA;EAAAuB,WAAA,WAAAA,YAAA;IAAA,OACU,KAAK;EAAA;AAAA,IAAAvD,YAAA,GAAA4G,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,qBAEpB2O,WAAK;EAAA9Q,YAAA;EAAAjB,UAAA;EAAAkB,QAAA;EAAAuB,WAAA,WAAAA,YAAA;IAAA,OACW,KAAK;EAAA;AAAA,IAAAqD,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,gCAErB0P,YAAM,GAAApT,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,gCAAArE,OAAA,CAAAqE,SAAA,GAAA0C,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,oBAKN0P,YAAM,GAAApT,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,oBAAArE,OAAA,CAAAqE,SAAA,GAAA0C,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,qBAON0P,YAAM,GAAApT,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,qBAAArE,OAAA,CAAAqE,SAAA,GAAA0C,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,sBAKN0P,YAAM,GAAApT,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,sBAAArE,OAAA,CAAAqE,SAAA,GAAA0C,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,uBAKN0P,YAAM,GAAApT,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,uBAAArE,OAAA,CAAAqE,SAAA,GAAAjE,YAAA,GAAA2G,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,mBAgVN2O,WAAK;EAAA9Q,YAAA;EAAAjB,UAAA;EAAAkB,QAAA;EAAAuB,WAAA,WAAAA,YAAA;IAAA,OACsC,CAAC,CAAC;EAAA;AAAA,IAAAqD,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,qBAAAxE,KAAA,GAAAc,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,qBAAArE,OAAA,CAAAqE,SAAA,GAAA0C,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,wBAAAvE,KAAA,GAAAa,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,wBAAArE,OAAA,CAAAqE,SAAA,GAAA0C,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,4BAwB7C0P,YAAM,GAAApT,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,4BAAArE,OAAA,CAAAqE,SAAA,GAAA0C,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,0BAqBN0P,YAAM,GAAApT,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,0BAAArE,OAAA,CAAAqE,SAAA,GAAA0C,yBAAA,CAAA/G,OAAA,CAAAqE,SAAA,qBA8CN0P,YAAM,GAAApT,MAAA,CAAAK,wBAAA,CAAAhB,OAAA,CAAAqE,SAAA,qBAAArE,OAAA,CAAAqE,SAAA,IAAArE,OAAA,MAAAD,MAAA;AAAA0H,OAAA,CAAAI,mBAAA,GAAAA,mBAAA"}