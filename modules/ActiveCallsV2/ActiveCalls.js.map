{"version":3,"sources":["modules/ActiveCallsV2/ActiveCalls.ts"],"names":["presenceRegExp","DEFAULT_FETCH_DELAY","DEFAULT_TTL","ActiveCalls","name","deps","dep","optional","data","_stopWatching","_debouncedFetchData","activeCallsOptions","ttl","_source","DataSource","key","cleanOnReset","fetchFunction","params","_deps","client","account","extension","activeCalls","list","readyCheckFunction","appFeatures","ready","subscription","permissionCheckFunction","hasReadExtensionCallLog","dataFetcherV2","register","fn","fetchData","threshold","_fetchDelay","maxThreshold","message","test","event","disableCache","tabManager","active","subscribe","subscriptionFilters","detailedPresence","_handleSubscription","cancel","Math","max","fetchDelay","sortByStartTime","call","DataFetcherV2Consumer"],"mappings":"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","sourcesContent":["import {\n  DetailedExtensionPresenceEvent,\n  UserCallLogRecord,\n} from '@rc-ex/core/definitions';\nimport { computed, watch } from '@ringcentral-integration/core';\nimport { map, sort } from 'ramda';\nimport { Unsubscribe } from 'redux';\nimport { subscriptionFilters } from '../../enums/subscriptionFilters';\nimport { normalizeStartTime, sortByStartTime } from '../../lib/callLogHelpers';\nimport { debounce, DebouncedFunction } from '../../lib/debounce-throttle';\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport { Deps } from './ActiveCalls.interface';\n\nconst presenceRegExp = /\\/presence\\?detailedTelephonyState=true/;\nconst DEFAULT_FETCH_DELAY = 1000;\nconst DEFAULT_TTL = 5 * 60 * 1000;\n\n@Module({\n  name: 'ActiveCalls',\n  deps: [\n    'Client',\n    'AppFeatures',\n    'DataFetcherV2',\n    'Subscription',\n    { dep: 'TabManager', optional: true },\n    { dep: 'ActiveCallsOptions', optional: true },\n  ],\n})\nexport class ActiveCalls extends DataFetcherV2Consumer<\n  Deps,\n  UserCallLogRecord[]\n> {\n  protected _stopWatching: Unsubscribe = null;\n  protected _debouncedFetchData: DebouncedFunction<ActiveCalls['fetchData']>;\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    const activeCallsOptions = deps.activeCallsOptions ?? {};\n    const { ttl = DEFAULT_TTL } = activeCallsOptions;\n    this._source = new DataSource({\n      ...activeCallsOptions,\n      key: 'activeCalls',\n      cleanOnReset: true,\n      ttl,\n      fetchFunction: async (): Promise<UserCallLogRecord[]> =>\n        fetchList((params: any) =>\n          this._deps.client.account().extension().activeCalls().list(params),\n        ),\n      readyCheckFunction: () =>\n        !!(this._deps.appFeatures.ready && this._deps.subscription.ready),\n      permissionCheckFunction: () =>\n        this._deps.appFeatures.hasReadExtensionCallLog,\n    });\n    this._deps.dataFetcherV2.register(this._source);\n    this._debouncedFetchData = debounce({\n      fn: this.fetchData,\n      threshold: this._fetchDelay,\n      // throttle the request rate to once every this._fetchDelay ms\n      maxThreshold: this._fetchDelay,\n    });\n  }\n\n  protected get _fetchDelay() {\n    return Math.max(\n      0,\n      this._deps.activeCallsOptions?.fetchDelay ?? DEFAULT_FETCH_DELAY,\n    );\n  }\n\n  protected _handleSubscription(message: DetailedExtensionPresenceEvent) {\n    if (presenceRegExp.test(message?.event)) {\n      if (\n        this.ready &&\n        (this._source.disableCache || (this._deps.tabManager?.active ?? true))\n      ) {\n        this._debouncedFetchData();\n      }\n    }\n  }\n\n  onInit() {\n    this._deps.subscription.subscribe([subscriptionFilters.detailedPresence]);\n    this._stopWatching = watch(\n      this,\n      () => this._deps.subscription.message,\n      (message) => this._handleSubscription(message),\n    );\n  }\n\n  onReset() {\n    this._stopWatching?.();\n    this._stopWatching = null;\n    this._debouncedFetchData.cancel();\n  }\n\n  @computed(({ data }: ActiveCalls) => [data])\n  get calls() {\n    return sort(\n      sortByStartTime,\n      map((call) => normalizeStartTime(call), this.data ?? []),\n    );\n  }\n}\n"],"file":"ActiveCalls.js"}