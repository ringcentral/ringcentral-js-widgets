{"version":3,"sources":["modules/TabManager/TabManager.ts"],"names":["TabManager","name","deps","dep","optional","enableGlobalCache","tabManagerOptions","enableCache","tabbie","_eventReducer","state","action","_usm","usmAction","_getStateV2","_state","identifierKey","event","method","type","Tabbie","prefix","_deps","id","active","args","_setId","enabled","checkIsMain","_setActive","on","events","mainTabIdChanged","_setEvent","send","checkTabAliveById","_reducers","spawnStorageReducersKey","spawnReducersKey","hasMultipleTabs","tabs","isFirstTab","RcModuleV2","proxify"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n\nimport {\n  action,\n  identifierKey,\n  RcModuleV2,\n  spawnReducersKey,\n  spawnStorageReducersKey,\n  state,\n  usmAction,\n} from '@ringcentral-integration/core';\n\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { Tabbie } from '../../lib/Tabbie';\nimport { Deps, TabEvent } from './TabManager.interface';\n\n@Module({\n  name: 'TabManager',\n  deps: [{ dep: 'TabManagerOptions', optional: true }, 'Prefix'],\n})\nexport class TabManager extends RcModuleV2<Deps> {\n  public tabbie: Tabbie;\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableGlobalCache: deps.tabManagerOptions?.enableCache ?? false,\n    });\n    this.tabbie = new Tabbie({\n      prefix: this._deps.prefix,\n    });\n  }\n\n  @state\n  id: string = null;\n\n  @action\n  protected _setId(id: string) {\n    this.id = id;\n  }\n\n  /**\n   * Default to true. If tabbie cannot be enabled due to env, the runtime\n   * should assume active.\n   */\n  @state\n  active = true;\n\n  @action\n  protected _setActive(active: boolean) {\n    this.active = active;\n  }\n\n  @state\n  event: TabEvent = null;\n\n  @action\n  protected _setEvent(event: string, args: any[]) {\n    this.event = {\n      name: event,\n      args,\n    };\n  }\n\n  _eventReducer = (state: TabEvent = null, action: any) => {\n    if (action._usm === usmAction) {\n      const { event } = this._getStateV2(action._state, this[identifierKey]);\n      if (\n        event &&\n        // It needs to match the exact modification event about `@action _setEvent()` in this module for Redux state.\n        // And it is a one-time state in Redux store.\n        action.method === '_setEvent' &&\n        action.type === this[identifierKey]\n      )\n        return event;\n    }\n    return null;\n  };\n\n  get reducer() {\n    if (this._reducers)\n      return combineReducers({\n        ...this._reducers,\n        event: this._eventReducer,\n      });\n    this[spawnStorageReducersKey]();\n    this[spawnReducersKey]();\n    return combineReducers({\n      ...this._reducers,\n      event: this._eventReducer,\n    });\n  }\n\n  async onInitOnce() {\n    this._setId(this.tabbie.id);\n    if (this.tabbie.enabled) {\n      this._setActive(await this.tabbie.checkIsMain());\n      this.tabbie.on(this.tabbie.events.mainTabIdChanged, async () => {\n        this._setActive(await this.tabbie.checkIsMain());\n      });\n      this.tabbie.on(\n        this.tabbie.events.event,\n        (event: string, ...args: any[]) => {\n          this._setEvent(event, args);\n        },\n      );\n    }\n  }\n\n  @proxify\n  async send(event: string, ...args: any[]) {\n    this.tabbie.send(event, ...args);\n  }\n\n  @proxify\n  async checkIsMain() {\n    return this.tabbie.checkIsMain();\n  }\n\n  @proxify\n  async checkTabAliveById(id: string) {\n    return this.tabbie.checkTabAliveById(id);\n  }\n\n  get hasMultipleTabs() {\n    return this.tabbie?.hasMultipleTabs ?? false;\n  }\n\n  get tabs() {\n    return this.tabbie?.tabs ?? [];\n  }\n\n  get isFirstTab() {\n    return this.tabbie?.isFirstTab ?? true;\n  }\n\n  get enable() {\n    return this.tabbie?.enabled;\n  }\n}\n\n// For backward compatibility\nexport default TabManager;\n"],"file":"TabManager.js"}