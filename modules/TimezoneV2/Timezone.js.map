{"version":3,"sources":["modules/TimezoneV2/Timezone.ts"],"names":["CACHE_TTL","Timezone","name","deps","dep","optional","_localeTimezone","timezones","enableCache","storageKey","cacheExpiredIn","Date","getTime","shouldUpdateTimezones","_initTimezones","updateCacheExpiredIn","_deps","client","dictionary","timezone","list","records","updateTimezones","_updateTimezones","_updateCacheExpiredIn","bias","String","getTimezoneOffset","find","now","RcModuleV2","storage","state","action","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAQA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,SAAS,GAAG,KAAK,IAAvB;IAMaC,Q,WAJZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,UADA;AAENC,EAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB;AAAEC,IAAAA,GAAG,EAAE,iBAAP;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GAAtB;AAFA,CAAP,C,UA2DE,oBAAS;AAAA,MAAGC,eAAH,QAAGA,eAAH;AAAA,MAAoBC,SAApB,QAAoBA,SAApB;AAAA,SAA8C,CACtDD,eADsD,EAEtDC,SAFsD,CAA9C;AAAA,CAAT,C;;;;;AApDD,oBAAYJ,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA,IADI;AAEJK,MAAAA,WAAW,EAAE,IAFT;AAGJC,MAAAA,UAAU,EAAE;AAHR,KAAN;AADsB,UAFdH,eAEc;;AAAA;;AAAA;;AAAA;AAMvB;;;;4CAWiC;AAChC,WAAKI,cAAL,GAAsB,IAAIC,IAAJ,GAAWC,OAAX,KAAuBZ,SAA7C;AACD;;;qCAG0BO,S,EAAwB;AACjD,WAAKA,SAAL,GAAiBA,SAAjB;AACD;;;;;;;;;qBAGK,KAAKM,qB;;;;;;uBACD,KAAKC,cAAL,E;;;AACN,qBAAKC,oBAAL;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAM4C,KAAKC,KAAL,CAAWC,MAAX,CAC3CC,UAD2C,GAE3CC,QAF2C,GAG3CC,IAH2C,E;;;;+DAAtCC,O;AAAAA,gBAAAA,O,uCAAU,E;AAIlB,qBAAKC,eAAL,CAAqBD,OAArB;;;;;;;;;;;;;;;;;;;wGAIoBd,S;;;;;AACpB,qBAAKgB,gBAAL,CAAsBhB,SAAtB;;;;;;;;;;;;;;;;;;;;;;;;AAKA,qBAAKiB,qBAAL;;;;;;;;;;;;;;;;;;wBAOmB;AACnB,UAAI,CAAC,KAAKlB,eAAV,EAA2B;AACzB,YAAMmB,IAAI,GAAGC,MAAM,CAAC,CAAC,IAAIf,IAAJ,GAAWgB,iBAAX,EAAF,CAAnB;AACA,aAAKrB,eAAL,GAAuB,KAAKC,SAAL,CAAeqB,IAAf,CACrB,UAACT,QAAD;AAAA,iBAAcA,QAAQ,CAACM,IAAT,KAAkBA,IAAhC;AAAA,SADqB,CAAvB;AAGD;;AACD,aAAO,KAAKnB,eAAZ;AACD;;;wBAE2B;AAC1B,aAAO,CAAC,KAAKI,cAAN,IAAwB,KAAKA,cAAL,GAAsBC,IAAI,CAACkB,GAAL,EAArD;AACD;;;;EAvE2BC,gB,6EAW3BC,a,EACAC,W;;;;;WACwB,E;;mFAExBD,a,EACAC,W;;;;;WACwB,I;;2EAExBC,Y,sKAKAA,Y,+JAYAC,mB,8JASAA,mB,oKAKAA,mB","sourcesContent":["import {\n  GetTimezoneInfoResponse as ITimezone,\n  GetTimezoneListResponse as ITimezoneList,\n} from '@rc-ex/core/definitions';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\n\nimport { Module } from '../../lib/di';\nimport proxify from '../../lib/proxy/proxify';\nimport { Deps } from './Timezone.interface';\n\nconst CACHE_TTL = 60 * 60e3;\n\n@Module({\n  name: 'Timezone',\n  deps: ['Client', 'Storage', { dep: 'TimezoneOptions', optional: true }],\n})\nexport class Timezone extends RcModuleV2<Deps> {\n  protected _localeTimezone: ITimezone;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'Timezone',\n    });\n  }\n\n  @storage\n  @state\n  timezones: ITimezone[] = [];\n\n  @storage\n  @state\n  cacheExpiredIn: number = null;\n\n  @action\n  protected _updateCacheExpiredIn() {\n    this.cacheExpiredIn = new Date().getTime() + CACHE_TTL;\n  }\n\n  @action\n  protected _updateTimezones(timezones: ITimezone[]) {\n    this.timezones = timezones;\n  }\n\n  protected async onInit() {\n    if (this.shouldUpdateTimezones) {\n      await this._initTimezones();\n      this.updateCacheExpiredIn();\n    }\n  }\n\n  @proxify\n  protected async _initTimezones() {\n    const { records = [] }: ITimezoneList = await this._deps.client\n      .dictionary()\n      .timezone()\n      .list();\n    this.updateTimezones(records);\n  }\n\n  @proxify\n  async updateTimezones(timezones: ITimezone[]) {\n    this._updateTimezones(timezones);\n  }\n\n  @proxify\n  async updateCacheExpiredIn() {\n    this._updateCacheExpiredIn();\n  }\n\n  @computed(({ _localeTimezone, timezones }: Timezone) => [\n    _localeTimezone,\n    timezones,\n  ])\n  get localeTimezone() {\n    if (!this._localeTimezone) {\n      const bias = String(-new Date().getTimezoneOffset());\n      this._localeTimezone = this.timezones.find(\n        (timezone) => timezone.bias === bias,\n      );\n    }\n    return this._localeTimezone;\n  }\n\n  get shouldUpdateTimezones() {\n    return !this.cacheExpiredIn || this.cacheExpiredIn < Date.now();\n  }\n}\n"],"file":"Timezone.js"}