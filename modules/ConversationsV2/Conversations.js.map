{"version":3,"sources":["modules/ConversationsV2/Conversations.ts"],"names":["mergeMessages","messages","oldMessages","tmp","currentMessages","forEach","element","push","id","getEarliestTime","newTime","Date","now","message","creationTime","getTime","getUniqueNumbers","conversations","output","numberMap","addIfNotExist","number","from","direction","messageDirection","inbound","fromNumber","phoneNumber","extensionNumber","to","length","outbound","toNumber","toPhoneNumber","DEFAULT_PER_PAGE","DEFAULT_DAY_SPAN","Conversations","name","deps","dep","optional","allUniqueNumbers","currentPage","typeFilter","effectiveSearchString","that","_deps","messageStore","allConversations","oldConversations","pagingConversations","searchInput","typeFilteredConversations","extensionInfo","contactMatcher","dataMapping","conversationLogger","loggingMap","auth","accessToken","formattedConversations","conversationStore","filteredConversations","currentConversationId","inputContents","_olderDataExisted","_olderMessagesExisted","_perPage","_daySpan","_enableLoadOldMessages","_showMMSAttachment","conversationsOptions","perPage","daySpan","enableLoadOldMessages","showMMSAttachment","messageSender","on","events","send","toNumbers","addEntities","map","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","input","status","fetchConversationsStatus","records","isIncreaseCurrentPage","normalizeRecord","conversationsStatus","idle","conversationId","filter","c","String","fetchMessagesStatus","text","existedContent","find","content","attachments","attachment","f","msg","conversationStatus","entities","correspondentMatch","entity","item","rawId","responses","correspondentResponse","reduce","accumulator","response","conversation","messageTypes","all","loggedIn","triggerMatch","_hasPermission","fetchOldConversations","_resetAllStatus","shouldTriggerMatchConditions","newValue","oldValue","_cleanOldConversations","_updateSearchInput","type","_updateTypeFilter","loadNextPage","loadingOldConversations","_updateFetchConversationsStatus","fetching","dateFrom","setDate","getDate","dateTo","earliestTime","params","distinctConversations","toISOString","messageType","sms","pager","client","account","extension","list","recordsLength","_fetchOldConversationsSuccess","_increaseCurrentPage","_resetCurrentPage","_updateCurrentConversationId","loadingOldMessages","_updateFetchMessagesStatus","currentConversation","_fetchOldMessagesSuccess","ttlConfig","messageSenderMessages","noAreaCode","ttl","alert","warning","_alertWarning","textTooLong","_updateMessageText","attachmentCountLimitation","size","prev","curr","ATTACHMENT_SIZE_LIMITATION","attachmentSizeLimitation","_addAttachment","_removeAttachment","_updateConversationStatus","pushing","_getFromNumber","_getToNumbers","replyOnMessageId","_getReplyOnMessageId","pushMessage","_removeInputContent","_onReplyError","messageList","lastMessage","senderNumber","recipients","recipient","deleteConversationMessages","deleteConversation","deleteMessageApi","_deleteOldConversation","console","error","_addCorrespondentMatchEntities","_removeCorrespondentMatchEntity","_addCorrespondentResponses","_removeCorrespondentResponses","addResponses","regionSettings","countryCode","areaCode","formattedCorrespondentMatch","formatted","removeExtension","autoLog","logConversation","removeEntity","removeResponse","newConversations","conversationMap","pushConversation","cid","messageIsTextMessage","voiceMail","messageIsVoicemail","fax","messageIsFax","appFeatures","hasReadTextPermission","hasVoicemailPermission","hasReadFaxPermission","contactMapping","conversationLogMapping","self","correspondents","selfNumber","selfMatches","correspondentMatches","matches","contact","concat","conversationLogId","getConversationLogId","isLogging","conversationMatches","voicemailAttachment","faxAttachment","unreadCounts","mmsAttachments","lastMatchedCorrespondentEntity","getLastMatchedCorrespondentEntity","searchResults","cleanRegex","searchString","toLowerCase","searchNumber","replace","cleanedNumber","indexOf","matchOrder","subject","matchedMessage","sort","sortSearchResults","pageNumber","lastIndex","slice","allMessages","m","reverse","myExtensionNumber","myNumber","res","hasReadMessagesPermission","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import {\n  GetMessageInfoResponse,\n  GetMessageList,\n  ListMessagesParameters,\n  MessageAttachmentInfo,\n} from '@rc-ex/core/definitions';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  watch,\n} from '@ringcentral-integration/core';\nimport { ObjectMapValue } from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport { messageDirection } from '../../enums/messageDirection';\nimport { messageTypes } from '../../enums/messageTypes';\nimport { Message } from '../../interfaces/MessageStore.model';\nimport cleanNumber from '../../lib/cleanNumber';\nimport { Module } from '../../lib/di';\nimport {\n  Correspondent,\n  getFaxAttachment,\n  getMMSAttachments,\n  getMyNumberFromMessage,\n  getNumbersFromMessage,\n  getRecipientNumbersFromMessage,\n  getVoicemailAttachment,\n  messageIsFax,\n  messageIsTextMessage,\n  messageIsUnread,\n  messageIsVoicemail,\n  normalizeRecord,\n  sortSearchResults,\n} from '../../lib/messageHelper';\nimport { normalizeNumber } from '../../lib/normalizeNumber';\nimport { proxify } from '../../lib/proxy/proxify';\nimport {\n  Attachment,\n  ATTACHMENT_SIZE_LIMITATION,\n  messageSenderMessages,\n} from '../MessageSenderV2';\nimport {\n  CorrespondentMatch,\n  CorrespondentResponse,\n  CurrentConversation,\n  Deps,\n  FilteredConversation,\n  FormattedConversation,\n  InputContent,\n} from './Conversations.interface';\nimport { conversationsStatus } from './conversationsStatus';\n\nfunction mergeMessages(messages: Message[], oldMessages: Message[]): Message[] {\n  const tmp: { [key: string]: number } = {};\n  const currentMessages: Message[] = [];\n  messages.forEach((element) => {\n    currentMessages.push(element);\n    tmp[element.id] = 1;\n  });\n\n  oldMessages.forEach((element) => {\n    if (!tmp[element.id]) {\n      currentMessages.push(element);\n    }\n  });\n  return currentMessages;\n}\n\nfunction getEarliestTime(messages: Message[]) {\n  let newTime = Date.now();\n  messages.forEach((message) => {\n    const creationTime = new Date(message.creationTime).getTime();\n    if (creationTime < newTime) {\n      newTime = creationTime;\n    }\n  });\n  return newTime;\n}\n\nexport function getUniqueNumbers(conversations: Message[]): string[] {\n  const output: string[] = [];\n  const numberMap: { [key: string]: boolean } = {};\n  function addIfNotExist(number: string) {\n    if (number && !numberMap[number]) {\n      output.push(number);\n      numberMap[number] = true;\n    }\n  }\n  conversations.forEach((message) => {\n    if (message.from && message.direction === messageDirection.inbound) {\n      const fromNumber =\n        message.from.phoneNumber || message.from.extensionNumber;\n      addIfNotExist(fromNumber);\n    }\n    if (\n      message.to &&\n      message.to.length > 0 &&\n      message.direction === messageDirection.outbound\n    ) {\n      message.to.forEach((toNumber) => {\n        if (!toNumber) {\n          return;\n        }\n        const toPhoneNumber = toNumber.phoneNumber || toNumber.extensionNumber;\n        addIfNotExist(toPhoneNumber);\n      });\n    }\n  });\n  return output;\n}\n\nexport const DEFAULT_PER_PAGE = 20;\nexport const DEFAULT_DAY_SPAN = 90;\n\n@Module({\n  name: 'Conversations',\n  deps: [\n    'Alert',\n    'Auth',\n    'Client',\n    'MessageSender',\n    'ExtensionInfo',\n    'MessageStore',\n    'AppFeatures',\n    'RegionSettings',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ConversationLogger', optional: true },\n    { dep: 'ConversationsOptions', optional: true },\n  ],\n})\nexport class Conversations extends RcModuleV2<Deps> {\n  protected _olderDataExisted: boolean = true;\n  protected _olderMessagesExisted: boolean = true;\n\n  protected _perPage: number;\n  protected _daySpan: number;\n  protected _enableLoadOldMessages: boolean;\n  protected _showMMSAttachment: boolean;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n\n    this._perPage =\n      this._deps.conversationsOptions?.perPage ?? DEFAULT_PER_PAGE;\n    this._daySpan =\n      this._deps.conversationsOptions?.daySpan ?? DEFAULT_DAY_SPAN;\n    this._enableLoadOldMessages =\n      this._deps.conversationsOptions?.enableLoadOldMessages ?? false;\n    this._showMMSAttachment =\n      this._deps.conversationsOptions?.showMMSAttachment ?? false;\n\n    this._deps.messageSender.on(\n      this._deps.messageSender.events.send,\n      ({ toNumbers }) => {\n        this.addEntities(toNumbers.map((number) => ({ phoneNumber: number })));\n      },\n    );\n\n    if (this._deps.contactMatcher) {\n      this._deps.contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => this._deps.messageStore.ready,\n      });\n    }\n  }\n\n  @state\n  searchInput: string = '';\n\n  @state\n  typeFilter: ObjectMapValue<typeof messageTypes> = messageTypes.all;\n\n  @state\n  oldConversations: Message[] = [];\n\n  @state\n  currentPage: number = 1;\n\n  @state\n  fetchConversationsStatus: ObjectMapValue<typeof conversationsStatus> =\n    conversationsStatus.idle;\n\n  @state\n  currentConversationId?: string = null;\n\n  @state\n  oldMessages: Message[] = [];\n\n  @state\n  fetchMessagesStatus: ObjectMapValue<typeof conversationsStatus> =\n    conversationsStatus.idle;\n\n  @state\n  inputContents: InputContent[] = [];\n\n  @state\n  conversationStatus: ObjectMapValue<typeof conversationsStatus> =\n    conversationsStatus.idle;\n\n  @state\n  correspondentMatch: CorrespondentMatch[] = [];\n\n  @state\n  correspondentResponse: CorrespondentResponse = {};\n\n  @action\n  _updateSearchInput(input: string = '') {\n    this.searchInput = input;\n  }\n\n  @action\n  _updateTypeFilter(typeFilter: ObjectMapValue<typeof messageTypes>) {\n    this.typeFilter = typeFilter;\n    this.currentPage = 1;\n    this.oldConversations = [];\n  }\n\n  @action\n  _updateFetchConversationsStatus(\n    status: ObjectMapValue<typeof conversationsStatus>,\n  ) {\n    this.fetchConversationsStatus = status;\n  }\n\n  @action\n  _fetchOldConversationsSuccess(\n    records: GetMessageInfoResponse[],\n    isIncreaseCurrentPage: boolean,\n  ) {\n    this.oldConversations.push(...records.map(normalizeRecord));\n    this.fetchConversationsStatus = conversationsStatus.idle;\n    if (isIncreaseCurrentPage) {\n      this.currentPage += 1;\n    }\n  }\n\n  @action\n  _deleteOldConversation(conversationId: string) {\n    this.oldConversations = this.oldConversations.filter(\n      (c) => String(c.conversationId) !== String(conversationId),\n    );\n  }\n\n  @action\n  _cleanOldConversations() {\n    this.oldConversations = [];\n  }\n\n  @action\n  _increaseCurrentPage() {\n    this.currentPage += 1;\n  }\n\n  @action\n  _resetCurrentPage() {\n    this.currentPage = 1;\n  }\n\n  @action\n  _updateCurrentConversationId(conversationId?: string) {\n    this.currentConversationId = conversationId;\n    this.oldMessages = [];\n  }\n\n  @action\n  _updateFetchMessagesStatus(\n    status: ObjectMapValue<typeof conversationsStatus>,\n  ) {\n    this.fetchMessagesStatus = status;\n  }\n\n  @action\n  _fetchOldMessagesSuccess(records: GetMessageInfoResponse[]) {\n    this.oldMessages.push(...records.map(normalizeRecord));\n    this.fetchMessagesStatus = conversationsStatus.idle;\n  }\n\n  @action\n  _updateMessageText(conversationId: string, text: string) {\n    const existedContent = this.inputContents.find(\n      (content) => content.conversationId === conversationId,\n    );\n    if (existedContent) {\n      existedContent.text = text;\n    } else {\n      this.inputContents.push({ conversationId, text, attachments: [] });\n    }\n  }\n\n  @action\n  _addAttachment(conversationId: string, attachment: Attachment) {\n    const existedContent = this.inputContents.find(\n      (content) => content.conversationId === conversationId,\n    );\n    if (existedContent) {\n      const attachments = (existedContent.attachments || []).filter(\n        (f) => f.name !== attachment.name,\n      );\n      attachments.push(attachment);\n      existedContent.attachments = attachments;\n    } else {\n      this.inputContents.push({\n        conversationId,\n        text: '',\n        attachments: [attachment],\n      });\n    }\n  }\n\n  @action\n  _removeAttachment(conversationId: string, attachment: Attachment) {\n    const existedContent = this.inputContents.find(\n      (content) => content.conversationId === conversationId,\n    );\n    if (existedContent) {\n      existedContent.attachments = existedContent.attachments.filter(\n        (f) => f.name !== attachment.name,\n      );\n    }\n  }\n\n  @action\n  _removeInputContent(conversationId: string) {\n    this.inputContents = this.inputContents.filter(\n      (msg) => typeof msg === 'object' && msg.conversationId !== conversationId,\n    );\n  }\n\n  @action\n  _updateConversationStatus(\n    status: ObjectMapValue<typeof conversationsStatus>,\n  ) {\n    this.conversationStatus = status;\n  }\n\n  @action\n  _addCorrespondentMatchEntities(entities: CorrespondentMatch[]) {\n    this.correspondentMatch = [...entities];\n  }\n\n  @action\n  _removeCorrespondentMatchEntity(entity: CorrespondentMatch) {\n    this.correspondentMatch = this.correspondentMatch.filter(\n      (item) => item.rawId !== entity.id && item.id !== entity.id,\n    );\n  }\n\n  @action\n  _addCorrespondentResponses(\n    responses: Message[] = [],\n    phoneNumber: string = '',\n  ) {\n    this.correspondentResponse = responses.reduce(\n      (accumulator: any, response: any) => {\n        const {\n          to,\n          from,\n          direction,\n          conversation: { id },\n        } = response;\n        const number = direction === 'Inbound' ? from : to[0];\n        phoneNumber = number.phoneNumber || number.extensionNumber;\n        return {\n          ...accumulator,\n          [phoneNumber]: id,\n        };\n      },\n      {},\n    );\n  }\n\n  @action\n  _removeCorrespondentResponses(phoneNumber: string) {\n    delete this.correspondentResponse[phoneNumber];\n  }\n\n  @action\n  _resetAllStatus() {\n    this.searchInput = '';\n    this.typeFilter = messageTypes.all;\n    this.oldConversations = [];\n    this.currentPage = 1;\n    this.fetchConversationsStatus = conversationsStatus.idle;\n    this.currentConversationId = null;\n    this.oldMessages = [];\n    this.fetchMessagesStatus = conversationsStatus.idle;\n    this.inputContents = [];\n    this.conversationStatus = conversationsStatus.idle;\n  }\n\n  _shouldInit() {\n    return !!(super._shouldInit() && this._deps.auth.loggedIn);\n  }\n\n  _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._deps.auth.loggedIn)\n    );\n  }\n\n  onInit() {\n    if (this._deps.contactMatcher) {\n      this._deps.contactMatcher.triggerMatch();\n    }\n  }\n\n  onInitSuccess() {\n    if (\n      this.allConversations.length <= this._perPage &&\n      this._enableLoadOldMessages &&\n      this._hasPermission\n    ) {\n      this.fetchOldConversations();\n    }\n  }\n\n  onReset() {\n    this._olderDataExisted = true;\n    this._olderMessagesExisted = true;\n    this._resetAllStatus();\n  }\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this.shouldTriggerMatchConditions,\n      () => {\n        if (this._deps.contactMatcher && this.ready) {\n          this._deps.contactMatcher.triggerMatch();\n        }\n      },\n    );\n    watch(\n      this,\n      () => this._deps.messageStore.allConversations,\n      (newValue = [], oldValue = []) => {\n        if (newValue.length < oldValue.length) {\n          if (this.oldConversations.length > 0) {\n            this._cleanOldConversations();\n            this._olderDataExisted = true;\n          }\n        }\n      },\n    );\n  }\n\n  @computed(\n    ({\n      allUniqueNumbers,\n      currentPage,\n      typeFilter,\n      effectiveSearchString,\n    }: Conversations) => [\n      allUniqueNumbers,\n      currentPage,\n      typeFilter,\n      effectiveSearchString,\n    ],\n  )\n  get shouldTriggerMatchConditions(): any[] {\n    return [\n      this.allUniqueNumbers,\n      this.currentPage,\n      this.typeFilter,\n      this.effectiveSearchString,\n    ];\n  }\n\n  @proxify\n  async updateSearchInput(input: string) {\n    this._updateSearchInput(input);\n  }\n\n  @proxify\n  async updateTypeFilter(type: ObjectMapValue<typeof messageTypes>) {\n    if (this.typeFilter === type) {\n      return;\n    }\n    this._updateTypeFilter(type);\n    this._olderDataExisted = true;\n    this._olderMessagesExisted = true;\n    if (this.pagingConversations.length <= this._perPage) {\n      this.loadNextPage();\n    }\n  }\n\n  @proxify\n  async fetchOldConversations() {\n    if (!this._olderDataExisted) {\n      return;\n    }\n    if (this.loadingOldConversations) {\n      return;\n    }\n    this._updateFetchConversationsStatus(conversationsStatus.fetching);\n    let dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const dateTo = new Date(this.earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom = new Date(dateTo.getTime() - 1000 * 3600 * 24);\n    }\n    const typeFilter = this.typeFilter;\n    const currentPage = this.currentPage;\n    const params: ListMessagesParameters = {\n      distinctConversations: true,\n      perPage: this._perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    if (typeFilter === messageTypes.text) {\n      params.messageType = [messageTypes.sms, messageTypes.pager];\n    } else if (typeFilter !== messageTypes.all) {\n      params.messageType = [typeFilter];\n    }\n    try {\n      const { records }: GetMessageList = await this._deps.client\n        .account()\n        .extension()\n        .messageStore()\n        .list(params);\n      const recordsLength = records.length;\n      this._olderDataExisted = recordsLength === this._perPage;\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        const isIncreaseCurrentPage =\n          recordsLength &&\n          this._perPage * this.currentPage <\n            recordsLength + this.filteredConversations.length;\n        this._fetchOldConversationsSuccess(records, isIncreaseCurrentPage);\n      }\n    } catch (e) {\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        this._updateFetchConversationsStatus(conversationsStatus.idle);\n      }\n    }\n  }\n\n  @proxify\n  async loadNextPage() {\n    const currentPage = this.currentPage;\n    if (currentPage * this._perPage < this.filteredConversations.length) {\n      this._increaseCurrentPage();\n      return;\n    }\n    if (this.effectiveSearchString !== '') {\n      return;\n    }\n    if (!this._enableLoadOldMessages || !this._hasPermission) {\n      return;\n    }\n    await this.fetchOldConversations();\n  }\n\n  @proxify\n  async resetCurrentPage() {\n    this._resetCurrentPage();\n  }\n\n  @proxify\n  async loadConversation(conversationId: string) {\n    if (conversationId === this.currentConversationId) {\n      return;\n    }\n    this._updateCurrentConversationId(conversationId);\n  }\n\n  @proxify\n  async unloadConversation() {\n    this._updateCurrentConversationId(null);\n    this._olderMessagesExisted = true;\n  }\n\n  @proxify\n  async fetchOldMessages(perPage = this._perPage) {\n    if (!this._enableLoadOldMessages) {\n      return;\n    }\n    if (!this._hasPermission) {\n      return;\n    }\n    if (!this._olderMessagesExisted) {\n      return;\n    }\n    if (this.loadingOldMessages) {\n      return;\n    }\n    if (!this.currentConversationId) {\n      return;\n    }\n    this._updateFetchMessagesStatus(conversationsStatus.fetching);\n    const conversationId = this.currentConversationId;\n    const dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const earliestTime = getEarliestTime(this.currentConversation.messages);\n    const dateTo = new Date(earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom.setDate(dateFrom.getDate() - 1);\n    }\n    const params: ListMessagesParameters = {\n      conversationId,\n      perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    try {\n      const { records }: GetMessageList = await this._deps.client\n        .account()\n        .extension()\n        .messageStore()\n        .list(params);\n      this._olderMessagesExisted = records.length === perPage;\n      if (conversationId === this.currentConversationId) {\n        this._fetchOldMessagesSuccess(records);\n      }\n    } catch (e) {\n      if (conversationId === this.currentConversationId) {\n        this._updateFetchMessagesStatus(conversationsStatus.idle);\n      }\n    }\n  }\n\n  _alertWarning(message: string) {\n    if (message) {\n      const ttlConfig =\n        message !== messageSenderMessages.noAreaCode ? { ttl: 0 } : null;\n      this._deps.alert.warning({\n        message,\n        ...ttlConfig,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  @proxify\n  async updateMessageText(text: string) {\n    if (text.length > 1000) {\n      return this._alertWarning(messageSenderMessages.textTooLong);\n    }\n    this._updateMessageText(this.currentConversationId, text);\n  }\n\n  @proxify\n  async addAttachment(attachment: Attachment) {\n    const attachments = this.attachments;\n    if (attachments.length >= 10) {\n      this._alertWarning(messageSenderMessages.attachmentCountLimitation);\n      return;\n    }\n    const size = attachments.reduce((prev, curr) => {\n      return prev + curr.size;\n    }, 0);\n    if (size + attachment.size > ATTACHMENT_SIZE_LIMITATION) {\n      this._alertWarning(messageSenderMessages.attachmentSizeLimitation);\n      return;\n    }\n    this._addAttachment(this.currentConversationId, attachment);\n  }\n\n  @proxify\n  async removeAttachment(attachment: Attachment) {\n    this._removeAttachment(this.currentConversationId, attachment);\n  }\n\n  @proxify\n  async replyToReceivers(text: string, attachments: Attachment[] = []) {\n    this._updateConversationStatus(conversationsStatus.pushing);\n    try {\n      const responses = await this._deps.messageSender.send({\n        fromNumber: this._getFromNumber(),\n        toNumbers: this._getToNumbers(),\n        text,\n        attachments,\n        replyOnMessageId: this._getReplyOnMessageId(),\n      });\n      if (responses && responses[0]) {\n        this._deps.messageStore.pushMessage(responses[0]);\n        this._updateConversationStatus(conversationsStatus.idle);\n        this._removeInputContent(this.currentConversationId);\n        return responses[0];\n      }\n      this._onReplyError();\n      return null;\n    } catch (error) {\n      this._onReplyError();\n      throw error;\n    }\n  }\n\n  _onReplyError() {\n    this._updateConversationStatus(conversationsStatus.idle);\n  }\n\n  _getReplyOnMessageId() {\n    const messageList = this.currentConversation.messages;\n    const lastMessage =\n      messageList &&\n      messageList.length > 0 &&\n      messageList[messageList.length - 1];\n    if (lastMessage && lastMessage.id) {\n      return lastMessage.id;\n    }\n    return null;\n  }\n\n  _getFromNumber() {\n    const senderNumber = this.currentConversation.senderNumber;\n    if (!senderNumber) {\n      return null;\n    }\n    return senderNumber.extensionNumber || senderNumber.phoneNumber;\n  }\n\n  _getToNumbers() {\n    const recipients = this.currentConversation.recipients;\n    return recipients.map(\n      (recipient) => recipient.extensionNumber || recipient.phoneNumber,\n    );\n  }\n\n  @proxify\n  async deleteConversation(conversationId: string) {\n    if (!conversationId) {\n      return;\n    }\n    if (this._deps.messageStore.conversationStore[conversationId]) {\n      await this._deps.messageStore.deleteConversationMessages(conversationId);\n      return;\n    }\n    const conversation = this.allConversations.find(\n      (c) => c.conversationId === conversationId,\n    );\n    if (!conversation) {\n      return;\n    }\n    if (messageIsTextMessage(conversation)) {\n      await this._deps.messageStore.deleteConversation(conversationId);\n      return;\n    }\n    try {\n      await this._deps.messageStore.deleteMessageApi(conversationId);\n      this._deleteOldConversation(conversationId);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  @computed((that: Conversations) => [\n    that._deps.messageStore.allConversations,\n    that.oldConversations,\n  ])\n  get allConversations(): Message[] {\n    const conversations = this._deps.messageStore.allConversations;\n    const oldConversations = this.oldConversations;\n    if (oldConversations.length === 0) {\n      return conversations;\n    }\n    const newConversations: Message[] = [];\n    const conversationMap: { [key: string]: number } = {};\n    const pushConversation = (c: Message) => {\n      // use conversationId when available, use id for VoiceMail/Fax/etc..\n      const cid = c.conversationId || c.id;\n      if (conversationMap[cid]) {\n        return;\n      }\n      newConversations.push(c);\n      conversationMap[cid] = 1;\n    };\n    conversations.forEach(pushConversation);\n    oldConversations.forEach(pushConversation);\n    return newConversations;\n  }\n\n  @computed(({ pagingConversations }: Conversations) => [pagingConversations])\n  get uniqueNumbers() {\n    return getUniqueNumbers(this.pagingConversations);\n  }\n\n  @computed(({ pagingConversations }: Conversations) => [pagingConversations])\n  get allUniqueNumbers() {\n    return getUniqueNumbers(this.allConversations);\n  }\n\n  @computed(({ searchInput }: Conversations) => [searchInput])\n  get effectiveSearchString() {\n    if (this.searchInput.length >= 3) {\n      return this.searchInput;\n    }\n    return '';\n  }\n\n  @computed(({ allConversations, typeFilter }: Conversations) => [\n    allConversations,\n    typeFilter,\n  ])\n  get typeFilteredConversations() {\n    const typeFilter = this.typeFilter;\n    const allConversations = this.allConversations;\n    switch (typeFilter) {\n      case messageTypes.text:\n        return allConversations.filter(messageIsTextMessage);\n      case messageTypes.voiceMail:\n        return allConversations.filter(messageIsVoicemail);\n      case messageTypes.fax:\n        return allConversations.filter(messageIsFax);\n      default:\n        return allConversations.filter(\n          (conversation) =>\n            (this._deps.appFeatures.hasReadTextPermission ||\n              !messageIsTextMessage(conversation)) &&\n            (this._deps.appFeatures.hasVoicemailPermission ||\n              !messageIsVoicemail(conversation)) &&\n            (this._deps.appFeatures.hasReadFaxPermission ||\n              !messageIsFax(conversation)),\n        );\n    }\n  }\n\n  @computed((that: Conversations) => [\n    that.typeFilteredConversations,\n    that._deps.extensionInfo.extensionNumber,\n    that._deps.contactMatcher?.dataMapping,\n    that._deps.conversationLogger?.loggingMap,\n    that._deps.conversationLogger?.dataMapping,\n    that._deps.auth.accessToken,\n  ])\n  get formattedConversations(): FormattedConversation[] {\n    const conversations = this.typeFilteredConversations;\n    const extensionNumber = this._deps.extensionInfo.extensionNumber;\n    const contactMapping =\n      (this._deps.contactMatcher && this._deps.contactMatcher.dataMapping) ||\n      {};\n    const loggingMap =\n      (this._deps.conversationLogger &&\n        this._deps.conversationLogger.loggingMap) ||\n      {};\n    const conversationLogMapping =\n      (this._deps.conversationLogger &&\n        this._deps.conversationLogger.dataMapping) ||\n      {};\n    const accessToken = this._deps.auth.accessToken;\n    return conversations.map((message) => {\n      const { self, correspondents } = getNumbersFromMessage({\n        extensionNumber,\n        message,\n      });\n      const selfNumber = self && (self.phoneNumber || self.extensionNumber);\n      const selfMatches = (selfNumber && contactMapping[selfNumber]) || [];\n      const correspondentMatches: CorrespondentMatch[] = correspondents.reduce(\n        (matches: CorrespondentMatch[], contact: Correspondent) => {\n          const number =\n            contact && (contact.phoneNumber || contact.extensionNumber);\n          return number &&\n            contactMapping[number] &&\n            contactMapping[number].length\n            ? matches.concat(contactMapping[number])\n            : matches;\n        },\n        [] as CorrespondentMatch[],\n      );\n      const conversationLogId = this._deps.conversationLogger\n        ? this._deps.conversationLogger.getConversationLogId(message)\n        : null;\n      const isLogging = !!(conversationLogId && loggingMap[conversationLogId]);\n      const conversationMatches =\n        conversationLogMapping[conversationLogId] || [];\n      let voicemailAttachment = null;\n      if (messageIsVoicemail(message)) {\n        voicemailAttachment = getVoicemailAttachment(message, accessToken);\n      }\n      let faxAttachment = null;\n      if (messageIsFax(message)) {\n        faxAttachment = getFaxAttachment(message, accessToken);\n      }\n      let unreadCounts = message.unreadCounts;\n      if (typeof unreadCounts === 'undefined') {\n        unreadCounts = messageIsUnread(message) ? 1 : 0;\n      }\n      let mmsAttachments: MessageAttachmentInfo[] = [];\n      if (messageIsTextMessage(message) && this._showMMSAttachment) {\n        mmsAttachments = getMMSAttachments(message, accessToken);\n      }\n      return {\n        ...message,\n        unreadCounts,\n        self,\n        selfMatches,\n        correspondents,\n        correspondentMatches,\n        conversationLogId,\n        isLogging,\n        conversationMatches,\n        voicemailAttachment,\n        faxAttachment,\n        mmsAttachments,\n        lastMatchedCorrespondentEntity:\n          (this._deps.conversationLogger &&\n            this._deps.conversationLogger.getLastMatchedCorrespondentEntity(\n              message,\n            )) ||\n          null,\n      };\n    });\n  }\n\n  @computed((that: Conversations) => [\n    that.formattedConversations,\n    that.effectiveSearchString,\n    that._deps.messageStore.conversationStore,\n  ])\n  get filteredConversations(): FilteredConversation[] {\n    const conversations = this.formattedConversations;\n    const effectiveSearchString = this.effectiveSearchString;\n    if (effectiveSearchString === '') {\n      return conversations;\n    }\n    const searchResults: FilteredConversation[] = [];\n    const cleanRegex = /[^\\d*+#\\s]/g;\n    const searchString = effectiveSearchString.toLowerCase();\n    const searchNumber = effectiveSearchString.replace(cleanRegex, '');\n    conversations.forEach((message) => {\n      if (searchNumber === effectiveSearchString) {\n        const cleanedNumber = cleanNumber(effectiveSearchString);\n        if (\n          message.correspondents.find(\n            (contact) =>\n              cleanNumber(\n                contact.phoneNumber || contact.extensionNumber || '',\n              ).indexOf(cleanedNumber) > -1,\n          )\n        ) {\n          // match by phoneNumber or extensionNumber\n          searchResults.push({\n            ...message,\n            matchOrder: 0,\n          });\n          return;\n        }\n      }\n      if (message.correspondentMatches.length) {\n        if (\n          message.correspondentMatches.find(\n            (entity) =>\n              (entity.name || '').toLowerCase().indexOf(searchString) > -1,\n          )\n        ) {\n          // match by entity's name\n          searchResults.push({\n            ...message,\n            matchOrder: 0,\n          });\n          return;\n        }\n      } else if (\n        message.correspondents.find(\n          (contact) =>\n            (contact.name || '').toLowerCase().indexOf(searchString) > -1,\n        )\n      ) {\n        searchResults.push({\n          ...message,\n          matchOrder: 0,\n        });\n        return;\n      }\n\n      // try match messages of the same conversation\n      if ((message.subject || '').toLowerCase().indexOf(searchString) > -1) {\n        searchResults.push({\n          ...message,\n          matchOrder: 1,\n        });\n        return;\n      }\n      const messageList: Message[] =\n        this._deps.messageStore.conversationStore[message.conversationId] || [];\n      const matchedMessage: Message = messageList.find(\n        (item) => (item.subject || '').toLowerCase().indexOf(searchString) > -1,\n      );\n      if (matchedMessage) {\n        searchResults.push({\n          ...message,\n          matchedMessage,\n          matchOrder: 1,\n        });\n      }\n    });\n    return searchResults.sort(sortSearchResults);\n  }\n\n  @computed(({ filteredConversations, currentPage }: Conversations) => [\n    filteredConversations,\n    currentPage,\n  ])\n  get pagingConversations() {\n    const pageNumber = this.currentPage;\n    const lastIndex = pageNumber * this._perPage;\n    return this.filteredConversations.slice(0, lastIndex);\n  }\n\n  @computed(({ typeFilteredConversations }: Conversations) => [\n    typeFilteredConversations,\n  ])\n  get earliestTime() {\n    return getEarliestTime(this.typeFilteredConversations);\n  }\n\n  @computed((that: Conversations) => [\n    that.currentConversationId,\n    that._deps.extensionInfo.extensionNumber,\n    that._deps.contactMatcher?.dataMapping,\n    that.oldMessages,\n    that._deps.messageStore.conversationStore,\n    that.allConversations,\n    that._deps.auth.accessToken,\n    that._deps.conversationLogger?.dataMapping,\n    that._deps.conversationLogger?.loggingMap,\n  ])\n  get currentConversation(): CurrentConversation {\n    const conversationId = this.currentConversationId;\n    const extensionNumber = this._deps.extensionInfo.extensionNumber;\n    const contactMapping =\n      (this._deps.contactMatcher && this._deps.contactMatcher.dataMapping) ||\n      {};\n    const oldMessages = this.oldMessages;\n    const conversationStore = this._deps.messageStore.conversationStore;\n    const conversations = this.allConversations;\n    const accessToken = this._deps.auth.accessToken;\n    const conversationLogMapping =\n      (this._deps.conversationLogger &&\n        this._deps.conversationLogger.dataMapping) ||\n      {};\n    const loggingMap =\n      (this._deps.conversationLogger &&\n        this._deps.conversationLogger.loggingMap) ||\n      {};\n    const conversation = conversations.find(\n      (c) => c.conversationId === conversationId,\n    );\n    const messages: Message[] = [].concat(\n      conversationStore[conversationId] || [],\n    );\n    const currentConversation = {\n      ...conversation,\n    } as CurrentConversation;\n    const allMessages = mergeMessages(messages, oldMessages).map((m) => {\n      if (!this._showMMSAttachment) {\n        return m;\n      }\n      const mmsAttachments = getMMSAttachments(m, accessToken);\n      return {\n        ...m,\n        mmsAttachments,\n      };\n    });\n    const { correspondents = [] } = getNumbersFromMessage({\n      extensionNumber,\n      message: conversation,\n    });\n    const correspondentMatches: CorrespondentMatch[] = correspondents.reduce(\n      (matches: CorrespondentMatch[], contact: Correspondent) => {\n        const number =\n          contact && (contact.phoneNumber || contact.extensionNumber);\n        return number && contactMapping[number] && contactMapping[number].length\n          ? matches.concat(contactMapping[number])\n          : matches;\n      },\n      [] as CorrespondentMatch[],\n    );\n    const conversationLogId = this._deps.conversationLogger\n      ? this._deps.conversationLogger.getConversationLogId(conversation)\n      : null;\n    const conversationMatches = conversationLogMapping[conversationLogId] || [];\n    currentConversation.correspondents = correspondents;\n    currentConversation.correspondentMatches = correspondentMatches;\n    currentConversation.conversationMatches = conversationMatches;\n    currentConversation.messages = allMessages.reverse();\n    currentConversation.senderNumber = getMyNumberFromMessage({\n      message: conversation,\n      myExtensionNumber: this._deps.extensionInfo.extensionNumber,\n    });\n    currentConversation.recipients = getRecipientNumbersFromMessage({\n      message: conversation,\n      myNumber: currentConversation.senderNumber,\n    });\n    currentConversation.isLogging = !!(\n      conversationLogId && loggingMap[conversationLogId]\n    );\n    currentConversation.lastMatchedCorrespondentEntity =\n      (this._deps.conversationLogger &&\n        conversation &&\n        this._deps.conversationLogger.getLastMatchedCorrespondentEntity(\n          conversation,\n        )) ||\n      null;\n    return currentConversation;\n  }\n\n  @computed(({ inputContents, currentConversationId }: Conversations) => [\n    inputContents,\n    currentConversationId,\n  ])\n  get messageText() {\n    const conversationId = this.currentConversationId;\n    const res = this.inputContents.find(\n      (msg) => typeof msg === 'object' && msg.conversationId === conversationId,\n    );\n    return res ? res.text : '';\n  }\n\n  @computed(({ inputContents, currentConversationId }: Conversations) => [\n    inputContents,\n    currentConversationId,\n  ])\n  get attachments() {\n    const conversationId = this.currentConversationId;\n    const res = this.inputContents.find(\n      (msg) => typeof msg === 'object' && msg.conversationId === conversationId,\n    );\n    return res ? res.attachments : [];\n  }\n\n  get loadingOldConversations() {\n    return this.fetchConversationsStatus === conversationsStatus.fetching;\n  }\n\n  get loadingOldMessages() {\n    return this.fetchMessagesStatus === conversationsStatus.fetching;\n  }\n\n  get pushing() {\n    return this.conversationStatus === conversationsStatus.pushing;\n  }\n\n  get _hasPermission() {\n    return this._deps.appFeatures.hasReadMessagesPermission;\n  }\n\n  addEntities(entities: CorrespondentMatch[]) {\n    this._addCorrespondentMatchEntities(entities);\n  }\n\n  removeEntity(entity: CorrespondentMatch) {\n    this._removeCorrespondentMatchEntity(entity);\n  }\n\n  addResponses(responses: Message[]) {\n    this._addCorrespondentResponses(responses);\n  }\n\n  removeResponse(phoneNumber: string) {\n    this._removeCorrespondentResponses(phoneNumber);\n  }\n\n  relateCorrespondentEntity(responses: Message[]) {\n    if (\n      !this._deps.contactMatcher ||\n      !this._deps.conversationLogger ||\n      !this.correspondentMatch.length\n    ) {\n      return;\n    }\n    this.addResponses(responses);\n    const { countryCode, areaCode } = this._deps.regionSettings;\n    const formattedCorrespondentMatch = this.correspondentMatch.map((item) => {\n      const formatted = normalizeNumber({\n        phoneNumber: item.phoneNumber,\n        countryCode,\n        areaCode,\n        removeExtension: false,\n      });\n      return {\n        phoneNumber: formatted,\n        id: item.rawId,\n      };\n    });\n    formattedCorrespondentMatch.forEach((item) => {\n      const { phoneNumber } = item;\n      const conversationId = this.correspondentResponse[phoneNumber];\n      if (this._deps.conversationLogger.autoLog) {\n        this._deps.conversationLogger.logConversation({\n          entity: item,\n          conversationId,\n        });\n      }\n      this.removeEntity(item);\n      this.removeResponse(phoneNumber);\n    });\n  }\n}\n"],"file":"Conversations.js"}