{"version":3,"sources":["modules/Conversations/index.js"],"names":["mergeMessages","messages","oldMessages","tmp","currentMessages","forEach","element","push","id","getEarliestTime","newTime","Date","now","message","creationTime","getTime","getUniqueNumbers","conversations","output","numberMap","addIfNotExist","number","from","direction","messageDirection","inbound","fromNumber","phoneNumber","extensionNumber","to","length","outbound","toNumber","toPhoneNumber","DEFAULT_PER_PAGE","DEFAULT_DAY_SPAN","Conversations","deps","dep","optional","alert","auth","client","messageSender","extensionInfo","messageStore","appFeatures","contactMatcher","conversationLogger","regionSettings","perPage","daySpan","enableLoadOldMessages","showMMSAttachment","options","actionTypes","_auth","ensureExist","call","_alert","_client","_messageSender","_extensionInfo","_messageStore","_appFeatures","_contactMatcher","_conversationLogger","_regionSettings","_reducer","_promise","_lastProcessedNumbers","_perPage","_daySpan","_olderDataExsited","_olderMessagesExsited","_enableLoadOldMessages","_showMMSAttachment","_lastConversaionList","on","events","send","toNumbers","addEntities","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","store","subscribe","_onStateChange","_shouldInit","_init","_shouldReset","_reset","allUniqueNumbers","_lastProcessedPage","currentPage","_lastTypeFilter","typeFilter","_lastSearchString","effectiveSearchString","triggerMatch","allConversations","oldConversations","dispatch","type","cleanOldConversations","loggedIn","pending","init","initSuccess","_hasPermission","fetchOldConversations","resetSuccess","input","updateSearchInput","updateTypeFilter","pagingConversations","loadNextPage","loadingOldConversations","dateFrom","setDate","getDate","dateTo","earliestTime","params","distinctConversations","toISOString","messageTypes","text","messageType","sms","pager","all","account","extension","list","records","recordsLength","isIncreaseCurrentPage","filteredConversations","fetchOldConversationsSuccess","fetchOldConversationsError","increaseCurrentPage","resetCurrentPage","conversationId","currentConversationId","updateCurrentConversationId","loadingOldMessages","fetchOldMessages","currentConversation","fetchOldMessagesSuccess","fetchOldMessagesError","ttlConfig","messageSenderMessages","noAreaCode","ttl","warning","_alertWarning","textTooLong","updateMessageText","reply","_getFromNumber","_getToNumbers","replyOnMessageId","_getReplyOnMessageId","responses","pushMessage","replySuccess","removeMessageText","_onReplyError","error","replyError","messageList","lastMessage","senderNumber","recipients","map","recipient","conversationStore","deleteConversationMessages","conversation","find","c","deleteConversation","deleteMessageApi","console","entities","entity","removeEntity","addResponses","removeResponse","correspondentMatch","countryCode","areaCode","formattedCorrespondentMatch","item","formatted","rawId","correspondentResponse","logConversation","state","status","searchInput","fetchConversationsStatus","fetchMessagesStatus","fetching","conversationStatus","pushing","hasReadMessagesPermission","RcModule","proxify","selector","newConversations","conversationMap","pushConversation","cid","filter","messageIsTextMessage","voiceMail","messageIsVoicemail","fax","messageIsFax","hasVoicemailPermission","hasReadFaxPermission","typeFilteredConversations","dataMapping","loggingMap","accessToken","contactMapping","conversationLogMapping","self","correspondents","selfNumber","selfMatches","correspondentMatches","reduce","matches","contact","concat","conversationLogId","getConversationLogId","isLogging","conversationMatches","voicemailAttachment","faxAttachment","unreadCounts","mmsAttachments","lastMatchedCorrespondentEntity","getLastMatchedCorrespondentEntity","formattedConversations","searchResults","cleanRegex","searchString","toLowerCase","searchNumber","replace","cleanedNumber","indexOf","matchOrder","name","subject","matchedMessage","sort","sortSearchResults","pageNumber","lastIndex","slice","allMessages","m","reverse","myExtensionNumber","myNumber","messageTexts","res","msg"],"mappings":"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","sourcesContent":["import messageDirection from '../../enums/messageDirection';\nimport messageTypes from '../../enums/messageTypes';\nimport cleanNumber from '../../lib/cleanNumber';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport {\n  getFaxAttachment,\n  getMMSAttachments,\n  getMyNumberFromMessage,\n  getNumbersFromMessage,\n  getRecipientNumbersFromMessage,\n  getVoicemailAttachment,\n  messageIsFax,\n  messageIsTextMessage,\n  messageIsUnread,\n  messageIsVoicemail,\n  sortSearchResults,\n} from '../../lib/messageHelper';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport proxify from '../../lib/proxy/proxify';\nimport RcModule from '../../lib/RcModule';\nimport { selector } from '../../lib/selector';\nimport { messageSenderMessages } from '../MessageSender/messageSenderMessages';\nimport { actionTypes } from './actionTypes';\nimport getReducer from './getReducer';\nimport { status } from './status';\n\nfunction mergeMessages(messages, oldMessages) {\n  const tmp = {};\n  const currentMessages = [];\n  messages.forEach((element) => {\n    currentMessages.push(element);\n    tmp[element.id] = 1;\n  });\n\n  oldMessages.forEach((element) => {\n    if (!tmp[element.id]) {\n      currentMessages.push(element);\n    }\n  });\n  return currentMessages;\n}\n\nfunction getEarliestTime(messages) {\n  let newTime = Date.now();\n  messages.forEach((message) => {\n    const creationTime = new Date(message.creationTime).getTime();\n    if (creationTime < newTime) {\n      newTime = creationTime;\n    }\n  });\n  return newTime;\n}\n\nfunction getUniqueNumbers(conversations) {\n  const output = [];\n  const numberMap = {};\n  function addIfNotExist(number) {\n    if (number && !numberMap[number]) {\n      output.push(number);\n      numberMap[number] = true;\n    }\n  }\n  conversations.forEach((message) => {\n    if (message.from && message.direction === messageDirection.inbound) {\n      const fromNumber =\n        message.from.phoneNumber || message.from.extensionNumber;\n      addIfNotExist(fromNumber);\n    }\n    if (\n      message.to &&\n      message.to.length > 0 &&\n      message.direction === messageDirection.outbound\n    ) {\n      message.to.forEach((toNumber) => {\n        if (!toNumber) {\n          return;\n        }\n        const toPhoneNumber = toNumber.phoneNumber || toNumber.extensionNumber;\n        addIfNotExist(toPhoneNumber);\n      });\n    }\n  });\n  return output;\n}\n\nconst DEFAULT_PER_PAGE = 20;\nconst DEFAULT_DAY_SPAN = 90;\n@Module({\n  deps: [\n    'Alert',\n    'Auth',\n    'Client',\n    'MessageSender',\n    'ExtensionInfo',\n    'MessageStore',\n    'AppFeatures',\n    { dep: 'RegionSettings', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ConversationLogger', optional: true },\n    { dep: 'ConversationsOptions', optional: true },\n  ],\n})\nexport default class Conversations extends RcModule {\n  constructor({\n    alert,\n    auth,\n    client,\n    messageSender,\n    extensionInfo,\n    messageStore,\n    appFeatures,\n    contactMatcher,\n    conversationLogger,\n    regionSettings,\n    perPage = DEFAULT_PER_PAGE,\n    daySpan = DEFAULT_DAY_SPAN,\n    enableLoadOldMessages = false, // disable old message by default\n    showMMSAttachment = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = ensureExist.call(this, auth, 'auth');\n    this._alert = ensureExist.call(this, alert, 'alert');\n    this._client = ensureExist.call(this, client, 'client');\n    this._messageSender = ensureExist.call(\n      this,\n      messageSender,\n      'messageSender',\n    );\n    this._extensionInfo = ensureExist.call(\n      this,\n      extensionInfo,\n      'extensionInfo',\n    );\n    this._messageStore = ensureExist.call(this, messageStore, 'messageStore');\n    this._appFeatures = appFeatures;\n    this._contactMatcher = contactMatcher;\n    this._conversationLogger = conversationLogger;\n    this._regionSettings = regionSettings;\n\n    this._reducer = getReducer(this.actionTypes);\n\n    this._promise = null;\n    this._lastProcessedNumbers = null;\n    this._perPage = perPage;\n    this._daySpan = daySpan;\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    this._enableLoadOldMessages = enableLoadOldMessages;\n    this._showMMSAttachment = showMMSAttachment;\n    this._lastConversaionList = [];\n\n    this._messageSender.on(this._messageSender.events.send, ({ toNumbers }) => {\n      this.addEntities(toNumbers);\n    });\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => this._messageStore.ready,\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    } else if (\n      this._lastProcessedNumbers !== this.allUniqueNumbers ||\n      this._lastProcessedPage !== this.currentPage ||\n      this._lastTypeFilter !== this.typeFilter ||\n      this._lastSearchString !== this.effectiveSearchString\n    ) {\n      this._lastProcessedNumbers = this.allUniqueNumbers;\n      this._lastProcessedPage = this.currentPage;\n      this._lastTypeFilter = this.typeFilter;\n      this._lastSearchString = this.effectiveSearchString;\n      if (this._contactMatcher) {\n        this._contactMatcher.triggerMatch();\n      }\n    } else if (\n      this._lastConversaionList.length >\n      this._messageStore.allConversations.length\n    ) {\n      this._lastConversaionList = this._messageStore.allConversations;\n      if (this.oldConversations.length) {\n        this.store.dispatch({\n          type: this.actionTypes.cleanOldConversations,\n        });\n        this._olderDataExsited = true;\n      }\n    } else if (\n      this._lastConversaionList.length <\n      this._messageStore.allConversations.length\n    ) {\n      this._lastConversaionList = this._messageStore.allConversations;\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._extensionInfo.ready &&\n      this._messageSender.ready &&\n      this._messageStore.ready &&\n      this._appFeatures.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._conversationLogger || this._conversationLogger.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._auth.loggedIn ||\n        !this._extensionInfo.ready ||\n        !this._messageSender.ready ||\n        !this._appFeatures.ready ||\n        !this._messageStore.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._conversationLogger && !this._conversationLogger.ready)) &&\n      this.ready\n    );\n  }\n\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (this._contactMatcher) {\n      this._contactMatcher.triggerMatch();\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n    this._lastConversaionList = this._messageStore.allConversations;\n    if (\n      this.allConversations.length <= this._perPage &&\n      this._enableLoadOldMessages &&\n      this._hasPermission\n    ) {\n      this.fetchOldConversations();\n    }\n  }\n\n  _reset() {\n    this._lastProcessedNumbers = null;\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  @proxify\n  async updateTypeFilter(type) {\n    if (this.typeFilter === type) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateTypeFilter,\n      typeFilter: type,\n    });\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    if (this.pagingConversations.length <= this._perPage) {\n      this.loadNextPage();\n    }\n  }\n\n  @proxify\n  async fetchOldConversations() {\n    if (!this._olderDataExsited) {\n      return;\n    }\n    if (this.loadingOldConversations) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.fetchOldConversations,\n    });\n    let dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const dateTo = new Date(this.earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom = new Date(dateTo.getTime() - 1000 * 3600 * 24);\n    }\n    const typeFilter = this.typeFilter;\n    const currentPage = this.currentPage;\n    const params = {\n      distinctConversations: true,\n      perPage: this._perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    if (typeFilter === messageTypes.text) {\n      params.messageType = [messageTypes.sms, messageTypes.pager];\n    } else if (\n      typeFilter &&\n      typeFilter !== '' &&\n      typeFilter !== messageTypes.all\n    ) {\n      params.messageType = typeFilter;\n    }\n    try {\n      const {\n        records,\n      } = await this._client.account().extension().messageStore().list(params);\n      const recordsLength = records.length;\n      this._olderDataExsited = recordsLength === this._perPage;\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        const isIncreaseCurrentPage =\n          recordsLength &&\n          this._perPage * this.currentPage <\n            recordsLength + this.filteredConversations.length;\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldConversationsSuccess,\n          records,\n          isIncreaseCurrentPage,\n        });\n      }\n    } catch (e) {\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldConversationsError,\n        });\n      }\n    }\n  }\n\n  @proxify\n  async loadNextPage() {\n    const currentPage = this.currentPage;\n    if (currentPage * this._perPage < this.filteredConversations.length) {\n      this.store.dispatch({\n        type: this.actionTypes.increaseCurrentPage,\n      });\n      return;\n    }\n    if (this.effectiveSearchString !== '') {\n      return;\n    }\n    if (!this._enableLoadOldMessages || !this._hasPermission) {\n      return;\n    }\n    await this.fetchOldConversations();\n  }\n\n  @proxify\n  async resetCurrentPage() {\n    this.store.dispatch({\n      type: this.actionTypes.resetCurrentPage,\n    });\n  }\n\n  @proxify\n  async loadConversation(conversationId) {\n    if (conversationId === this.currentConversationId) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentConversationId,\n      conversationId,\n    });\n  }\n\n  @proxify\n  async unloadConversation() {\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentConversationId,\n      conversationId: null,\n    });\n    this._olderMessagesExsited = true;\n  }\n\n  @proxify\n  async fetchOldMessages(perPage = this._perPage) {\n    if (!this._enableLoadOldMessages) {\n      return;\n    }\n    if (!this._hasPermission) {\n      return;\n    }\n    if (!this._olderMessagesExsited) {\n      return;\n    }\n    if (this.loadingOldMessages) {\n      return;\n    }\n    if (!this.currentConversationId) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.fetchOldMessages,\n    });\n    const conversationId = this.currentConversationId;\n    const dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const earliestTime = getEarliestTime(this.currentConversation.messages);\n    const dateTo = new Date(earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom.setDate(dateFrom.getDate() - 1);\n    }\n    const params = {\n      conversationId,\n      perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    try {\n      const {\n        records,\n      } = await this._client.account().extension().messageStore().list(params);\n      this._olderMessagesExsited = records.length === perPage;\n      if (conversationId === this.currentConversationId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldMessagesSuccess,\n          records,\n        });\n      }\n    } catch (e) {\n      if (conversationId === this.currentConversationId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldMessagesError,\n        });\n      }\n    }\n  }\n\n  _alertWarning(message) {\n    if (message) {\n      const ttlConfig =\n        message !== messageSenderMessages.noAreaCode ? { ttl: 0 } : null;\n      this._alert.warning({\n        message,\n        ...ttlConfig,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  @proxify\n  async updateMessageText(text) {\n    if (text.length > 1000) {\n      return this._alertWarning(messageSenderMessages.textTooLong);\n    }\n    return this.store.dispatch({\n      type: this.actionTypes.updateMessageText,\n      text,\n      conversationId: this.currentConversationId,\n    });\n  }\n\n  @proxify\n  async replyToReceivers(text) {\n    this.store.dispatch({\n      type: this.actionTypes.reply,\n    });\n    try {\n      const responses = await this._messageSender.send({\n        fromNumber: this._getFromNumber(),\n        toNumbers: this._getToNumbers(),\n        text,\n        replyOnMessageId: this._getReplyOnMessageId(),\n      });\n      if (responses && responses[0]) {\n        this._messageStore.pushMessage(responses[0]);\n        this.store.dispatch({\n          type: this.actionTypes.replySuccess,\n        });\n        this.store.dispatch({\n          type: this.actionTypes.removeMessageText,\n          conversationId: this.currentConversationId,\n        });\n        return responses[0];\n      }\n      this._onReplyError();\n      return null;\n    } catch (error) {\n      this._onReplyError(error);\n      throw error;\n    }\n  }\n\n  _onReplyError(error) {\n    this.store.dispatch({\n      type: this.actionTypes.replyError,\n      error,\n    });\n  }\n\n  _getReplyOnMessageId() {\n    const messageList = this.currentConversation.messages;\n    const lastMessage =\n      messageList &&\n      messageList.length > 0 &&\n      messageList[messageList.length - 1];\n    if (lastMessage && lastMessage.id) {\n      return lastMessage.id;\n    }\n    return null;\n  }\n\n  _getFromNumber() {\n    const senderNumber = this.currentConversation.senderNumber;\n    if (!senderNumber) {\n      return null;\n    }\n    return senderNumber.extensionNumber || senderNumber.phoneNumber;\n  }\n\n  _getToNumbers() {\n    const recipients = this.currentConversation.recipients;\n    return recipients.map(\n      (recipient) => recipient.extensionNumber || recipient.phoneNumber,\n    );\n  }\n\n  @proxify\n  async deleteConversation(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    if (this._messageStore.conversationStore[conversationId]) {\n      await this._messageStore.deleteConversationMessages(conversationId);\n      return;\n    }\n    const conversation = this.allConversations.find(\n      (c) => c.conversationId === conversationId,\n    );\n    if (!conversation) {\n      return;\n    }\n    if (messageIsTextMessage(conversation)) {\n      await this._messageStore.deleteConversation(conversationId);\n      return;\n    }\n    try {\n      await this._messageStore.deleteMessageApi(conversationId);\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  @selector\n  allConversations = [\n    () => this._messageStore.allConversations,\n    () => this.oldConversations,\n    (conversations, oldConversations) => {\n      if (oldConversations.length === 0) {\n        return conversations;\n      }\n      const newConversations = [];\n      const conversationMap = {};\n      const pushConversation = (c) => {\n        // use conversationId when available, use id for VoiceMail/Fax/etc..\n        const cid = c.conversationId || c.id;\n        if (conversationMap[cid]) {\n          return;\n        }\n        newConversations.push(c);\n        conversationMap[cid] = 1;\n      };\n      conversations.forEach(pushConversation);\n      oldConversations.forEach(pushConversation);\n      return newConversations;\n    },\n  ];\n\n  @selector\n  uniqueNumbers = [() => this.pagingConversations, getUniqueNumbers];\n\n  @selector\n  allUniqueNumbers = [() => this.allConversations, getUniqueNumbers];\n\n  @selector\n  effectiveSearchString = [\n    () => this.state.searchInput,\n    (input) => {\n      if (input.length >= 3) return input;\n      return '';\n    },\n  ];\n\n  @selector\n  typeFilteredConversations = [\n    () => this.allConversations,\n    () => this.typeFilter,\n    (allConversations, typeFilter) => {\n      switch (typeFilter) {\n        case messageTypes.text:\n          return allConversations.filter(messageIsTextMessage);\n        case messageTypes.voiceMail:\n          return allConversations.filter(messageIsVoicemail);\n        case messageTypes.fax:\n          return allConversations.filter(messageIsFax);\n        default:\n          return allConversations.filter(\n            (conversation) =>\n              (this._appFeatures.hasReadMessagesPermission ||\n                !messageIsTextMessage(conversation)) &&\n              (this._appFeatures.hasVoicemailPermission ||\n                !messageIsVoicemail(conversation)) &&\n              (this._appFeatures.hasReadFaxPermission ||\n                !messageIsFax(conversation)),\n          );\n      }\n    },\n  ];\n\n  @selector\n  formattedConversations = [\n    () => this.typeFilteredConversations,\n    () => this._extensionInfo.extensionNumber,\n    () => this._contactMatcher && this._contactMatcher.dataMapping,\n    () => this._conversationLogger && this._conversationLogger.loggingMap,\n    () => this._conversationLogger && this._conversationLogger.dataMapping,\n    () => this._auth.accessToken,\n    (\n      conversations,\n      extensionNumber,\n      contactMapping = {},\n      loggingMap = {},\n      conversationLogMapping = {},\n      accessToken,\n    ) =>\n      conversations.map((message) => {\n        const { self, correspondents } = getNumbersFromMessage({\n          extensionNumber,\n          message,\n        });\n        const selfNumber = self && (self.phoneNumber || self.extensionNumber);\n        const selfMatches = (selfNumber && contactMapping[selfNumber]) || [];\n        const correspondentMatches = correspondents.reduce(\n          (matches, contact) => {\n            const number =\n              contact && (contact.phoneNumber || contact.extensionNumber);\n            return number &&\n              contactMapping[number] &&\n              contactMapping[number].length\n              ? matches.concat(contactMapping[number])\n              : matches;\n          },\n          [],\n        );\n        const conversationLogId = this._conversationLogger\n          ? this._conversationLogger.getConversationLogId(message)\n          : null;\n        const isLogging = !!(\n          conversationLogId && loggingMap[conversationLogId]\n        );\n        const conversationMatches =\n          conversationLogMapping[conversationLogId] || [];\n        let voicemailAttachment = null;\n        if (messageIsVoicemail(message)) {\n          voicemailAttachment = getVoicemailAttachment(message, accessToken);\n        }\n        let faxAttachment = null;\n        if (messageIsFax(message)) {\n          faxAttachment = getFaxAttachment(message, accessToken);\n        }\n        let unreadCounts = message.unreadCounts;\n        if (typeof unreadCounts === 'undefined') {\n          unreadCounts = messageIsUnread(message) ? 1 : 0;\n        }\n        let mmsAttachments = [];\n        if (messageIsTextMessage(message) && this._showMMSAttachment) {\n          mmsAttachments = getMMSAttachments(message, accessToken);\n        }\n        return {\n          ...message,\n          unreadCounts,\n          self,\n          selfMatches,\n          correspondents,\n          correspondentMatches,\n          conversationLogId,\n          isLogging,\n          conversationMatches,\n          voicemailAttachment,\n          faxAttachment,\n          mmsAttachments,\n          lastMatchedCorrespondentEntity:\n            (this._conversationLogger &&\n              this._conversationLogger.getLastMatchedCorrespondentEntity(\n                message,\n              )) ||\n            null,\n        };\n      }),\n  ];\n\n  @selector\n  filteredConversations = [\n    () => this.formattedConversations,\n    () => this.effectiveSearchString,\n    (conversations, effectiveSearchString) => {\n      if (effectiveSearchString === '') {\n        return conversations;\n      }\n      const searchResults = [];\n      const cleanRegex = /[^\\d*+#\\s]/g;\n      const searchString = effectiveSearchString.toLowerCase();\n      const searchNumber = effectiveSearchString.replace(cleanRegex, '');\n      conversations.forEach((message) => {\n        if (searchNumber === effectiveSearchString) {\n          const cleanedNumber = cleanNumber(effectiveSearchString);\n          if (\n            message.correspondents.find(\n              (contact) =>\n                cleanNumber(\n                  contact.phoneNumber || contact.extensionNumber || '',\n                ).indexOf(cleanedNumber) > -1,\n            )\n          ) {\n            // match by phoneNumber or extensionNumber\n            searchResults.push({\n              ...message,\n              matchOrder: 0,\n            });\n            return;\n          }\n        }\n        if (message.correspondentMatches.length) {\n          if (\n            message.correspondentMatches.find(\n              (entity) =>\n                (entity.name || '').toLowerCase().indexOf(searchString) > -1,\n            )\n          ) {\n            // match by entity's name\n            searchResults.push({\n              ...message,\n              matchOrder: 0,\n            });\n            return;\n          }\n        } else if (\n          message.correspondents.find(\n            (contact) =>\n              (contact.name || '').toLowerCase().indexOf(searchString) > -1,\n          )\n        ) {\n          searchResults.push({\n            ...message,\n            matchOrder: 0,\n          });\n          return;\n        }\n\n        // try match messages of the same conversation\n        if ((message.subject || '').toLowerCase().indexOf(searchString) > -1) {\n          searchResults.push({\n            ...message,\n            matchOrder: 1,\n          });\n          return;\n        }\n        const messageList =\n          this._messageStore.conversationStore[message.conversationId] || [];\n        const matchedMessage = messageList.find(\n          (item) =>\n            (item.subject || '').toLowerCase().indexOf(searchString) > -1,\n        );\n        if (matchedMessage) {\n          searchResults.push({\n            ...message,\n            matchedMessage,\n            matchOrder: 1,\n          });\n        }\n      });\n      return searchResults.sort(sortSearchResults);\n    },\n  ];\n\n  @selector\n  pagingConversations = [\n    () => this.filteredConversations,\n    () => this.currentPage,\n    (conversations, pageNumber) => {\n      const lastIndex = pageNumber * this._perPage;\n      return conversations.slice(0, lastIndex);\n    },\n  ];\n\n  @selector\n  earliestTime = [() => this.typeFilteredConversations, getEarliestTime];\n\n  @selector\n  currentConversation = [\n    () => this.currentConversationId,\n    () => this._extensionInfo.extensionNumber,\n    () => this._contactMatcher && this._contactMatcher.dataMapping,\n    () => this.oldMessages,\n    () => this._messageStore.conversationStore,\n    () => this.allConversations,\n    () => this._auth.accessToken,\n    () => this._conversationLogger && this._conversationLogger.dataMapping,\n    () => this._conversationLogger && this._conversationLogger.loggingMap,\n    (\n      conversationId,\n      extensionNumber,\n      contactMapping,\n      oldMessages,\n      conversationStore,\n      conversations,\n      accessToken,\n      conversationLogMapping = {},\n      loggingMap,\n    ) => {\n      const conversation = conversations.find(\n        (c) => c.conversationId === conversationId,\n      );\n      const messages = [].concat(conversationStore[conversationId] || []);\n      const currentConversation = {\n        ...conversation,\n      };\n      const allMessages = mergeMessages(messages, oldMessages).map((m) => {\n        if (!this._showMMSAttachment) {\n          return m;\n        }\n        const mmsAttachments = getMMSAttachments(m, accessToken);\n        return {\n          ...m,\n          mmsAttachments,\n        };\n      });\n      const { correspondents = [] } = getNumbersFromMessage({\n        extensionNumber,\n        message: conversation,\n      });\n      const correspondentMatches = correspondents.reduce((matches, contact) => {\n        const number =\n          contact && (contact.phoneNumber || contact.extensionNumber);\n        return number && contactMapping[number] && contactMapping[number].length\n          ? matches.concat(contactMapping[number])\n          : matches;\n      }, []);\n      const conversationLogId = this._conversationLogger\n        ? this._conversationLogger.getConversationLogId(conversation)\n        : null;\n      const conversationMatches =\n        conversationLogMapping[conversationLogId] || [];\n      currentConversation.correspondents = correspondents;\n      currentConversation.correspondentMatches = correspondentMatches;\n      currentConversation.conversationMatches = conversationMatches;\n      currentConversation.messages = allMessages.reverse();\n      currentConversation.senderNumber = getMyNumberFromMessage({\n        message: conversation,\n        myExtensionNumber: this._extensionInfo.extensionNumber,\n      });\n      currentConversation.recipients = getRecipientNumbersFromMessage({\n        message: conversation,\n        myNumber: currentConversation.senderNumber,\n      });\n      currentConversation.isLogging = !!(\n        conversationLogId && loggingMap[conversationLogId]\n      );\n      return currentConversation;\n    },\n  ];\n\n  @selector\n  messageText = [\n    () => this.state.messageTexts,\n    () => this.currentConversationId,\n    (messageTexts, conversationId) => {\n      const res = messageTexts.find(\n        (msg) =>\n          typeof msg === 'object' && msg.conversationId === conversationId,\n      );\n      return res ? res.text : '';\n    },\n  ];\n\n  get status() {\n    return this.state.status;\n  }\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get typeFilter() {\n    return this.state.typeFilter;\n  }\n\n  get currentPage() {\n    return this.state.currentPage;\n  }\n\n  get oldConversations() {\n    return this.state.oldConversations;\n  }\n\n  get fetchConversationsStatus() {\n    return this.state.fetchConversationsStatus;\n  }\n\n  get currentConversationId() {\n    return this.state.currentConversationId;\n  }\n\n  get fetchMessagesStatus() {\n    return this.state.fetchMessagesStatus;\n  }\n\n  get oldMessages() {\n    return this.state.oldMessages;\n  }\n\n  get loadingOldConversations() {\n    return this.fetchConversationsStatus === status.fetching;\n  }\n\n  get loadingOldMessages() {\n    return this.fetchMessagesStatus === status.fetching;\n  }\n\n  get pushing() {\n    return this.state.conversationStatus === status.pushing;\n  }\n\n  get _hasPermission() {\n    return this._appFeatures.hasReadMessagesPermission;\n  }\n\n  get correspondentMatch() {\n    return this.state.correspondentMatch;\n  }\n\n  get correspondentResponse() {\n    return this.state.correspondentResponse;\n  }\n\n  addEntities(entities) {\n    this.store.dispatch({\n      type: this.actionTypes.addEntities,\n      entities,\n    });\n  }\n\n  removeEntity(entity) {\n    this.store.dispatch({\n      type: this.actionTypes.removeEntity,\n      entity,\n    });\n  }\n\n  addResponses(responses) {\n    this.store.dispatch({\n      type: this.actionTypes.addResponses,\n      responses,\n    });\n  }\n\n  removeResponse(phoneNumber) {\n    this.store.dispatch({\n      type: this.actionTypes.removeResponse,\n      phoneNumber,\n    });\n  }\n\n  relateCorrespondentEntity(responses) {\n    if (\n      !this._contactMatcher ||\n      !this._conversationLogger ||\n      !this.correspondentMatch.length\n    ) {\n      return;\n    }\n    this.addResponses(responses);\n    const { countryCode, areaCode } = this._regionSettings;\n    const formattedCorrespondentMatch = this.correspondentMatch.map((item) => {\n      const formatted = normalizeNumber({\n        phoneNumber: item.phoneNumber,\n        countryCode,\n        areaCode,\n      });\n      return {\n        phoneNumber: formatted,\n        id: item.rawId,\n      };\n    });\n    formattedCorrespondentMatch.forEach((item) => {\n      const { phoneNumber } = item;\n      const conversationId = this.correspondentResponse[phoneNumber];\n      this._conversationLogger.logConversation({\n        entity: item,\n        conversationId,\n      });\n      this.removeEntity(item);\n      this.removeResponse(phoneNumber);\n    });\n  }\n}\n"],"file":"index.js"}