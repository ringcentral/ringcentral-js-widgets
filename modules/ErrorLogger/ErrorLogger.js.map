{"version":3,"sources":["modules/ErrorLogger/ErrorLogger.ts"],"names":["Severity","ErrorLogger","deps","dep","optional","auth","appName","appBrand","appVersion","environment","sentryConfig","options","_auth","_loggedIn","_sentryInitialized","endpoint","_bootstrap","setTags","release","Sentry","init","dsn","sampleRate","enabled","ignoreErrors","loggedInChanged","loggedIn","user","id","ownerId","setUser","configureScope","scope","tags","message","level","eventId","captureMessage","error","captureException","log","Debug","RcModule"],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/browser';\n\nimport { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\n\nexport interface SentryConfig {\n  endpoint: string;\n  sampleRate?: number;\n}\n\nexport interface User {\n  id?: string;\n  email?: string;\n  username?: string;\n}\n\nexport enum Severity {\n  Error = 'error',\n  Warning = 'warning',\n  Log = 'log',\n  Info = 'info',\n  Debug = 'debug',\n}\n\n/**\n * Error Logger based on Sentry\n */\n@Module({\n  deps: [\n    { dep: 'Auth', optional: true },\n    { dep: 'ErrorLoggerOptions', optional: true },\n  ],\n})\nexport class ErrorLogger extends RcModule {\n  private _auth: any;\n  private _loggedIn?: boolean = false;\n  private _sentryInitialized: boolean = false;\n\n  constructor({\n    auth,\n    appName,\n    appBrand,\n    appVersion,\n    environment,\n    sentryConfig,\n    ...options\n  }) {\n    super({\n      ...options,\n    });\n\n    this._auth = auth;\n\n    if (sentryConfig?.endpoint) {\n      this._bootstrap({\n        sentryConfig,\n        environment,\n      });\n      this.setTags({\n        'app.name': appName,\n        'app.brand': appBrand,\n        'app.version': appVersion,\n      });\n    }\n  }\n\n  private _bootstrap({\n    sentryConfig,\n    environment,\n    release,\n  }: {\n    sentryConfig: SentryConfig;\n    environment: string;\n    release?: string;\n  }): void {\n    Sentry.init({\n      dsn: sentryConfig.endpoint,\n      sampleRate: sentryConfig.sampleRate,\n      environment,\n      release,\n      enabled: true,\n      ignoreErrors: [\n        '200 OK',\n        'Failed to fetch',\n        'Request Timeout',\n        'Service is overloaded',\n        'In order to call this API endpoint, user needs to have [ReadCallLog] permission for requested resource',\n        'INVALID_STATE_ERROR: Invalid status: 11',\n        'INVALID_STATE_ERROR: Invalid status: 1',\n        'rateLimiterErrorMessages-rateLimitReached',\n      ],\n    });\n    this._sentryInitialized = true;\n  }\n\n  get _actionTypes() {\n    /* no action types */\n    return null;\n  }\n\n  _onStateChange() {\n    if (this._sentryInitialized && this._auth) {\n      const loggedInChanged = this._loggedIn !== this._auth.loggedIn;\n      if (loggedInChanged) {\n        this._loggedIn = this._auth.loggedIn;\n        // set user\n        const user: User = {\n          id: this._auth.ownerId,\n        };\n        this.setUser(user);\n      }\n    }\n  }\n\n  setUser(user: User): void {\n    Sentry.configureScope((scope) => {\n      scope.setUser(user);\n    });\n  }\n\n  setTags(tags: { [key: string]: string }): void {\n    Sentry.configureScope((scope) => {\n      scope.setTags(tags);\n    });\n  }\n\n  log(message: string, level?: Severity): string {\n    const eventId = Sentry.captureMessage(message, level);\n    return eventId;\n  }\n\n  logError(error: any): string {\n    const eventId = Sentry.captureException(error);\n    return eventId;\n  }\n\n  test(message: string = '[test] error logger'): string {\n    const eventId = this.log(message, Severity.Debug);\n    return eventId;\n  }\n}\n"],"file":"ErrorLogger.js"}