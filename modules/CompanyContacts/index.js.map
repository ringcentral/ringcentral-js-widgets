{"version":3,"sources":["modules/CompanyContacts/index.ts"],"names":["contactsRegExp","DEFAULT_TTL","DEFAULT_SHOW_DISABLED","DEFAULT_SHOW_NOT_ACTIVATED","DEFAULT_ALLOW_SETTINGS","DEFAULT_TYPE_FILTERS","extensionTypes","digitalUser","user","department","CompanyContacts","deps","dep","optional","client","extensionFeatures","storage","ttl","polling","showDisabled","extensionTypeFilters","showNotActivated","allowSettings","options","getReducer","getDataFetcherReducer","types","reducers","getDataReducer","getTimestampReducer","subscriptionFilters","companyContacts","subscriptionHandler","message","ready","test","event","body","contacts","contact","_processContact","fetchFunction","params","_client","account","directory","list","readyCheckFn","_extensionFeatures","_allowSettings","_storage","_settingsStorageKey","registerReducer","key","reducer","actionTypes","eventType","oldEtag","newEtag","store","dispatch","type","upsert","timestamp","Date","now","extensionNumber","item","filteredContacts","concat","ivrContacts","features","ReadExtensions","available","getItem","state","DataFetcher","selector","filters","typeFilter","acc","status","extensionStatusTypes","disabled","notActivated","data","filter","ivrMenu","map","phoneNumber","phoneType","phoneTypes","extension","phoneNumbers","_extensionFilter","extensionFilter"],"mappings":"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","sourcesContent":["import { filter, find, reduce } from 'ramda';\nimport { combineReducers } from 'redux';\n\nimport { extensionStatusTypes } from '../../enums/extensionStatusTypes';\nimport extensionTypes from '../../enums/extensionTypes';\nimport { phoneTypes } from '../../enums/phoneTypes';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport DataFetcher from '../../lib/DataFetcher';\nimport { getDataFetcherReducer } from '../../lib/DataFetcher/getDataFetcherReducer';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport fetchList from '../../lib/fetchList';\nimport { selector } from '../../lib/selector';\nimport { actionTypes } from './actionTypes';\nimport {\n  getDataReducer,\n  getExtensionTypeFiltersReducer,\n  getShowDisabledReducer,\n  getShowNotActivatedReducer,\n  getTimestampReducer,\n} from './getReducers';\n\nconst contactsRegExp = /.*\\/directory\\/contacts$/;\n\nconst DEFAULT_TTL = 24 * 60 * 60 * 1000;\nconst DEFAULT_SHOW_DISABLED = false;\nconst DEFAULT_SHOW_NOT_ACTIVATED = false;\nconst DEFAULT_ALLOW_SETTINGS = false;\n\n// Consider enable all extension types and filter through selector if\n// we'll allow users to configure this through settings\nconst DEFAULT_TYPE_FILTERS = [\n  extensionTypes.digitalUser,\n  extensionTypes.user,\n  extensionTypes.department,\n  // extensionTypes.limited,\n  // extensionTypes.announcement,\n  // extensionTypes.applicationExtension,\n  // extensionTypes.bot,\n  // extensionTypes.faxUser,\n  // extensionTypes.ivrMenu,\n  // extensionTypes.pagingOnly,\n  // extensionTypes.parkLocation,\n  // extensionTypes.sharedLinesGroup,\n];\n\n/**\n * @class\n * @description Accound extension list managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'ExtensionFeatures',\n    { dep: 'CompanyContactsOptions', optional: true },\n  ],\n})\nexport default class CompanyContacts extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Number} params.ttl - local cache timestamp, default 24 hours\n   */\n  constructor({\n    client,\n    extensionFeatures,\n    storage,\n    ttl = DEFAULT_TTL,\n    polling = true,\n    showDisabled = DEFAULT_SHOW_DISABLED,\n    extensionTypeFilters = DEFAULT_TYPE_FILTERS,\n    showNotActivated = DEFAULT_SHOW_NOT_ACTIVATED,\n    allowSettings = DEFAULT_ALLOW_SETTINGS,\n    ...options\n  }) {\n    super({\n      ...options,\n      client,\n      storage,\n      ttl,\n      polling,\n      getReducer: allowSettings\n        ? getDataFetcherReducer\n        : (types, reducers = {}) =>\n            getDataFetcherReducer(types, {\n              ...reducers,\n              showDisabled: getShowDisabledReducer(types, showDisabled),\n              showNotActivated: getShowNotActivatedReducer(\n                types,\n                showNotActivated,\n              ),\n              extensionTypeFilters: getExtensionTypeFiltersReducer(\n                types,\n                extensionTypeFilters,\n              ),\n            }),\n      getDataReducer,\n      getTimestampReducer,\n      subscriptionFilters: [subscriptionFilters.companyContacts],\n      subscriptionHandler: async (message) => {\n        if (\n          this.ready &&\n          message &&\n          contactsRegExp.test(message.event) &&\n          message.body &&\n          message.body.contacts\n        ) {\n          for (const contact of message.body.contacts) {\n            await this._processContact(contact);\n          }\n        }\n      },\n      fetchFunction: () =>\n        fetchList((params) =>\n          this._client.account().directory().contacts().list(params),\n        ),\n      readyCheckFn: () => this._extensionFeatures.ready,\n    });\n    this._allowSettings = allowSettings;\n\n    if (this._allowSettings) {\n      this._storage = ensureExist(storage, 'storage');\n      this._settingsStorageKey = 'CompanyContacts-settings';\n      this._storage.registerReducer({\n        key: this._settingsStorageKey,\n        reducer: combineReducers({\n          showDisabled: getShowDisabledReducer(this.actionTypes, showDisabled),\n          showNotActivated: getShowNotActivatedReducer(\n            this.actionTypes,\n            showNotActivated,\n          ),\n          extensionTypeFilters: getExtensionTypeFiltersReducer(\n            this.actionTypes,\n            extensionTypeFilters,\n          ),\n        }),\n      });\n    }\n    this._extensionFeatures = extensionFeatures;\n  }\n\n  get _name() {\n    return 'CompanyContacts';\n  }\n\n  get _actionTypes() {\n    return actionTypes;\n  }\n\n  async _processContact({ eventType, oldEtag, newEtag, ...contact }) {\n    switch (eventType) {\n      case 'Create':\n      case 'Update':\n        this.store.dispatch({\n          type: this.actionTypes.upsert,\n          contact,\n          timestamp: Date.now(),\n        });\n        break;\n      case 'Delete':\n        this.store.dispatch({\n          type: this.actionTypes.delete,\n          contact,\n          timestamp: Date.now(),\n        });\n        break;\n      default:\n      /* do nothing */\n    }\n  }\n\n  /**\n   * @deprecated consider using numberValidate module's isAvailableExtension\n   * TODO: Currently we don't have clearly defined business rule on\n   * what extension numbers are considered available for dialing.\n   * @param {String} extensionNumber\n   * @returns {Boolean}\n   */\n  isAvailableExtension(extensionNumber) {\n    return !!find(\n      (item) => item.extensionNumber === extensionNumber,\n      this.filteredContacts.concat(this.ivrContacts),\n    );\n  }\n\n  @selector\n  _extensionFilter = [\n    () => this.showDisabled,\n    () => this.showNotActivated,\n    () => this.extensionTypeFilters,\n    (showDisabled, showNotActivated, filters) => {\n      const typeFilter = reduce(\n        (acc, item) => {\n          acc[item] = true;\n          return acc;\n        },\n        {},\n        filters,\n      );\n      return filter(\n        (item) =>\n          !(\n            (!showDisabled && item.status === extensionStatusTypes.disabled) ||\n            (!showNotActivated &&\n              item.status === extensionStatusTypes.notActivated) ||\n            !typeFilter[item.type]\n          ),\n      );\n    },\n  ];\n\n  @selector\n  ivrContacts = [\n    () => this.data,\n    (data) =>\n      data\n        .filter((item) => item.type === extensionTypes.ivrMenu)\n        .map((item) => {\n          const phoneNumber = {\n            phoneType: phoneTypes.extension,\n            phoneNumber: item.extensionNumber,\n          };\n          let phoneNumbers = [];\n          if (!item.phoneNumbers) {\n            phoneNumbers = [phoneNumber];\n          } else {\n            phoneNumbers = item.phoneNumbers.concat([phoneNumber]);\n          }\n          return {\n            ...item,\n            phoneNumbers,\n          };\n        }),\n  ];\n\n  @selector\n  filteredContacts = [\n    () => this.data,\n    () => this._extensionFilter,\n    (data, extensionFilter) => extensionFilter(data),\n  ];\n\n  get _hasPermission() {\n    return this._extensionFeatures.features?.ReadExtensions?.available ?? false;\n  }\n\n  get allowSettings() {\n    return this._allowSettings;\n  }\n\n  get showDisabled() {\n    if (this.allowSettings) {\n      return this._storage.getItem(this._settingsStorageKey).showDisabled;\n    }\n    return this.state.showDisabled;\n  }\n\n  get showNotActivated() {\n    if (this.allowSettings) {\n      return this._storage.getItem(this._settingsStorageKey).showNotActivated;\n    }\n    return this.state.showNotActivated;\n  }\n\n  get extensionTypeFilters() {\n    if (this.allowSettings) {\n      return this._storage.getItem(this._settingsStorageKey)\n        .extensionTypeFilters;\n    }\n    return this.state.extensionTypeFilters;\n  }\n}\n"],"file":"index.js"}