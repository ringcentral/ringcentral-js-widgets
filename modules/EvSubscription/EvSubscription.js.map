{"version":3,"sources":["modules/EvSubscription/EvSubscription.ts"],"names":["EvSubscription","name","deps","dep","optional","eventEmitters","EventEmitter","event","value","emit","listener","_deps","evClient","getEventCallback","on","args","once","off","RcModuleV2"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAYMA,c,WAJL,gBAAO;AACNC,EAAAA,IAAI,EAAE,gBADA;AAENC,EAAAA,IAAI,EAAE,CAAC,UAAD,EAAa;AAAEC,IAAAA,GAAG,EAAE,uBAAP;AAAgCC,IAAAA,QAAQ,EAAE;AAA1C,GAAb;AAFA,CAAP,C;;;;;AAOC,0BAAYF,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA;AADI,KAAN;AADsB,UAFdG,aAEc,GAFE,IAAIC,oBAAJ,EAEF;AAAA;AAIvB;;;;yBAGCC,K,EACAC,K,EACA;AACA,WAAKH,aAAL,CAAmBI,IAAnB,CAAwBF,KAAxB,EAA+BC,KAA/B;AACD;;;8BAKCD,K,EAAUG,Q,EAA6B;AAAA;;AACvC,UAAI,CAAC,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,gBAApB,CAAqCN,KAArC,CAAL,EAAkD;AAChD,aAAKI,KAAL,CAAWC,QAAX,CAAoBE,EAApB,CAAuBP,KAAvB,EAA8B,YAAoB;AAAA;;AAAA,4CAAhBQ,IAAgB;AAAhBA,YAAAA,IAAgB;AAAA;;AAChD,kCAAA,MAAI,CAACV,aAAL,EAAmBI,IAAnB,8BAAwBF,KAAxB,SAAkCQ,IAAlC;AACD,SAFD;AAGD;;AACD,WAAKV,aAAL,CAAmBS,EAAnB,CAAsBP,KAAtB,EAA6BG,QAA7B;AACA,aAAO,IAAP;AACD;;;yBAGCH,K,EACAG,Q,EACA;AACA,WAAKL,aAAL,CAAmBW,IAAnB,CAAwBT,KAAxB,EAA+BG,QAA/B;AACD;;;wBAGCH,K,EACAG,Q,EACA;AACA,WAAKL,aAAL,CAAmBY,GAAnB,CAAuBV,KAAvB,EAA8BG,QAA9B;AACD;;;;EAzC0BQ,gB","sourcesContent":["import { EventEmitter } from 'events';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport { RcModuleV2 } from '@ringcentral-integration/core';\n\nimport {\n  EvClientCallBackValueType,\n  EvClientCallMapping,\n} from '../../lib/EvClient/interfaces';\nimport { Deps, Subscription } from './EvSubscription.interface';\n\n@Module({\n  name: 'EvSubscription',\n  deps: ['EvClient', { dep: 'EvSubscriptionOptions', optional: true }],\n})\nclass EvSubscription extends RcModuleV2<Deps> implements Subscription {\n  protected eventEmitters = new EventEmitter();\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  emit<T extends EvClientCallBackValueType, K extends EvClientCallMapping[T]>(\n    event: T,\n    value: K,\n  ) {\n    this.eventEmitters.emit(event, value);\n  }\n\n  subscribe<\n    T extends EvClientCallBackValueType,\n    K extends EvClientCallMapping[T],\n  >(event: T, listener: (data?: K) => any) {\n    if (!this._deps.evClient.getEventCallback(event)) {\n      this._deps.evClient.on(event, (...args: any[]) => {\n        this.eventEmitters.emit(event, ...args);\n      });\n    }\n    this.eventEmitters.on(event, listener);\n    return this;\n  }\n\n  once<T extends EvClientCallBackValueType, K extends EvClientCallMapping[T]>(\n    event: T,\n    listener: (data?: K) => any,\n  ) {\n    this.eventEmitters.once(event, listener);\n  }\n\n  off<T extends EvClientCallBackValueType, K extends EvClientCallMapping[T]>(\n    event: T,\n    listener: (data?: K) => any,\n  ) {\n    this.eventEmitters.off(event, listener);\n  }\n}\n\nexport { EvSubscription };\n"],"file":"EvSubscription.js"}