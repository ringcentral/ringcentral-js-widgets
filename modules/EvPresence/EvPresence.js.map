{"version":3,"sources":["modules/EvPresence/EvPresence.ts"],"names":["EvPresence","name","deps","dep","optional","that","callIds","callsMapping","otherCallIds","callLogsIds","call","analytics","recordingSetting","getRecordingSettings","agentRecording","callType","trackEvents","callInboundCallConnected","outboundCallConnected","voiceConnection","loginType","isOffhook","isOffhooking","_deps","evCallDataSource","rawCallsMapping","enableCache","storageKey","beforeunloadHandler","eventEmitter","evPresenceEvents","EventEmitter","showOffHookInitError","uii","currentCallUii","status","dialoutStatus","_checkBeforeunload","isManualOffhook","offhooking","addNewCall","session","addNewSession","dropSession","endedCall","removeEndedCall","res","setCallHoldStatus","clearCalls","_bindSubscription","record","pause","evSubscription","subscribe","EvCallbackTypes","OFFHOOK_INIT","data","emit","setOffhookInit","alert","danger","message","messageTypes","OFFHOOK_INIT_ERROR","setOffhookTerm","EARLY_UII","setCurrentCallUii","OFFHOOK_TERM","OFFHOOK_TERM_ERROR","console","error","ADD_SESSION","ADD_SESSION_ERROR","DROP_SESSION","DROP_SESSION_ERROR","HOLD","HOLD_ERROR","NEW_CALL","END_CALL","id","evClient","encodeUii","offhookTerm","beforeunload","add","remove","map","filter","dialoutStatuses","callConnected","RcModuleV2","storage","state","idle","action"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n} from '@ringcentral-integration/core';\n\nimport {\n  dialoutStatuses,\n  DialoutStatusesType,\n  messageTypes,\n} from '../../enums';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport {\n  EvAddSessionNotification,\n  EvAgentRecording,\n  EvBaseCall,\n  EvDropSessionNotification,\n  EvEarlyUiiResponse,\n  EvEndedCall,\n  EvHoldResponse,\n  EvOffhookInitResponse,\n  EvOffhookTermResponse,\n} from '../../lib/EvClient/interfaces';\nimport { trackEvents } from '../../lib/trackEvents';\nimport { Deps, Presence } from './EvPresence.interface';\n\n@Module({\n  name: 'EvPresence',\n  deps: [\n    'EvSubscription',\n    'EvCallDataSource',\n    'EvClient',\n    'Storage',\n    'Beforeunload',\n    'Alert',\n    { dep: 'PresenceOptions', optional: true },\n  ],\n})\nclass EvPresence extends RcModuleV2<Deps> implements Presence {\n  beforeunloadHandler = () => false;\n  eventEmitter = this._deps.evCallDataSource.eventEmitter;\n\n  evPresenceEvents = new EventEmitter();\n\n  showOffHookInitError = true;\n\n  get callIds() {\n    return this._deps.evCallDataSource.callIds;\n  }\n\n  get otherCallIds() {\n    return this._deps.evCallDataSource.otherCallIds;\n  }\n\n  get callLogsIds() {\n    return this._deps.evCallDataSource.callLogsIds;\n  }\n\n  get callsMapping() {\n    return this._deps.evCallDataSource.callsMapping;\n  }\n\n  get rawCallsMapping() {\n    return this._deps.evCallDataSource.rawCallsMapping;\n  }\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvPresence',\n    });\n  }\n\n  @storage\n  @state\n  currentCallUii = '';\n\n  @storage\n  @state\n  isOffhook = false;\n\n  @storage\n  @state\n  isManualOffhook = false;\n\n  @storage\n  @state\n  isOffhooking = false;\n\n  @storage\n  @state\n  dialoutStatus: DialoutStatusesType = dialoutStatuses.idle;\n\n  @action\n  setCurrentCallUii(uii: string) {\n    this.currentCallUii = uii;\n  }\n\n  @computed((that: EvPresence) => [that.callIds, that.callsMapping])\n  get calls() {\n    return this.callIds\n      .map((id) => this.callsMapping[id])\n      .filter((call) => !!call);\n  }\n\n  @computed((that: EvPresence) => [that.otherCallIds, that.callsMapping])\n  get otherCalls() {\n    return this.otherCallIds.map((id) => this.callsMapping[id]);\n  }\n\n  @computed((that: EvPresence) => [that.callLogsIds, that.callsMapping])\n  get callLogs() {\n    return this.callLogsIds.map((id) => this.callsMapping[id]);\n  }\n\n  @action\n  setDialoutStatus(status: DialoutStatusesType) {\n    if (this.dialoutStatus !== status) {\n      this.dialoutStatus = status;\n    }\n  }\n\n  @action\n  setOffhookInit() {\n    this.isOffhooking = false;\n    this.isOffhook = true;\n    this._checkBeforeunload();\n  }\n\n  @action\n  setOffhookTerm() {\n    this.isOffhooking = false;\n    this.isOffhook = false;\n    this.isManualOffhook = false;\n    this._checkBeforeunload();\n  }\n\n  @action\n  setIsManualOffhook(isManualOffhook: boolean) {\n    this.isManualOffhook = isManualOffhook;\n  }\n\n  @action\n  setOffhook(status: boolean) {\n    this.isOffhook = status;\n    this._checkBeforeunload();\n  }\n\n  @action\n  setOffhooking(offhooking: boolean) {\n    this.isOffhooking = offhooking;\n  }\n\n  @track((that: EvPresence, call: EvBaseCall) => (analytics) => {\n    const recordingSetting = that.getRecordingSettings(call.agentRecording);\n    return [\n      call.callType === 'INBOUND'\n        ? trackEvents.callInboundCallConnected\n        : trackEvents.outboundCallConnected,\n      {\n        recordingSetting,\n        voiceConnection: analytics.loginType,\n        isOffhook: that.isOffhook,\n        isOffhooking: that.isOffhooking,\n      },\n    ];\n  })\n  addNewCall(call: EvBaseCall) {\n    this._deps.evCallDataSource.addNewCall(call);\n  }\n\n  addNewSession(session: EvAddSessionNotification) {\n    this._deps.evCallDataSource.addNewSession(session);\n  }\n\n  dropSession(dropSession: EvDropSessionNotification) {\n    this._deps.evCallDataSource.dropSession(dropSession);\n  }\n\n  removeEndedCall(endedCall: EvEndedCall) {\n    this._deps.evCallDataSource.removeEndedCall(endedCall);\n  }\n\n  setCallHoldStatus(res: EvHoldResponse) {\n    this._deps.evCallDataSource.setCallHoldStatus(res);\n  }\n\n  clearCalls() {\n    this._deps.evCallDataSource.clearCalls();\n  }\n\n  onInitOnce() {\n    this._bindSubscription();\n  }\n\n  getRecordingSettings(record: EvAgentRecording) {\n    let recordingSetting = '';\n    if (record.agentRecording) {\n      if (record.default === 'ON') {\n        if (record.pause) {\n          recordingSetting = 'Yes - Record Call (Agent Pause)';\n        } else {\n          recordingSetting = 'Agent Triggered (Default: Record)';\n        }\n      } else {\n        recordingSetting = \"Agent Triggered (Default: Don't Record)\";\n      }\n    } else if (!record.agentRecording) {\n      if (record.default === 'ON') {\n        recordingSetting = 'Yes - Record Full Call';\n      } else {\n        recordingSetting = \"No - Don't Record Call\";\n      }\n    }\n    return recordingSetting;\n  }\n\n  private _bindSubscription() {\n    this._deps.evSubscription\n      .subscribe(\n        EvCallbackTypes.OFFHOOK_INIT,\n        (data: EvOffhookInitResponse) => {\n          this.evPresenceEvents.emit(EvCallbackTypes.OFFHOOK_INIT, data);\n          if (data.status === 'OK') {\n            this.setOffhookInit();\n          } else {\n            // when that is reject integrated softphone, we not alert error\n            if (this.showOffHookInitError) {\n              this._deps.alert.danger({\n                message: messageTypes.OFFHOOK_INIT_ERROR,\n              });\n            }\n            this.setOffhookTerm();\n            this.showOffHookInitError = true;\n          }\n        },\n      )\n      .subscribe(EvCallbackTypes.EARLY_UII, (data: EvEarlyUiiResponse) => {\n        if (data.status === 'OK') {\n          this.setCurrentCallUii(data.uii);\n        }\n      })\n      .subscribe(\n        EvCallbackTypes.OFFHOOK_TERM,\n        (data: EvOffhookTermResponse) => {\n          if (data.status === 'OK') {\n            this.setOffhookTerm();\n          } else {\n            this._deps.alert.danger({\n              message: messageTypes.OFFHOOK_TERM_ERROR,\n            });\n            console.error(data);\n          }\n        },\n      )\n      .subscribe(EvCallbackTypes.ADD_SESSION, (data) => {\n        if (data.status === 'OK') {\n          this.addNewSession(data);\n        } else {\n          this._deps.alert.danger({\n            message: messageTypes.ADD_SESSION_ERROR,\n          });\n        }\n      })\n      .subscribe(EvCallbackTypes.DROP_SESSION, (data) => {\n        if (data.status === 'OK') {\n          this.dropSession(data);\n        } else {\n          this._deps.alert.danger({\n            message: messageTypes.DROP_SESSION_ERROR,\n          });\n        }\n      })\n      .subscribe(EvCallbackTypes.HOLD, (data) => {\n        if (data.status === 'OK') {\n          this.setCallHoldStatus(data);\n        } else {\n          this._deps.alert.danger({\n            message: messageTypes.HOLD_ERROR,\n          });\n        }\n      })\n      .subscribe(EvCallbackTypes.NEW_CALL, (data) => {\n        this.addNewCall(data);\n      })\n      .subscribe(EvCallbackTypes.END_CALL, (data) => {\n        const id = this._deps.evClient.encodeUii(data);\n        if (!this.callsMapping[id]) return;\n        if (!this.isManualOffhook) {\n          this._deps.evClient.offhookTerm();\n        }\n        this.removeEndedCall(data);\n      });\n  }\n\n  private _checkBeforeunload() {\n    if (this.isOffhook) {\n      this._deps.beforeunload.add(this.beforeunloadHandler);\n    } else {\n      this._deps.beforeunload.remove(this.beforeunloadHandler);\n    }\n  }\n\n  get isCallConnected() {\n    return this.dialoutStatus === dialoutStatuses.callConnected;\n  }\n}\n\nexport { EvPresence };\n"],"file":"EvPresence.js"}