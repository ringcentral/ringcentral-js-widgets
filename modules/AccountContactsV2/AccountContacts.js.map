{"version":3,"sources":["modules/AccountContactsV2/AccountContacts.ts"],"names":["MaximumBatchGetPresence","DEFAULT_TTL","DEFAULT_PRESENCE_TTL","DEFAULT_AVATAR_TTL","DEFAULT_AVATAR_QUERY_INTERVAL","AccountContacts","name","deps","dep","optional","_deps","presences","profileImages","companyContacts","filteredContacts","accountContactsOptions","that","_getPresenceContexts","_enqueueTimeoutId","imageId","imageUrl","ttl","data","Object","keys","forEach","key","Date","now","timestamp","URL","revokeObjectURL","presenceMap","presence","ready","pending","contact","useCache","id","type","hasProfileImage","_avatarTtl","image","client","account","extension","profileImage","get","response","blob","createObjectURL","fetchImageSuccess","console","error","Promise","resolve","presenceId","_presenceTtl","push","clearTimeout","length","_processQueryPresences","setTimeout","contactId","contacts","find","x","searchFilter","isCDCEnabled","directoryContacts","cdc","all","searchString","extensionInfo","isMultipleSiteEnabled","site","entityType","phoneSources","options","siteCode","code","phoneNumber","ivrContacts","rcContact","findPhoneNumber","getPresenceContexts","map","_batchQueryPresences","responses","ctx","dndStatus","presenceStatus","telephonyStatus","userStatus","batchFetchPresenceSuccess","presenceSet","accountExtensionMap","acc","item","accountId","ids","resp","json","platform","service","url","batchResponses","batch","errorCode","warn","_data","avatarTtl","presenceTtl","avatarQueryInterval","appFeatures","result","extensionNumber","sourceName","firstName","lastName","emails","email","phoneNumbers","phoneType","phoneTypes","profileImageUrl","contactStatus","status","phone","usageType","hidden","cdcContact","number","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import { PresenceInfoResponse, ValidationError } from '@rc-ex/core/definitions';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n} from '@ringcentral-integration/core';\nimport { filter, forEach, join, keys, map, reduce } from 'ramda';\nimport { phoneSources } from '../../enums/phoneSources';\nimport { phoneTypes } from '../../enums/phoneTypes';\nimport { ContactSource, IContact } from '../../interfaces/Contact.model';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport {\n  getFilterContacts,\n  getFindPhoneNumber,\n  getMatchContactsByPhoneNumber,\n  getSearchForPhoneNumbers,\n} from '../../lib/contactHelper';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport {\n  convertUsageTypeToPhoneType,\n  isSupportedPhoneNumber,\n} from '../../lib/phoneTypeHelper';\nimport { proxify } from '../../lib/proxy/proxify';\nimport {\n  Contact,\n  Deps,\n  DirectoryContacts,\n  PresenceContexts,\n  PresenceMap,\n  Presences,\n  ProfileImages,\n} from './AccountContacts.interfaces';\n\nconst MaximumBatchGetPresence = 30;\nconst DEFAULT_TTL = 30 * 60 * 1000; // 30 mins\nconst DEFAULT_PRESENCE_TTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATAR_TTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATAR_QUERY_INTERVAL = 2 * 1000; // 2 seconds\n\n@Module({\n  name: 'AccountContacts',\n  deps: [\n    'Client',\n    'ExtensionInfo',\n    'AppFeatures',\n    { dep: 'CompanyContacts' },\n    { dep: 'AccountContactsOptions', optional: true },\n  ],\n})\nexport class AccountContacts extends RcModuleV2<Deps> implements ContactSource {\n  protected _getPresenceContexts?: PresenceContexts;\n\n  protected _enqueueTimeoutId: NodeJS.Timeout;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  @state\n  profileImages: ProfileImages = {};\n\n  @state\n  presences: Presences = {};\n\n  @action\n  fetchImageSuccess({\n    imageId,\n    imageUrl,\n    ttl,\n  }: {\n    imageId: string;\n    imageUrl: string;\n    ttl: number;\n  }) {\n    const data: ProfileImages = {};\n    // TODO: refactor without side effect.\n    Object.keys(this.profileImages).forEach((key) => {\n      if (Date.now() - this.profileImages[key].timestamp < ttl) {\n        data[key] = this.profileImages[key];\n      } else {\n        URL.revokeObjectURL(this.profileImages[key].imageUrl);\n      }\n    });\n    this.profileImages = data;\n    this.profileImages[imageId] = {\n      imageUrl,\n      timestamp: Date.now(),\n    };\n  }\n\n  @action\n  batchFetchPresenceSuccess({\n    presenceMap = {},\n    ttl,\n  }: {\n    presenceMap?: PresenceMap;\n    ttl: number;\n  }) {\n    const data: Presences = {};\n    // TODO: refactor without side effect.\n    Object.keys(this.presences).forEach((key) => {\n      if (Date.now() - this.presences[key].timestamp < ttl) {\n        data[key] = this.presences[key];\n      }\n    });\n    this.presences = data;\n    Object.keys(presenceMap).forEach((key) => {\n      this.presences[key] = {\n        presence: presenceMap[key],\n        timestamp: Date.now(),\n      };\n    });\n  }\n\n  @action\n  onReset() {\n    // TODO: refactor without side effect.\n    Object.keys(this.profileImages).forEach((key) => {\n      URL.revokeObjectURL(this.profileImages[key].imageUrl);\n    });\n    this.profileImages = {};\n    this.presences = {};\n  }\n\n  get _ttl() {\n    return this._deps.accountContactsOptions?.ttl ?? DEFAULT_TTL;\n  }\n\n  get _avatarTtl() {\n    return this._deps.accountContactsOptions?.avatarTtl ?? DEFAULT_AVATAR_TTL;\n  }\n\n  get _presenceTtl() {\n    return (\n      this._deps.accountContactsOptions?.presenceTtl ?? DEFAULT_PRESENCE_TTL\n    );\n  }\n\n  get _avatarQueryInterval() {\n    return (\n      this._deps.accountContactsOptions?.avatarQueryInterval ??\n      DEFAULT_AVATAR_QUERY_INTERVAL\n    );\n  }\n\n  get isCDCEnabled() {\n    // TODO: default to true when cdc feature is ready for production.\n    return this._deps.appFeatures?.isCDCEnabled;\n  }\n\n  _shouldInit() {\n    return this._deps.companyContacts.ready && this.pending;\n  }\n\n  _shouldReset() {\n    return !this._deps.companyContacts.ready && this.ready;\n  }\n\n  // interface of ContactSource\n  @proxify\n  async getProfileImage(contact: Contact, useCache = true) {\n    if (\n      !contact ||\n      !contact.id ||\n      contact.type !== 'company' ||\n      !contact.hasProfileImage\n    ) {\n      return null;\n    }\n\n    const imageId = contact.id;\n    if (\n      useCache &&\n      this.profileImages[imageId] &&\n      Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl\n    ) {\n      const image = this.profileImages[imageId].imageUrl;\n      return image;\n    }\n    let imageUrl = null;\n    try {\n      const response = await this._deps.client\n        .account(contact.account.id)\n        .extension(contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response.blob());\n      this.fetchImageSuccess({\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    return imageUrl;\n  }\n\n  // interface of ContactSource\n  @proxify\n  getPresence(contact: Contact, useCache = true) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const presenceId = `${contact.id}`;\n      if (\n        useCache &&\n        this.presences[presenceId] &&\n        Date.now() - this.presences[presenceId].timestamp < this._presenceTtl\n      ) {\n        const { presence } = this.presences[presenceId];\n        resolve(presence);\n        return;\n      }\n\n      if (!this._getPresenceContexts) {\n        this._getPresenceContexts = [];\n      }\n      this._getPresenceContexts.push({\n        contact,\n        resolve,\n      });\n\n      clearTimeout(this._enqueueTimeoutId);\n      if (this._getPresenceContexts.length === MaximumBatchGetPresence) {\n        this._processQueryPresences(this._getPresenceContexts);\n        this._getPresenceContexts = null;\n      } else {\n        this._enqueueTimeoutId = setTimeout(() => {\n          this._processQueryPresences(this._getPresenceContexts);\n          this._getPresenceContexts = null;\n        }, 1000);\n      }\n    });\n  }\n\n  // interface of ContactSource\n  findContact(contactId: string) {\n    return this.contacts.find((x) => x.id === contactId);\n  }\n\n  // interface of ContactSource\n  filterContacts(searchFilter: string) {\n    return getFilterContacts(\n      this.isCDCEnabled\n        ? this.directoryContacts.cdc\n        : this.directoryContacts.all,\n      searchFilter,\n    );\n  }\n\n  // interface of ContactSource\n  searchForPhoneNumbers(searchString: string) {\n    const { isMultipleSiteEnabled, site } = this._deps.extensionInfo;\n    return getSearchForPhoneNumbers({\n      contacts: this.isCDCEnabled\n        ? this.directoryContacts.cdc\n        : this.directoryContacts.all,\n      searchString,\n      entityType: phoneSources.contact,\n      options: { isMultipleSiteEnabled, siteCode: site?.code },\n    });\n  }\n\n  // interface of ContactSource\n  matchContactsByPhoneNumber(phoneNumber: string) {\n    const { isMultipleSiteEnabled, site } = this._deps.extensionInfo;\n    return getMatchContactsByPhoneNumber({\n      contacts: [\n        ...this.contacts,\n        ...this._deps.companyContacts.ivrContacts,\n      ] as IContact[],\n      phoneNumber,\n      entityType: phoneSources.rcContact,\n      findPhoneNumber: getFindPhoneNumber({\n        phoneNumber,\n        options: {\n          isMultipleSiteEnabled,\n          siteCode: site?.code,\n        },\n      }),\n    });\n  }\n\n  async _processQueryPresences(getPresenceContexts: PresenceContexts) {\n    const contacts = getPresenceContexts.map<Contact>((x) => x.contact);\n    const responses = await this._batchQueryPresences(contacts);\n    const presenceMap: PresenceMap = {};\n    getPresenceContexts.forEach((ctx) => {\n      const response = responses[ctx.contact.id];\n      if (!response) {\n        ctx.resolve(null);\n        return;\n      }\n      const {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      } = response;\n      const presenceId = ctx.contact.id;\n      presenceMap[presenceId] = {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      };\n      ctx.resolve(presenceMap[presenceId]);\n    });\n    this.batchFetchPresenceSuccess({\n      presenceMap,\n      ttl: this._presenceTtl,\n    });\n  }\n\n  async _batchQueryPresences(contacts: Contact[]) {\n    const presenceSet: Record<string, PresenceInfoResponse> = {};\n    try {\n      const accountExtensionMap = reduce(\n        (acc: Record<string, string[]>, item) => {\n          if (!acc[item.account.id]) {\n            acc[item.account.id] = [];\n          }\n          acc[item.account.id].push(item.id);\n          return acc;\n        },\n        {},\n        contacts,\n      );\n      const batchResponses = await Promise.all<\n        (PresenceInfoResponse | ValidationError)[]\n      >(\n        map(async (accountId) => {\n          if (accountExtensionMap[accountId].length > 1) {\n            const ids = join(',', accountExtensionMap[accountId]);\n            // extract json data now so the data appears in the same format\n            // as single requests\n            return Promise.all(\n              map(\n                async (resp) => resp.json(),\n                await batchGetApi({\n                  platform: this._deps.client.service.platform(),\n                  url: `/restapi/v1.0/account/${accountId}/extension/${ids}/presence`,\n                }),\n              ),\n            );\n          }\n          // wrap single request response data in array to keep the same\n          // format as batch requests\n          return [\n            await this._deps.client\n              .account(accountId)\n              .extension(accountExtensionMap[accountId][0])\n              .presence()\n              .get(),\n          ];\n        }, keys(accountExtensionMap)),\n      );\n      // treat all data as batch since the data is normalized\n      forEach(\n        (batch) =>\n          forEach((data) => {\n            if ((data as ValidationError).errorCode) {\n              console.warn(data);\n              return;\n            }\n            const _data: PresenceInfoResponse = data;\n            const { id } = _data.extension;\n            presenceSet[id] = _data;\n          }, batch),\n        batchResponses,\n      );\n    } catch (e) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  // interface of ContactSource\n  get sourceName() {\n    return 'company';\n  }\n\n  // interface of ContactSource\n  @computed(({ _deps, presences, profileImages }: AccountContacts) => [\n    _deps.companyContacts.filteredContacts,\n    profileImages,\n    presences,\n    _deps.accountContactsOptions,\n  ])\n  get directoryContacts(): DirectoryContacts {\n    return reduce(\n      (result, item) => {\n        if (!isBlank(item.extensionNumber)) {\n          const id = `${item.id}`;\n          const contact: Contact = {\n            ...item,\n            type: this.sourceName,\n            id,\n            name: item.name\n              ? item.name\n              : `${item.firstName || ''} ${item.lastName || ''}`,\n            emails: [item.email],\n            extensionNumber: item.extensionNumber,\n            hasProfileImage: !!item.profileImage,\n            phoneNumbers: [\n              {\n                phoneNumber: item.extensionNumber,\n                phoneType: phoneTypes.extension,\n              },\n            ],\n            profileImageUrl:\n              this.profileImages[id] && this.profileImages[id].imageUrl,\n            presence: this.presences[id] && this.presences[id].presence,\n            contactStatus: item.status,\n          };\n\n          if (item.phoneNumbers && item.phoneNumbers.length > 0) {\n            item.phoneNumbers.forEach((phone) => {\n              isSupportedPhoneNumber(phone) &&\n                contact.phoneNumbers.push({\n                  ...phone,\n                  phoneType: convertUsageTypeToPhoneType(phone?.usageType),\n                });\n            });\n          }\n          result.all.push(contact);\n          if (!contact.hidden) {\n            const cdcContact = {\n              ...contact,\n              phoneNumbers: filter(\n                (number) => !number.hidden,\n                contact.phoneNumbers ?? [],\n              ),\n            };\n            result.cdc.push(cdcContact);\n          }\n        }\n        return result;\n      },\n      {\n        all: [],\n        cdc: [],\n      } as DirectoryContacts,\n      this._deps.companyContacts.filteredContacts,\n    );\n  }\n\n  // interface of ContactSource\n  get contacts() {\n    return this.directoryContacts.all;\n  }\n\n  // interface of ContactSource\n  @computed((that: AccountContacts) => [\n    that._deps.companyContacts.filteredContacts,\n  ])\n  get rawContacts() {\n    return this._deps.companyContacts.filteredContacts;\n  }\n\n  // interface of ContactSource\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"file":"AccountContacts.js"}