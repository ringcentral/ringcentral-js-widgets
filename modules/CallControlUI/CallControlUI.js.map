{"version":3,"sources":["modules/CallControlUI/CallControlUI.ts"],"names":["CallControlUI","name","deps","dep","optional","getInitialLayout","conferenceCallEquipped","isOnConference","lastCallInfo","session","_deps","conferenceCall","webphone","layout","callCtrlLayouts","normalCtrl","warmTransferSessionId","completeTransferCtrl","conferenceCtrl","isInboundCall","direction","callDirections","inbound","fromSessionId","mergingPair","fromSession","x","id","sessions","activeSessionId","activeSession","callStatus","sessionStatus","onHold","mergeCtrl","params","showCallQueueName","showPark","children","brand","callingSettings","connectivityManager","contactMatcher","contactSearch","forwardingNumber","regionSettings","locale","sessionId","currentSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","outbound","isWebRTC","callingMode","callingModes","hasPermission","conferenceData","conferences","undefined","isConferenceSession","isMerging","conferenceCallId","conference","isConferenceCallOverload","isOverload","hasConferenceCall","conferenceCallParties","partyProfiles","hideChildren","status","finished","warmTransferSession","find","disableLinks","isOfflineMode","isVoipOnlyMode","phoneNumber","appFeatures","isCDCEnabled","fullName","currentLocale","areaCode","countryCode","showBackButton","searchContactList","sortedResult","showSpinner","disableFlip","flipNumbers","length","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","phoneSourceNameRenderer","extensionInfo","callMonitor","routerInteraction","formatPhone","siteCode","site","code","isMultipleSiteEnabled","onHangup","hangup","mergeControlClickHangupTrack","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","updateSessionMatchedContact","onFlip","push","onTransfer","onCompleteTransfer","completeWarmTransfer","onPark","park","searchContact","searchString","debouncedSearch","onAdd","callControlClickAddTrack","validateCallRecording","fromNumber","otherCalls","call","webphoneSession","allCalls","setMergeParty","onBeforeMerge","Object","values","conferenceSession","onMerge","parseMergingSessions","mergeSessions","gotoParticipantsCtrl","callControlClickParticipantAreaTrack","loadConference","conferenceId","closeMergingPair","afterHideMergeConfirm","confirmMergeClickCloseTrack","afterConfirmMerge","confirmMergeClickMergeTrack","afterOnMerge","callControlClickMergeTrack","RcUIModuleV2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAMA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwBaA,a,WAnBZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,eADA;AAENC,EAAAA,IAAI,EAAE,CACJ,UADI,EAEJ,QAFI,EAGJ,gBAHI,EAIJ,gBAJI,EAKJ,OALI,EAMJ,eANI,EAOJ,iBAPI,EAQJ,qBARI,EASJ,kBATI,EAUJ,aAVI,EAWJ,eAXI,EAYJ,aAZI,EAaJ;AAAEC,IAAAA,GAAG,EAAE,gBAAP;AAAyBC,IAAAA,QAAQ,EAAE;AAAnC,GAbI,EAcJ;AAAED,IAAAA,GAAG,EAAE,mBAAP;AAA4BC,IAAAA,QAAQ,EAAE;AAAtC,GAdI;AAFA,CAAP,C;;;;;AAoBC,yBAAYF,IAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA;AADI,KAAN;;AADsB,UA+HxBG,gBA/HwB,GA+HL,gBAUb;AAAA,UATJC,sBASI,QATJA,sBASI;AAAA,UARJC,cAQI,QARJA,cAQI;AAAA,UAPJC,YAOI,QAPJA,YAOI;AAAA,UANJC,OAMI,QANJA,OAMI;AAAA,wBACiC,MAAKC,KADtC;AAAA,UACIC,cADJ,eACIA,cADJ;AAAA,UACoBC,QADpB,eACoBA,QADpB;AAEJ,UAAIC,MAAM,GAAGC,4BAAgBC,UAA7B;;AACA,UAAIN,OAAO,CAACO,qBAAZ,EAAmC;AACjC,eAAOF,4BAAgBG,oBAAvB;AACD;;AACD,UAAI,CAACX,sBAAL,EAA6B;AAC3B,eAAOO,MAAP;AACD;;AAED,UAAIN,cAAJ,EAAoB;AAClB,eAAOO,4BAAgBI,cAAvB;AACD;;AACD,UAAMC,aAAa,GAAGV,OAAO,CAACW,SAAR,KAAsBC,2BAAeC,OAA3D;AAbI,UAeIC,aAfJ,GAesBZ,cAAc,CAACa,WAfrC,CAeID,aAfJ;AAgBJ,UAAME,WAAW,GAAG,iBAClB,UAACC,CAAD;AAAA,eAAYA,CAAC,CAACC,EAAF,KAASJ,aAArB;AAAA,OADkB,EAElBX,QAAQ,CAACgB,QAFS,CAApB;AAKA,UAAMC,eAAe,GACnBjB,QAAQ,IAAIA,QAAQ,CAACkB,aAArB,IAAsClB,QAAQ,CAACkB,aAAT,CAAuBH,EAD/D;;AAGA,UACE,CAACpB,cAAD,IACA,CAACY,aADD,IAEAM,WAFA,IAGAF,aAAa,KAAKd,OAAO,CAACkB,EAH1B,IAIAnB,YAJA,KAKCC,OAAO,CAACsB,UAAR,KAAuBC,6BAAcC,MAArC,IACExB,OAAO,CAACsB,UAAR,KAAuBC,6BAAcC,MAArC,IACCxB,OAAO,CAACkB,EAAR,KAAeE,eAPnB,CADF,EASE;AACA;AACAhB,QAAAA,MAAM,GAAGC,4BAAgBoB,SAAzB;AACD;;AAED,aAAOrB,MAAP;AACD,KAhLuB;;AAAA;AAIvB;;;;sCAO6B;AAAA;;AAAA,UAJ5BsB,MAI4B,SAJ5BA,MAI4B;AAAA,wCAH5BC,iBAG4B;AAAA,UAH5BA,iBAG4B,sCAHR,KAGQ;AAAA,iCAF5BC,QAE4B;AAAA,UAF5BA,QAE4B,+BAFjB,KAEiB;AAAA,UAD5BC,QAC4B,SAD5BA,QAC4B;AAAA,yBAYxB,KAAK5B,KAZmB;AAAA,UAE1B6B,KAF0B,gBAE1BA,KAF0B;AAAA,UAG1BC,eAH0B,gBAG1BA,eAH0B;AAAA,UAI1B7B,cAJ0B,gBAI1BA,cAJ0B;AAAA,UAK1B8B,mBAL0B,gBAK1BA,mBAL0B;AAAA,UAM1BC,cAN0B,gBAM1BA,cAN0B;AAAA,UAO1BC,aAP0B,gBAO1BA,aAP0B;AAAA,UAQ1BC,gBAR0B,gBAQ1BA,gBAR0B;AAAA,UAS1BC,cAT0B,gBAS1BA,cAT0B;AAAA,UAU1BC,MAV0B,gBAU1BA,MAV0B;AAAA,UAW1BlC,QAX0B,gBAW1BA,QAX0B;AAc5B,UAAMmC,SAAS,GAAGZ,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEY,SAA1B;AAEA,UAAMC,cAAc,GAClB,CAACD,SAAS,GACN,iBAAK,UAACtC,OAAD;AAAA,eAAaA,OAAO,CAACkB,EAAR,KAAeoB,SAA5B;AAAA,OAAL,EAA4CnC,QAAQ,CAACgB,QAArD,CADM,GAENhB,QAAQ,CAACkB,aAFb,KAEgC,EAHlC;AAIA,UAAMmB,cAAc,GAAGP,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAEQ,WAAvC;AACA,UAAMC,WAAW,4BAAGF,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAGD,cAAc,CAACI,IAAlB,CAAjB,yEAA4C,EAA7D;AACA,UAAMC,SAAS,6BAAGJ,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAGD,cAAc,CAACM,EAAlB,CAAjB,2EAA0C,EAAzD;AACA,UAAMC,WAAW,GACfP,cAAc,CAAC5B,SAAf,KAA6BC,2BAAemC,QAA5C,GACIH,SADJ,GAEIF,WAHN;AAKA,UAAMM,QAAQ,GAAGjB,eAAe,CAACkB,WAAhB,KAAgCC,yBAAa/C,QAA9D;AACA,UAAMO,aAAa,GAAG6B,cAAc,CAAC5B,SAAf,KAA6BC,2BAAeC,OAAlE;AAEA,UAAId,YAAY,GAAGG,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAEH,YAAnC;AAEA,UAAMF,sBAAsB,4BAAGK,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAEiD,aAAnB,yEAAoC,KAAhE;AACA,UAAMC,cAAc,GAAGvD,sBAAsB,GACzC,mBAAOK,cAAc,CAACmD,WAAtB,EAAmC,CAAnC,CADyC,GAEzCC,SAFJ;AAGA,UAAMxD,cAAc,GAAGD,sBAAsB,GACzCK,cAAc,CAACqD,mBAAf,CAAmChB,cAAc,CAACrB,EAAlD,CADyC,GAEzC,KAFJ;AAGA,UAAMsC,SAAS,GAAG3D,sBAAsB,IAAIK,cAAc,CAACsD,SAA3D;AACA,UAAMC,gBAAgB,GACpBL,cAAc,IAAIJ,QAAlB,GAA6BI,cAAc,CAACM,UAAf,CAA0BxC,EAAvD,GAA4D,IAD9D;AAEA,UAAMyC,wBAAwB,GAC5BP,cAAc,IAAIJ,QAAlB,GACI9C,cAAc,CAAC0D,UAAf,CAA0BH,gBAA1B,CADJ,GAEI,KAHN;AAKA,UAAMI,iBAAiB,GAAG,CAAC,CAACT,cAA5B;AACA,UAAMU,qBAAqB,GAAGjE,sBAAsB,GAChDK,cAAc,CAAC6D,aADiC,GAEhDT,SAFJ,CAjD4B,CAqD5B;;AACA,UAAMxC,aAAa,GAAGjB,sBAAsB,4BACxCK,cAAc,CAACa,WADyB,0DACxC,sBAA4BD,aADY,GAExCwC,SAFJ;AAGA,UAAMU,YAAY,GAChBnE,sBAAsB,IACtB,CAACa,aADD,IAEAI,aAFA,IAGAA,aAAa,KAAKyB,cAAc,CAACrB,EAJnC;AAKAnB,MAAAA,YAAY,IAAIA,YAAY,CAACkE,MAAb,KAAwB1C,6BAAc2C,QAAtD;;AAEA,UAAI3B,cAAc,CAAChC,qBAAnB,EAA0C;AACxC,YAAM4D,mBAAmB,GAAGhE,QAAQ,CAACgB,QAAT,CAAkBiD,IAAlB,CAC1B,UAACpE,OAAD;AAAA,iBAAaA,OAAO,CAACkB,EAAR,KAAeqB,cAAc,CAAChC,qBAA3C;AAAA,SAD0B,CAA5B;AAGAR,QAAAA,YAAY,GAAG,uDAAmCoE,mBAAnC,CAAf;AACD;;AAED,UAAME,YAAY,GAAG,CAAC,EACpBrC,mBAAmB,CAACsC,aAApB,IAAqCtC,mBAAmB,CAACuC,cADrC,CAAtB;AAIA,UAAIC,WAAW,GACbjC,cAAc,CAAC5B,SAAf,KAA6BC,2BAAemC,QAA5C,GACIR,cAAc,CAACM,EADnB,GAEIN,cAAc,CAACI,IAHrB;;AAKA,UACE,KAAK1C,KAAL,CAAWwE,WAAX,CAAuBC,YAAvB,IACA,4DAA2BF,WAA3B,EAAwC1B,WAAxC,CAFF,EAGE;AACA0B,QAAAA,WAAW,GAAG,IAAd;AACD;;AAED,aAAO;AACL1C,QAAAA,KAAK,EAAEA,KAAK,CAAC6C,QADR;AAEL7B,QAAAA,WAAW,EAAXA,WAFK;AAGL0B,QAAAA,WAAW,EAAXA,WAHK;AAILI,QAAAA,aAAa,EAAEvC,MAAM,CAACuC,aAJjB;AAKL5E,QAAAA,OAAO,EAAEuC,cALJ;AAMLsC,QAAAA,QAAQ,EAAEzC,cAAc,CAACyC,QANpB;AAOLC,QAAAA,WAAW,EAAE1C,cAAc,CAAC0C,WAPvB;AAQLC,QAAAA,cAAc,EAAE,IARX;AAQiB;AACtBC,QAAAA,iBAAiB,EAAE9C,aAAa,CAAC+C,YAT5B;AAULC,QAAAA,WAAW,EAAE1B,SAVR;AAWL3D,QAAAA,sBAAsB,EAAtBA,sBAXK;AAYLgE,QAAAA,iBAAiB,EAAjBA,iBAZK;AAaLC,QAAAA,qBAAqB,EAArBA,qBAbK;AAcLL,QAAAA,gBAAgB,EAAhBA,gBAdK;AAeL1D,QAAAA,YAAY,EAAZA,YAfK;AAgBL;AACA;AACA8B,QAAAA,QAAQ,EAAEmC,YAAY,GAAG,IAAH,GAAUnC,QAlB3B;AAmBL/B,QAAAA,cAAc,EAAdA,cAnBK;AAoBLkD,QAAAA,QAAQ,EAARA,QApBK;AAqBLqB,QAAAA,YAAY,EAAZA,YArBK;AAsBLV,QAAAA,wBAAwB,EAAxBA,wBAtBK;AAuBLwB,QAAAA,WAAW,EAAEhD,gBAAgB,CAACiD,WAAjB,CAA6BC,MAA7B,KAAwC,CAvBhD;AAwBL1D,QAAAA,iBAAiB,EAAjBA,iBAxBK;AAyBLC,QAAAA,QAAQ,EAARA;AAzBK,OAAP;AA2BD;;;0CA0D6B;AAAA,UAJ5B0D,YAI4B,SAJ5BA,YAI4B;AAAA,UAH5BC,iBAG4B,SAH5BA,iBAG4B;AAAA,UAF5BC,iBAE4B,SAF5BA,iBAE4B;AAAA,UAD5BC,uBAC4B,SAD5BA,uBAC4B;AAAA,yBAUxB,KAAKxF,KAVmB;AAAA,UAE1BC,cAF0B,gBAE1BA,cAF0B;AAAA,UAG1BC,QAH0B,gBAG1BA,QAH0B;AAAA,UAI1BiC,cAJ0B,gBAI1BA,cAJ0B;AAAA,UAK1BsD,aAL0B,gBAK1BA,aAL0B;AAAA,UAM1B3D,eAN0B,gBAM1BA,eAN0B;AAAA,UAO1B4D,WAP0B,gBAO1BA,WAP0B;AAAA,UAQ1BC,iBAR0B,gBAQ1BA,iBAR0B;AAAA,UAS1B1D,aAT0B,gBAS1BA,aAT0B;AAW5B,aAAO;AACLtC,QAAAA,gBAAgB,EAAE,KAAKA,gBADlB;AAELiG,QAAAA,WAAW,EAAE,qBAACrB,WAAD;AAAA;;AAAA,iBACX,gCAAa;AACXA,YAAAA,WAAW,EAAXA,WADW;AAEXK,YAAAA,QAAQ,EAAEzC,cAAc,CAACyC,QAFd;AAGXC,YAAAA,WAAW,EAAE1C,cAAc,CAAC0C,WAHjB;AAIXgB,YAAAA,QAAQ,2BAAEJ,aAAF,aAAEA,aAAF,8CAAEA,aAAa,CAAEK,IAAjB,wDAAE,oBAAqBC,IAAvB,yEAA+B,EAJ5B;AAKXC,YAAAA,qBAAqB,EAAEP,aAAa,CAACO;AAL1B,WAAb,CADW;AAAA,SAFR;AAULC,QAAAA,QAAQ,EAAE,kBACR5D,SADQ,EAERlC,MAFQ,EAGL;AACHD,UAAAA,QAAQ,CAACgG,MAAT,CAAgB7D,SAAhB;;AACA,cAAIlC,MAAM,IAAIA,MAAM,KAAKC,4BAAgBoB,SAAzC,EAAoD;AAClDkE,YAAAA,WAAW,CAACS,4BAAZ;AACD;AACF,SAlBI;AAmBLC,QAAAA,MAAM,EAAE,gBAAC/D,SAAD;AAAA,iBAAuBnC,QAAQ,CAACmG,IAAT,CAAchE,SAAd,CAAvB;AAAA,SAnBH;AAoBLiE,QAAAA,QAAQ,EAAE,kBAACjE,SAAD;AAAA,iBAAuBnC,QAAQ,CAACqG,MAAT,CAAgBlE,SAAhB,CAAvB;AAAA,SApBL;AAqBLd,QAAAA,MAAM,EAAE,gBAACc,SAAD;AAAA,iBAAuBnC,QAAQ,CAACsG,IAAT,CAAcnE,SAAd,CAAvB;AAAA,SArBH;AAsBLoE,QAAAA,QAAQ,EAAE,kBAACpE,SAAD,EAAuB;AAC/BnC,UAAAA,QAAQ,CAACwG,MAAT,CAAgBrE,SAAhB;AACD,SAxBI;AAyBLsE,QAAAA,QAAQ,EAAE,kBAACtE,SAAD;AAAA,iBAAuBnC,QAAQ,CAAC0G,WAAT,CAAqBvE,SAArB,CAAvB;AAAA,SAzBL;AA0BLwE,QAAAA,YAAY,EAAE,sBAACxE,SAAD;AAAA,iBAAuBnC,QAAQ,CAAC4G,UAAT,CAAoBzE,SAApB,CAAvB;AAAA,SA1BT;AA2BL0E,QAAAA,QAAQ,EAAE;AAAA,iBACR7G,QAAQ,CAAC6G,QAAT,OAAA7G,QAAQ,YADA;AAAA,SA3BL;AA6BL8G,QAAAA,2BAA2B,EAAE;AAAA,iBAExB9G,QAAQ,CAAC8G,2BAAT,OAAA9G,QAAQ,YAFgB;AAAA,SA7BxB;AAgCLmF,QAAAA,YAAY,EAAZA,YAhCK;AAiCLC,QAAAA,iBAAiB,EAAjBA,iBAjCK;AAkCL2B,QAAAA,MAAM,EAAE,gBAAC5E,SAAD,EAAuB;AAC7BsD,UAAAA,iBAAiB,CAACuB,IAAlB,iBAAgC7E,SAAhC;AACD,SApCI;AAqCL8E,QAAAA,UAAU,EAAE,oBAAC9E,SAAD,EAAuB;AACjCsD,UAAAA,iBAAiB,CAACuB,IAAlB,qBAAoC7E,SAApC;AACD,SAvCI;AAwCL+E,QAAAA,kBAAkB,EAAE,4BAAC/E,SAAD,EAAuB;AACzCnC,UAAAA,QAAQ,CAACmH,oBAAT,CAA8BhF,SAA9B;AACD,SA1CI;AA2CLiF,QAAAA,MAAM,EAAE,gBAACjF,SAAD;AAAA,iBAAuBnC,QAAQ,CAACqH,IAAT,CAAclF,SAAd,CAAvB;AAAA,SA3CH;AA4CLmF,QAAAA,aAAa,EAAE,uBAACC,YAAD;AAAA,iBACbxF,aAAa,CAACyF,eAAd,CAA8B;AAAED,YAAAA,YAAY,EAAZA;AAAF,WAA9B,CADa;AAAA,SA5CV;AA8CLlC,QAAAA,iBAAiB,EAAjBA,iBA9CK;AA+CLC,QAAAA,uBAAuB,EAAvBA,uBA/CK;AAgDLmC,QAAAA,KAAK,EAAE,eAACtF,SAAD,EAAuB;AAC5B;AACAqD,UAAAA,WAAW,CAACkC,wBAAZ;AACA,cAAM7H,OAAO,GAAG,iBAAK,UAACiB,CAAD;AAAA,mBAAYA,CAAC,CAACC,EAAF,KAASoB,SAArB;AAAA,WAAL,EAAqCnC,QAAQ,CAACgB,QAA9C,CAAhB;;AACA,cAAI,CAACnB,OAAD,IAAY,CAACE,cAAc,CAAC4H,qBAAf,CAAqC9H,OAArC,CAAjB,EAAgE;AAC9D;AACD;;AACD,cAAI+H,UAAU,GAAGhG,eAAe,CAACgG,UAAjC;;AACA,cAAI/H,OAAO,CAACW,SAAR,KAAsBC,2BAAemC,QAAzC,EAAmD;AACjDgF,YAAAA,UAAU,GAAG/H,OAAO,CAAC+H,UAArB,CADiD,CAChB;AAClC;;AACD,cAAMC,UAAU,GAAG,mBACjB,UAACC,IAAD;AAAA,mBACEA,IAAI,CAACC,eAAL,IAAwBD,IAAI,CAACC,eAAL,CAAqBhH,EAArB,KAA4BlB,OAAO,CAACkB,EAD9D;AAAA,WADiB,EAGjByE,WAAW,CAACwC,QAHK,CAAnB;;AAKA,cAAIH,UAAU,CAAC3C,MAAf,EAAuB;AACrB;AACAO,YAAAA,iBAAiB,CAACuB,IAAlB,uCACiCY,UADjC,cAC+C/H,OAAO,CAACkB,EADvD;AAGD,WALD,MAKO;AACL,gBAAIhB,cAAJ,EAAoB;AAClBA,cAAAA,cAAc,CAACkI,aAAf,CAA6B;AAAEtH,gBAAAA,aAAa,EAAEwB;AAAjB,eAA7B;AACD,aAHI,CAIL;;;AACAsD,YAAAA,iBAAiB,CAACuB,IAAlB,kCAC4BY,UAD5B,cAC0CzF,SAD1C;AAGD;AACF,SA9EI;AA+EL+F,QAAAA,aAAa,EAAE,uBAAC/F,SAAD,EAAuB;AACpC,cAAMtC,OAAO,GAAG,iBAAK,UAACiB,CAAD;AAAA,mBAAYA,CAAC,CAACC,EAAF,KAASoB,SAArB;AAAA,WAAL,EAAqCnC,QAAQ,CAACgB,QAA9C,CAAhB;;AACA,cAAI,CAACnB,OAAD,IAAY,CAACE,cAAc,CAAC4H,qBAAf,CAAqC9H,OAArC,CAAjB,EAAgE;AAC9D,mBAAO,KAAP;AACD;;AACD,cAAIE,cAAJ,EAAoB;AAClB,gBAAMkD,cAAc,GAAGkF,MAAM,CAACC,MAAP,CAAcrI,cAAc,CAACmD,WAA7B,EAA0C,CAA1C,CAAvB;;AACA,gBAAID,cAAJ,EAAoB;AAClB,kBAAMoF,iBAAiB,GAAG,iBACxB,UAACvH,CAAD;AAAA,uBAAYA,CAAC,CAACC,EAAF,KAASkC,cAAc,CAACd,SAApC;AAAA,eADwB,EAExBnC,QAAQ,CAACgB,QAFe,CAA1B;;AAIA,kBACEqH,iBAAiB,IACjB,CAACtI,cAAc,CAAC4H,qBAAf,CAAqCU,iBAArC,CAFH,EAGE;AACA,uBAAO,KAAP;AACD;AACF;AACF;;AACD,iBAAO,IAAP;AACD,SApGI;AAqGLC,QAAAA,OAAO;AAAA,iFAAE,iBAAOnG,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACgBpC,cAAc,CAACwI,oBAAf,CAAoC;AACzDpG,sBAAAA,SAAS,EAATA;AADyD,qBAApC,CADhB;;AAAA;AACDnB,oBAAAA,QADC;;AAAA,yBAIHA,QAJG;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAKCjB,cAAc,CAACyI,aAAf,CAA6BxH,QAA7B,CALD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,WArGF;AA8GLyH,QAAAA,oBAAoB,EAAE,gCAAM;AAC1BhD,UAAAA,iBAAiB,CAACuB,IAAlB,CAAuB,8BAAvB,EAD0B,CAE1B;;AACAxB,UAAAA,WAAW,CAACkD,oCAAZ;AACD,SAlHI;AAmHLC,QAAAA,cAAc,EAAE,wBAACC,YAAD,EAA0B;AACxC,cAAI7I,cAAJ,EAAoB;AAClBA,YAAAA,cAAc,CAAC4I,cAAf,CAA8BC,YAA9B;AACD;AACF,SAvHI;AAwHLC,QAAAA,gBAAgB,EAAE,4BAAM;AACtB,iBAAO9I,cAAc,IAAIA,cAAc,CAAC8I,gBAAf,EAAzB;AACD,SA1HI;AA2HLZ,QAAAA,aAAa,EAAE,yBAA0D;AACvE,iBAAOlI,cAAc,IAAIA,cAAc,CAACkI,aAAf,OAAAlI,cAAc,YAAvC;AACD,SA7HI;AA8HL;AACA+I,QAAAA,qBAAqB,EAAE;AAAA,iBAAMtD,WAAW,CAACuD,2BAAZ,EAAN;AAAA,SA/HlB;AAgILC,QAAAA,iBAAiB,EAAE;AAAA,iBAAMxD,WAAW,CAACyD,2BAAZ,EAAN;AAAA,SAhId;AAiILC,QAAAA,YAAY,EAAE;AAAA,iBAAM1D,WAAW,CAAC2D,0BAAZ,EAAN;AAAA;AAjIT,OAAP;AAmID;;;;EAtUgCC,kB","sourcesContent":["import { RcUIModuleV2 } from '@ringcentral-integration/core';\nimport { ObjectMapValue } from '@ringcentral-integration/core/lib/ObjectMap';\nimport { filter, find, values } from 'ramda';\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport {\n  ConferenceCall,\n  LastCallInfo,\n} from '@ringcentral-integration/commons/modules/ConferenceCallV2';\nimport { Webphone } from '@ringcentral-integration/commons/modules/WebphoneV2';\nimport callDirections from '@ringcentral-integration/commons/enums/callDirections';\nimport { NormalizedSession } from '@ringcentral-integration/commons/interfaces/Webphone.interface';\nimport { formatNumber } from '@ringcentral-integration/commons/lib/formatNumber';\nimport callingModes from '@ringcentral-integration/commons/modules/CallingSettings/callingModes';\nimport { sessionStatus } from '@ringcentral-integration/commons/modules/Webphone/sessionStatus';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport { checkShouldHidePhoneNumber } from '../../lib/checkShouldHidePhoneNumber';\nimport {\n  CallControlComponentProps,\n  Deps,\n  getLastCallInfoFromWebphoneSession,\n} from './CallControlUI.interface';\n@Module({\n  name: 'CallControlUI',\n  deps: [\n    'Webphone',\n    'Locale',\n    'ContactMatcher',\n    'RegionSettings',\n    'Brand',\n    'ContactSearch',\n    'CallingSettings',\n    'ConnectivityManager',\n    'ForwardingNumber',\n    'CallMonitor',\n    'ExtensionInfo',\n    'AppFeatures',\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'RouterInteraction', optional: true },\n  ],\n})\nexport class CallControlUI extends RcUIModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  getUIProps({\n    params,\n    showCallQueueName = false,\n    showPark = false,\n    children,\n  }: CallControlComponentProps) {\n    const {\n      brand,\n      callingSettings,\n      conferenceCall,\n      connectivityManager,\n      contactMatcher,\n      contactSearch,\n      forwardingNumber,\n      regionSettings,\n      locale,\n      webphone,\n    } = this._deps;\n\n    const sessionId = params?.sessionId;\n\n    const currentSession =\n      (sessionId\n        ? find((session) => session.id === sessionId, webphone.sessions)\n        : webphone.activeSession) || ({} as NormalizedSession);\n    const contactMapping = contactMatcher?.dataMapping;\n    const fromMatches = contactMapping?.[currentSession.from] ?? [];\n    const toMatches = contactMapping?.[currentSession.to] ?? [];\n    const nameMatches =\n      currentSession.direction === callDirections.outbound\n        ? toMatches\n        : fromMatches;\n\n    const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n    const isInboundCall = currentSession.direction === callDirections.inbound;\n\n    let lastCallInfo = conferenceCall?.lastCallInfo;\n\n    const conferenceCallEquipped = conferenceCall?.hasPermission ?? false;\n    const conferenceData = conferenceCallEquipped\n      ? values(conferenceCall.conferences)[0]\n      : undefined;\n    const isOnConference = conferenceCallEquipped\n      ? conferenceCall.isConferenceSession(currentSession.id)\n      : false;\n    const isMerging = conferenceCallEquipped && conferenceCall.isMerging;\n    const conferenceCallId =\n      conferenceData && isWebRTC ? conferenceData.conference.id : null;\n    const isConferenceCallOverload =\n      conferenceData && isWebRTC\n        ? conferenceCall.isOverload(conferenceCallId)\n        : false;\n\n    const hasConferenceCall = !!conferenceData;\n    const conferenceCallParties = conferenceCallEquipped\n      ? conferenceCall.partyProfiles\n      : undefined;\n\n    // TODO: investigate whether this can simply use isMerging\n    const fromSessionId = conferenceCallEquipped\n      ? conferenceCall.mergingPair?.fromSessionId\n      : undefined;\n    const hideChildren =\n      conferenceCallEquipped &&\n      !isInboundCall &&\n      fromSessionId &&\n      fromSessionId !== currentSession.id;\n    lastCallInfo && lastCallInfo.status !== sessionStatus.finished;\n\n    if (currentSession.warmTransferSessionId) {\n      const warmTransferSession = webphone.sessions.find(\n        (session) => session.id === currentSession.warmTransferSessionId,\n      );\n      lastCallInfo = getLastCallInfoFromWebphoneSession(warmTransferSession);\n    }\n\n    const disableLinks = !!(\n      connectivityManager.isOfflineMode || connectivityManager.isVoipOnlyMode\n    );\n\n    let phoneNumber =\n      currentSession.direction === callDirections.outbound\n        ? currentSession.to\n        : currentSession.from;\n\n    if (\n      this._deps.appFeatures.isCDCEnabled &&\n      checkShouldHidePhoneNumber(phoneNumber, nameMatches)\n    ) {\n      phoneNumber = null;\n    }\n\n    return {\n      brand: brand.fullName,\n      nameMatches,\n      phoneNumber,\n      currentLocale: locale.currentLocale,\n      session: currentSession,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n      showBackButton: true, // callMonitor.calls.length > 0,\n      searchContactList: contactSearch.sortedResult,\n      showSpinner: isMerging,\n      conferenceCallEquipped,\n      hasConferenceCall,\n      conferenceCallParties,\n      conferenceCallId,\n      lastCallInfo,\n      // TODO: investigate whether it's better to just\n      // use isMerging and let the component decide whether to display children\n      children: hideChildren ? null : children,\n      isOnConference,\n      isWebRTC,\n      disableLinks,\n      isConferenceCallOverload,\n      disableFlip: forwardingNumber.flipNumbers.length === 0,\n      showCallQueueName,\n      showPark,\n    };\n  }\n\n  getInitialLayout = ({\n    conferenceCallEquipped,\n    isOnConference,\n    lastCallInfo,\n    session,\n  }: {\n    conferenceCallEquipped: boolean;\n    isOnConference: boolean;\n    lastCallInfo?: LastCallInfo;\n    session?: NormalizedSession;\n  }) => {\n    const { conferenceCall, webphone } = this._deps;\n    let layout = callCtrlLayouts.normalCtrl;\n    if (session.warmTransferSessionId) {\n      return callCtrlLayouts.completeTransferCtrl;\n    }\n    if (!conferenceCallEquipped) {\n      return layout;\n    }\n\n    if (isOnConference) {\n      return callCtrlLayouts.conferenceCtrl;\n    }\n    const isInboundCall = session.direction === callDirections.inbound;\n\n    const { fromSessionId } = conferenceCall.mergingPair;\n    const fromSession = find(\n      (x: any) => x.id === fromSessionId,\n      webphone.sessions,\n    );\n\n    const activeSessionId =\n      webphone && webphone.activeSession && webphone.activeSession.id;\n\n    if (\n      !isOnConference &&\n      !isInboundCall &&\n      fromSession &&\n      fromSessionId !== session.id &&\n      lastCallInfo &&\n      (session.callStatus !== sessionStatus.onHold ||\n        (session.callStatus === sessionStatus.onHold &&\n          session.id === activeSessionId))\n    ) {\n      // enter merge ctrl page.\n      layout = callCtrlLayouts.mergeCtrl;\n    }\n\n    return layout;\n  };\n\n  getUIFunctions({\n    getAvatarUrl,\n    onBackButtonClick,\n    phoneTypeRenderer,\n    phoneSourceNameRenderer,\n  }: CallControlComponentProps) {\n    const {\n      conferenceCall,\n      webphone,\n      regionSettings,\n      extensionInfo,\n      callingSettings,\n      callMonitor,\n      routerInteraction,\n      contactSearch,\n    } = this._deps;\n    return {\n      getInitialLayout: this.getInitialLayout,\n      formatPhone: (phoneNumber: string) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: regionSettings.areaCode,\n          countryCode: regionSettings.countryCode,\n          siteCode: extensionInfo?.site?.code ?? '',\n          isMultipleSiteEnabled: extensionInfo.isMultipleSiteEnabled,\n        }),\n      onHangup: (\n        sessionId: string,\n        layout: ObjectMapValue<typeof callCtrlLayouts>,\n      ) => {\n        webphone.hangup(sessionId);\n        if (layout && layout === callCtrlLayouts.mergeCtrl) {\n          callMonitor.mergeControlClickHangupTrack();\n        }\n      },\n      onMute: (sessionId: string) => webphone.mute(sessionId),\n      onUnmute: (sessionId: string) => webphone.unmute(sessionId),\n      onHold: (sessionId: string) => webphone.hold(sessionId),\n      onUnhold: (sessionId: string) => {\n        webphone.unhold(sessionId);\n      },\n      onRecord: (sessionId: string) => webphone.startRecord(sessionId),\n      onStopRecord: (sessionId: string) => webphone.stopRecord(sessionId),\n      sendDTMF: (...args: Parameters<Webphone['sendDTMF']>) =>\n        webphone.sendDTMF(...args),\n      updateSessionMatchedContact: (\n        ...args: Parameters<Webphone['updateSessionMatchedContact']>\n      ) => webphone.updateSessionMatchedContact(...args),\n      getAvatarUrl,\n      onBackButtonClick,\n      onFlip: (sessionId: string) => {\n        routerInteraction.push(`/flip/${sessionId}`);\n      },\n      onTransfer: (sessionId: string) => {\n        routerInteraction.push(`/transfer/${sessionId}/webphone`);\n      },\n      onCompleteTransfer: (sessionId: string) => {\n        webphone.completeWarmTransfer(sessionId);\n      },\n      onPark: (sessionId: string) => webphone.park(sessionId),\n      searchContact: (searchString: string) =>\n        contactSearch.debouncedSearch({ searchString }),\n      phoneTypeRenderer,\n      phoneSourceNameRenderer,\n      onAdd: (sessionId: string) => {\n        // track user click add on call control\n        callMonitor.callControlClickAddTrack();\n        const session = find((x: any) => x.id === sessionId, webphone.sessions);\n        if (!session || !conferenceCall.validateCallRecording(session)) {\n          return;\n        }\n        let fromNumber = callingSettings.fromNumber;\n        if (session.direction === callDirections.outbound) {\n          fromNumber = session.fromNumber; // keep the same fromNumber\n        }\n        const otherCalls = filter(\n          (call: any) =>\n            call.webphoneSession && call.webphoneSession.id !== session.id,\n          callMonitor.allCalls,\n        );\n        if (otherCalls.length) {\n          // goto 'calls on hold' page\n          routerInteraction.push(\n            `/conferenceCall/callsOnhold/${fromNumber}/${session.id}`,\n          );\n        } else {\n          if (conferenceCall) {\n            conferenceCall.setMergeParty({ fromSessionId: sessionId });\n          }\n          // goto dialer directly\n          routerInteraction.push(\n            `/conferenceCall/dialer/${fromNumber}/${sessionId}`,\n          );\n        }\n      },\n      onBeforeMerge: (sessionId: string) => {\n        const session = find((x: any) => x.id === sessionId, webphone.sessions);\n        if (!session || !conferenceCall.validateCallRecording(session)) {\n          return false;\n        }\n        if (conferenceCall) {\n          const conferenceData = Object.values(conferenceCall.conferences)[0];\n          if (conferenceData) {\n            const conferenceSession = find(\n              (x: any) => x.id === conferenceData.sessionId,\n              webphone.sessions,\n            );\n            if (\n              conferenceSession &&\n              !conferenceCall.validateCallRecording(conferenceSession)\n            ) {\n              return false;\n            }\n          }\n        }\n        return true;\n      },\n      onMerge: async (sessionId: string) => {\n        const sessions = await conferenceCall.parseMergingSessions({\n          sessionId,\n        });\n        if (sessions) {\n          await conferenceCall.mergeSessions(sessions);\n        }\n      },\n\n      gotoParticipantsCtrl: () => {\n        routerInteraction.push('/conferenceCall/participants');\n        // track user click participant area on call control\n        callMonitor.callControlClickParticipantAreaTrack();\n      },\n      loadConference: (conferenceId: string) => {\n        if (conferenceCall) {\n          conferenceCall.loadConference(conferenceId);\n        }\n      },\n      closeMergingPair: () => {\n        return conferenceCall && conferenceCall.closeMergingPair();\n      },\n      setMergeParty: (...args: Parameters<ConferenceCall['setMergeParty']>) => {\n        return conferenceCall && conferenceCall.setMergeParty(...args);\n      },\n      // user action track functions\n      afterHideMergeConfirm: () => callMonitor.confirmMergeClickCloseTrack(),\n      afterConfirmMerge: () => callMonitor.confirmMergeClickMergeTrack(),\n      afterOnMerge: () => callMonitor.callControlClickMergeTrack(),\n    };\n  }\n}\n"],"file":"CallControlUI.js"}