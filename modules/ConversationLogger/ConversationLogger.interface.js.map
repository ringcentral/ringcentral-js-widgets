{"version":3,"file":"ConversationLogger.interface.js","names":[],"sources":["modules/ConversationLogger/ConversationLogger.interface.ts"],"sourcesContent":["import type { Entity } from '../../interfaces/Entity.interface';\nimport type { Message } from '../../interfaces/MessageStore.model';\nimport type { LogOptions as BaseLogOptions } from '../../lib/LoggerBase';\nimport type { Correspondent } from '../../lib/messageHelper';\nimport type { AppFeatures } from '../AppFeatures';\nimport type { Auth } from '../Auth';\nimport type { ContactMatcher } from '../ContactMatcher';\nimport type { ConversationMatcher } from '../ConversationMatcher';\nimport type { DateTimeFormat, FormatDateTimeOptions } from '../DateTimeFormat';\nimport type { ExtensionInfo } from '../ExtensionInfo';\nimport type { MessageStore } from '../MessageStore';\nimport type { Storage } from '../Storage';\nimport type { TabManager } from '../TabManager';\n\nexport interface ConversationLoggerOptions {\n  isLoggedContact?: (\n    conversation: ConversationLogItem,\n    lastActivity: Entity,\n    item: Entity,\n  ) => boolean;\n  isAutoUpdate?: boolean;\n  formatDateTime?: (options: Partial<FormatDateTimeOptions>) => string;\n  accordWithLogRequirement: (conversation: ConversationLogItem) => boolean;\n  logFunction: <P, S>(options: BaseLogOptions<P, S>) => Promise<void>;\n  readyCheckFunction: () => boolean;\n}\n\nexport interface Deps {\n  auth: Auth;\n  storage: Storage;\n  contactMatcher: ContactMatcher;\n  conversationMatcher: ConversationMatcher;\n  dateTimeFormat: DateTimeFormat;\n  extensionInfo: ExtensionInfo;\n  messageStore: MessageStore;\n  appFeatures: AppFeatures;\n  tabManager?: TabManager;\n  conversationLoggerOptions: ConversationLoggerOptions;\n}\n\nexport interface ConversationLogItem {\n  conversationLogId: string;\n  conversationId: string;\n  creationTime: number;\n  date: string;\n  type: Message['type'];\n  messages: Message[];\n  conversationLogMatches: Entity[];\n  self?: Correspondent;\n  // self?: {\n  //   extensionNumber?: string;\n  // };\n  correspondents?: Correspondent[];\n}\n\nexport type ConversationLogMap = Record<\n  string,\n  Record<string, ConversationLogItem>\n>;\n"],"mappings":""}