{"version":3,"file":"ConversationLogger.js","names":["_core","require","_utils","_messageTypes","_LoggerBase2","_di","_messageHelper","_proxify","_conversationLoggerHelper","_dec","_dec2","_dec3","_dec4","_class","_class2","_descriptor","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","Symbol","iterator","isArray","length","e","n","ownKeys","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","s","includes","propertyIsEnumerable","hasOwnProperty","asyncGeneratorStep","c","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","_initializerDefineProperty","l","initializer","_classCallCheck","_defineProperties","key","_createClass","prototype","_toPrimitive","_typeof","toPrimitive","String","Number","_get","Reflect","get","bind","p","_superPropBase","_getPrototypeOf","_inherits","create","_setPrototypeOf","setPrototypeOf","__proto__","_createSuper","_isNativeReflectConstruct","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","reverse","reduce","_initializerWarningHelper","Error","ConversationLogger","Module","deps","dep","optional","computed","that","_deps","messageStore","conversationStore","extensionInfo","extensionNumber","conversationMatcher","dataMapping","conversationLogMap","_LoggerBase","_super","_this$_deps$conversat","_this$_deps$conversat2","_this$_deps$conversat3","_this","enableCache","storageKey","_logFunction","conversationLoggerOptions","logFunction","_readyCheckFunction","readyCheckFunction","_isLoggedContact","isLoggedContact","_formatDateTime","formatDateTime","_this$_deps$dateTimeF","dateTimeFormat","_isAutoUpdate","isAutoUpdate","_accordWithLogRequirement","accordWithLogRequirement","_identityFunction","conversationLogIdentityFunction","_autoLogQueue","_autoLogPromise","_lastProcessedConversations","_lastAutoLog","onMessageUpdated","record","_processConversationLogMap","contactMatcher","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","conversationLogIds","_shouldInit","_shouldReset","_setAutoLog","autoLog","_autoLog","onReset","_processQueue2","regeneratorRuntime","mark","_callee","_this2","ownerId","wrap","_callee$","_context","prev","next","auth","sleep","abrupt","all","splice","map","conversation","_processConversationLog","_processQueue","stop","_queueAutoLogConversation","_ref","_getCorrespondentMatches","_this3","correspondents","result","contact","number","phoneNumber","concat","getLastMatchedCorrespondentEntity","_this4","conversationLog","conversationId","lastRecord","date","sort","sortByDate","find","item","conversationLogMatches","conversationLogId","lastActivity","correspondentMatches","_processConversationLog2","_callee2","_ref2","addIfNotExist","numbers","numberMap","self","selfNumber","selfMatches","selfEntity","correspondentEntity","_callee2$","_context2","match","queries","_autoLogConversation","type","messageTypes","sms","_x","accordWithProcessLogRequirement","conversationLogItem","_this$_accordWithLogR","_this5","triggerMatch","oldMap","tabManager","active","messages","id","_autoLogConversation2","_callee3","_ref3","_callee3$","_context3","log","_x2","_log","_callee4","_ref4","options","_callee4$","_context4","_x3","_logConversation","_callee5","_ref5","_this6","redirect","_callee5$","_context5","idx","queueIndex","findIndex","logConversation","_x4","_setAutoLog2","_callee6","_callee6$","_context6","setAutoLog","_x5","getConversationLogId","message","utcTimestamp","creationTime","getLogId","appFeatures","hasReadTextPermission","_this$_deps$conversat4","_this7","conversationLogMapping","values","allMessages","mapping","getNumbersFromMessage","_this8","logIds","_this9","output","LoggerBase","storage","state","action","proxify","exports"],"sources":["modules/ConversationLogger/ConversationLogger.ts"],"sourcesContent":["import {\n  action,\n  computed,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { sleep } from '@ringcentral-integration/utils';\n\nimport { messageTypes } from '../../enums/messageTypes';\nimport type { Entity } from '../../interfaces/Entity.interface';\nimport type { Message } from '../../interfaces/MessageStore.model';\nimport { LoggerBase } from '../../lib/LoggerBase';\nimport { Module } from '../../lib/di';\nimport type { Correspondent } from '../../lib/messageHelper';\nimport { getNumbersFromMessage, sortByDate } from '../../lib/messageHelper';\nimport { proxify } from '../../lib/proxy/proxify';\n\nimport type {\n  ConversationLogItem,\n  ConversationLogMap,\n  Deps,\n} from './ConversationLogger.interface';\nimport {\n  conversationLogIdentityFunction,\n  getLogId,\n} from './conversationLoggerHelper';\n\n@Module({\n  name: 'ConversationLogger',\n  deps: [\n    'Auth',\n    'Storage',\n    'ContactMatcher',\n    'ConversationMatcher',\n    'DateTimeFormat',\n    'ExtensionInfo',\n    'MessageStore',\n    'AppFeatures',\n    'ConversationLoggerOptions',\n    { dep: 'TabManager', optional: true },\n  ],\n})\nexport class ConversationLogger<T extends Deps = Deps> extends LoggerBase<T> {\n  _logFunction = this._deps.conversationLoggerOptions.logFunction;\n\n  _readyCheckFunction = this._deps.conversationLoggerOptions.readyCheckFunction;\n\n  protected _isLoggedContact =\n    this._deps.conversationLoggerOptions.isLoggedContact ?? (() => false);\n\n  protected _formatDateTime =\n    this._deps.conversationLoggerOptions.formatDateTime ??\n    ((...args) => this._deps.dateTimeFormat.formatDateTime(...args));\n\n  protected _isAutoUpdate =\n    this._deps.conversationLoggerOptions.isAutoUpdate ?? true;\n\n  protected _accordWithLogRequirement =\n    this._deps.conversationLoggerOptions.accordWithLogRequirement;\n\n  protected override _identityFunction = conversationLogIdentityFunction;\n\n  protected _autoLogQueue: ConversationLogItem[] = [];\n\n  protected _autoLogPromise: Promise<void> | null = null;\n\n  protected _lastProcessedConversations: ConversationLogMap | null = null;\n\n  protected _lastAutoLog: boolean | null = null;\n\n  constructor(deps: T) {\n    super(deps, {\n      enableCache: true,\n      storageKey: 'ConversationLogger',\n    });\n    this._deps.messageStore.onMessageUpdated((record) => {\n      this._processConversationLogMap(record);\n    });\n    this._deps.contactMatcher.addQuerySource({\n      getQueriesFn: () => this.uniqueNumbers,\n      readyCheckFn: () =>\n        this._deps.messageStore.ready && this._deps.extensionInfo.ready,\n    });\n    this._deps.conversationMatcher.addQuerySource({\n      getQueriesFn: () => this.conversationLogIds,\n      readyCheckFn: () =>\n        this._deps.messageStore.ready && this._deps.extensionInfo.ready,\n    });\n  }\n\n  override _shouldInit() {\n    return !!(super._shouldInit() && this._readyCheckFunction());\n  }\n\n  override _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._readyCheckFunction())\n    );\n  }\n\n  get autoLog() {\n    return this._autoLog;\n  }\n\n  @storage\n  @state\n  protected _autoLog = false;\n\n  @action\n  protected _setAutoLog(autoLog: boolean) {\n    this._autoLog = autoLog;\n  }\n\n  override onReset() {\n    this._lastProcessedConversations = null;\n    this._lastAutoLog = null;\n    this._autoLogPromise = null;\n    this._autoLogQueue = [];\n  }\n\n  async _processQueue() {\n    const { ownerId } = this._deps.auth;\n    await sleep(300);\n    if (ownerId !== this._deps.auth.ownerId) return;\n    await Promise.all(\n      this._autoLogQueue\n        .splice(0, 10)\n        .map((conversation) => this._processConversationLog({ conversation })),\n    );\n    if (ownerId === this._deps.auth.ownerId && this._autoLogQueue.length > 0) {\n      this._autoLogPromise = this._processQueue();\n    } else {\n      this._autoLogPromise = null;\n    }\n  }\n\n  _queueAutoLogConversation({\n    conversation,\n  }: {\n    conversation: ConversationLogItem;\n  }) {\n    this._autoLogQueue.push(conversation);\n    if (!this._autoLogPromise) {\n      this._autoLogPromise = this._processQueue();\n    }\n  }\n\n  _getCorrespondentMatches(conversation: ConversationLogItem) {\n    return (\n      (conversation.correspondents &&\n        conversation.correspondents.reduce((result, contact) => {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          return number && this._deps.contactMatcher.dataMapping[number]\n            ? result.concat(this._deps.contactMatcher.dataMapping[number])\n            : result;\n        }, [] as Entity[])) ||\n      []\n    );\n  }\n\n  getLastMatchedCorrespondentEntity(conversation: ConversationLogItem) {\n    const conversationLog =\n      this.conversationLogMap[conversation.conversationId];\n    if (!conversationLog) {\n      return null;\n    }\n    const lastRecord = Object.keys(conversationLog)\n      .map((date) => this.conversationLogMap[conversation.conversationId][date])\n      .sort(sortByDate)\n      .find((item) => item.conversationLogMatches.length > 0);\n    if (\n      lastRecord &&\n      this._deps.conversationMatcher.dataMapping[\n        lastRecord.conversationLogId\n      ] &&\n      this._deps.conversationMatcher.dataMapping[lastRecord.conversationLogId]\n        .length\n    ) {\n      const lastActivity =\n        this._deps.conversationMatcher.dataMapping[\n          lastRecord.conversationLogId\n        ][0];\n      const correspondentMatches = this._getCorrespondentMatches(lastRecord);\n      return correspondentMatches.find((item) =>\n        this._isLoggedContact(conversation, lastActivity, item),\n      );\n    }\n    return null;\n  }\n\n  /**\n   * Define update or log new sms\n   */\n  async _processConversationLog({\n    conversation,\n  }: {\n    conversation: ConversationLogItem;\n  }) {\n    // await this._deps.conversationMatcher.triggerMatch();\n    await this._deps.conversationMatcher.match({\n      queries: [conversation.conversationLogId],\n    });\n    if (\n      this._isAutoUpdate &&\n      this._deps.conversationMatcher.dataMapping[\n        conversation.conversationLogId\n      ] &&\n      this._deps.conversationMatcher.dataMapping[conversation.conversationLogId]\n        .length\n    ) {\n      // update conversation\n      await this._autoLogConversation({\n        conversation,\n      });\n    } else if (this.autoLog && conversation.type === messageTypes.sms) {\n      // new entry\n      const numbers: string[] = [];\n      const numberMap: Record<string, boolean> = {};\n      /* eslint { \"no-inner-declarations\": 0 } */\n      function addIfNotExist(contact: Correspondent) {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        if (number && !numberMap[number]) {\n          numbers.push(number);\n          numberMap[number] = true;\n        }\n      }\n\n      const self = conversation.self;\n      if (self) addIfNotExist(self);\n\n      conversation.correspondents!.forEach(addIfNotExist);\n      await this._deps.contactMatcher.match({ queries: numbers });\n      const selfNumber =\n        conversation.self &&\n        (conversation.self.phoneNumber || conversation.self.extensionNumber);\n      const selfMatches =\n        (selfNumber && this._deps.contactMatcher.dataMapping[selfNumber]) || [];\n      const correspondentMatches = this._getCorrespondentMatches(conversation);\n\n      const selfEntity =\n        (selfMatches && selfMatches.length === 1 && selfMatches[0]) || null;\n\n      let correspondentEntity =\n        this.getLastMatchedCorrespondentEntity(conversation);\n\n      correspondentEntity =\n        correspondentEntity ||\n        (correspondentMatches &&\n          correspondentMatches.length === 1 &&\n          correspondentMatches[0]) ||\n        null;\n      await this._autoLogConversation({\n        conversation,\n        selfEntity,\n        correspondentEntity,\n      });\n    }\n  }\n\n  accordWithProcessLogRequirement(conversationLogItem: ConversationLogItem) {\n    return !!this._accordWithLogRequirement?.(conversationLogItem);\n  }\n\n  /**\n   * Auto log new message\n   */\n  _processConversationLogMap(\n    /** use for outside extend module */\n    record: Message,\n  ) {\n    if (this.ready && this._lastAutoLog !== this.autoLog) {\n      this._lastAutoLog = this.autoLog;\n      if (this.autoLog) {\n        // force conversation log checking when switch auto log to on\n        this._lastProcessedConversations = null;\n      }\n    }\n    if (\n      this.ready &&\n      this._lastProcessedConversations !== this.conversationLogMap\n    ) {\n      this._deps.conversationMatcher.triggerMatch();\n      this._deps.contactMatcher.triggerMatch();\n      const oldMap = this._lastProcessedConversations || {};\n      this._lastProcessedConversations = this.conversationLogMap;\n      if (!this._deps.tabManager || this._deps.tabManager.active) {\n        Object.keys(this._lastProcessedConversations).forEach(\n          (conversationId) => {\n            Object.keys(\n              this._lastProcessedConversations![conversationId],\n            ).forEach((date) => {\n              const conversation =\n                this._lastProcessedConversations![conversationId][date];\n              if (\n                !oldMap[conversationId] ||\n                !oldMap[conversationId][date] ||\n                conversation.messages[0].id !==\n                  oldMap[conversationId][date].messages[0].id\n              ) {\n                if (this.accordWithProcessLogRequirement(conversation)) {\n                  this._queueAutoLogConversation({\n                    conversation,\n                  });\n                }\n              }\n            });\n          },\n        );\n      }\n    }\n  }\n\n  async _autoLogConversation({\n    conversation,\n    selfEntity,\n    correspondentEntity,\n  }: {\n    conversation: ConversationLogItem;\n    selfEntity?: Entity | null;\n    correspondentEntity?: Entity | null;\n  }) {\n    await this.log({\n      conversation,\n      selfEntity,\n      correspondentEntity,\n    });\n  }\n\n  @proxify\n  override async log<T>({\n    conversation,\n    ...options\n  }: {\n    conversation: ConversationLogItem;\n  } & T) {\n    super.log({ item: conversation, ...options });\n  }\n\n  @proxify\n  async logConversation<T>({\n    conversationId,\n    correspondentEntity,\n    redirect,\n    ...options\n  }: {\n    conversationId: string;\n    correspondentEntity: Entity;\n    redirect: boolean;\n  } & T) {\n    if (this.conversationLogMap[conversationId]) {\n      await Promise.all(\n        Object.keys(this.conversationLogMap[conversationId])\n          .map((date) => this.conversationLogMap[conversationId][date])\n          .sort(sortByDate)\n          .map((conversation, idx) => {\n            const queueIndex = this._autoLogQueue.findIndex(\n              (item) =>\n                item.conversationLogId === conversation.conversationLogId,\n            );\n            if (queueIndex > -1) {\n              this._autoLogQueue.splice(queueIndex, 1);\n            }\n            return this.log({\n              ...options,\n              conversation,\n              correspondentEntity,\n              redirect: redirect && idx === 0, // only direct on the first item\n            });\n          }),\n      );\n    }\n  }\n\n  get available() {\n    return this._deps.appFeatures.hasReadTextPermission;\n  }\n\n  @proxify\n  async setAutoLog(autoLog: boolean) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this._setAutoLog(autoLog);\n    }\n  }\n\n  @computed((that: ConversationLogger) => [\n    that._deps.messageStore.conversationStore,\n    that._deps.extensionInfo.extensionNumber,\n    that._deps.conversationMatcher.dataMapping,\n  ])\n  get conversationLogMap() {\n    const { conversationStore } = this._deps.messageStore;\n    const extensionNumber = this._deps.extensionInfo.extensionNumber!;\n    const conversationLogMapping =\n      this._deps.conversationMatcher.dataMapping ?? {};\n    const messages = Object.values(conversationStore).reduce(\n      (allMessages, messages) => [...allMessages, ...messages],\n      [],\n    );\n    const mapping: ConversationLogMap = {};\n    messages\n      .slice()\n      .sort(sortByDate)\n      .forEach((message) => {\n        const conversationId = message.conversationId!;\n        const date = this._formatDateTime({\n          type: 'date',\n          utcTimestamp: message.creationTime,\n        })!;\n\n        if (!mapping[conversationId]) {\n          mapping[conversationId] = {};\n        }\n\n        if (!mapping[conversationId][date]) {\n          const conversationLogId = this.getConversationLogId(message)!;\n\n          mapping[conversationId][date] = {\n            conversationLogId,\n            conversationId,\n            creationTime: message.creationTime!, // for sorting\n            date,\n            type: message.type,\n            messages: [],\n            conversationLogMatches:\n              conversationLogMapping[conversationLogId] || [],\n            // The reason for passing extensionNumber here is to filter the correspondence in the group conversation(type paper, and Only it has extensionNumber) that contains its own information.\n            ...getNumbersFromMessage({ extensionNumber, message }),\n          };\n        }\n\n        mapping[conversationId][date].messages.push(message);\n      });\n    return mapping;\n  }\n\n  @computed((that: ConversationLogger) => [that.conversationLogMap])\n  get conversationLogIds() {\n    const logIds: string[] = [];\n    Object.keys(this.conversationLogMap).forEach((conversationId) => {\n      Object.keys(this.conversationLogMap[conversationId]).forEach((date) => {\n        logIds.push(\n          this.conversationLogMap[conversationId][date].conversationLogId,\n        );\n      });\n    });\n    return logIds;\n  }\n\n  @computed((that: ConversationLogger) => [that.conversationLogMap])\n  get uniqueNumbers() {\n    const output: string[] = [];\n    const numberMap: Record<string, boolean> = {};\n    function addIfNotExist(contact: Correspondent) {\n      const number = contact.phoneNumber || contact.extensionNumber;\n      if (number && !numberMap[number]) {\n        output.push(number);\n        numberMap[number] = true;\n      }\n    }\n    Object.keys(this.conversationLogMap).forEach((conversationId) => {\n      Object.keys(this.conversationLogMap[conversationId]).forEach((date) => {\n        const conversation = this.conversationLogMap[conversationId][date];\n\n        const self = conversation.self;\n        if (self) addIfNotExist(self);\n\n        conversation.correspondents!.forEach(addIfNotExist);\n      });\n    });\n    return output;\n  }\n\n  getConversationLogId(message: Message) {\n    if (!message) {\n      return;\n    }\n    const conversationId = message.conversationId!;\n    const date = this._formatDateTime({\n      type: 'date',\n      utcTimestamp: message.creationTime,\n    })!;\n\n    return getLogId({\n      conversationId,\n      date,\n    });\n  }\n\n  get dataMapping() {\n    return this._deps.conversationMatcher.dataMapping;\n  }\n}\n"],"mappings":"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","ignoreList":[]}