{"version":3,"file":"ConversationLogger.js","names":["_core","require","_utils","_messageTypes","_di","_LoggerBase2","_messageHelper","_proxify","_conversationLoggerHelper","_dec","_dec2","_dec3","_dec4","_class","_class2","_descriptor","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","err","undefined","_initializerDefineProperty","property","descriptor","context","initializer","_classCallCheck","instance","Constructor","_defineProperties","props","_createClass","protoProps","staticProps","_toPrimitive","_typeof","String","input","hint","prim","toPrimitive","res","Number","_get","Reflect","get","bind","receiver","base","_superPropBase","desc","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_applyDecoratedDescriptor","decorators","reverse","reduce","decorator","_initializerWarningHelper","Error","ConversationLogger","Module","deps","dep","optional","computed","that","_deps","messageStore","conversationStore","extensionInfo","extensionNumber","conversationMatcher","dataMapping","conversationLogMap","_LoggerBase","_super","_this$_deps$conversat","_this$_deps$conversat2","_this$_deps$conversat3","_this","enableCache","storageKey","_logFunction","conversationLoggerOptions","logFunction","_readyCheckFunction","readyCheckFunction","_isLoggedContact","isLoggedContact","_formatDateTime","formatDateTime","_this$_deps$dateTimeF","dateTimeFormat","_isAutoUpdate","isAutoUpdate","_accordWithLogRequirement","accordWithLogRequirement","_identityFunction","conversationLogIdentityFunction","_autoLogQueue","_autoLogPromise","_lastProcessedConversations","_lastAutoLog","onMessageUpdated","record","_processConversationLogMap","contactMatcher","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","conversationLogIds","_shouldInit","_shouldReset","_setAutoLog","autoLog","_autoLog","onReset","_processQueue2","regeneratorRuntime","mark","_callee","_this2","ownerId","wrap","_callee$","_context","prev","next","auth","sleep","abrupt","all","splice","map","conversation","_processConversationLog","_processQueue","stop","_queueAutoLogConversation","_ref","_getCorrespondentMatches","_this3","correspondents","contact","number","phoneNumber","concat","getLastMatchedCorrespondentEntity","_this4","conversationLog","conversationId","lastRecord","date","sort","sortByDate","find","item","conversationLogMatches","conversationLogId","lastActivity","correspondentMatches","_processConversationLog2","_callee2","_ref2","addIfNotExist","numbers","numberMap","selfNumber","selfMatches","selfEntity","correspondentEntity","_callee2$","_context2","match","queries","_autoLogConversation","type","messageTypes","sms","_x","accordWithProcessLogRequirement","conversationLogItem","_this$_accordWithLogR","_this5","triggerMatch","oldMap","tabManager","active","messages","id","_autoLogConversation2","_callee3","_ref3","_callee3$","_context3","log","_x2","_log","_callee4","_ref4","options","_callee4$","_context4","_x3","_logConversation","_callee5","_ref5","_this6","redirect","_callee5$","_context5","idx","queueIndex","findIndex","logConversation","_x4","_setAutoLog2","_callee6","_callee6$","_context6","setAutoLog","_x5","getConversationLogId","message","utcTimestamp","creationTime","getLogId","appFeatures","hasReadTextPermission","_this$_deps$conversat4","_this7","conversationLogMapping","values","allMessages","mapping","getNumbersFromMessage","_this8","logIds","_this9","output","LoggerBase","storage","state","action","proxify","exports"],"sources":["modules/ConversationLogger/ConversationLogger.ts"],"sourcesContent":["import {\n  action,\n  computed,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\nimport { sleep } from '@ringcentral-integration/utils';\n\nimport { messageTypes } from '../../enums/messageTypes';\nimport type { Entity } from '../../interfaces/Entity.interface';\nimport type { Message } from '../../interfaces/MessageStore.model';\nimport { Module } from '../../lib/di';\nimport { LoggerBase } from '../../lib/LoggerBase';\nimport type { Correspondent } from '../../lib/messageHelper';\nimport { getNumbersFromMessage, sortByDate } from '../../lib/messageHelper';\nimport { proxify } from '../../lib/proxy/proxify';\nimport type {\n  ConversationLogItem,\n  ConversationLogMap,\n  Deps,\n} from './ConversationLogger.interface';\nimport {\n  conversationLogIdentityFunction,\n  getLogId,\n} from './conversationLoggerHelper';\n\n@Module({\n  name: 'ConversationLogger',\n  deps: [\n    'Auth',\n    'Storage',\n    'ContactMatcher',\n    'ConversationMatcher',\n    'DateTimeFormat',\n    'ExtensionInfo',\n    'MessageStore',\n    'AppFeatures',\n    'ConversationLoggerOptions',\n    { dep: 'TabManager', optional: true },\n  ],\n})\nexport class ConversationLogger<T extends Deps = Deps> extends LoggerBase<T> {\n  _logFunction = this._deps.conversationLoggerOptions.logFunction;\n\n  _readyCheckFunction = this._deps.conversationLoggerOptions.readyCheckFunction;\n\n  protected _isLoggedContact =\n    this._deps.conversationLoggerOptions.isLoggedContact ?? (() => false);\n\n  protected _formatDateTime =\n    this._deps.conversationLoggerOptions.formatDateTime ??\n    ((...args) => this._deps.dateTimeFormat.formatDateTime(...args));\n\n  protected _isAutoUpdate =\n    this._deps.conversationLoggerOptions.isAutoUpdate ?? true;\n\n  protected _accordWithLogRequirement =\n    this._deps.conversationLoggerOptions.accordWithLogRequirement;\n\n  protected override _identityFunction = conversationLogIdentityFunction;\n\n  protected _autoLogQueue: ConversationLogItem[] = [];\n\n  protected _autoLogPromise: Promise<void> | null = null;\n\n  protected _lastProcessedConversations: ConversationLogMap | null = null;\n\n  protected _lastAutoLog: boolean | null = null;\n\n  constructor(deps: T) {\n    super(deps, {\n      enableCache: true,\n      storageKey: 'ConversationLogger',\n    });\n    this._deps.messageStore.onMessageUpdated((record) => {\n      this._processConversationLogMap(record);\n    });\n    this._deps.contactMatcher.addQuerySource({\n      getQueriesFn: () => this.uniqueNumbers,\n      readyCheckFn: () =>\n        this._deps.messageStore.ready && this._deps.extensionInfo.ready,\n    });\n    this._deps.conversationMatcher.addQuerySource({\n      getQueriesFn: () => this.conversationLogIds,\n      readyCheckFn: () =>\n        this._deps.messageStore.ready && this._deps.extensionInfo.ready,\n    });\n  }\n\n  override _shouldInit() {\n    return !!(super._shouldInit() && this._readyCheckFunction());\n  }\n\n  override _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this._readyCheckFunction())\n    );\n  }\n\n  get autoLog() {\n    return this._autoLog;\n  }\n\n  @storage\n  @state\n  protected _autoLog = false;\n\n  @action\n  protected _setAutoLog(autoLog: boolean) {\n    this._autoLog = autoLog;\n  }\n\n  override onReset() {\n    this._lastProcessedConversations = null;\n    this._lastAutoLog = null;\n    this._autoLogPromise = null;\n    this._autoLogQueue = [];\n  }\n\n  async _processQueue() {\n    const { ownerId } = this._deps.auth;\n    await sleep(300);\n    if (ownerId !== this._deps.auth.ownerId) return;\n    await Promise.all(\n      this._autoLogQueue\n        .splice(0, 10)\n        .map((conversation) => this._processConversationLog({ conversation })),\n    );\n    if (ownerId === this._deps.auth.ownerId && this._autoLogQueue.length > 0) {\n      this._autoLogPromise = this._processQueue();\n    } else {\n      this._autoLogPromise = null;\n    }\n  }\n\n  _queueAutoLogConversation({\n    conversation,\n  }: {\n    conversation: ConversationLogItem;\n  }) {\n    this._autoLogQueue.push(conversation);\n    if (!this._autoLogPromise) {\n      this._autoLogPromise = this._processQueue();\n    }\n  }\n\n  _getCorrespondentMatches(conversation: ConversationLogItem) {\n    return (\n      (conversation.correspondents &&\n        conversation.correspondents.reduce((result, contact) => {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          return number && this._deps.contactMatcher.dataMapping[number]\n            ? result.concat(this._deps.contactMatcher.dataMapping[number])\n            : result;\n        }, [] as Entity[])) ||\n      []\n    );\n  }\n\n  getLastMatchedCorrespondentEntity(conversation: ConversationLogItem) {\n    const conversationLog =\n      this.conversationLogMap[conversation.conversationId];\n    if (!conversationLog) {\n      return null;\n    }\n    const lastRecord = Object.keys(conversationLog)\n      .map((date) => this.conversationLogMap[conversation.conversationId][date])\n      .sort(sortByDate)\n      .find((item) => item.conversationLogMatches.length > 0);\n    if (\n      lastRecord &&\n      this._deps.conversationMatcher.dataMapping[\n        lastRecord.conversationLogId\n      ] &&\n      this._deps.conversationMatcher.dataMapping[lastRecord.conversationLogId]\n        .length\n    ) {\n      const lastActivity =\n        this._deps.conversationMatcher.dataMapping[\n          lastRecord.conversationLogId\n        ][0];\n      const correspondentMatches = this._getCorrespondentMatches(lastRecord);\n      return correspondentMatches.find((item) =>\n        this._isLoggedContact(conversation, lastActivity, item),\n      );\n    }\n    return null;\n  }\n\n  /**\n   * Define update or log new sms\n   */\n  async _processConversationLog({\n    conversation,\n  }: {\n    conversation: ConversationLogItem;\n  }) {\n    // await this._deps.conversationMatcher.triggerMatch();\n    await this._deps.conversationMatcher.match({\n      queries: [conversation.conversationLogId],\n    });\n    if (\n      this._isAutoUpdate &&\n      this._deps.conversationMatcher.dataMapping[\n        conversation.conversationLogId\n      ] &&\n      this._deps.conversationMatcher.dataMapping[conversation.conversationLogId]\n        .length\n    ) {\n      // update conversation\n      await this._autoLogConversation({\n        conversation,\n      });\n    } else if (this.autoLog && conversation.type === messageTypes.sms) {\n      // new entry\n      const numbers: string[] = [];\n      const numberMap: Record<string, boolean> = {};\n      /* eslint { \"no-inner-declarations\": 0 } */\n      function addIfNotExist(contact: Correspondent) {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        if (number && !numberMap[number]) {\n          numbers.push(number);\n          numberMap[number] = true;\n        }\n      }\n      addIfNotExist(conversation.self!);\n      conversation.correspondents!.forEach(addIfNotExist);\n      await this._deps.contactMatcher.match({ queries: numbers });\n      const selfNumber =\n        conversation.self &&\n        (conversation.self.phoneNumber || conversation.self.extensionNumber);\n      const selfMatches =\n        (selfNumber && this._deps.contactMatcher.dataMapping[selfNumber]) || [];\n      const correspondentMatches = this._getCorrespondentMatches(conversation);\n\n      const selfEntity =\n        (selfMatches && selfMatches.length === 1 && selfMatches[0]) || null;\n\n      let correspondentEntity =\n        this.getLastMatchedCorrespondentEntity(conversation);\n\n      correspondentEntity =\n        correspondentEntity ||\n        (correspondentMatches &&\n          correspondentMatches.length === 1 &&\n          correspondentMatches[0]) ||\n        null;\n      await this._autoLogConversation({\n        conversation,\n        selfEntity,\n        correspondentEntity,\n      });\n    }\n  }\n\n  accordWithProcessLogRequirement(conversationLogItem: ConversationLogItem) {\n    return !!this._accordWithLogRequirement?.(conversationLogItem);\n  }\n\n  /**\n   * Auto log new message\n   */\n  _processConversationLogMap(\n    /** use for outside extend module */\n    record: Message,\n  ) {\n    if (this.ready && this._lastAutoLog !== this.autoLog) {\n      this._lastAutoLog = this.autoLog;\n      if (this.autoLog) {\n        // force conversation log checking when switch auto log to on\n        this._lastProcessedConversations = null;\n      }\n    }\n    if (\n      this.ready &&\n      this._lastProcessedConversations !== this.conversationLogMap\n    ) {\n      this._deps.conversationMatcher.triggerMatch();\n      this._deps.contactMatcher.triggerMatch();\n      const oldMap = this._lastProcessedConversations || {};\n      this._lastProcessedConversations = this.conversationLogMap;\n      if (!this._deps.tabManager || this._deps.tabManager.active) {\n        Object.keys(this._lastProcessedConversations).forEach(\n          (conversationId) => {\n            Object.keys(\n              this._lastProcessedConversations![conversationId],\n            ).forEach((date) => {\n              const conversation =\n                this._lastProcessedConversations![conversationId][date];\n              if (\n                !oldMap[conversationId] ||\n                !oldMap[conversationId][date] ||\n                conversation.messages[0].id !==\n                  oldMap[conversationId][date].messages[0].id\n              ) {\n                if (this.accordWithProcessLogRequirement(conversation)) {\n                  this._queueAutoLogConversation({\n                    conversation,\n                  });\n                }\n              }\n            });\n          },\n        );\n      }\n    }\n  }\n\n  async _autoLogConversation({\n    conversation,\n    selfEntity,\n    correspondentEntity,\n  }: {\n    conversation: ConversationLogItem;\n    selfEntity?: Entity | null;\n    correspondentEntity?: Entity | null;\n  }) {\n    await this.log({\n      conversation,\n      selfEntity,\n      correspondentEntity,\n    });\n  }\n\n  @proxify\n  override async log<T>({\n    conversation,\n    ...options\n  }: {\n    conversation: ConversationLogItem;\n  } & T) {\n    super.log({ item: conversation, ...options });\n  }\n\n  @proxify\n  async logConversation<T>({\n    conversationId,\n    correspondentEntity,\n    redirect,\n    ...options\n  }: {\n    conversationId: string;\n    correspondentEntity: Entity;\n    redirect: boolean;\n  } & T) {\n    if (this.conversationLogMap[conversationId]) {\n      await Promise.all(\n        Object.keys(this.conversationLogMap[conversationId])\n          .map((date) => this.conversationLogMap[conversationId][date])\n          .sort(sortByDate)\n          .map((conversation, idx) => {\n            const queueIndex = this._autoLogQueue.findIndex(\n              (item) =>\n                item.conversationLogId === conversation.conversationLogId,\n            );\n            if (queueIndex > -1) {\n              this._autoLogQueue.splice(queueIndex, 1);\n            }\n            return this.log({\n              ...options,\n              conversation,\n              correspondentEntity,\n              redirect: redirect && idx === 0, // only direct on the first item\n            });\n          }),\n      );\n    }\n  }\n\n  get available() {\n    return this._deps.appFeatures.hasReadTextPermission;\n  }\n\n  @proxify\n  async setAutoLog(autoLog: boolean) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this._setAutoLog(autoLog);\n    }\n  }\n\n  @computed((that: ConversationLogger) => [\n    that._deps.messageStore.conversationStore,\n    that._deps.extensionInfo.extensionNumber,\n    that._deps.conversationMatcher.dataMapping,\n  ])\n  get conversationLogMap() {\n    const { conversationStore } = this._deps.messageStore;\n    const extensionNumber = this._deps.extensionInfo.extensionNumber!;\n    const conversationLogMapping =\n      this._deps.conversationMatcher.dataMapping ?? {};\n    const messages = Object.values(conversationStore).reduce(\n      (allMessages, messages) => [...allMessages, ...messages],\n      [],\n    );\n    const mapping: ConversationLogMap = {};\n    messages\n      .slice()\n      .sort(sortByDate)\n      .forEach((message) => {\n        const conversationId = message.conversationId!;\n        const date = this._formatDateTime({\n          type: 'date',\n          utcTimestamp: message.creationTime,\n        })!;\n\n        if (!mapping[conversationId]) {\n          mapping[conversationId] = {};\n        }\n\n        if (!mapping[conversationId][date]) {\n          const conversationLogId = this.getConversationLogId(message)!;\n\n          mapping[conversationId][date] = {\n            conversationLogId,\n            conversationId,\n            creationTime: message.creationTime!, // for sorting\n            date,\n            type: message.type,\n            messages: [],\n            conversationLogMatches:\n              conversationLogMapping[conversationLogId] || [],\n            // The reason for passing extensionNumber here is to filter the correspondence in the group conversation(type paper, and Only it has extensionNumber) that contains its own information.\n            ...getNumbersFromMessage({ extensionNumber, message }),\n          };\n        }\n\n        mapping[conversationId][date].messages.push(message);\n      });\n    return mapping;\n  }\n\n  @computed((that: ConversationLogger) => [that.conversationLogMap])\n  get conversationLogIds() {\n    const logIds: string[] = [];\n    Object.keys(this.conversationLogMap).forEach((conversationId) => {\n      Object.keys(this.conversationLogMap[conversationId]).forEach((date) => {\n        logIds.push(\n          this.conversationLogMap[conversationId][date].conversationLogId,\n        );\n      });\n    });\n    return logIds;\n  }\n\n  @computed((that: ConversationLogger) => [that.conversationLogMap])\n  get uniqueNumbers() {\n    const output: string[] = [];\n    const numberMap: Record<string, boolean> = {};\n    function addIfNotExist(contact: Correspondent = {}) {\n      const number = contact.phoneNumber || contact.extensionNumber;\n      if (number && !numberMap[number]) {\n        output.push(number);\n        numberMap[number] = true;\n      }\n    }\n    Object.keys(this.conversationLogMap).forEach((conversationId) => {\n      Object.keys(this.conversationLogMap[conversationId]).forEach((date) => {\n        const conversation = this.conversationLogMap[conversationId][date];\n        addIfNotExist(conversation.self);\n        conversation.correspondents!.forEach(addIfNotExist);\n      });\n    });\n    return output;\n  }\n\n  getConversationLogId(message: Message) {\n    if (!message) {\n      return;\n    }\n    const conversationId = message.conversationId!;\n    const date = this._formatDateTime({\n      type: 'date',\n      utcTimestamp: message.creationTime,\n    })!;\n\n    return getLogId({\n      conversationId,\n      date,\n    });\n  }\n\n  get dataMapping() {\n    return this._deps.conversationMatcher.dataMapping;\n  }\n}\n"],"mappings":"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"}