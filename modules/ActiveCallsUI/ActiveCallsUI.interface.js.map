{"version":3,"file":"ActiveCallsUI.interface.js","names":[],"sources":["modules/ActiveCallsUI/ActiveCallsUI.interface.ts"],"sourcesContent":["import type { ComponentType } from 'react';\n\nimport type { Call } from '@ringcentral-integration/commons/interfaces/Call.interface';\nimport type { Entity } from '@ringcentral-integration/commons/interfaces/Entity.interface';\nimport type { ActiveCall } from '@ringcentral-integration/commons/interfaces/Presence.model';\nimport type {\n  NormalizedSession,\n  WebphoneSession,\n} from '@ringcentral-integration/commons/interfaces/Webphone.interface';\nimport type {\n  ActiveCallControl,\n  ActiveSession,\n} from '@ringcentral-integration/commons/modules/ActiveCallControl';\nimport type { AppFeatures } from '@ringcentral-integration/commons/modules/AppFeatures';\nimport type { Brand } from '@ringcentral-integration/commons/modules/Brand';\nimport type { HistoryCall } from '@ringcentral-integration/commons/modules/CallHistory';\nimport type { CallingSettings } from '@ringcentral-integration/commons/modules/CallingSettings';\nimport type { CallLogger } from '@ringcentral-integration/commons/modules/CallLogger';\nimport type { CallMonitor } from '@ringcentral-integration/commons/modules/CallMonitor';\nimport type {\n  ComposeText,\n  ToNumber,\n} from '@ringcentral-integration/commons/modules/ComposeText';\nimport type {\n  ConferenceCall,\n  Party,\n  PartyState,\n} from '@ringcentral-integration/commons/modules/ConferenceCall';\nimport type { ConnectivityMonitor } from '@ringcentral-integration/commons/modules/ConnectivityMonitor';\nimport type { ContactMatcher } from '@ringcentral-integration/commons/modules/ContactMatcher';\nimport type { ContactSearch } from '@ringcentral-integration/commons/modules/ContactSearch';\nimport type { Locale } from '@ringcentral-integration/commons/modules/Locale';\nimport type { RateLimiter } from '@ringcentral-integration/commons/modules/RateLimiter';\nimport type { RegionSettings } from '@ringcentral-integration/commons/modules/RegionSettings';\nimport type { AccountInfo } from '@ringcentral-integration/commons/modules/AccountInfo';\nimport type { ExtensionInfo } from '@ringcentral-integration/commons/modules/ExtensionInfo';\n\nimport type {\n  SwitchCallActiveCallParams,\n  Webphone,\n} from '@ringcentral-integration/commons/modules/Webphone';\n\nimport type { OnCreateContactOptions } from '../CallsListUI';\nimport type { ContactDetailsUI, RouteParams } from '../ContactDetailsUI';\nimport type { ModalUI } from '../ModalUI';\nimport type { ConfirmModalOptions } from '../ModalUI/ModalUI.interface';\nimport type { RouterInteraction } from '../RouterInteraction';\n\nexport interface Deps {\n  brand: Brand;\n  locale: Locale;\n  callMonitor: CallMonitor;\n  rateLimiter: RateLimiter;\n  contactSearch: ContactSearch;\n  regionSettings: RegionSettings;\n  contactMatcher: ContactMatcher;\n  callingSettings: CallingSettings;\n  routerInteraction: RouterInteraction;\n  appFeatures: AppFeatures;\n  connectivityMonitor: ConnectivityMonitor;\n  modalUI?: ModalUI;\n  webphone?: Webphone;\n  callLogger?: CallLogger;\n  composeText?: ComposeText;\n  conferenceCall?: ConferenceCall;\n  contactDetailsUI?: ContactDetailsUI;\n  activeCallControl?: ActiveCallControl;\n  accountInfo: AccountInfo;\n  extensionInfo: ExtensionInfo;\n}\n\nexport interface ActiveCallsContainerProps {\n  showContactDisplayPlaceholder?: boolean;\n  showRingoutCallControl?: boolean;\n  showSwitchCall?: boolean;\n  showTransferCall?: boolean;\n  showHoldOnOtherDevice?: boolean;\n  useV2: boolean;\n  useCallControl: boolean;\n  composeTextRoute?: string;\n  callCtrlRoute?: string;\n  onCreateContact: (options: OnCreateContactOptions) => void | Promise<void>;\n  onLogCall: (options: {\n    call: HistoryCall | ActiveCall;\n    contact: Entity;\n    redirect?: boolean;\n  }) => void;\n  isLoggedContact: (...args: any) => boolean;\n  onCallsEmpty: () => void;\n  onViewContact: (options: { contact: RouteParams }) => void;\n  showViewContact?: boolean;\n  getAvatarUrl: (...args: any) => string;\n}\n\n// TODO: move to new ActiveCallsPanel component\nexport interface ActiveCallsPanelProps {\n  currentLocale: string;\n  className?: string;\n  activeRingCalls: Call[];\n  activeOnHoldCalls: Call[];\n  activeCurrentCalls: Call[];\n  otherDeviceCalls: Call[];\n  areaCode: string;\n  countryCode: string;\n  brand: string;\n  showContactDisplayPlaceholder: boolean;\n  formatPhone: (phoneNumber: string) => void;\n  onClickToSms?: (\n    contact: ToNumber | { name: string; phoneNumber: string },\n    isDummyContact?: boolean,\n  ) => void;\n  onCreateContact: (options: OnCreateContactOptions) => void | Promise<void>;\n  outboundSmsPermission: boolean;\n  internalSmsPermission: boolean;\n  isLoggedContact: (...args: any) => boolean;\n  onLogCall: (options: {\n    call: HistoryCall | ActiveCall;\n    contact: Entity;\n    redirect?: boolean;\n  }) => void;\n  webphoneAnswer: (\n    sessionId: string,\n    telephonySessionId: string,\n    isHoldAndAnswer?: boolean,\n  ) => Promise<void>;\n  webphoneReject: (sessionId: string) => Promise<void>;\n  webphoneHangup: (\n    sessionId: string,\n    telephonySessionId: string,\n  ) => Promise<void> | void;\n  webphoneResume: (\n    sessionId: string,\n    telephonySessionId: string,\n  ) => Promise<void> | void;\n  webphoneToVoicemail: (\n    sessionId: string,\n    telephonySessionId: string,\n  ) => Promise<void>;\n  webphoneSwitchCall: (\n    activeCall: SwitchCallActiveCallParams | ActiveSession,\n  ) => Promise<WebphoneSession | void>;\n  webphoneIgnore: (telephonySessionId: string) => Promise<void> | void;\n  modalConfirm: (options: ConfirmModalOptions) => string;\n  modalClose: (id: string) => boolean;\n  autoLog: boolean;\n  onViewContact: (options: { contact: RouteParams }) => void;\n  enableContactFallback?: boolean;\n  loggingMap?: any;\n  onCallsEmpty: () => void;\n  sourceIcons?: Record<string, ComponentType>;\n  phoneTypeRenderer?: () => void;\n  phoneSourceNameRenderer?: () => void;\n  isWebRTC: boolean;\n  showSpinner: boolean;\n  isSessionAConferenceCall: (sessionId: string) => boolean;\n  onCallItemClick: (call: Call) => void;\n  getAvatarUrl: (...args: any) => string;\n  conferenceCallParties: (Party & PartyState)[] | null;\n  webphoneHold: (\n    sessionId: string,\n    telephonySessionId: string,\n  ) => Promise<any> | void;\n  useV2: boolean;\n  updateSessionMatchedContact: Webphone['updateSessionMatchedContact'];\n  isOnHold: (Session: NormalizedSession) => boolean;\n  // CallLog related\n  currentLog?: { call: Call; logName: string };\n  renderEditLogSection?: () => void;\n  renderSaveLogButton?: () => void;\n  renderExtraButton?: () => void;\n  onSaveCallLog?: () => void;\n  onUpdateCallLog?: () => void;\n  onCloseLogSection?: () => void;\n  // - Notification\n  logNotification?: any;\n  onCloseNotification?: () => void;\n  onDiscardNotification?: () => void;\n  onSaveNotification?: () => void;\n  onExpandNotification?: () => void;\n  showNotiLogButton?: boolean;\n  notificationContainerStyles?: string;\n  // Contact\n  showAvatar?: boolean;\n  renderContactName?: (call: Call) => string;\n  showOtherDevice?: boolean;\n  ringoutHangup: (telephonySessionId: string) => Promise<void> | void;\n  ringoutTransfer: (sessionId: string) => void;\n  ringoutReject: (sessionId: string) => Promise<void> | void;\n  disableLinks: boolean;\n  showRingoutCallControl: boolean;\n  showMultipleMatch?: boolean;\n  showSwitchCall: boolean;\n  showTransferCall: boolean;\n  showHoldOnOtherDevice: boolean;\n  onLogBasicInfoClick?: () => void;\n  renderSmallCallContrl?: () => void;\n  // customization\n  showCallDetail?: boolean;\n  showIgnoreBtn?: boolean;\n  showHoldAnswerBtn?: boolean;\n  useCallDetailV2?: boolean;\n  newCallIcon?: boolean;\n  useCallControl: boolean;\n  clickSwitchTrack: () => void;\n  isWide: boolean;\n  allCalls: Call[];\n}\n"],"mappings":""}