{"version":3,"file":"Auth.interface.js","names":[],"sources":["modules/Auth/Auth.interface.ts"],"sourcesContent":["import type BaseTokenInfo from '@rc-ex/core/lib/definitions/TokenInfo';\nimport type { LoginUrlOptions as SdkLoginUrlOptions } from '@ringcentral/sdk';\n\nimport type { RingCentralClient } from '../../lib/RingCentralClient';\nimport type { Alert } from '../Alert';\nimport type { Environment } from '../Environment';\nimport type { Locale } from '../Locale';\nimport type { RateLimiter } from '../RateLimiter';\nimport type { TabManager } from '../TabManager';\n\nexport interface TokenInfo extends BaseTokenInfo {\n  expire_time?: number;\n  refresh_token_expire_time?: number;\n}\n\nexport interface Token {\n  ownerId?: TokenInfo['owner_id'];\n  endpointId?: TokenInfo['endpoint_id'];\n  accessToken?: TokenInfo['access_token'];\n  tokenType?: TokenInfo['token_type'];\n  expireTime?: TokenInfo['expire_time'];\n  expiresIn?: TokenInfo['expires_in'];\n  scope?: TokenInfo['scope'];\n  refresh_token_expire_time?: TokenInfo['refresh_token_expire_time'];\n}\n\nexport interface AuthOptions {\n  usePKCE?: boolean;\n}\n\nexport interface Deps {\n  client: RingCentralClient;\n  alert: Alert;\n  locale: Locale;\n  tabManager?: TabManager;\n  environment?: Environment;\n  authOptions?: AuthOptions;\n  rateLimiter?: RateLimiter;\n}\n\nexport interface LoginOptions {\n  username: string;\n  password: string;\n  extension: string;\n  remember: boolean | number;\n  code: string;\n  redirectUri: string;\n  accessToken: TokenInfo['access_token'];\n  expiresIn: TokenInfo['expires_in'];\n  endpointId: TokenInfo['endpoint_id'];\n  tokenType: TokenInfo['token_type'];\n  scope: TokenInfo['scope'];\n  tokenUri: string;\n  discoveryUri: string;\n}\n\nexport interface LoginUrlOptions extends SdkLoginUrlOptions {\n  redirectUri?: string;\n  force?: boolean;\n}\n\nexport interface BeforeLogoutHandler {\n  (): Promise<unknown | void> | unknown | void;\n}\n\nexport interface AfterLoggedInHandler {\n  (): void;\n}\n\nexport interface RefreshErrorHandler {\n  (refreshTokenValid: boolean): Promise<void> | void;\n}\n"],"mappings":"","ignoreList":[]}