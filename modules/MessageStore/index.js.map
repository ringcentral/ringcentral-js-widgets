{"version":3,"sources":["modules/MessageStore/index.ts"],"names":["DEFAULT_CONVERSATIONS_LOAD_LENGTH","DEFAULT_CONVERSATION_LOAD_LENGTH","DEFAULT_TTL","DEFAULT_REFRESH_LOCK","DEFAULT_RETRY","DEFAULT_DAYSPAN","DEFAULT_MESSAGES_FILTER","list","UPDATE_MESSAGE_ONCE_COUNT","getSyncParams","recordCount","conversationLoadLength","dateFrom","dateTo","syncToken","syncType","syncTypes","iSync","params","recordCountPerConversation","fSync","toISOString","MessageStore","deps","dep","optional","auth","alert","client","subscription","storage","tabManager","appFeatures","connectivityMonitor","availabilityMonitor","ttl","refreshLock","polling","disableCache","timeToRetry","daySpan","conversationsLoadLength","messagesFilter","options","actionTypes","_debouncedSetConversationAsRead","_setConversationAsRead","_auth","ensureExist","call","_alert","_client","_subscription","_appFeatures","_storage","_dataStorageKey","_tabManager","_connectivityMonitor","_availabilityMonitor","_ttl","_refreshLock","_timeToRetry","_polling","_conversationsLoadLength","_conversationLoadLength","_messagesFilter","_daySpan","_reducer","registerReducer","key","reducer","data","_promise","_lastSubscriptionMessage","_newInboundMessageNotificationHandlers","_messageUpdatedHandlers","_dispatchedMessageIds","store","subscribe","_onStateChange","_shouldInit","_init","_isDataReady","_connectivity","connectivity","dispatch","type","initSuccess","_shouldReset","_clearTimeout","resetSuccess","ready","_subscriptionHandler","_checkConnectivity","loggedIn","pending","status","moduleStatuses","initializing","_hasPermission","syncInfo","init","_shouldFetch","fetchData","console","error","_retry","_startPolling","subscriptionFilters","messageStore","active","timestamp","Date","now","accountExtensionEndPoint","message","test","event","body","changes","passive","receivedRecordsLength","account","extension","messageSync","records","length","olderRecordsExist","olderDateTo","creationTime","_syncFunction","olderRecordResult","concat","conversationsISyncSuccess","conversationsFSyncSuccess","conversationsSync","ownerId","setDate","getDate","actionType","getSyncActionType","conversationStore","_dispatchMessageHandlers","conversationsSyncError","_syncData","t","_timeoutId","setTimeout","pageNumber","_fetchData","handler","push","slice","sort","a","b","getTime","record","id","direction","availability","messageStatus","readStatus","lastModifiedTime","_messageDispatched","forEach","some","m","updateMessages","pushMessages","messageId","put","updateRequest","response","conversationIds","Object","keys","messages","reduce","acc","messageIds","map","item","sliceConversations","ids","decodeURIComponent","join","platform","service","url","responses","allMessageIds","results","index","nextLength","_updateMessageApi","result","leftIds","_batchUpdateMessagesApi","Promise","all","res","json","conversationId","messageList","unreadMessageIds","filter","messageHelper","messageIsUnread","_updateMessagesApi","updatedMessages","checkIfHAError","warning","messageStoreErrors","readFailed","markMessages","unreadFailed","deleteMessageApi","deleteConversation","deleteFailed","clickToSMS","fromType","clickToCall","state","getItem","hasReadMessagesPermission","Pollable","proxify","selector","conversationList","conversationItem","unreadCounts","allConversations","conversations","conversation","messageIsTextMessage","textConversations","messageIsFax","faxMessages","messageIsVoicemail","voicemailMessages","voiceUnreadCounts","textUnreadCounts","faxUnreadCounts","hasReadTextPermission","hasVoicemailPermission","hasReadFaxPermission"],"mappings":"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","sourcesContent":["import moduleStatuses from '../../enums/moduleStatuses';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport syncTypes from '../../enums/syncTypes';\nimport { batchPutApi } from '../../lib/batchApiHelper';\nimport debounce from '../../lib/debounce';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport * as messageHelper from '../../lib/messageHelper';\nimport Pollable from '../../lib/Pollable';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\nimport { sleep } from '../../lib/sleep';\nimport { actionTypes } from './actionTypes';\nimport messageStoreErrors from './errors';\nimport getDataReducer from './getDataReducer';\nimport getReducer from './getReducer';\n\nconst DEFAULT_CONVERSATIONS_LOAD_LENGTH = 10;\nconst DEFAULT_CONVERSATION_LOAD_LENGTH = 100;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_REFRESH_LOCK = 5 * 60 * 1000;\nconst DEFAULT_RETRY = 62 * 1000;\nconst DEFAULT_DAYSPAN = 7; // default to load 7 days' messages\nconst DEFAULT_MESSAGES_FILTER = (list) => list;\n// Number of messages to be updated in one time\nconst UPDATE_MESSAGE_ONCE_COUNT = 20;\n\nfunction getSyncParams({\n  recordCount,\n  conversationLoadLength,\n  dateFrom,\n  dateTo,\n  syncToken,\n}) {\n  if (syncToken) {\n    return {\n      syncToken,\n      syncType: syncTypes.iSync,\n    };\n  }\n  const params = {\n    recordCountPerConversation: conversationLoadLength,\n    syncType: syncTypes.fSync,\n  };\n  if (recordCount) {\n    params.recordCount = recordCount;\n  }\n  if (dateFrom) {\n    params.dateFrom = dateFrom.toISOString();\n  }\n  if (dateTo) {\n    params.dateTo = dateTo.toISOString();\n  }\n  return params;\n}\n\n/**\n * @class\n\n * @description Messages data managing module\n * fetch conversations\n * handle new message subscription\n */\n@Module({\n  deps: [\n    'Alert',\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'AppFeatures',\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'MessageStoreOptions', optional: true },\n  ],\n})\nexport default class MessageStore extends Pollable {\n  constructor({\n    auth,\n    alert,\n    client,\n    subscription,\n    storage,\n    tabManager,\n    appFeatures,\n    connectivityMonitor,\n    availabilityMonitor,\n    ttl = DEFAULT_TTL,\n    refreshLock = DEFAULT_REFRESH_LOCK,\n    polling = false,\n    disableCache = false,\n    timeToRetry = DEFAULT_RETRY,\n    daySpan = DEFAULT_DAYSPAN,\n    conversationsLoadLength = DEFAULT_CONVERSATIONS_LOAD_LENGTH,\n    conversationLoadLength = DEFAULT_CONVERSATION_LOAD_LENGTH,\n    messagesFilter = DEFAULT_MESSAGES_FILTER,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n\n    this._auth = ensureExist.call(this, auth, 'auth');\n    this._alert = ensureExist.call(this, alert, 'alert');\n    this._client = ensureExist.call(this, client, 'client');\n    this._subscription = ensureExist.call(this, subscription, 'subscription');\n    this._appFeatures = appFeatures;\n\n    if (!disableCache) {\n      this._storage = storage;\n    }\n\n    this._dataStorageKey = 'messageStoreData';\n\n    this._tabManager = tabManager;\n    this._connectivityMonitor = connectivityMonitor;\n    this._availabilityMonitor = availabilityMonitor;\n    this._ttl = ttl;\n    this._refreshLock = refreshLock;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._conversationsLoadLength = conversationsLoadLength;\n    this._conversationLoadLength = conversationLoadLength;\n    this._messagesFilter = messagesFilter;\n\n    this._daySpan = daySpan;\n\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._dataStorageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes, false),\n      });\n    }\n\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    // setting up event handlers for message\n    this._newInboundMessageNotificationHandlers = [];\n    this._messageUpdatedHandlers = [];\n    this._dispatchedMessageIds = [];\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      await this._init();\n    } else if (this._isDataReady()) {\n      /**\n       * When there is cached data, triggering init will immediately trigger initSuccess.\n       * This causes the code to run this._checkConnectivity() before initializing\n       * this._connectivity, forcing the the module to always run sync on app restart.\n       * Moving the this._connectivity initializating just before initSuccess ensure\n       * that this._checkConnectivity is only run when this._connectivity has been set.\n       */\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (this.ready) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this._subscription.ready &&\n      this._appFeatures.ready &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return !!(\n      (!this._auth.loggedIn ||\n        (this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._connectivityMonitor && !this._connectivityMonitor.ready) ||\n        !this._appFeatures.ready ||\n        (this._tabManager && !this._tabManager.ready) ||\n        (this._availabilityMonitor && !this._availabilityMonitor.ready)) &&\n      this.ready\n    );\n  }\n\n  _isDataReady() {\n    return (\n      this.status === moduleStatuses.initializing &&\n      (!this._hasPermission || this.syncInfo !== null)\n    );\n  }\n\n  async _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (!this._hasPermission) {\n      return;\n    }\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        console.error('fetchData error:', e);\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    this._subscription.subscribe([subscriptionFilters.messageStore]);\n  }\n\n  _shouldFetch() {\n    return (\n      (!this._tabManager || this._tabManager.active) &&\n      (!this.timestamp || Date.now() - this.timestamp > this.refreshLock)\n    );\n  }\n\n  _subscriptionHandler() {\n    if (this._storage && this._tabManager && !this._tabManager.active) {\n      return;\n    }\n    const accountExtensionEndPoint = /\\/message-store$/;\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      accountExtensionEndPoint.test(message.event) &&\n      message.body &&\n      message.body.changes\n    ) {\n      this._lastSubscriptionMessage = this._subscription.message;\n      this.fetchData({ passive: true });\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  async _syncFunction({\n    recordCount,\n    conversationLoadLength,\n    dateFrom,\n    dateTo,\n    syncToken,\n    receivedRecordsLength = 0,\n  }) {\n    const params = getSyncParams({\n      recordCount,\n      conversationLoadLength,\n      dateFrom,\n      dateTo,\n      syncToken,\n    });\n    const { records, syncInfo } = await this._client\n      .account()\n      .extension()\n      .messageSync()\n      .list(params);\n    receivedRecordsLength += records.length;\n    if (!syncInfo.olderRecordsExist || receivedRecordsLength >= recordCount) {\n      return { records, syncInfo };\n    }\n    await sleep(500);\n    const olderDateTo = new Date(records[records.length - 1].creationTime);\n    const olderRecordResult = await this._syncFunction({\n      conversationLoadLength,\n      dateFrom,\n      dateTo: olderDateTo,\n    });\n    return {\n      records: records.concat(olderRecordResult.records),\n      syncInfo,\n    };\n  }\n\n  getSyncActionType({ syncToken }) {\n    if (syncToken) {\n      return this.actionTypes.conversationsISyncSuccess;\n    }\n    return this.actionTypes.conversationsFSyncSuccess;\n  }\n\n  async _syncData({\n    dateTo,\n    conversationsLoadLength = this._conversationsLoadLength,\n    conversationLoadLength = this._conversationLoadLength,\n    passive = false,\n  } = {}) {\n    this.store.dispatch({\n      type: this.actionTypes.conversationsSync,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const dateFrom = new Date();\n      dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n      let syncToken = dateTo ? null : this.syncInfo && this.syncInfo.syncToken;\n      const recordCount = conversationsLoadLength * conversationLoadLength;\n      let data;\n      try {\n        data = await this._syncFunction({\n          recordCount,\n          conversationLoadLength,\n          dateFrom,\n          syncToken,\n          dateTo,\n        });\n      } catch (error) {\n        if (\n          error &&\n          (error.message === 'Parameter [syncToken] value is invalid' ||\n            error.message === 'Parameter [syncToken] is invalid')\n        ) {\n          data = await this._syncFunction({\n            recordCount,\n            conversationLoadLength,\n            dateFrom,\n            syncToken: null,\n            dateTo,\n          });\n          syncToken = null;\n        } else {\n          throw error;\n        }\n      }\n      if (this._auth.ownerId === ownerId) {\n        const actionType = this.getSyncActionType({ dateTo, syncToken });\n        this.store.dispatch({\n          type: actionType,\n          recordCount,\n          records: this._messagesFilter(data.records),\n          syncInfo: data.syncInfo,\n          timestamp: Date.now(),\n          conversationStore: this.conversationStore,\n        });\n        // this is only executed in passive sync mode (aka. invoked by subscription)\n        if (passive) {\n          this._dispatchMessageHandlers(this._messagesFilter(data.records));\n        }\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        console.error(error);\n        this.store.dispatch({\n          type: this.actionTypes.conversationsSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n\n  async _fetchData({\n    dateTo,\n    conversationsLoadLength,\n    conversationLoadLength,\n    passive = false,\n  } = {}) {\n    try {\n      await this._syncData({\n        dateTo,\n        conversationsLoadLength,\n        conversationLoadLength,\n        passive,\n      });\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = this.timestamp + this.ttl + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (\n        (!this._tabManager || this._tabManager.active) &&\n        this.pageNumber === 1\n      ) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  @proxify\n  async fetchData({ passive = false } = {}) {\n    if (!this._promise) {\n      this._promise = this._fetchData({ passive });\n    }\n    await this._promise;\n  }\n\n  onNewInboundMessage(handler) {\n    if (typeof handler === 'function') {\n      this._newInboundMessageNotificationHandlers.push(handler);\n    }\n  }\n\n  onMessageUpdated(handler) {\n    if (typeof handler === 'function') {\n      this._messageUpdatedHandlers.push(handler);\n    }\n  }\n\n  /**\n   * Dispatch events to different handlers\n   */\n  _dispatchMessageHandlers(records) {\n    // Sort all records by creation time\n    records = records\n      .slice()\n      .sort(\n        (a, b) =>\n          new Date(a.creationTime).getTime() -\n          new Date(b.creationTime).getTime(),\n      );\n    for (const record of records) {\n      const {\n        id,\n        direction,\n        availability,\n        messageStatus,\n        readStatus,\n        lastModifiedTime,\n        creationTime,\n      } = record || {};\n      // Notify when new message incoming\n      // fix mix old messages and new messages logic error.\n      if (!this._messageDispatched(record)) {\n        // Mark last 10 messages that dispatched\n        // To present dispatching same record twice\n        this._dispatchedMessageIds = [{ id, lastModifiedTime }]\n          .concat(this._dispatchedMessageIds)\n          .slice(0, 20);\n        this._messageUpdatedHandlers.forEach((handler) => handler(record));\n        // For new inbound message notification\n        if (\n          direction === 'Inbound' &&\n          readStatus === 'Unread' &&\n          messageStatus === 'Received' &&\n          availability === 'Alive' &&\n          new Date(creationTime).getTime() >\n            new Date(lastModifiedTime).getTime() - 600 * 1000\n        ) {\n          this._newInboundMessageNotificationHandlers.forEach((handler) =>\n            handler(record),\n          );\n        }\n      }\n    }\n  }\n\n  _messageDispatched(message) {\n    return this._dispatchedMessageIds.some(\n      (m) =>\n        m.id === message.id && m.lastModifiedTime === message.lastModifiedTime,\n    );\n  }\n\n  @proxify\n  async pushMessages(records) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      records,\n    });\n  }\n\n  pushMessage(record) {\n    this.pushMessages([record]);\n  }\n\n  async _updateMessageApi(messageId, status) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest = await this._client\n      .account()\n      .extension()\n      .messageStore(messageId)\n      .put(body);\n    return updateRequest;\n  }\n\n  async deleteMessageApi(messageId) {\n    const response = await this._client\n      .account()\n      .extension()\n      .messageStore(messageId)\n      .delete();\n    return response;\n  }\n\n  sliceConversations() {\n    const conversationIds = Object.keys(this.conversationStore);\n    const messages = conversationIds.reduce(\n      (acc, id) => acc.concat(this.conversationStore[id]),\n      [],\n    );\n    const messageIds = this._messagesFilter(messages).map((item) => item.id);\n    this.store.dispatch({\n      type: this.actionTypes.sliceConversations,\n      messageIds,\n    });\n  }\n\n  /**\n   * Batch update messages status\n   *\n   * @param {*} messageIds\n   * @param {*} body\n   * @returns\n   * @memberof MessageStore\n   */\n  async _batchUpdateMessagesApi(messageIds, body) {\n    // Not to request when there're no messages\n    if (!messageIds || messageIds.length === 0) {\n      return;\n    }\n\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._client.service.platform();\n    const responses = await batchPutApi({\n      platform,\n      url: `/restapi/v1.0/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  /**\n   * Change messages' status to `READ` or `UNREAD`.\n   * Update 20 messages per time with `_batchUpdateMessagesApi`,\n   * or `_updateMessageApi` one by one in recursion.\n   *\n   * @param {*} messageIds\n   * @param {*} status\n   * @returns\n   * @memberof MessageStore\n   */\n  async _updateMessagesApi(messageIds, status) {\n    const allMessageIds = messageIds;\n    if (!allMessageIds || allMessageIds.length === 0) {\n      return [];\n    }\n\n    const results = [];\n\n    for (let index = 0; ; index++) {\n      let nextLength = (index + 1) * UPDATE_MESSAGE_ONCE_COUNT;\n\n      if (nextLength > allMessageIds.length) {\n        nextLength = allMessageIds.length - index * UPDATE_MESSAGE_ONCE_COUNT;\n      } else {\n        nextLength = UPDATE_MESSAGE_ONCE_COUNT;\n      }\n\n      // If there's only one message, use another api to update its status\n      if (nextLength === 1) {\n        const result = await this._updateMessageApi(messageIds[0], status);\n        return [result];\n      }\n\n      const leftIds = allMessageIds.slice(\n        index * UPDATE_MESSAGE_ONCE_COUNT,\n        index * UPDATE_MESSAGE_ONCE_COUNT + nextLength,\n      );\n\n      const body = leftIds.map(() => ({ body: { readStatus: status } }));\n      const responses = await this._batchUpdateMessagesApi(leftIds, body);\n      await Promise.all(\n        responses.map(async (res) => {\n          if (res.status === 200) {\n            const result = await res.json();\n            results.push(result);\n          }\n        }),\n      );\n\n      const { ownerId } = this._auth;\n      if (allMessageIds.length > (index + 1) * UPDATE_MESSAGE_ONCE_COUNT) {\n        await sleep(1300);\n        // Check if owner ID has been changed. If it is, cancel this update.\n        if (ownerId !== this._auth.ownerId) {\n          return [];\n        }\n      } else {\n        break;\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Set message status to `READ`.\n   *\n   * @param {*} conversationId\n   * @returns\n   * @memberof MessageStore\n   */\n  @proxify\n  async readMessages(conversationId) {\n    this._debouncedSetConversationAsRead(conversationId);\n  }\n\n  _debouncedSetConversationAsRead = debounce(\n    this._setConversationAsRead,\n    500,\n    true,\n  );\n\n  async _setConversationAsRead(conversationId) {\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return null;\n    }\n    const unreadMessageIds = messageList\n      .filter(messageHelper.messageIsUnread)\n      .map((m) => m.id);\n    if (unreadMessageIds.length === 0) {\n      return null;\n    }\n    try {\n      const { ownerId } = this._auth;\n      const updatedMessages = await this._updateMessagesApi(\n        unreadMessageIds,\n        'Read',\n      );\n\n      if (ownerId !== this._auth.ownerId) {\n        return;\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: updatedMessages,\n      });\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: messageStoreErrors.readFailed });\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Set message status to `UNREAD`.\n   *\n   * @param {*} conversationId\n   * @returns\n   * @memberof MessageStore\n   */\n  @proxify\n  async unreadMessage(messageId) {\n    //  for track mark message\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n    try {\n      const message = await this._updateMessageApi(messageId, 'Unread');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: [message],\n      });\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: messageStoreErrors.unreadFailed });\n      }\n    }\n  }\n\n  @proxify\n  async onUnmarkMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n  }\n\n  @proxify\n  async deleteConversationMessages(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return;\n    }\n    const messageId = messageList.map((m) => m.id).join(',');\n    try {\n      await this.deleteMessageApi(messageId);\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: messageStoreErrors.deleteFailed });\n      }\n    }\n  }\n\n  @proxify\n  async deleteConversation(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    try {\n      await this._client.account().extension().messageStore().delete({\n        conversationId,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._alert.warning({ message: messageStoreErrors.deleteFailed });\n      }\n    }\n  }\n\n  // for track click to sms in message list\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS,\n    });\n  }\n\n  // for track click to call in message list\n  @proxify\n  onClickToCall({ fromType = '' }) {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n      fromType,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get data() {\n    return this._storage\n      ? this._storage.getItem(this._dataStorageKey)\n      : this.state.data;\n  }\n\n  get timestamp() {\n    return this.data && this.data.timestamp;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get refreshLock() {\n    return this._refreshLock;\n  }\n\n  get syncInfo() {\n    return this.data && this.data.syncInfo;\n  }\n\n  get conversationStore() {\n    return this.data && this.data.conversationStore;\n  }\n\n  get _hasPermission() {\n    return this._appFeatures.hasReadMessagesPermission;\n  }\n\n  @selector\n  allConversations = [\n    () => this.data && this.data.conversationList,\n    () => this.conversationStore,\n    (conversationList = [], conversationStore) =>\n      conversationList.map((conversationItem) => {\n        const messageList = conversationStore[conversationItem.id] || [];\n        return {\n          ...messageList[0],\n          unreadCounts: messageList.filter(messageHelper.messageIsUnread)\n            .length,\n        };\n      }),\n  ];\n\n  @selector\n  textConversations = [\n    () => this.allConversations,\n    (conversations) =>\n      conversations.filter((conversation) =>\n        messageHelper.messageIsTextMessage(conversation),\n      ),\n  ];\n\n  @selector\n  textUnreadCounts = [\n    () => this.textConversations,\n    (conversations) => conversations.reduce((a, b) => a + b.unreadCounts, 0),\n  ];\n\n  @selector\n  faxMessages = [\n    () => this.allConversations,\n    (conversations) =>\n      conversations.filter((conversation) =>\n        messageHelper.messageIsFax(conversation),\n      ),\n  ];\n\n  @selector\n  faxUnreadCounts = [\n    () => this.faxMessages,\n    (conversations) => conversations.reduce((a, b) => a + b.unreadCounts, 0),\n  ];\n\n  @selector\n  voicemailMessages = [\n    () => this.allConversations,\n    (conversations) =>\n      conversations.filter((conversation) =>\n        messageHelper.messageIsVoicemail(conversation),\n      ),\n  ];\n\n  @selector\n  voiceUnreadCounts = [\n    () => this.voicemailMessages,\n    (conversations) => conversations.reduce((a, b) => a + b.unreadCounts, 0),\n  ];\n\n  @selector\n  unreadCounts = [\n    () => this.voiceUnreadCounts,\n    () => this.textUnreadCounts,\n    () => this.faxUnreadCounts,\n    (voiceUnreadCounts, textUnreadCounts, faxUnreadCounts) => {\n      let unreadCounts = 0;\n      if (this._appFeatures.hasReadTextPermission) {\n        unreadCounts += textUnreadCounts;\n      }\n      if (this._appFeatures.hasVoicemailPermission) {\n        unreadCounts += voiceUnreadCounts;\n      }\n      if (this._appFeatures.hasReadFaxPermission) {\n        unreadCounts += faxUnreadCounts;\n      }\n      return unreadCounts;\n    },\n  ];\n}\n"],"file":"index.js"}