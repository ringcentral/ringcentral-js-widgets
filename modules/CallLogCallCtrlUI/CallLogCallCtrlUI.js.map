{"version":3,"sources":["modules/CallLogCallCtrlUI/CallLogCallCtrlUI.ts"],"names":["CallLogCallCtrlUI","name","deps","_onTransfer","telephonySessionId","_deps","activeCallControl","clickTransferTrack","routerInteraction","push","isWebphone","callingSettings","callingMode","callingModes","webphone","currentSession","getActiveSession","realOutboundCallStatus","getSession","otherParties","status","code","callMonitor","activeOnHoldCalls","activeCurrentCalls","otherActiveCalls","concat","filter","call","sessionId","length","disableLinks","connectivityMonitor","connectivity","rateLimiter","throttling","forwardingNumbers","forwardingNumber","mute","bind","unmute","hangUp","reject","onHold","hold","onUnHold","unhold","startRecord","stopRecord","onTransfer","sendDTMF","dtmfValue","answer","forward","phoneNumber","ignore","answerAndHold","answerAndEnd","dialpadToggleTrack","open","dialpadOpenTrack","dialpadCloseTrack","clickForwardTrack","RcUIModuleV2"],"mappings":"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","sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport callingModes from '@ringcentral-integration/commons/modules/CallingSettings/callingModes';\nimport {\n  RcUIModuleV2,\n  UIFunctions,\n  UIProps,\n} from '@ringcentral-integration/core';\n\nimport {\n  CallLogCallCtrlContainerProps,\n  CallLogCallCtrlPanelProps,\n  Deps,\n} from './CallLogCallCtrlUI.interface';\n\n@Module({\n  name: 'CallLogCallCtrlUI',\n  deps: [\n    'ActiveCallControl',\n    'ConnectivityMonitor',\n    'RateLimiter',\n    'RouterInteraction',\n    'CallingSettings',\n    'ForwardingNumber',\n    'CallMonitor',\n    'ExtensionFeatures',\n  ],\n})\nclass CallLogCallCtrlUI extends RcUIModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({ deps });\n  }\n\n  private _onTransfer = (telephonySessionId: string) => {\n    this._deps.activeCallControl.clickTransferTrack();\n    return this._deps.routerInteraction.push(\n      `/transfer/${telephonySessionId}/active`,\n    );\n  };\n\n  getUIProps({\n    telephonySessionId,\n  }: CallLogCallCtrlContainerProps): UIProps<CallLogCallCtrlPanelProps> {\n    const isWebphone =\n      this._deps.callingSettings.callingMode === callingModes.webphone;\n    const currentSession =\n      this._deps.activeCallControl.getActiveSession(telephonySessionId);\n    // we can get real callee call status from telephony session\n    const realOutboundCallStatus: string =\n      this._deps.activeCallControl?.getSession(telephonySessionId)\n        ?.otherParties[0]?.status?.code;\n    const { activeOnHoldCalls, activeCurrentCalls } = this._deps.callMonitor;\n    const otherActiveCalls =\n      currentSession &&\n      !!activeOnHoldCalls\n        .concat(activeCurrentCalls)\n        .filter((call: any) => call.sessionId !== currentSession.sessionId)\n        .length;\n    return {\n      isWebphone,\n      currentSession,\n      disableLinks:\n        !this._deps.connectivityMonitor.connectivity ||\n        this._deps.rateLimiter.throttling,\n      telephonySessionId,\n      forwardingNumbers: this._deps.forwardingNumber.forwardingNumbers,\n      otherActiveCalls,\n      realOutboundCallStatus,\n    };\n  }\n\n  getUIFunctions(): UIFunctions<CallLogCallCtrlPanelProps> {\n    return {\n      mute: this._deps.activeCallControl.mute.bind(\n        this._deps.activeCallControl,\n      ),\n      unmute: this._deps.activeCallControl.unmute.bind(\n        this._deps.activeCallControl,\n      ),\n      hangUp: this._deps.activeCallControl.hangUp.bind(\n        this._deps.activeCallControl,\n      ),\n      reject: this._deps.activeCallControl.reject.bind(\n        this._deps.activeCallControl,\n      ),\n      onHold: this._deps.activeCallControl.hold.bind(\n        this._deps.activeCallControl,\n      ),\n      onUnHold: this._deps.activeCallControl.unhold.bind(\n        this._deps.activeCallControl,\n      ),\n      startRecord: this._deps.activeCallControl.startRecord.bind(\n        this._deps.activeCallControl,\n      ),\n      stopRecord: this._deps.activeCallControl.stopRecord.bind(\n        this._deps.activeCallControl,\n      ),\n      onTransfer: this._onTransfer,\n      sendDTMF: (dtmfValue, telephonySessionId) =>\n        this._deps.activeCallControl.sendDTMF(dtmfValue, telephonySessionId),\n      answer: this._deps.activeCallControl.answer.bind(\n        this._deps.activeCallControl,\n      ),\n      forward: (phoneNumber, telephonySessionId) => {\n        if (phoneNumber === 'custom') {\n          this._deps.routerInteraction.push(`/forward/${telephonySessionId}`);\n        } else {\n          this._deps.activeCallControl.forward.call(\n            this._deps.activeCallControl,\n            phoneNumber,\n            telephonySessionId,\n          );\n        }\n      },\n      ignore: this._deps.activeCallControl.ignore.bind(\n        this._deps.activeCallControl,\n      ),\n      answerAndHold: this._deps.activeCallControl.answerAndHold.bind(\n        this._deps.activeCallControl,\n      ),\n      answerAndEnd: this._deps.activeCallControl.answerAndEnd.bind(\n        this._deps.activeCallControl,\n      ),\n      dialpadToggleTrack: (open) => {\n        if (open) {\n          this._deps.activeCallControl.dialpadOpenTrack();\n        } else {\n          this._deps.activeCallControl.dialpadCloseTrack();\n        }\n      },\n      clickForwardTrack: this._deps.activeCallControl.clickForwardTrack.bind(\n        this._deps.activeCallControl,\n      ),\n    };\n  }\n}\n\nexport { CallLogCallCtrlUI };\n"],"file":"CallLogCallCtrlUI.js"}