{"version":3,"sources":["modules/DialerUI/index.ts"],"names":["TIMEOUT","DialerUI","name","deps","dep","optional","alert","audioSettings","call","callingSettings","conferenceCall","connectivityManager","contactSearch","locale","rateLimiter","regionSettings","extensionFeatures","useV2","options","_alert","_audioSettings","_call","_callingSettings","_conferenceCall","_connectivityManager","_contactSearch","_locale","_rateLimiter","_regionSettings","_extensionFeatures","_reducer","actionTypes","_useV2","_callHooks","_latestCallTime","store","dispatch","type","clearToNumberField","phoneNumber","fromDialPad","toNumberField","setToNumberField","length","debouncedSearch","searchString","recipient","shouldClean","setRecipient","clearRecipient","fromNumber","hook","Date","now","triggerHook","callVerify","continueCall","callSuccess","callError","error","lastRecipient","lastPhoneNumber","warning","message","callErrors","noToNumber","loadLastCallState","fromSessionId","trim","_loadLastPhoneNumber","_onBeforeCall","closeMergingPair","latestNumber","countryCode","areaCode","split","withTabs","dialButtonsClassName","currentLocale","callingMode","isWebphoneMode","callButtonDisabled","isCallButtonDisabled","fromNumbers","toNumber","recipients","searchContactList","showSpinner","dialButtonVolume","dialButtonMuted","isLastInputFromDialpad","disableFromField","showAnonymous","isShowAnonymous","phoneTypeRenderer","phoneSourceNameRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","onToNumberChange","clearToNumber","onCallButtonClick","changeFromNumber","updateFromNumber","formatPhone","searchContact","ObjectMap","prefixKeys","state","isIdle","isOfflineMode","isWebphoneUnavailableMode","isWebphoneInitializing","throttling","ready","features","EditOutboundCallerId","available","BlockingCallerId","RcUIModule","proxify","selector","sortedResult","slice"],"mappings":"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","sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport formatNumber from '@ringcentral-integration/commons/lib/formatNumber';\nimport normalizeNumber from '@ringcentral-integration/commons/lib/normalizeNumber';\nimport proxify from '@ringcentral-integration/commons/lib/proxy/proxify';\nimport { selector } from '@ringcentral-integration/commons/lib/selector';\nimport callErrors from '@ringcentral-integration/commons/modules/Call/callErrors';\nimport { ObjectMap } from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport RcUIModule from '../../lib/RcUIModule';\nimport getReducer from './getReducer';\n\nconst TIMEOUT = 60 * 1000;\n@Module({\n  name: 'DialerUI',\n  deps: [\n    'CallingSettings',\n    { dep: 'AudioSettings', optional: true },\n    'CallingSettings',\n    'ConnectivityManager',\n    { dep: 'ContactSearch', optional: true },\n    'Locale',\n    'RateLimiter',\n    'RegionSettings',\n    'Alert',\n    'Call',\n    'ExtensionFeatures',\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'DialerUIOptions', optional: true },\n  ],\n})\nexport default class DialerUI extends RcUIModule {\n  constructor({\n    alert,\n    audioSettings,\n    call,\n    callingSettings,\n    conferenceCall,\n    connectivityManager,\n    contactSearch,\n    locale,\n    rateLimiter,\n    regionSettings,\n    extensionFeatures,\n    useV2 = false,\n    ...options\n  }) {\n    super({\n      ...options,\n    });\n    this._alert = alert;\n    this._audioSettings = audioSettings;\n    this._call = call;\n    this._callingSettings = callingSettings;\n    this._conferenceCall = conferenceCall;\n    this._connectivityManager = connectivityManager;\n    this._contactSearch = contactSearch;\n    this._locale = locale;\n    this._rateLimiter = rateLimiter;\n    this._regionSettings = regionSettings;\n    this._extensionFeatures = extensionFeatures;\n    this._reducer = getReducer(this.actionTypes);\n    this._useV2 = useV2;\n    this._callHooks = [];\n    this._latestCallTime = 0;\n  }\n\n  get _actionTypes() {\n    return ObjectMap.prefixKeys(\n      [\n        'setToNumberField',\n        'clearToNumberField',\n        'setRecipient',\n        'clearRecipient',\n        'loadLastCallState',\n        'call',\n        'callError',\n        'callSuccess',\n      ],\n      'dialerUI',\n    );\n  }\n\n  @proxify\n  async clearToNumberField() {\n    this.store.dispatch({\n      type: this.actionTypes.clearToNumberField,\n    });\n  }\n\n  @proxify\n  async setToNumberField(phoneNumber, fromDialPad = false) {\n    if (this.toNumberField !== phoneNumber) {\n      this.store.dispatch({\n        type: this.actionTypes.setToNumberField,\n        phoneNumber,\n        fromDialPad,\n      });\n      if (\n        this._useV2 &&\n        this.toNumberField &&\n        this.toNumberField.length >= 3 &&\n        this._contactSearch\n      ) {\n        this._contactSearch.debouncedSearch({\n          searchString: this.toNumberField,\n        });\n      }\n    }\n  }\n\n  @proxify\n  async setRecipient(recipient, shouldClean = true) {\n    this.store.dispatch({\n      type: this.actionTypes.setRecipient,\n      recipient,\n    });\n    if (shouldClean) {\n      await this.clearToNumberField();\n    }\n  }\n\n  @proxify\n  async clearRecipient() {\n    this.store.dispatch({\n      type: this.actionTypes.clearRecipient,\n    });\n  }\n\n  async triggerHook({ phoneNumber = '', recipient = null, fromNumber = null }) {\n    for (const hook of this._callHooks) {\n      await hook({\n        phoneNumber,\n        recipient,\n        fromNumber,\n      });\n    }\n  }\n\n  @proxify\n  async call({ phoneNumber = '', recipient = null, fromNumber = null }) {\n    if (phoneNumber || recipient) {\n      this._latestCallTime = Date.now();\n      this.store.dispatch({\n        type: this.actionTypes.call,\n        phoneNumber,\n        recipient,\n      });\n      await this.triggerHook({ phoneNumber, recipient, fromNumber });\n      const continueCall = this.callVerify\n        ? await this.callVerify({ phoneNumber, recipient })\n        : true;\n      if (!continueCall) return;\n\n      try {\n        await this._call.call({\n          phoneNumber: this.toNumberField,\n          recipient: this.recipient,\n          fromNumber,\n        });\n        this.store.dispatch({\n          type: this.actionTypes.callSuccess,\n        });\n      } catch (error) {\n        this.store.dispatch({\n          type: this.actionTypes.callError,\n          error,\n        });\n      }\n    }\n  }\n\n  _loadLastPhoneNumber() {\n    if (!this._call.lastRecipient && !this._call.lastPhoneNumber) {\n      this._alert.warning({\n        message: callErrors.noToNumber,\n      });\n    } else {\n      this.store.dispatch({\n        type: this.actionTypes.loadLastCallState,\n        phoneNumber: this._call.lastPhoneNumber,\n        recipient: this._call.lastRecipient,\n      });\n    }\n  }\n\n  @proxify\n  async onCallButtonClick({ fromNumber, fromSessionId } = {}) {\n    if (`${this.toNumberField}`.trim().length === 0 && !this.recipient) {\n      this._loadLastPhoneNumber();\n    } else {\n      this._onBeforeCall(fromSessionId);\n      await this.call({\n        phoneNumber: this.toNumberField,\n        recipient: this.recipient,\n        fromNumber,\n      });\n    }\n  }\n\n  _onBeforeCall() {\n    if (this._conferenceCall) {\n      this._conferenceCall.closeMergingPair();\n    }\n  }\n\n  /**\n   * TODO: refactor with a better way to check if a call is placed by current device\n   * @param {\n   * } phoneNumber\n   * @returns boolean\n   *\n   * Check if a call is placed by current device, including call with browser, jupiter and ringcentral phone,\n   * and timeout 60s is for when call with ringcentral phone or jupiter we can't make sure the call is placed immediately\n   * so just in case other device make a call with same phone number when call from current device fail then we\n   * should not count it as current device call\n   */\n  isCallFromCurrentDevice(phoneNumber: string) {\n    let latestNumber = normalizeNumber({\n      phoneNumber:\n        this._call.lastPhoneNumber || this._call.lastRecipient?.phoneNumber,\n      countryCode: this._regionSettings.countryCode,\n      areaCode: this._regionSettings.areaCode,\n    });\n    // if call out with extension number then only match main company number\n    latestNumber = latestNumber && latestNumber.split('*')[0];\n    if (\n      latestNumber === phoneNumber &&\n      Date.now() - this._latestCallTime <= TIMEOUT\n    ) {\n      this._latestCallTime = 0;\n      return true;\n    }\n    return false;\n  }\n\n  get toNumberField() {\n    return this.state.toNumberField;\n  }\n\n  get recipient() {\n    return this.state.recipient;\n  }\n\n  @selector\n  recipients = [\n    () => this.recipient,\n    (recipient) => {\n      if (recipient) {\n        return [recipient];\n      }\n      return [];\n    },\n  ];\n\n  get isCallButtonDisabled() {\n    return (\n      !this._call.isIdle ||\n      this._connectivityManager.isOfflineMode ||\n      this._connectivityManager.isWebphoneUnavailableMode ||\n      this._connectivityManager.isWebphoneInitializing ||\n      this._rateLimiter.throttling\n    );\n  }\n\n  get showSpinner() {\n    return !(\n      this._call.ready &&\n      this._callingSettings.ready &&\n      this._locale.ready &&\n      this._extensionFeatures.ready &&\n      this._connectivityManager.ready &&\n      (!this._audioSettings || this._audioSettings.ready) &&\n      !this._connectivityManager.isWebphoneInitializing\n    );\n  }\n\n  @selector\n  searchContactList = [\n    () => this._contactSearch && this._contactSearch.sortedResult,\n    () => this.toNumberField,\n    (sortedResult, toNumberField) =>\n      (toNumberField.length >= 3 && sortedResult.slice(0, 50)) || [],\n  ];\n\n  get isLastInputFromDialpad() {\n    return this.state.isLastInputFromDialpad;\n  }\n\n  get disableFromField() {\n    return (\n      this._extensionFeatures.ready &&\n      !this._extensionFeatures.features?.EditOutboundCallerId?.available\n    );\n  }\n\n  get isShowAnonymous() {\n    return (\n      this._extensionFeatures.ready &&\n      this._extensionFeatures.features?.BlockingCallerId?.available\n    );\n  }\n\n  getUIProps({ withTabs, dialButtonsClassName } = {}) {\n    return {\n      withTabs,\n      dialButtonsClassName,\n      currentLocale: this._locale.currentLocale,\n      callingMode: this._callingSettings.callingMode,\n      isWebphoneMode: this._callingSettings.isWebphoneMode,\n      callButtonDisabled: this.isCallButtonDisabled,\n      fromNumber: this._callingSettings.fromNumber,\n      fromNumbers: this._callingSettings.fromNumbers,\n      toNumber: this.toNumberField,\n      recipient: this.recipient,\n      recipients: this.recipients,\n      searchContactList: this.searchContactList,\n      showSpinner: this.showSpinner,\n      dialButtonVolume: this._audioSettings\n        ? this._audioSettings.dialButtonVolume\n        : 1,\n      dialButtonMuted: this._audioSettings\n        ? this._audioSettings.dialButtonMuted\n        : false,\n      isLastInputFromDialpad: this.isLastInputFromDialpad,\n      disableFromField: this.disableFromField,\n      useV2: this._useV2,\n      showAnonymous: this.isShowAnonymous,\n    };\n  }\n\n  getUIFunctions({\n    phoneTypeRenderer,\n    phoneSourceNameRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n  } = {}) {\n    return {\n      phoneTypeRenderer,\n      phoneSourceNameRenderer,\n      recipientsContactInfoRenderer,\n      recipientsContactPhoneRenderer,\n      onToNumberChange: (...props) => this.setToNumberField(...props),\n      clearToNumber: () => this.clearToNumberField(),\n      onCallButtonClick: () => this.onCallButtonClick(),\n      changeFromNumber: (...args) =>\n        this._callingSettings.updateFromNumber(...args),\n      formatPhone: (phoneNumber) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: this._regionSettings.areaCode,\n          countryCode: this._regionSettings.countryCode,\n        }),\n      setRecipient: (recipient) => this.setRecipient(recipient),\n      clearRecipient: () => this.clearRecipient(),\n      searchContact: (searchString) =>\n        this._contactSearch &&\n        this._contactSearch.debouncedSearch({ searchString }),\n    };\n  }\n}\n"],"file":"index.js"}