{"version":3,"sources":["modules/DialerUI/DialerUI.ts"],"names":["TIMEOUT","DialerUI","name","deps","dep","optional","that","recipient","_deps","contactSearch","sortedResult","toNumberField","_latestCallTime","_callHooks","callVerify","val","isLastInputFromDialpad","_setToNumberField","phoneNumber","fromDialPad","resetState","dialerUIOptions","useV2","length","debouncedSearch","searchString","fromNumber","hook","Date","now","continueCall","triggerHook","call","console","log","lastPhoneNumber","lastRecipient","alert","warning","message","callErrors","noToNumber","_loadLastPhoneNumberAction","fromSessionId","trim","_loadLastPhoneNumber","_onBeforeCall","conferenceCall","closeMergingPair","latestNumber","countryCode","regionSettings","areaCode","split","currentLocale","locale","callingMode","callingSettings","isWebphoneMode","callButtonDisabled","isCallButtonDisabled","fromNumbers","toNumber","recipients","searchContactList","showSpinner","dialButtonVolume","audioSettings","dialButtonMuted","disableFromField","showAnonymous","isShowAnonymous","props","onToNumberChange","setToNumberField","clearToNumber","clearToNumberField","onCallButtonClick","changeFromNumber","updateFromNumber","formatPhone","setRecipient","clearRecipient","searchContact","slice","isIdle","connectivityManager","isOfflineMode","isWebphoneUnavailableMode","isWebphoneInitializing","rateLimiter","throttling","ready","extensionFeatures","features","EditOutboundCallerId","available","BlockingCallerId","RcUIModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport { formatNumber } from '@ringcentral-integration/commons/lib/formatNumber';\nimport { normalizeNumber } from '@ringcentral-integration/commons/lib/normalizeNumber';\nimport proxify from '@ringcentral-integration/commons/lib/proxy/proxify';\nimport callErrors from '@ringcentral-integration/commons/modules/Call/callErrors';\nimport { Recipient } from '@ringcentral-integration/commons/modules/CallV2/Call.interface';\nimport {\n  action,\n  computed,\n  RcUIModuleV2,\n  state,\n  UIFunctions,\n  UIProps,\n} from '@ringcentral-integration/core';\n\nimport { Deps, DialerUIPanelProps } from './DialerUI.interface';\n\nconst TIMEOUT = 60 * 1000;\n\nexport type DialerUICallParams<T = Recipient> = {\n  phoneNumber?: string;\n  recipient?: T;\n  fromNumber?: string;\n};\n\n@Module({\n  name: 'DialerUI',\n  deps: [\n    'CallingSettings',\n    'ConnectivityManager',\n    'Locale',\n    'RateLimiter',\n    'RegionSettings',\n    'Alert',\n    'Call',\n    'ExtensionFeatures',\n    { dep: 'AudioSettings', optional: true },\n    { dep: 'ContactSearch', optional: true },\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'DialerUIOptions', optional: true },\n  ],\n})\nexport class DialerUI<T extends Deps = Deps> extends RcUIModuleV2<T> {\n  _latestCallTime: number = 0;\n\n  _callHooks: ((params: DialerUICallParams) => Promise<void>)[] = [];\n\n  /**\n   * verify is that call can be continue before make call\n   */\n  protected callVerify?: (params: DialerUICallParams<any>) => Promise<boolean>;\n\n  constructor(deps: Deps & T) {\n    super({\n      deps,\n    });\n  }\n\n  @state\n  toNumberField = '';\n\n  @action\n  private _setToNumberField(val: string) {\n    this.toNumberField = val;\n  }\n  @state\n  isLastInputFromDialpad = false;\n\n  @action\n  setIsLastInputFromDialpad(val: boolean) {\n    this.isLastInputFromDialpad = val;\n  }\n\n  @state\n  recipient: Recipient = null;\n\n  @action\n  private _setRecipient(val: Recipient) {\n    this.recipient = val;\n  }\n\n  @computed((that: DialerUI<T>) => [that.recipient])\n  get recipients() {\n    if (this.recipient) {\n      return [this.recipient];\n    }\n    return [];\n  }\n\n  @computed((that: DialerUI<T>) => [\n    that._deps.contactSearch?.sortedResult,\n    that.toNumberField,\n  ])\n  get searchContactList() {\n    if (this.toNumberField.length < 3 || !this._deps.contactSearch) {\n      return [];\n    }\n\n    return this._deps.contactSearch.sortedResult.slice(0, 50);\n  }\n\n  get isCallButtonDisabled() {\n    return (\n      !this._deps.call.isIdle ||\n      this._deps.connectivityManager.isOfflineMode ||\n      this._deps.connectivityManager.isWebphoneUnavailableMode ||\n      this._deps.connectivityManager.isWebphoneInitializing ||\n      this._deps.rateLimiter.throttling\n    );\n  }\n\n  get showSpinner() {\n    return !(\n      this._deps.call.ready &&\n      this._deps.callingSettings.ready &&\n      this._deps.locale.ready &&\n      this._deps.extensionFeatures.ready &&\n      this._deps.connectivityManager.ready &&\n      (!this._deps.audioSettings || this._deps.audioSettings.ready) &&\n      !this._deps.connectivityManager.isWebphoneInitializing\n    );\n  }\n\n  get disableFromField() {\n    return (\n      this._deps.extensionFeatures.ready &&\n      !this._deps.extensionFeatures.features?.EditOutboundCallerId?.available\n    );\n  }\n\n  get isShowAnonymous() {\n    return (\n      this._deps.extensionFeatures.ready &&\n      this._deps.extensionFeatures.features?.BlockingCallerId?.available\n    );\n  }\n\n  @action\n  resetState(\n    {\n      toNumberField,\n      isLastInputFromDialpad,\n      recipient,\n    }: Pick<\n      DialerUI,\n      'toNumberField' | 'isLastInputFromDialpad' | 'recipient'\n    > = {\n      toNumberField: '',\n      isLastInputFromDialpad: false,\n      recipient: null,\n    },\n  ) {\n    this.toNumberField = toNumberField;\n    this.isLastInputFromDialpad = isLastInputFromDialpad;\n    this.recipient = recipient;\n  }\n\n  @proxify\n  async clearToNumberField() {\n    this._setToNumberField('');\n  }\n\n  @proxify\n  async setToNumberField(phoneNumber: string, fromDialPad = false) {\n    if (this.toNumberField !== phoneNumber) {\n      this.resetState({\n        toNumberField: phoneNumber,\n        isLastInputFromDialpad: fromDialPad,\n        recipient: this.recipient,\n      });\n\n      if (\n        this._deps.dialerUIOptions?.useV2 &&\n        this.toNumberField?.length >= 3\n      ) {\n        this._deps.contactSearch?.debouncedSearch({\n          searchString: this.toNumberField,\n        });\n      }\n    }\n  }\n\n  @proxify\n  async setRecipient(recipient: Recipient) {\n    this.resetState({\n      toNumberField: '',\n      isLastInputFromDialpad: false,\n      recipient,\n    });\n  }\n\n  @proxify\n  async clearRecipient() {\n    this.resetState({\n      toNumberField: this.toNumberField,\n      isLastInputFromDialpad: false,\n      recipient: null,\n    });\n  }\n\n  async triggerHook({\n    phoneNumber = '',\n    recipient = null,\n    fromNumber = null,\n  }: DialerUICallParams) {\n    for (const hook of this._callHooks) {\n      await hook({\n        phoneNumber,\n        recipient,\n        fromNumber,\n      });\n    }\n  }\n\n  @proxify\n  async call({\n    phoneNumber = '',\n    recipient = null,\n    fromNumber = null,\n  }: DialerUICallParams) {\n    if (phoneNumber || recipient) {\n      this._latestCallTime = Date.now();\n\n      this.resetState({\n        toNumberField: phoneNumber,\n        isLastInputFromDialpad: false,\n        recipient,\n      });\n\n      const continueCall = this.callVerify\n        ? await this.callVerify({ phoneNumber, recipient })\n        : true;\n\n      if (!continueCall) return;\n\n      // * trigger hooks after pass verification\n      await this.triggerHook({ phoneNumber, recipient, fromNumber });\n\n      try {\n        await this._deps.call.call({\n          phoneNumber: this.toNumberField,\n          recipient: this.recipient,\n          fromNumber,\n        });\n\n        this.resetState();\n      } catch (error) {\n        console.log('[DialerUI] make call error', error);\n      }\n    }\n  }\n\n  @action\n  protected _loadLastPhoneNumberAction() {\n    this.resetState({\n      toNumberField: this._deps.call.lastPhoneNumber,\n      recipient: this._deps.call.lastRecipient,\n      isLastInputFromDialpad: false,\n    });\n  }\n\n  private _loadLastPhoneNumber() {\n    if (!this._deps.call.lastRecipient && !this._deps.call.lastPhoneNumber) {\n      this._deps.alert.warning({\n        message: callErrors.noToNumber,\n      });\n      return;\n    }\n\n    this._loadLastPhoneNumberAction();\n  }\n\n  @proxify\n  async onCallButtonClick({\n    fromNumber,\n    fromSessionId,\n  }: { fromNumber?: string; fromSessionId?: string } = {}) {\n    if (`${this.toNumberField}`.trim().length === 0 && !this.recipient) {\n      this._loadLastPhoneNumber();\n    } else {\n      this._onBeforeCall(fromSessionId);\n      await this.call({\n        phoneNumber: this.toNumberField,\n        recipient: this.recipient,\n        fromNumber,\n      });\n    }\n  }\n\n  // * that fromSessionId send to children class\n  protected _onBeforeCall(fromSessionId: string) {\n    this._deps.conferenceCall?.closeMergingPair();\n  }\n\n  /**\n   * TODO: refactor with a better way to check if a call is placed by current device\n   *\n   * Check if a call is placed by current device, including call with browser, jupiter and ringcentral phone,\n   * and timeout 60s is for when call with ringcentral phone or jupiter we can't make sure the call is placed immediately\n   * so just in case other device make a call with same phone number when call from current device fail then we\n   * should not count it as current device call\n   * @deprecated\n   */\n  isCallFromCurrentDevice(phoneNumber: string) {\n    const latestNumber = normalizeNumber({\n      phoneNumber:\n        this._deps.call.lastPhoneNumber ||\n        this._deps.call.lastRecipient?.phoneNumber,\n      countryCode: this._deps.regionSettings.countryCode,\n      areaCode: this._deps.regionSettings.areaCode,\n      // if call out with extension number then only match main company number\n    })?.split('*')[0];\n\n    if (\n      latestNumber === phoneNumber &&\n      Date.now() - this._latestCallTime <= TIMEOUT\n    ) {\n      this._latestCallTime = 0;\n      return true;\n    }\n\n    return false;\n  }\n\n  getUIProps(): UIProps<DialerUIPanelProps> {\n    return {\n      currentLocale: this._deps.locale.currentLocale,\n      callingMode: this._deps.callingSettings.callingMode,\n      isWebphoneMode: this._deps.callingSettings.isWebphoneMode,\n      callButtonDisabled: this.isCallButtonDisabled,\n      fromNumber: this._deps.callingSettings.fromNumber,\n      fromNumbers: this._deps.callingSettings.fromNumbers,\n      toNumber: this.toNumberField,\n      recipient: this.recipient,\n      recipients: this.recipients,\n      searchContactList: this.searchContactList,\n      showSpinner: this.showSpinner,\n      dialButtonVolume: this._deps.audioSettings?.dialButtonVolume ?? 1,\n      dialButtonMuted: this._deps.audioSettings?.dialButtonMuted ?? false,\n      isLastInputFromDialpad: this.isLastInputFromDialpad,\n      disableFromField: this.disableFromField,\n      useV2: this._deps.dialerUIOptions?.useV2,\n      showAnonymous: this.isShowAnonymous,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getUIFunctions(props: any): UIFunctions<DialerUIPanelProps> {\n    return {\n      onToNumberChange: (...args) => this.setToNumberField(...args),\n      clearToNumber: () => this.clearToNumberField(),\n      onCallButtonClick: () => this.onCallButtonClick(),\n      changeFromNumber: (...args) =>\n        this._deps.callingSettings.updateFromNumber(...args),\n      formatPhone: (phoneNumber) =>\n        formatNumber({\n          phoneNumber,\n          areaCode: this._deps.regionSettings.areaCode,\n          countryCode: this._deps.regionSettings.countryCode,\n        }),\n      setRecipient: (...args) => this.setRecipient(...args),\n      clearRecipient: () => this.clearRecipient(),\n      searchContact: (searchString) =>\n        this._deps.contactSearch?.debouncedSearch({ searchString }),\n    };\n  }\n}\n"],"file":"DialerUI.js"}