{"version":3,"sources":["modules/CallMonitorV2/CallMonitor.ts"],"names":["CallMonitor","name","deps","dep","optional","trackEvents","callInboundCallConnected","callOutboundRingOutCallConnected","clickCallItem","clickHoldAllCalls","clickHangupAllCalls","clickRejectAllCalls","clickAddCallControl","clickHangupMergeCallControl","that","Object","values","_deps","conferenceCall","state","mergingPair","length","clickMergeCallControl","clickMergeMergeCallControl","clickCloseConfirmMergeModal","clickMergeConfirmMergeModal","clickAddCallsOnHold","clickMergeCallsOnHold","clickHangupCallsOnHold","clickParticipantAreaCallControl","normalizedCalls","contactMatcher","dataMapping","activityMatcher","callMatched","normalizedCallsFromPresence","normalizedCallsFromTelephonySessions","useTelephonySession","presence","calls","accountInfo","countryCode","webphone","sessions","cachedSessions","activeCallControl","currentDeviceCallsMap","allCalls","isMerging","_activeOnHoldCalls","_activeCurrentCalls","lastEndedSessions","lastEndedSessionIds","otherDeviceCalls","enableCache","storageKey","_eventEmitter","EventEmitter","_useTelephonySession","callMonitorOptions","_normalizedCalls","_enableContactMatchWhenNewCall","enableContactMatchWhenNewCall","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","console","warn","sessionId","toEntityId","callback","on","callEvents","newCall","callRinging","callEnded","callUpdated","lastProcessedNumbers","tabManager","active","newNumbers","match","queries","ignoreQueue","lastProcessedIds","newSessions","_","lastProcessedCalls","handleCalls","slice","oldCalls","call","toNumberEntities","cleanToNumberEntities","entities","sortByStartTime","oldCallIndex","item","emit","oldCall","splice","telephonyStatus","from","phoneNumber","inboundCallConnectedTrack","outboundCallConnectedTrack","entity","index","indexOf","toEntity","toMatch","id","entityId","toMatches","undefined","_removeMatched","setMatchedData","log","onCallRinging","contactMapping","activityMapping","callItem","fromNumber","toNumber","to","fromMatches","toNumberEntity","activityMatches","cachedCalls","x","webphoneSession","i","combinedCalls","cachedCall","push","theSessions","l","r","startTime","direction","party","telephonySessionId","activeCallId","presenceCall","find","toName","fromName","partyId","status","code","telephonySession","filter","sessionsCache","res","endCall","output","numberMap","addIfNotExist","number","onNewCall","onCallUpdated","onCallEnded","RcModuleV2","storage","action"],"mappings":"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","sourcesContent":["import {\n  difference,\n  filter,\n  find,\n  findIndex,\n  forEach,\n  map,\n  reduce,\n  sort,\n} from 'ramda';\nimport { EventEmitter } from 'events';\nimport {\n  RcModuleV2,\n  state,\n  storage,\n  action,\n  computed,\n  watch,\n  track,\n} from '@ringcentral-integration/core';\nimport { trackEvents } from '../Analytics';\nimport { Module } from '../../lib/di';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport {\n  matchWephoneSessionWithAcitveCall,\n  isCurrentDeviceEndCall,\n  mapTelephonyStatus,\n  normalizeTelephonySession,\n} from './callMonitorHelper';\n\nimport {\n  isRinging,\n  isInbound,\n  hasRingingCalls,\n  sortByStartTime,\n  isRingingInboundCall,\n  isOnHold as isRingOutOnHold,\n} from '../../lib/callLogHelpers';\nimport {\n  isRing,\n  isOnHold,\n  isConferenceSession,\n  sortByLastActiveTimeDesc,\n  normalizeSession as normalizeWebphoneSession,\n} from '../WebphoneV2/webphoneHelper';\nimport {\n  isRinging as isProceeding,\n  isHolding,\n  isForwardedToVoiceMail,\n  isOnSetupStage,\n} from '../ActiveCallControlV2/helpers';\nimport { callEvents } from './callEvents';\nimport { Deps, CallEventCallback } from './CallMonitor.interface';\nimport {\n  Call,\n  NormalizedCall,\n  NormalizedCalls,\n} from '../../interfaces/Call.interface';\nimport { NormalizedSession } from '../../interfaces/Webphone.interface';\nimport { ToNumberMatched } from '../CallV2';\nimport { ActiveCall } from '../../interfaces/Presence.model';\n\n@Module({\n  name: 'CallMonitor',\n  deps: [\n    'AccountInfo',\n    'Storage',\n    'Presence',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'Call', optional: true },\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'ActiveCallControl', optional: true },\n    { dep: 'CallMonitorOptions', optional: true },\n  ],\n})\nexport class CallMonitor extends RcModuleV2<Deps> {\n  private _eventEmitter = new EventEmitter();\n\n  protected _useTelephonySession =\n    this._deps.callMonitorOptions?.useTelephonySession ?? false;\n\n  protected _normalizedCalls: NormalizedCalls = null;\n  private _enableContactMatchWhenNewCall: boolean =\n    this._deps.callMonitorOptions?.enableContactMatchWhenNewCall ?? true;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'CallMonitor',\n    });\n    if (this._deps.contactMatcher && this._enableContactMatchWhenNewCall) {\n      this._deps.contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () =>\n          this._deps.accountInfo.ready && this._deps.presence.ready,\n      });\n    }\n\n    if (this._deps.activityMatcher) {\n      this._deps.activityMatcher.addQuerySource({\n        getQueriesFn: () => this.sessionIds,\n        readyCheckFn: () => this._deps.presence.ready,\n      });\n    }\n    if (this._useTelephonySession && !this._deps.activeCallControl) {\n      console.warn(\n        'Use telephonySession at CallMonitor module requires ActiveCallControlV2 module',\n      );\n      this._useTelephonySession = false;\n    }\n  }\n\n  @storage\n  @state\n  callMatched: Record<string, string> = {};\n\n  @action\n  setMatchedData({\n    sessionId,\n    toEntityId,\n  }: {\n    sessionId: string;\n    toEntityId: string;\n  }) {\n    this.callMatched[sessionId] = toEntityId;\n  }\n\n  onNewCall(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.newCall, callback);\n    return this;\n  }\n\n  onCallRinging(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.callRinging, callback);\n    return this;\n  }\n\n  onCallEnded(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.callEnded, callback);\n    return this;\n  }\n\n  onCallUpdated(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.callUpdated, callback);\n    return this;\n  }\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this.uniqueNumbers,\n      (uniqueNumbers, lastProcessedNumbers) => {\n        if (!this.ready || !this._deps.tabManager?.active) return;\n        const newNumbers = difference(\n          uniqueNumbers,\n          lastProcessedNumbers || [],\n        );\n        if (\n          this._deps.contactMatcher &&\n          this._deps.contactMatcher.ready &&\n          this._enableContactMatchWhenNewCall\n        ) {\n          this._deps.contactMatcher.match({\n            queries: newNumbers,\n            ignoreQueue: true,\n          });\n        }\n      },\n    );\n\n    watch(\n      this,\n      () => this.sessionIds,\n      (sessionIds, lastProcessedIds) => {\n        if (!this.ready || !this._deps.tabManager?.active) return;\n        const newSessions = difference(sessionIds, lastProcessedIds || []);\n        if (this._deps.activityMatcher && this._deps.activityMatcher.ready) {\n          this._deps.activityMatcher.match({\n            queries: newSessions,\n            ignoreQueue: true,\n          });\n        }\n      },\n    );\n\n    watch(\n      this,\n      () => this.calls,\n      (_, lastProcessedCalls) => {\n        if (!this.ready) return;\n        this.handleCalls(lastProcessedCalls?.slice() ?? []);\n      },\n    );\n\n    watch(\n      this,\n      () => this.ready,\n      () => {\n        if (this.ready) {\n          // It is possible that `this.calls` may have changed before the `CallMonitor` module status becomes `true`.\n          // So make sure that in this case, `this.calls` handling must be forced\n          this.handleCalls([]);\n        }\n      },\n    );\n  }\n\n  handleCalls(oldCalls: Call[]) {\n    // no ringing calls\n    if (\n      this._deps.call &&\n      oldCalls.length &&\n      !this.calls.length &&\n      this._deps.call.toNumberEntities?.length\n    ) {\n      this._deps.call.cleanToNumberEntities();\n    }\n\n    const entities: ToNumberMatched[] = this._deps.call\n      ? sort(sortByStartTime, this._deps.call.toNumberEntities)\n      : [];\n    forEach((call) => {\n      const oldCallIndex = findIndex(\n        (item) => item.sessionId === call.sessionId,\n        oldCalls,\n      );\n      if (oldCallIndex === -1) {\n        this._eventEmitter.emit(callEvents.newCall, call);\n        // loop to execut the onRinging handlers\n        if (isRinging(call)) {\n          this._eventEmitter.emit(callEvents.callRinging, call);\n        }\n      } else {\n        const oldCall = oldCalls[oldCallIndex];\n        oldCalls.splice(oldCallIndex, 1);\n        if (\n          call.telephonyStatus !== oldCall.telephonyStatus ||\n          (oldCall.from && oldCall.from.phoneNumber) !==\n            (call.from && call.from.phoneNumber)\n        ) {\n          this._eventEmitter.emit(callEvents.callUpdated, call);\n          if (call.telephonyStatus === 'CallConnected') {\n            if (isInbound(call)) {\n              this.inboundCallConnectedTrack();\n            } else {\n              this.outboundCallConnectedTrack();\n            }\n          }\n        }\n      }\n      forEach((entity) => {\n        const index = entities.indexOf(entity);\n        const toEntity = find(\n          (toMatch) => toMatch.id === entity.entityId,\n          call.toMatches,\n        );\n        if (toEntity !== undefined) {\n          this._removeMatched(index, entities);\n          this.setMatchedData({\n            sessionId: call.sessionId,\n            toEntityId: toEntity.id,\n          });\n        }\n      }, entities);\n    }, this.calls);\n\n    forEach((call) => {\n      this._eventEmitter.emit(callEvents.callEnded, call);\n    }, oldCalls);\n  }\n\n  _removeMatched(index: number, entities: ToNumberMatched[]) {\n    console.log('removeMatched:', index);\n    entities.splice(index, 1);\n    console.log('entities after splice:', entities);\n    return entities;\n  }\n\n  @track(trackEvents.callInboundCallConnected)\n  inboundCallConnectedTrack() {}\n\n  @track(trackEvents.callOutboundRingOutCallConnected)\n  outboundCallConnectedTrack() {}\n\n  @track(trackEvents.clickCallItem)\n  callItemClickTrack() {}\n\n  @track(trackEvents.clickHoldAllCalls)\n  allCallsClickHoldTrack() {}\n\n  @track(trackEvents.clickHangupAllCalls)\n  allCallsClickHangupTrack() {}\n\n  @track(trackEvents.clickRejectAllCalls)\n  allCallsClickRejectTrack() {}\n\n  @track(trackEvents.clickAddCallControl)\n  callControlClickAddTrack() {}\n\n  @track(trackEvents.clickHangupMergeCallControl)\n  mergeControlClickHangupTrack() {}\n\n  @track((that: CallMonitor) => [\n    Object.values(that._deps.conferenceCall?.state.mergingPair ?? {}).length\n      ? trackEvents.clickMergeCallControl\n      : trackEvents.clickMergeMergeCallControl,\n  ])\n  callControlClickMergeTrack() {}\n\n  @track(trackEvents.clickCloseConfirmMergeModal)\n  confirmMergeClickCloseTrack() {}\n\n  @track(trackEvents.clickMergeConfirmMergeModal)\n  confirmMergeClickMergeTrack() {}\n\n  @track(trackEvents.clickAddCallsOnHold)\n  callsOnHoldClickAddTrack() {}\n\n  @track(trackEvents.clickMergeCallsOnHold)\n  callsOnHoldClickMergeTrack() {}\n\n  @track(trackEvents.clickHangupCallsOnHold)\n  callsOnHoldClickHangupTrack() {}\n\n  @track(trackEvents.clickParticipantAreaCallControl)\n  callControlClickParticipantAreaTrack() {}\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get useTelephonySession() {\n    return this._useTelephonySession;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.normalizedCalls,\n    that._deps.contactMatcher?.dataMapping,\n    that._deps.activityMatcher?.dataMapping,\n    that.callMatched,\n  ])\n  get allCalls(): Call[] {\n    const contactMapping = this._deps.contactMatcher?.dataMapping ?? {};\n    const activityMapping = this._deps.activityMatcher?.dataMapping ?? {};\n    const calls = map((callItem) => {\n      const fromNumber = callItem.from && callItem.from.phoneNumber;\n      const toNumber = callItem.to && callItem.to.phoneNumber;\n      const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n      const toMatches = (toNumber && contactMapping[toNumber]) || [];\n      const toNumberEntity = this.callMatched[callItem.sessionId];\n      return {\n        ...callItem,\n        fromMatches,\n        toMatches,\n        activityMatches: activityMapping[callItem.sessionId] || [],\n        toNumberEntity,\n      };\n    }, this.normalizedCalls);\n    return calls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.normalizedCallsFromPresence,\n    that.normalizedCallsFromTelephonySessions,\n    that.useTelephonySession,\n  ])\n  get normalizedCalls() {\n    if (this.useTelephonySession) {\n      return this.normalizedCallsFromTelephonySessions;\n    }\n    return this.normalizedCallsFromPresence;\n  }\n\n  @computed((that: CallMonitor) => [\n    that._deps.presence.calls,\n    that._deps.accountInfo.countryCode,\n    that._deps.webphone?.sessions,\n    that._deps.webphone?.cachedSessions,\n  ])\n  get normalizedCallsFromPresence() {\n    // match cached calls\n    let cachedCalls: NormalizedCalls = [];\n    if (this._normalizedCalls && this._deps.webphone?.cachedSessions?.length) {\n      cachedCalls = filter(\n        (x) =>\n          !!(\n            x.webphoneSession &&\n            find(\n              (i) => i.id === x.webphoneSession.id,\n              this._deps.webphone?.cachedSessions,\n            )\n          ),\n        this._normalizedCalls,\n      );\n    }\n\n    // combine\n    const combinedCalls: (NormalizedCall | ActiveCall)[] = [\n      ...this._deps.presence.calls,\n    ]; // clone\n    forEach((cachedCall) => {\n      if (!find((x) => x.id === cachedCall.id, this._deps.presence.calls)) {\n        combinedCalls.push(cachedCall);\n      }\n    }, cachedCalls);\n\n    // mapping and sort\n    let theSessions = this._deps.webphone?.sessions ?? [];\n    this._normalizedCalls = sort(\n      (l, r) => sortByLastActiveTimeDesc(l.webphoneSession, r.webphoneSession),\n      map((callItem) => {\n        // use account countryCode to normalize number due to API issues [RCINT-3419]\n        const fromNumber = normalizeNumber({\n          phoneNumber: callItem.from && callItem.from.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n        });\n        const toNumber = normalizeNumber({\n          phoneNumber: callItem.to && callItem.to.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n        });\n        const webphoneSession = matchWephoneSessionWithAcitveCall(\n          theSessions,\n          callItem,\n        );\n        theSessions = filter((x) => x !== webphoneSession, theSessions);\n        return {\n          ...callItem,\n          from: {\n            phoneNumber: fromNumber,\n          },\n          to: {\n            phoneNumber: toNumber,\n          },\n          startTime:\n            (webphoneSession && webphoneSession.startTime) ||\n            callItem.startTime,\n          webphoneSession,\n        };\n      }, combinedCalls),\n    );\n    return this._normalizedCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that._deps.activeCallControl?.sessions,\n    that._deps.activeCallControl?.currentDeviceCallsMap,\n    that._deps.accountInfo.countryCode,\n    that._deps.presence.calls,\n  ])\n  get normalizedCallsFromTelephonySessions() {\n    // TODO match cached calls when there are conference merging calls, refer to `normalizedCallsFromPresence` function\n    if (!this._deps.activeCallControl?.sessions) return [];\n    const combinedCalls = [...this._deps.activeCallControl?.sessions]; // clone\n    const currentDeviceCallsMap = this._deps.activeCallControl\n      .currentDeviceCallsMap;\n    // mapping and sort\n    this._normalizedCalls = sort(\n      (l, r) => sortByLastActiveTimeDesc(l.webphoneSession, r.webphoneSession),\n      map((callItem) => {\n        // sessionId arrives when telephony session event push and it's a required\n        // reference https://github.com/ringcentral/ringcentral-call-js/blob/master/src/Session.ts\n        if (\n          !callItem ||\n          !callItem.sessionId ||\n          isForwardedToVoiceMail(callItem) ||\n          (isInbound(callItem) && isOnSetupStage(callItem))\n        ) {\n          return null;\n        }\n        const {\n          to,\n          from,\n          direction,\n          party,\n          telephonySessionId,\n          sessionId,\n          startTime,\n        } = callItem;\n        let { activeCallId: id } = callItem;\n        // find id from presence call one time, due to telephony session event not push call id back\n        // with ringout call\n        if (!id) {\n          const presenceCall = this._deps.presence.calls.find(\n            (presenceCall) => presenceCall.telephonySessionId === callItem.id,\n          );\n          id = presenceCall?.id;\n        }\n        const fromNumber = normalizeNumber({\n          phoneNumber: from?.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n        });\n        const toNumber = normalizeNumber({\n          phoneNumber: to?.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n        });\n        const toName = to?.name;\n        const fromName = from?.name;\n        const partyId = party?.id;\n        const telephonyStatus = mapTelephonyStatus(party?.status.code);\n\n        // TODO: add sipData here\n        // const sipData = {};\n        return {\n          id,\n          partyId,\n          direction,\n          telephonySession: callItem,\n          telephonySessionId,\n          toName,\n          fromName,\n          from: {\n            phoneNumber: fromNumber,\n          },\n          to: {\n            phoneNumber: toNumber,\n          },\n          startTime,\n          sessionId,\n          webphoneSession: currentDeviceCallsMap[telephonySessionId],\n          telephonyStatus,\n        };\n      }, combinedCalls).filter((x) => !!x),\n    );\n    return this._normalizedCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.allCalls,\n    that._deps.conferenceCall?.isMerging,\n  ])\n  get calls() {\n    return filter((callItem) => {\n      // filtering out the conferece during merging\n      if (this._deps.conferenceCall?.isMerging) {\n        return !isConferenceSession(callItem.webphoneSession);\n      }\n      return true;\n    }, this.allCalls);\n  }\n\n  @computed((that: CallMonitor) => [that.calls, that.useTelephonySession])\n  get activeRingCalls() {\n    return filter((callItem) => {\n      if (this.useTelephonySession) {\n        return (\n          callItem.webphoneSession &&\n          callItem.telephonySession &&\n          isProceeding(callItem.telephonySession)\n        );\n      }\n      return callItem.webphoneSession && isRing(callItem.webphoneSession);\n    }, this.calls);\n  }\n\n  @computed((that: CallMonitor) => [that.calls, that.useTelephonySession])\n  get _activeOnHoldCalls() {\n    if (this.useTelephonySession) {\n      return filter(\n        (callItem) =>\n          callItem.webphoneSession &&\n          callItem.telephonySession &&\n          isHolding(callItem.telephonySession),\n        this.calls,\n      );\n    }\n    return filter(\n      (callItem) =>\n        callItem.webphoneSession && isOnHold(callItem.webphoneSession),\n      this.calls,\n    );\n  }\n\n  @computed((that: CallMonitor) => [that.calls, that.useTelephonySession])\n  get _activeCurrentCalls() {\n    return filter((callItem) => {\n      if (this.useTelephonySession) {\n        return (\n          callItem.webphoneSession &&\n          callItem.telephonySession &&\n          !isProceeding(callItem.telephonySession) &&\n          !isHolding(callItem.telephonySession)\n        );\n      }\n      return (\n        callItem.webphoneSession &&\n        !isOnHold(callItem.webphoneSession) &&\n        !isRing(callItem.webphoneSession)\n      );\n    }, this.calls);\n  }\n\n  @computed((that: CallMonitor) => [\n    that._activeOnHoldCalls,\n    that._activeCurrentCalls,\n  ])\n  get activeOnHoldCalls() {\n    if (this._activeOnHoldCalls.length && !this._activeCurrentCalls.length) {\n      return this._activeOnHoldCalls.slice(1);\n    }\n    return this._activeOnHoldCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that._activeCurrentCalls,\n    that._activeOnHoldCalls,\n  ])\n  get activeCurrentCalls() {\n    return !this._activeCurrentCalls.length && this._activeOnHoldCalls.length\n      ? this._activeOnHoldCalls.slice(0, 1)\n      : this._activeCurrentCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.calls,\n    that._deps.webphone?.lastEndedSessions,\n    that.useTelephonySession,\n    that._deps.activeCallControl?.lastEndedSessionIds,\n  ])\n  get otherDeviceCalls() {\n    return reduce(\n      ({ sessionsCache, res }, callItem) => {\n        if (callItem.webphoneSession) {\n          return {\n            sessionsCache,\n            res,\n          };\n        }\n\n        if (!sessionsCache || !sessionsCache.length) {\n          return {\n            sessionsCache,\n            res: [...res, callItem],\n          };\n        }\n        // TODO: refactor\n        let endCall: boolean | NormalizedSession = null;\n        if (this.useTelephonySession) {\n          endCall = isCurrentDeviceEndCall(sessionsCache as string[], callItem);\n        } else {\n          endCall = matchWephoneSessionWithAcitveCall(\n            sessionsCache as NormalizedSession[],\n            callItem,\n          );\n        }\n\n        return {\n          sessionsCache: filter(\n            (x) => x !== endCall,\n            sessionsCache as NormalizedSession[],\n          ),\n          res: endCall ? res : [...res, callItem],\n        };\n      },\n      {\n        sessionsCache: this.useTelephonySession\n          ? this._deps.activeCallControl?.lastEndedSessionIds\n          : this._deps.webphone?.lastEndedSessions,\n        res: [] as Call[],\n      },\n      this.calls,\n    ).res;\n  }\n\n  @computed((that: CallMonitor) => [that.normalizedCalls])\n  get uniqueNumbers() {\n    const output: string[] = [];\n    const numberMap: Record<string, boolean> = {};\n    function addIfNotExist(number: string) {\n      if (!numberMap[number]) {\n        output.push(number);\n        numberMap[number] = true;\n      }\n    }\n    forEach((callItem) => {\n      if (callItem.from && callItem.from.phoneNumber) {\n        addIfNotExist(callItem.from.phoneNumber);\n      }\n      if (callItem.to && callItem.to.phoneNumber) {\n        addIfNotExist(callItem.to.phoneNumber);\n      }\n    }, this.normalizedCalls);\n    return output;\n  }\n\n  @computed((that: CallMonitor) => [that._deps.presence.calls])\n  get sessionIds() {\n    return map((callItem) => callItem.sessionId, this._deps.presence.calls);\n  }\n\n  @computed((that: CallMonitor) => [that.otherDeviceCalls])\n  get ringoutRingCalls() {\n    return filter(\n      (callItem) => isRingingInboundCall(callItem),\n      this.otherDeviceCalls,\n    );\n  }\n\n  @computed((that: CallMonitor) => [that.otherDeviceCalls])\n  get ringoutCurrentCalls() {\n    return filter(\n      (callItem) =>\n        !isRingingInboundCall(callItem) && !isRingOutOnHold(callItem),\n      this.otherDeviceCalls,\n    );\n  }\n\n  @computed((that: CallMonitor) => [that.otherDeviceCalls])\n  get ringoutOnHoldCalls() {\n    return filter(\n      (callItem) => isRingOutOnHold(callItem),\n      this.otherDeviceCalls,\n    );\n  }\n\n  /**\n   * @deprecated\n   */\n  onRingings(callback: CallEventCallback) {\n    this.onCallRinging(callback);\n    console.warn('\"onRingings\" is deprecated. Use \"onCallRinging\" instead.');\n  }\n\n  /**\n   * @deprecated\n   */\n  set _onNewCall(callback: CallEventCallback) {\n    this.onNewCall(callback);\n    console.warn('\"_onNewCall\" is deprecated. Use \"onNewCall\" instead.');\n  }\n\n  /**\n   * @deprecated\n   */\n  set _onCallUpdated(callback: CallEventCallback) {\n    this.onCallUpdated(callback);\n    console.warn(\n      '\"_onCallUpdated\" is deprecated. Use \"onCallUpdated\" instead.',\n    );\n  }\n\n  /**\n   * @deprecated\n   */\n  set _onCallEnded(callback: CallEventCallback) {\n    this.onCallEnded(callback);\n    console.warn('\"_onCallEnded\" is deprecated. Use \"onCallEnded\" instead.');\n  }\n\n  /**\n   * @deprecated\n   */\n  set _onRinging(callback: CallEventCallback) {\n    this.onCallRinging(callback);\n    console.warn('\"_onRinging\" is deprecated. Use \"onCallRinging\" instead.');\n  }\n}\n"],"file":"CallMonitor.js"}