{"version":3,"sources":["modules/CallMonitorV2/callMonitorHelper.ts"],"names":["getSessionStartTime","session","webphoneStartTime","direction","callDirections","inbound","creationTime","startTime","matchWephoneSessionWithAcitveCall","sessions","callItem","undefined","matches","filter","partyData","telephonySessionId","sessionId","partyId","callId","id","toName","toLowerCase","indexOf","sipData","remoteUri","from","outbound","to","Math","abs","length","sort","x","y","gapX","gapY","isCurrentDeviceEndCall","mapTelephonyStatus","telephonySessionStatus","PartyStatusCode","setup","proceeding","telephonyStatus","ringing","hold","onHold","answered","callConnected","parked","parkedCall","noCall","normalizeTelephonySession","status","otherParties"],"mappings":"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","sourcesContent":["import { PartyStatusCode } from 'ringcentral-call-control/lib/Session';\n\nimport callDirections from '../../enums/callDirections';\nimport { telephonyStatus } from '../../enums/telephonyStatus';\nimport { Call } from '../../interfaces/Call.interface';\nimport { ActiveCall } from '../../interfaces/Presence.model';\nimport { NormalizedSession } from '../../interfaces/Webphone.interface';\nimport { ActiveCallControlSessionData } from '../ActiveCallControlV2/ActiveCallControl.interface';\n\nfunction getSessionStartTime(session: NormalizedSession) {\n  let webphoneStartTime;\n  if (session.direction === callDirections.inbound) {\n    webphoneStartTime = session.creationTime;\n  } else {\n    webphoneStartTime = session.startTime || session.creationTime;\n  }\n  return webphoneStartTime;\n}\n\nexport function matchWephoneSessionWithAcitveCall(\n  sessions: NormalizedSession[],\n  callItem: ActiveCall | Call,\n) {\n  if (!sessions || !callItem) {\n    return undefined;\n  }\n  const matches = sessions.filter((session) => {\n    // Strategy 1: use `P-Rc-Api-Ids` header of a webRTC session to match with `telephonySessionId`\n    // and `partyId` of a call data from presence api.\n    // when caller calls him self, the sessionId are the same, so we need the `partyId` to identify the participants.\n    if (session.partyData && callItem.telephonySessionId) {\n      const { sessionId, partyId } = session.partyData;\n      if (sessionId !== callItem.telephonySessionId) {\n        return false;\n      }\n      if (partyId === callItem.partyId) {\n        return true;\n      }\n      // For switched call, partyId is not matched\n      if (session.callId === callItem.id) {\n        return true;\n      }\n      return false;\n    }\n\n    // Strategy 2: use `call-id` header of a webRTC session to match with\n    // `id` of a call data from presence api.\n    // This approach is unstable since the `id` of a call data from presence api can change before\n    // the call being accepted.\n    if (session.callId === callItem.id) {\n      return true;\n    }\n\n    if (session.direction !== callItem.direction) {\n      return false;\n    }\n\n    /**\n     * Strategy 3:\n     * Hack: for conference call, the `to` field is Conference,\n     * and the callItem's id won't change. According to `sip.js/src/session.js`\n     * the `InviteClientContext`'s id will always begin with callItem's id.\n     */\n    if (callItem.toName && callItem.toName.toLowerCase() === 'conference') {\n      return session.id.indexOf(callItem.id) === 0;\n    }\n\n    if (\n      !(callItem as ActiveCall).sipData.remoteUri ||\n      (callItem as ActiveCall).sipData.remoteUri === ''\n    ) {\n      return false;\n    }\n\n    if (\n      session.direction === callDirections.inbound &&\n      (callItem as ActiveCall).sipData.remoteUri.indexOf(session.from) === -1\n    ) {\n      return false;\n    }\n\n    if (\n      session.direction === callDirections.outbound &&\n      (callItem as ActiveCall).sipData.remoteUri.indexOf(session.to) === -1\n    ) {\n      return false;\n    }\n\n    // 16000 is from experience in test.\n    // there is delay bettween active call created and webphone session created\n    // for example, the time delay is decided by when webphone get invite info\n    if (Math.abs(callItem.startTime - getSessionStartTime(session)) > 16000) {\n      return false;\n    }\n    return true;\n  });\n\n  if (matches.length > 1) {\n    // order by the time gap asc\n    matches.sort((x, y) => {\n      const gapX = Math.abs(callItem.startTime - getSessionStartTime(x));\n      const gapY = Math.abs(callItem.startTime - getSessionStartTime(y));\n      return gapX === gapY ? 0 : gapX - gapY;\n    });\n  }\n\n  return matches[0];\n}\n\nexport function isCurrentDeviceEndCall(sessions: string[], callItem: Call) {\n  return sessions.indexOf(callItem.telephonySessionId) !== -1;\n}\n\n// telephony session status match presence telephonyStatus\nexport function mapTelephonyStatus(telephonySessionStatus: PartyStatusCode) {\n  switch (telephonySessionStatus) {\n    case PartyStatusCode.setup:\n    case PartyStatusCode.proceeding:\n      return telephonyStatus.ringing;\n    case PartyStatusCode.hold:\n      return telephonyStatus.onHold;\n    case PartyStatusCode.answered:\n      return telephonyStatus.callConnected;\n    case PartyStatusCode.parked:\n      return telephonyStatus.parkedCall;\n    default:\n      return telephonyStatus.noCall;\n  }\n}\n\nexport function normalizeTelephonySession(\n  session: ActiveCallControlSessionData,\n) {\n  return {\n    status: session.status,\n    id: session.id,\n    direction: session.direction,\n    otherParties: session.otherParties,\n  };\n}\n"],"file":"callMonitorHelper.js"}