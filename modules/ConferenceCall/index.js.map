{"version":3,"sources":["modules/ConferenceCall/index.ts"],"names":["DEFAULT_TIMEOUT","DEFAULT_TTL","MAXIMUM_CAPACITY","_fromSessionId","_lastCallInfo","ascendSortParties","parties","filter","party","conferenceRole","toLowerCase","host","sort","last","next","id","split","ConferenceCall","deps","dep","optional","auth","alert","call","callingSettings","client","appFeatures","contactMatcher","webphone","availabilityMonitor","connectivityMonitor","pulling","capacity","timeout","options","actionTypes","_eventEmitter","EventEmitter","_auth","ensureExist","_alert","_call","_availabilityMonitor","_callingSettings","_client","_webphone","_connectivityMonitor","_contactMatcher","_appFeatures","_reducer","_ttl","_timout","_timers","_pulling","sessionId","res","findConferenceWithSession","isMerging","session","sessions","find","Object","values","conferences","c","store","dispatch","type","updateConference","conference","state","service","platform","get","rawResponse","json","response","storedconference","updateConferenceSucceeded","updateConferenceFailed","message","toString","terminateConference","conferenceData","hangup","terminateConferenceSucceeded","terminateConferenceFailed","checkIfHAError","warning","conferenceCallErrors","webphoneSession","propagete","conferenceState","ready","isOverload","connectivity","danger","modeError","ttl","bringInConference","partyProfile","_getProfile","post","partyData","updateConferenceStatus","newConference","newParties","length","bringInConferenceSucceeded","bringInConferenceFailed","partyId","removeFromConference","removeFromConferenceSucceeded","removeFromConferenceFailed","propagate","_checkPermission","permissionsMessages","insufficientPrivilege","callingMode","callingModes","_makeConference","subscribe","_onStateChange","webphoneSessions","isConferenceSession","bringInFailed","mergeStart","conferenceId","sipInstances","map","_sessions","sessionIds","x","setSessionCaching","pSips","instance","p","Promise","resolve","on","all","_mergeToConference","then","mergeSucceeded","emit","profiles","mergeFailed","clearSessionCaching","fromSessionId","toSessionId","updateFromSession","updateToSession","mergingPair","closeMergingPair","reduce","accum","idx","status","code","partyStatusCode","disconnected","push","i","getOnlineParties","Array","isArray","countOnlineParties","setTimeout","stopPollingConferenceStatus","startPollingConferenceStatus","clearTimeout","Error","func","isOnce","once","off","updateCurrentConferenceId","initSuccess","_shouldInit","_init","_shouldReset","_reset","resetSuccess","loggedIn","pending","hasPermission","forEach","evt","bringInToConference","makeConference","confereceAccepted","race","reject","sipSession","phoneNumber","voiceCallToken","isConference","prototype","_hookConference","makeConferenceSucceeded","makeConferenceFailed","rcId","avatarUrl","calleeType","calleeTypes","unknown","partyName","direction","callDirections","outbound","toUserName","fromUserName","partyNumber","to","from","matchedContact","contactMatch","nameMatches","dataMapping","profileImageUrl","name","contacts","sessionIdToMergeWith","sessionToMergeWith","validateCallRecording","conferenceSession","setMergeParty","mergeToConference","resume","currentConferenceSession","isCurrentConferenceOnhold","isOnHold","callIsRecording","participantListClickHangupTrack","removeParticipantClickCancelTrack","removeParticipantClickRemoveTrack","hasConferenceCall","conferenceCallStatus","currentConferenceId","RcModule","proxify","selector","partyProfiles","sessionName","sessionNumber","sessionStatus","fromSession","callStatus","lastCalleeType","sessionStatusEnum","finished","partiesAvatarUrls","profile","extraNum","lastCallContact","getOnlinePartyProfiles"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { find } from 'ramda';\n\nimport callDirections from '../../enums/callDirections';\nimport calleeTypes from '../../enums/calleeTypes';\nimport { permissionsMessages } from '../../enums/permissionsMessages';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport proxify from '../../lib/proxy/proxify';\nimport RcModule from '../../lib/RcModule';\nimport { selector } from '../../lib/selector';\nimport callingModes from '../CallingSettings/callingModes';\nimport sessionStatusEnum from '../Webphone/sessionStatus';\nimport { isConferenceSession, isRecording } from '../Webphone/webphoneHelper';\nimport actionTypes from './actionTypes';\nimport conferenceCallErrors from './conferenceCallErrors';\nimport conferenceRole from './conferenceRole';\nimport getConferenceCallReducer from './getConferenceCallReducer';\nimport partyStatusCode from './partyStatusCode';\n\nconst DEFAULT_TIMEOUT = 30000; // time out for conferencing session being accepted.\nconst DEFAULT_TTL = 5000; // timer to update the conference information\nconst MAXIMUM_CAPACITY = 10;\n\nlet _fromSessionId;\nlet _lastCallInfo;\n\nfunction ascendSortParties(parties) {\n  return parties\n    .filter(\n      (party) => party.conferenceRole.toLowerCase() !== conferenceRole.host,\n    )\n    .sort((last, next) => +last.id.split('-')[1] - +next.id.split('-')[1]);\n}\n\n/**\n * @class\n * @description ConferenceCall managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Alert',\n    'Call',\n    'CallingSettings',\n    'ConnectivityMonitor',\n    'Client',\n    'Webphone',\n    'AppFeatures',\n    {\n      dep: 'ContactMatcher',\n      optional: true,\n    },\n    {\n      dep: 'Webphone',\n      optional: true,\n    },\n    {\n      dep: 'AvailabilityMonitor',\n      optional: true,\n    },\n    {\n      dep: 'ConferenceCallOptions',\n      optional: true,\n    },\n  ],\n})\nexport default class ConferenceCall extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    auth,\n    alert,\n    call,\n    callingSettings,\n    client,\n    appFeatures,\n    contactMatcher,\n    webphone,\n    availabilityMonitor,\n    connectivityMonitor,\n    pulling = true,\n    capacity = MAXIMUM_CAPACITY,\n    timeout = DEFAULT_TIMEOUT,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._eventEmitter = new EventEmitter();\n    this._auth = ensureExist.call(this, auth, 'auth');\n    this._alert = ensureExist.call(this, alert, 'alert');\n    this._call = ensureExist.call(this, call, 'call');\n    this._availabilityMonitor = availabilityMonitor;\n    this._callingSettings = ensureExist.call(\n      this,\n      callingSettings,\n      'callingSettings',\n    );\n    this._client = ensureExist.call(this, client, 'client');\n\n    // in order to run the integeration test, we need it to be optional\n    this._webphone = webphone;\n    this._connectivityMonitor = connectivityMonitor;\n    this._contactMatcher = contactMatcher;\n    this._appFeatures = appFeatures;\n    // we need the constructed actions\n    this._reducer = getConferenceCallReducer(this.actionTypes);\n    this._ttl = DEFAULT_TTL;\n    this._timout = timeout;\n    this._timers = {};\n    this._pulling = pulling;\n    this.capacity = capacity;\n  }\n\n  isConferenceSession(sessionId) {\n    // only can be used after webphone._onCallStartFunc\n    let res = !!this.findConferenceWithSession(sessionId);\n\n    if (this.isMerging && !res) {\n      const session = this._webphone.sessions.find(\n        (session) => session.id === sessionId,\n      );\n      res = isConferenceSession(session);\n    }\n\n    return res;\n  }\n\n  findConferenceWithSession(sessionId) {\n    return Object.values(this.conferences).find(\n      (c) => c.sessionId === sessionId,\n    );\n  }\n\n  /**\n   *\n   * @param {string} id: conference id\n   */\n  @proxify\n  async updateConferenceStatus(id) {\n    this.store.dispatch({\n      type: this.actionTypes.updateConference,\n      conference: this.state.conferences[id],\n    });\n    try {\n      const rawResponse = await this._client.service\n        .platform()\n        .get(`/restapi/v1.0/account/~/telephony/sessions/${id}`);\n      const response = await rawResponse.json();\n      const storedconference = this.state.conferences[response.id];\n      const conference = { ...storedconference.conference };\n      conference.parties = response.parties;\n      const { sessionId } = storedconference;\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceSucceeded,\n        conference,\n        sessionId,\n      });\n    } catch (e) {\n      // TODO: alert\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceFailed,\n        conference: this.state.conferences[id],\n        message: e.toString(),\n      });\n      // need to propagate to out side try...catch block\n      throw e;\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * terminate a conference.\n   * @param {string} id: conference id\n   */\n  @proxify\n  async terminateConference(id) {\n    this.store.dispatch({\n      type: this.actionTypes.terminateConference,\n      conference: this.state.conferences[id],\n    });\n    const conferenceData = this.conferences[id];\n\n    try {\n      if (this._webphone) {\n        if (conferenceData) {\n          this._webphone.hangup(conferenceData.sessionId);\n          // Help server to do the GC, and we don't care the whether it's successful or not\n          this._client.service\n            .platform()\n            .delete(`/restapi/v1.0/account/~/telephony/sessions/${id}`);\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceSucceeded,\n            conference: conferenceData.conference,\n          });\n        } else {\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceFailed,\n          });\n        }\n      } else {\n        await this._client.service\n          .platform()\n          .delete(`/restapi/v1.0/account/~/telephony/sessions/${id}`);\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference: conferenceData.conference,\n        });\n      }\n    } catch (e) {\n      if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(e))\n      ) {\n        this._alert.warning({\n          message: conferenceCallErrors.terminateConferenceFailed,\n        });\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.terminateConferenceFailed,\n        message: e.toString(),\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return conferenceData;\n    }\n  }\n\n  /**\n   * Bring-in an outbound call into conference.\n   * @param {string} id: conference id\n   * @param {webphone.session} webphoneSession: get it from callMonitor.\\w+Calls[\\d+]\n   * interface SessionData{\n   *  \"party-id\": String,\n   *  \"session-id\": String\n   * }\n   */\n  @proxify\n  async bringInToConference(id, webphoneSession, propagete = false) {\n    const conferenceState = this.state.conferences[id];\n    if (\n      !conferenceState ||\n      !this.ready ||\n      !webphoneSession ||\n      this.isOverload(id) ||\n      !this._connectivityMonitor.connectivity\n    ) {\n      this._alert.danger({\n        message: conferenceCallErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    const { sessionId } = conferenceState;\n    let { conference } = conferenceState;\n\n    this.store.dispatch({\n      type: this.actionTypes.bringInConference,\n      conference,\n      sessionId,\n    });\n\n    try {\n      const partyProfile = this._getProfile(webphoneSession.id);\n      await this._client.service\n        .platform()\n        .post(\n          `/restapi/v1.0/account/~/telephony/sessions/${id}/parties/bring-in`,\n          webphoneSession.partyData,\n        );\n      const newConference = await this.updateConferenceStatus(id);\n      conference = newConference.conference;\n\n      if (partyProfile) {\n        const conferenceState = this.state.conferences[id];\n        const newParties = ascendSortParties(\n          conferenceState.conference.parties,\n        );\n        partyProfile.id = newParties[newParties.length - 1].id;\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceSucceeded,\n        conference,\n        sessionId,\n        partyProfile,\n      });\n\n      return id;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceFailed,\n        message: e.toString(),\n      });\n      if (!propagete) {\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * remove a participant from conference.\n   * @param {string} id: conference id\n   * @param {SessionData} partyId: one participant's id of an conference's `parties` list\n   */\n  @proxify\n  async removeFromConference(id, partyId) {\n    this.store.dispatch({\n      type: this.actionTypes.removeFromConference,\n      conference: this.state.conferences[id],\n    });\n\n    try {\n      await this._client.service\n        .platform()\n        .delete(\n          `/restapi/v1.0/account/~/telephony/sessions/${id}/parties/${partyId}`,\n        );\n      await this.updateConferenceStatus(id);\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceSucceeded,\n        conference: this.state.conferences[id],\n      });\n    } catch (e) {\n      if (\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(e))\n      ) {\n        this._alert.warning({\n          message: conferenceCallErrors.removeFromConferenceFailed,\n        });\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceFailed,\n        message: e.toString(),\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * start a conference call, return the session\n   */\n  @proxify\n  async makeConference(propagate = false) {\n    if (!this.ready || !this._connectivityMonitor.connectivity) {\n      this._alert.danger({\n        message: conferenceCallErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    if (!this._checkPermission()) {\n      if (!propagate) {\n        this._alert.danger({\n          message: permissionsMessages.insufficientPrivilege,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    if (!this._callingSettings.callingMode === callingModes.webphone) {\n      if (!propagate) {\n        this._alert.danger({\n          message: conferenceCallErrors.modeError,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    const conference = await this._makeConference(propagate);\n    return conference;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  /**\n   * Merge calls to (or create) a conference.\n   * @param {webphone.sessions} webphoneSessions\n   * FIXME: dynamically construct this function during the construction\n   * to avoid `this._webphone` criterias to improve performance ahead of time\n   */\n  @proxify\n  async mergeToConference(webphoneSessions = []) {\n    webphoneSessions = webphoneSessions\n      .filter((session) => !!session)\n      .filter((session) => !this.isConferenceSession(session.id));\n\n    if (!webphoneSessions.length) {\n      this._alert.warning({\n        message: conferenceCallErrors.bringInFailed,\n      });\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.mergeStart,\n    });\n    let sipInstances;\n    let conferenceId = null;\n\n    if (this._webphone) {\n      /**\n       * Because the concurrency behaviour of the server,\n       * we cannot sure the merging process is over when\n       * the function's procedure has finshed.\n       */\n      sipInstances = webphoneSessions.map((webphoneSession) =>\n        this._webphone._sessions.get(webphoneSession.id),\n      );\n      /**\n       * HACK: we need to preserve the merging session in prevent the glitch of\n       * the call control page.\n       */\n      const sessionIds = webphoneSessions.map((x) => x.id);\n      this._webphone.setSessionCaching(sessionIds);\n\n      const pSips = sipInstances.map((instance) => {\n        const p = new Promise((resolve) => {\n          instance.on('terminated', () => {\n            resolve();\n          });\n        });\n        return p;\n      });\n\n      await Promise.all([\n        this._mergeToConference(webphoneSessions),\n        ...pSips,\n      ]).then(\n        () => {\n          this.store.dispatch({\n            type: this.actionTypes.mergeSucceeded,\n          });\n          const conferenceState = Object.values(this.conferences)[0];\n\n          this._eventEmitter.emit(\n            this.actionTypes.mergeSucceeded,\n            conferenceState,\n          );\n        },\n        () => {\n          const conferenceState = Object.values(this.conferences)[0];\n\n          /**\n           * if create conference successfully but failed to bring-in,\n           *  then terminate the conference.\n           */\n          if (conferenceState && conferenceState.profiles.length < 1) {\n            this.terminateConference(conferenceState.conference.id);\n          }\n          this._alert.warning({\n            message: conferenceCallErrors.bringInFailed,\n          });\n          this.store.dispatch({\n            type: this.actionTypes.mergeFailed,\n          });\n        },\n      );\n      this._webphone.clearSessionCaching();\n    } else {\n      try {\n        conferenceId = await this._mergeToConference(webphoneSessions);\n\n        this.store.dispatch({\n          type: this.actionTypes.mergeSucceeded,\n        });\n        this._eventEmitter.emit(this.actionTypes.mergeSucceeded);\n      } catch (e) {\n        const conferenceState = Object.values(this.conferences)[0];\n        /**\n         * if create conference successfully but failed to bring-in,\n         *  then terminate the conference.\n         */\n        if (conferenceState && conferenceState.conference.parties.length < 1) {\n          this.terminateConference(conferenceState.conference.id);\n        }\n\n        if (\n          !this._availabilityMonitor ||\n          !(await this._availabilityMonitor.checkIfHAError(e))\n        ) {\n          this._alert.warning({\n            message: conferenceCallErrors.bringInFailed,\n          });\n        }\n      }\n\n      if (!sipInstances || conferenceId === null) {\n        this.store.dispatch({\n          type: this.actionTypes.mergeFailed,\n        });\n      }\n    }\n  }\n\n  @proxify\n  setMergeParty({ fromSessionId, toSessionId }) {\n    if (fromSessionId) {\n      this.store.dispatch({\n        type: this.actionTypes.updateFromSession,\n        fromSessionId,\n      });\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateToSession,\n      toSessionId,\n    });\n  }\n\n  /**\n   * we need to remove the fromSessionId in mergingPair when the outbound call is hang-up\n   */\n  @proxify\n  closeMergingPair() {\n    if (this.mergingPair.fromSessionId) {\n      return this.store.dispatch({\n        type: this.actionTypes.closeMergingPair,\n      });\n    }\n\n    return null;\n  }\n\n  getOnlinePartyProfiles(id) {\n    const conferenceData = this.conferences[id];\n\n    if (conferenceData) {\n      return ascendSortParties(conferenceData.conference.parties)\n        .reduce((accum, party, idx) => {\n          if (\n            party?.status?.code.toLowerCase() !== partyStatusCode.disconnected\n          ) {\n            // 0 position is the host\n            accum.push({ idx, party });\n          }\n          return accum;\n        }, [])\n        .map(({ idx, party }) => ({\n          ...party,\n          ...conferenceData.profiles[idx],\n        }))\n        .filter((i) => !!i);\n    }\n    return null;\n  }\n\n  getOnlineParties(id) {\n    const conferenceData = this.conferences[id];\n    if (conferenceData) {\n      return conferenceData.conference.parties.filter(\n        (p) => p?.status?.code.toLowerCase() !== partyStatusCode.disconnected,\n      );\n    }\n    return null;\n  }\n\n  countOnlineParties(id) {\n    const res = this.getOnlineParties(id);\n    return Array.isArray(res) ? res.length : null;\n  }\n\n  isOverload(id) {\n    return this.countOnlineParties(id) >= this.capacity;\n  }\n\n  @proxify\n  async startPollingConferenceStatus(id) {\n    if (this._timers[id] || !this._pulling) {\n      return;\n    }\n\n    await this.updateConferenceStatus(id);\n    this._timers[id] = setTimeout(async () => {\n      await this.updateConferenceStatus(id);\n      this.stopPollingConferenceStatus(id);\n      if (this.conferences[id]) {\n        this.startPollingConferenceStatus(id);\n      }\n    }, this._ttl);\n  }\n\n  stopPollingConferenceStatus(id) {\n    clearTimeout(this._timers[id]);\n    delete this._timers[id];\n  }\n\n  openPulling() {\n    this._pulling = true;\n  }\n\n  closePulling() {\n    this._pulling = false;\n  }\n\n  togglePulling() {\n    this._pulling = !this.pulling;\n  }\n\n  setCapatity(capacity = MAXIMUM_CAPACITY) {\n    if (typeof capacity !== 'number') {\n      throw new Error('The capcity must be a number');\n    }\n    this.capacity = capacity;\n    return capacity;\n  }\n\n  setTimeout(timeout = DEFAULT_TIMEOUT) {\n    if (typeof timeout !== 'number') {\n      throw new Error('The timeout must be a number');\n    }\n    this._timout = timeout;\n    return timeout;\n  }\n\n  onMergeSuccess(func, isOnce) {\n    if (isOnce) {\n      this._eventEmitter.once(this.actionTypes.mergeSucceeded, func);\n      return;\n    }\n    this._eventEmitter.on(this.actionTypes.mergeSucceeded, func);\n  }\n\n  removeMergeSuccess(func) {\n    this.off(this.actionTypes.mergeSucceeded, func);\n  }\n\n  @proxify\n  loadConference(conferenceId) {\n    return this.store.dispatch({\n      type: this.actionTypes.updateCurrentConferenceId,\n      conferenceId,\n    });\n  }\n\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    }\n  }\n\n  _reset() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._auth.ready &&\n      this._alert.ready &&\n      this._callingSettings.ready &&\n      this._call.ready &&\n      this._appFeatures.ready &&\n      this._connectivityMonitor.ready &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._auth.loggedIn ||\n        !this._auth.ready ||\n        !this._alert.ready ||\n        !this._callingSettings.ready ||\n        !this._call.ready ||\n        !this._appFeatures.ready ||\n        !this._connectivityMonitor.ready ||\n        (!!this._availabilityMonitor && !this._availabilityMonitor.ready)) &&\n      this.ready\n    );\n  }\n\n  get hasPermission() {\n    return this._appFeatures.hasConferenceCall;\n  }\n\n  _checkPermission() {\n    if (!this.hasPermission) {\n      this._alert.danger({\n        message: permissionsMessages.insufficientPrivilege,\n        ttl: 0,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  @proxify\n  _hookConference(conference, session) {\n    ['accepted'].forEach((evt) =>\n      session.on(evt, () => this.startPollingConferenceStatus(conference.id)),\n    );\n    ['terminated', 'failed', 'rejected'].forEach((evt) =>\n      session.on(evt, () => {\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference,\n        });\n        this.stopPollingConferenceStatus(conference.id);\n      }),\n    );\n  }\n\n  @proxify\n  async _mergeToConference(webphoneSessions = []) {\n    const conferenceState = Object.values(this.conferences)[0];\n    if (conferenceState) {\n      const conferenceId = conferenceState.conference.id;\n      this.stopPollingConferenceStatus(conferenceId);\n      // for the sake of participants ordering, we can't concurrently bring in the participants\n      for (const webphoneSession of webphoneSessions) {\n        await this.bringInToConference(conferenceId, webphoneSession, true);\n      }\n      if (!this.conferences[conferenceId].profiles.length) {\n        throw new Error(\n          'bring-in operations failed, not all intended parties were brought in',\n        );\n      }\n      this.startPollingConferenceStatus(conferenceId);\n      return conferenceId;\n    }\n    const { id } = await this.makeConference(true);\n    let confereceAccepted = false;\n    await Promise.race([\n      new Promise((resolve, reject) => {\n        const sipSession = this._webphone._sessions.get(\n          this.conferences[id].sessionId,\n        );\n        sipSession.on('accepted', () => {\n          confereceAccepted = true;\n          resolve();\n        });\n        sipSession.on('cancel', () => reject(new Error('conferecing cancel')));\n        sipSession.on('failed', () => reject(new Error('conferecing failed')));\n        sipSession.on('rejected', () =>\n          reject(new Error('conferecing rejected')),\n        );\n        sipSession.on('terminated', () =>\n          reject(new Error('conferecing terminated')),\n        );\n      }),\n      new Promise((resolve, reject) => {\n        setTimeout(\n          () =>\n            confereceAccepted\n              ? resolve()\n              : reject(new Error('conferecing timeout')),\n          this._timout,\n        );\n      }),\n    ]);\n    await this._mergeToConference(webphoneSessions);\n    return id;\n  }\n\n  @proxify\n  async _makeConference(propagate = false) {\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.makeConference,\n      });\n\n      // TODO: replace with SDK function chaining calls\n      const rawResponse = await this._client.service\n        .platform()\n        .post('/restapi/v1.0/account/~/telephony/conference', {});\n      const response = await rawResponse.json();\n      const conference = response.session;\n      const phoneNumber = conference.voiceCallToken;\n      // whether to mutate the session to mark the conference?\n      const session = await this._call.call({\n        phoneNumber,\n        isConference: true,\n      });\n      if (\n        typeof session === 'object' &&\n        Object.prototype.toString.call(session.on).toLowerCase() ===\n          '[object function]'\n      ) {\n        this._hookConference(conference, session);\n\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceSucceeded,\n          conference,\n          sessionId: session.id,\n          parties: [],\n        });\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceFailed,\n        });\n      }\n      return conference;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.makeConferenceFailed,\n        message: e.toString(),\n      });\n\n      if (\n        !propagate ||\n        !this._availabilityMonitor ||\n        !(await this._availabilityMonitor.checkIfHAError(e))\n      ) {\n        this._alert.warning({\n          message: conferenceCallErrors.makeConferenceFailed,\n        });\n        return null;\n      }\n      // need to propagate to out side try...catch block\n      throw e;\n    }\n  }\n\n  _getProfile(sessionId) {\n    const session = this._webphone.sessions.find(\n      (session) => session.id === sessionId,\n    );\n\n    let rcId;\n    let avatarUrl;\n    let calleeType = calleeTypes.unknown;\n    let partyName =\n      session.direction === callDirections.outbound\n        ? session.toUserName\n        : session.fromUserName;\n    const partyNumber =\n      session.direction === callDirections.outbound ? session.to : session.from;\n\n    let matchedContact = session.contactMatch;\n    if (!matchedContact && this._contactMatcher) {\n      const nameMatches = this._contactMatcher.dataMapping[partyNumber];\n      if (nameMatches && nameMatches.length) {\n        matchedContact = nameMatches[0];\n      }\n    }\n\n    if (matchedContact) {\n      rcId = matchedContact.id;\n      avatarUrl = matchedContact.profileImageUrl;\n      partyName = matchedContact.name;\n      calleeType = calleeTypes.contacts;\n    }\n\n    return {\n      rcId,\n      avatarUrl,\n      partyName,\n      partyNumber,\n      calleeType,\n    };\n  }\n\n  @proxify\n  async parseMergingSessions({ sessionId, sessionIdToMergeWith }) {\n    const session = find((x) => x.id === sessionId, this._webphone.sessions);\n\n    const sessionToMergeWith = find(\n      (x) => x.id === (sessionIdToMergeWith || this.mergingPair.fromSessionId),\n      this._webphone.sessions,\n    );\n\n    const webphoneSessions = sessionToMergeWith\n      ? [sessionToMergeWith, session]\n      : [session];\n\n    for (const session of webphoneSessions) {\n      if (!this.validateCallRecording(session)) {\n        return null;\n      }\n    }\n\n    const conferenceState = Object.values(this.conferences)[0];\n    if (conferenceState) {\n      const conferenceSession = find(\n        (x) => x.id === conferenceState.sessionId,\n        this._webphone.sessions,\n      );\n      if (!this.validateCallRecording(conferenceSession)) {\n        return null;\n      }\n    }\n\n    return {\n      session,\n      sessionToMergeWith,\n    };\n  }\n\n  @proxify\n  async mergeSessions({ session, sessionToMergeWith }) {\n    this.setMergeParty({\n      toSessionId: session.id,\n    });\n\n    const webphoneSessions = sessionToMergeWith\n      ? [sessionToMergeWith, session]\n      : [session];\n    await this.mergeToConference(webphoneSessions);\n\n    const conferenceData = Object.values(this.conferences)[0];\n    if (!conferenceData) {\n      await this._webphone.resume(session.id);\n      return null;\n    }\n    const currentConferenceSession = find(\n      (x) => x.id === conferenceData.sessionId,\n      this._webphone.sessions,\n    );\n    const isCurrentConferenceOnhold = currentConferenceSession.isOnHold;\n\n    if (isCurrentConferenceOnhold) {\n      this._webphone.resume(conferenceData.sessionId);\n    }\n\n    return conferenceData;\n  }\n\n  validateCallRecording(session) {\n    if (isRecording(session)) {\n      this._alert.warning({\n        message: conferenceCallErrors.callIsRecording,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  /*\n   * User action track dispatchs\n   * */\n\n  participantListClickHangupTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.participantListClickHangupTrack,\n    });\n  }\n\n  removeParticipantClickCancelTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.removeParticipantClickCancelTrack,\n    });\n  }\n\n  removeParticipantClickRemoveTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.removeParticipantClickRemoveTrack,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get conferences() {\n    return this.state.conferences;\n  }\n\n  get conferenceCallStatus() {\n    return this.state.conferenceCallStatus;\n  }\n\n  get isMerging() {\n    return this.state.isMerging;\n  }\n\n  get mergingPair() {\n    return this.state.mergingPair;\n  }\n\n  get currentConferenceId() {\n    return this.state.currentConferenceId;\n  }\n\n  @selector\n  lastCallInfo = [\n    () => this._webphone.sessions,\n    () => this.mergingPair.fromSessionId,\n    () => this.partyProfiles,\n    (sessions, fromSessionId, partyProfiles) => {\n      if (!fromSessionId) {\n        _lastCallInfo = null;\n        return _lastCallInfo;\n      }\n\n      let sessionName;\n      let sessionNumber;\n      let sessionStatus;\n      let matchedContact;\n      const fromSession = sessions.find(\n        (session) => session.id === fromSessionId,\n      );\n      if (fromSession) {\n        sessionName =\n          fromSession.direction === callDirections.outbound\n            ? fromSession.toUserName\n            : fromSession.fromUserName;\n        sessionNumber =\n          fromSession.direction === callDirections.outbound\n            ? fromSession.to\n            : fromSession.from;\n        sessionStatus = fromSession.callStatus;\n        matchedContact = fromSession.contactMatch;\n        if (!matchedContact && this._contactMatcher) {\n          const nameMatches = this._contactMatcher.dataMapping[sessionNumber];\n          if (nameMatches && nameMatches.length) {\n            matchedContact = nameMatches[0];\n          }\n        }\n      }\n\n      let lastCalleeType;\n      if (fromSession) {\n        if (matchedContact) {\n          lastCalleeType = calleeTypes.contacts;\n        } else if (this.isConferenceSession(fromSession.id)) {\n          lastCalleeType = calleeTypes.conference;\n        } else {\n          lastCalleeType = calleeTypes.unknown;\n        }\n      } else if (\n        _fromSessionId === fromSessionId &&\n        _lastCallInfo &&\n        _lastCallInfo.calleeType\n      ) {\n        _lastCallInfo = {\n          ..._lastCallInfo,\n          status: sessionStatusEnum.finished,\n        };\n        return _lastCallInfo;\n      } else {\n        return {\n          calleeType: calleeTypes.unknown,\n        };\n      }\n\n      let partiesAvatarUrls = null;\n      if (lastCalleeType === calleeTypes.conference) {\n        partiesAvatarUrls = (partyProfiles || []).map(\n          (profile) => profile.avatarUrl,\n        );\n      }\n      switch (lastCalleeType) {\n        case calleeTypes.conference:\n          _lastCallInfo = {\n            calleeType: calleeTypes.conference,\n            avatarUrl: partiesAvatarUrls[0],\n            extraNum: partiesAvatarUrls.length - 1,\n            name: null,\n            phoneNumber: null,\n            status: sessionStatus,\n            lastCallContact: null,\n          };\n          break;\n        case calleeTypes.contacts:\n          _lastCallInfo = {\n            calleeType: calleeTypes.contacts,\n            avatarUrl: matchedContact.profileImageUrl,\n            name: matchedContact.name,\n            status: sessionStatus,\n            phoneNumber: sessionNumber,\n            extraNum: 0,\n            lastCallContact: matchedContact,\n          };\n          break;\n        default:\n          _lastCallInfo = {\n            calleeType: calleeTypes.unknown,\n            avatarUrl: null,\n            name: sessionName,\n            status: sessionStatus,\n            phoneNumber: sessionNumber,\n            extraNum: 0,\n            lastCallContact: null,\n          };\n      }\n\n      _fromSessionId = fromSessionId;\n      return _lastCallInfo;\n    },\n  ];\n\n  @selector\n  partyProfiles = [\n    () => this.currentConferenceId,\n    () => this.conferences,\n    (currentConferenceId, conferences) => {\n      const conferenceData = conferences && conferences[currentConferenceId];\n      if (!conferenceData) {\n        return [];\n      }\n      return this.getOnlinePartyProfiles(currentConferenceId);\n    },\n  ];\n}\n"],"file":"index.js"}