{"version":3,"file":"ConferenceCall.interface.js","names":[],"sources":["modules/ConferenceCall/ConferenceCall.interface.ts"],"sourcesContent":["import type CallParty from '@rc-ex/core/lib/definitions/CallParty';\nimport type { ObjectMapValue } from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport type calleeTypes from '../../enums/calleeTypes';\nimport type { NormalizedCall } from '../../interfaces/Call.interface';\nimport type { Entity } from '../../interfaces/Entity.interface';\nimport type { Alert } from '../Alert';\nimport type { AppFeatures } from '../AppFeatures';\nimport type { Auth } from '../Auth';\nimport type { AvailabilityMonitor } from '../AvailabilityMonitor';\nimport type { Call } from '../Call';\nimport type { CallingSettings } from '../CallingSettings';\nimport type { ConnectivityMonitor } from '../ConnectivityMonitor';\nimport type { ContactMatcher } from '../ContactMatcher';\nimport type { sessionStatus, Webphone } from '../Webphone';\n\ninterface ConferenceCallOptions {\n  pulling?: boolean;\n  capacity?: number;\n  timeout?: number;\n}\n\nexport interface Deps extends ConferenceCallOptions {\n  alert: Alert;\n  auth: Auth;\n  availabilityMonitor?: AvailabilityMonitor;\n  call: Call;\n  callingSettings: CallingSettings;\n  client: any;\n  connectivityMonitor: ConnectivityMonitor;\n  contactMatcher?: ContactMatcher;\n  appFeatures: AppFeatures;\n  webphone?: Webphone;\n  conferenceCallOptions?: ConferenceCallOptions;\n}\n\nexport type SessionType =\n  | 'Call'\n  | 'RingOut'\n  | 'RingMe'\n  | 'Conference'\n  | 'GreetingsRecording'\n  | 'VerificationCall'\n  | 'Zoom'\n  | 'CallOut';\n\n// https://developers.ringcentral.com/api-reference/Call-Control/createConferenceCallSession\nexport interface Conference {\n  creationTime: string;\n  id: string;\n  origin: {\n    type: SessionType;\n  };\n  parties: Party[];\n  voiceCallToken: string;\n}\n\nexport interface PartyState {\n  rcId: string;\n  avatarUrl: string;\n  partyName: string;\n  partyNumber: string;\n  calleeType: keyof typeof calleeTypes;\n  id: string;\n}\nexport interface LastCallInfo {\n  calleeType: ObjectMapValue<typeof calleeTypes>;\n  avatarUrl?: string;\n  extraNum?: number;\n  name?: string;\n  phoneNumber?: string;\n  status?: ObjectMapValue<typeof sessionStatus>;\n  lastCallContact?: Entity;\n}\n\nexport interface ConferenceState {\n  conference: Conference;\n  sessionId: string;\n  profiles: PartyState[];\n}\n\nexport interface ConferencesState {\n  [key: string]: ConferenceState;\n}\n\nexport interface MergingPair {\n  fromSessionId?: string;\n  toSessionId?: string;\n}\n\nexport type Party = AbstractParty<ConferenceRole, CallStatus, SessionType>;\n\nexport type AbstractParty<\n  Role extends ConferenceRole,\n  Status extends CallStatus,\n  PartySessionType extends SessionType,\n> = CallParty &\n  (Role extends 'Host'\n    ? {\n        // Deprecated: Information on call owner\n        owner: { accountId: string; extensionId: string };\n        to: { name: 'Conference'; phoneNumber: 'conference' };\n        conferenceRole: Role;\n      }\n    : Role extends 'Participant'\n    ? {\n        conferenceRole: Role;\n      }\n    : never) &\n  (PartySessionType extends 'RingOut'\n    ? {\n        ringOutRole: RingRole;\n      }\n    : PartySessionType extends 'RingMe'\n    ? {\n        ringMeRole: RingRole;\n      }\n    : {}) & {\n    status: (Status extends 'Disconnected'\n      ? {\n          // Reason for call termination. For 'Disconnected' code only\n          reason?: PartyDisconnectReason;\n        }\n      : Status extends 'Gone'\n      ? {\n          // Peer session/party details. Valid in 'Gone' state of a call\n          peerId: Pick<\n            NormalizedCall,\n            'sessionId' | 'telephonySessionId' | 'partyId'\n          >;\n        }\n      : {}) & {\n      code: Status;\n      description?: string;\n    };\n  };\n\n// internal types\ntype ConferenceRole = 'Host' | 'Participant';\n\nexport type CallDirection = 'Outbound' | 'Inbound';\n\nexport type CallStatus =\n  | 'Setup'\n  | 'Proceeding'\n  | 'Answered'\n  | 'Disconnected'\n  | 'Gone'\n  | 'Parked'\n  | 'Hold'\n  | 'VoiceMail'\n  | 'FaxReceive'\n  | 'VoiceMailScreening';\n\ninterface CallPartyInfo {\n  deviceId?: string;\n  extensionId?: string;\n  phoneNumber: string;\n  name?: string;\n}\n\nexport type PartyDisconnectReason =\n  | 'Pickup'\n  | 'Supervising'\n  | 'TakeOver'\n  | 'Timeout'\n  | 'BlindTransfer'\n  | 'RccTransfer'\n  | 'AttendedTransfer'\n  | 'CallerInputRedirect'\n  | 'CallFlip'\n  | 'ParkLocation'\n  | 'DtmfTransfer'\n  | 'AgentAnswered'\n  | 'AgentDropped'\n  | 'Rejected'\n  | 'Cancelled'\n  | 'InternalError'\n  | 'NoAnswer'\n  | 'TargetBusy'\n  | 'InvalidNumber'\n  | 'InternationalDisabled'\n  | 'DestinationBlocked'\n  | 'NotEnoughFunds'\n  | 'NoSuchUser'\n  | 'CallPark'\n  | 'CallRedirected'\n  | 'CallReplied'\n  | 'CallSwitch'\n  | 'CallFinished'\n  | 'CallDropped';\n\ntype RingRole = 'Initiator' | 'Target';\n\ninterface Recording {\n  id: string;\n  active: boolean;\n}\n\ninterface IBaseParty {\n  // Internal identifier of a party\n  id: string;\n  muted: boolean;\n  // If 'True' then the party is not connected to a session voice conference, 'False' means the party is connected to other parties in a session\n  standAlone: boolean;\n  // Call park information\n  park?: {\n    id: string;\n  };\n  accountId: string;\n  extensionId: string;\n  recordings?: Recording[];\n  from: CallPartyInfo;\n  to: CallPartyInfo;\n  direction: CallDirection;\n  attributes?: object;\n}\n"],"mappings":"","ignoreList":[]}