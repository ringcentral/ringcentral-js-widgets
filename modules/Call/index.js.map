{"version":3,"sources":["modules/Call/index.ts"],"names":["TO_NUMBER","FROM_NUMBER","ANONYMOUS","Call","deps","dep","optional","alert","brand","storage","callingSettings","softphone","ringout","webphone","numberValidate","regionSettings","extensionFeatures","internationalCheck","permissionCheck","availabilityMonitor","options","actionTypes","callActionTypes","_brand","_alert","ensureExist","call","_storage","_storageKey","_reducer","_callingSettings","_ringout","_softphone","_webphone","_numberValidate","_regionSettings","_extensionFeatures","_internationalCheck","_availabilityMonitor","_callSettingMode","_permissionCheck","registerReducer","key","reducer","lastPhoneNumber","lastRecipient","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_initCallModule","initSuccess","_shouldReset","_resetCallModule","ready","_processCall","pending","callingMode","callingModes","connect","resetSuccess","disconnect","oldCallSettingMode","value","toNumberChanged","data","entityId","startTime","isIdle","toNumberMatched","cleanToNumberEntities","input","phoneNumber","recipient","fromNumber","isConference","session","extendedControls","toNumber","extension","trim","length","warning","message","callErrors","noToNumber","callSettingMode","_getValidatedNumbers","validatedNumbers","_getNumbers","_makeCall","connectSuccess","connectError","payload","ringoutErrors","firstLegConnectFailed","connectFailed","danger","networkError","checkIfHAError","internalError","isWebphone","theFromNumber","myLocation","waitingValidateNumbers","push","number","parsedToNumber","parsedFromNumber","numbers","map","x","validatedResult","allowRegionSettings","brandConfig","areaCode","countryCode","phoneNumbers","toNumberIndex","findIndex","fromNumberIndex","validateNumbers","result","errors","forEach","error","international","features","InternationalCalling","available","originalString","parsedToNumberE164","e164","subAddress","join","parsedFromNumberE164","homeCountryId","jupiter","makeCall","split","prompt","ringoutPrompt","state","status","callStatus","idle","getItem","toNumberEntities","RcModule","proxify"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n\nimport extractControls from '@ringcentral-integration/phone-number/lib/extractControls';\n\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport proxify from '../../lib/proxy/proxify';\nimport RcModule from '../../lib/RcModule';\nimport { validateNumbers } from '../../lib/validateNumbers';\nimport callingModes from '../CallingSettings/callingModes';\nimport { ringoutErrors } from '../Ringout/ringoutErrors';\nimport callActionTypes from './actionTypes';\nimport callErrors from './callErrors';\nimport { callStatus } from './callStatus';\nimport getCallReducer, {\n  getLastPhoneNumberReducer,\n  getLastRecipientReducer,\n} from './getCallReducer';\n\nconst TO_NUMBER = 'toNumber';\nconst FROM_NUMBER = 'fromNumber';\nconst ANONYMOUS = 'anonymous';\n\n/**\n * @class\n * @description Call managing module\n */\n@Module({\n  deps: [\n    'Alert',\n    'Storage',\n    'Brand',\n    'Softphone',\n    'Ringout',\n    'NumberValidate',\n    'RegionSettings',\n    'CallingSettings',\n    'ExtensionFeatures',\n    { dep: 'Webphone', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'CallOptions', optional: true },\n  ],\n})\nexport default class Call extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Brand} params.brand - brand module instance\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {CallingSettings} params.callingSettings - callingSettings module instance\n   * @param {Softphone} params.softphone - softphone module instance\n   * @param {Ringout} params.ringout - ringout module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {NumberValidate} params.numberValidate - numberValidate module instance\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   */\n  constructor({\n    alert,\n    brand,\n    storage,\n    callingSettings,\n    softphone,\n    ringout,\n    webphone,\n    numberValidate,\n    regionSettings,\n    extensionFeatures,\n    internationalCheck = true,\n    permissionCheck = true,\n    availabilityMonitor,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: callActionTypes,\n    });\n\n    this._brand = brand;\n\n    this._alert = ensureExist.call(this, alert, 'alert');\n    this._storage = ensureExist.call(this, storage, 'storage');\n    this._storageKey = 'callData';\n    this._reducer = getCallReducer(this.actionTypes);\n    this._callingSettings = ensureExist.call(\n      this,\n      callingSettings,\n      'callingSettings',\n    );\n    this._ringout = ensureExist.call(this, ringout, 'ringout');\n    this._softphone = ensureExist.call(this, softphone, 'softphone');\n    this._webphone = webphone;\n    this._numberValidate = ensureExist.call(\n      this,\n      numberValidate,\n      'numberValidate',\n    );\n    this._regionSettings = ensureExist.call(\n      this,\n      regionSettings,\n      'regionSettings',\n    );\n    this._extensionFeatures = extensionFeatures;\n    this._internationalCheck = internationalCheck;\n    this._availabilityMonitor = availabilityMonitor;\n    this._callSettingMode = null;\n    this._permissionCheck = permissionCheck;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: combineReducers({\n        lastPhoneNumber: getLastPhoneNumberReducer(this.actionTypes),\n        lastRecipient: getLastRecipientReducer(this.actionTypes),\n      }),\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._initCallModule();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetCallModule();\n    } else if (this.ready) {\n      await this._processCall();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._numberValidate.ready &&\n      this._callingSettings.ready &&\n      this._storage.ready &&\n      this._regionSettings.ready &&\n      (!this._webphone || this._webphone.ready) &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this._ringout.ready &&\n      this._softphone.ready &&\n      this._extensionFeatures.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._numberValidate.ready ||\n        !this._callingSettings.ready ||\n        !this._regionSettings.ready ||\n        (!!this._webphone && !this._webphone.ready) ||\n        (!!this._availabilityMonitor && !this._availabilityMonitor.ready) ||\n        !this._ringout.ready ||\n        !this._softphone.ready ||\n        !this._extensionFeatures.ready ||\n        !this._storage.ready) &&\n      this.ready\n    );\n  }\n\n  async _initCallModule() {\n    this._callSettingMode = this._callingSettings.callingMode;\n    if (this._callSettingMode === callingModes.webphone && this._webphone) {\n      await this._webphone.connect();\n    }\n  }\n\n  _resetCallModule() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n    this._callSettingMode = this._callingSettings.callingMode;\n    if (this._callSettingMode === callingModes.webphone && this._webphone) {\n      this._webphone.disconnect();\n    }\n  }\n\n  async _processCall() {\n    const oldCallSettingMode = this._callSettingMode;\n    if (this._callingSettings.callingMode !== oldCallSettingMode) {\n      this._callSettingMode = this._callingSettings.callingMode;\n      if (this._webphone) {\n        if (oldCallSettingMode === callingModes.webphone) {\n          this._webphone.disconnect();\n        } else if (this._callSettingMode === callingModes.webphone) {\n          await this._webphone.connect();\n        }\n      }\n    }\n  }\n\n  @proxify\n  async onToNumberChange(value) {\n    this.store.dispatch({\n      type: this.actionTypes.toNumberChanged,\n      data: value,\n    });\n  }\n\n  // save the click to dial entity, only when call took place\n  onToNumberMatch({ entityId, startTime }) {\n    if (this.isIdle) {\n      this.store.dispatch({\n        type: this.actionTypes.toNumberMatched,\n        data: { entityId, startTime },\n      });\n    }\n  }\n\n  cleanToNumberEntities() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanToNumberEntities,\n    });\n  }\n\n  @proxify\n  async call({\n    phoneNumber: input,\n    recipient,\n    fromNumber,\n    isConference = false,\n  }) {\n    let session = null;\n    if (this.isIdle) {\n      const { phoneNumber, extendedControls } = extractControls(input);\n      const toNumber =\n        (recipient && (recipient.phoneNumber || recipient.extension)) ||\n        phoneNumber;\n      if (!toNumber || `${toNumber}`.trim().length === 0) {\n        this._alert.warning({\n          message: callErrors.noToNumber,\n        });\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.connect,\n          isConference,\n          phoneNumber,\n          recipient,\n          callSettingMode: this._callSettingMode, // for Track\n        });\n        try {\n          let validatedNumbers;\n          if (this._permissionCheck) {\n            validatedNumbers = await this._getValidatedNumbers({\n              toNumber,\n              fromNumber,\n              isConference,\n            });\n          } else {\n            validatedNumbers = this._getNumbers({\n              toNumber,\n              fromNumber,\n              isConference,\n            });\n          }\n          if (validatedNumbers) {\n            session = await this._makeCall({\n              ...validatedNumbers,\n              extendedControls,\n            });\n            this.store.dispatch({\n              type: this.actionTypes.connectSuccess,\n              callSettingMode: this._callSettingMode, // for Track\n            });\n          } else {\n            this.store.dispatch({\n              type: this.actionTypes.connectError,\n            });\n          }\n        } catch (error) {\n          if (!error.message && error.type && callErrors[error.type]) {\n            // validate format error\n            this._alert.warning({\n              message: callErrors[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          } else if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._alert.warning({\n              message: callErrors.connectFailed,\n              payload: error,\n            });\n          } else if (error.message === 'Failed to fetch') {\n            this._alert.danger({\n              message: callErrors.networkError,\n              payload: error,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            if (\n              !this._availabilityMonitor ||\n              !(await this._availabilityMonitor.checkIfHAError(error))\n            ) {\n              this._alert.danger({\n                message: callErrors.internalError,\n                payload: error,\n              });\n            }\n          }\n          this.store.dispatch({\n            type: this.actionTypes.connectError,\n          });\n          throw error;\n        }\n      }\n    }\n    return session;\n  }\n\n  @proxify\n  _getNumbers({ toNumber, fromNumber, isConference }) {\n    const isWebphone =\n      this._callingSettings.callingMode === callingModes.webphone;\n    const theFromNumber =\n      fromNumber ||\n      (isWebphone\n        ? this._callingSettings.fromNumber\n        : this._callingSettings.myLocation);\n\n    if (isWebphone && (theFromNumber === null || theFromNumber === '')) {\n      return null;\n    }\n\n    const waitingValidateNumbers = [];\n\n    if (!isConference) {\n      waitingValidateNumbers.push({\n        type: TO_NUMBER,\n        number: toNumber,\n      });\n    }\n\n    if (\n      theFromNumber &&\n      theFromNumber.length > 0 &&\n      !(isWebphone && theFromNumber === ANONYMOUS)\n    ) {\n      waitingValidateNumbers.push({\n        type: FROM_NUMBER,\n        number: theFromNumber,\n      });\n    }\n\n    let parsedToNumber;\n    let parsedFromNumber;\n\n    if (waitingValidateNumbers.length) {\n      const numbers = waitingValidateNumbers.map((x) => x.number);\n      const validatedResult = validateNumbers({\n        allowRegionSettings: this._brand.brandConfig.allowRegionSettings,\n        areaCode: this._regionSettings.areaCode,\n        countryCode: this._regionSettings.countryCode,\n        phoneNumbers: numbers,\n      });\n      const toNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === TO_NUMBER,\n      );\n      const fromNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === FROM_NUMBER,\n      );\n      parsedToNumber = validatedResult[toNumberIndex];\n      parsedFromNumber = validatedResult[fromNumberIndex];\n    }\n    if (isWebphone && theFromNumber === ANONYMOUS) {\n      parsedFromNumber = ANONYMOUS;\n    }\n    return {\n      toNumber: parsedToNumber || toNumber,\n      fromNumber: parsedFromNumber,\n    };\n  }\n\n  @proxify\n  async _getValidatedNumbers({ toNumber, fromNumber, isConference }) {\n    const isWebphone =\n      this._callingSettings.callingMode === callingModes.webphone;\n    const theFromNumber =\n      fromNumber ||\n      (isWebphone\n        ? this._callingSettings.fromNumber\n        : this._callingSettings.myLocation);\n\n    if (isWebphone && (theFromNumber === null || theFromNumber === '')) {\n      return null;\n    }\n\n    const waitingValidateNumbers = [];\n\n    if (!isConference) {\n      waitingValidateNumbers.push({\n        type: TO_NUMBER,\n        number: toNumber,\n      });\n    }\n\n    if (\n      theFromNumber &&\n      theFromNumber.length > 0 &&\n      !(isWebphone && theFromNumber === ANONYMOUS)\n    ) {\n      waitingValidateNumbers.push({\n        type: FROM_NUMBER,\n        number: theFromNumber,\n      });\n    }\n\n    let parsedToNumber;\n    let parsedFromNumber;\n    if (waitingValidateNumbers.length) {\n      const numbers = waitingValidateNumbers.map((x) => x.number);\n      const validatedResult = await this._numberValidate.validateNumbers(\n        numbers,\n      );\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach((error) => {\n          // this._alert.warning({\n          //   message: callErrors[error.type],\n          //   payload: {\n          //     phoneNumber: error.phoneNumber\n          //   }\n          // });\n          throw error;\n        });\n        return null;\n      }\n      const toNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === TO_NUMBER,\n      );\n      const fromNumberIndex = waitingValidateNumbers.findIndex(\n        (x) => x.type === FROM_NUMBER,\n      );\n      parsedToNumber = validatedResult.numbers[toNumberIndex];\n      parsedFromNumber = validatedResult.numbers[fromNumberIndex];\n    }\n    if (this._internationalCheck) {\n      if (\n        parsedToNumber &&\n        parsedToNumber.international &&\n        !this._extensionFeatures.features?.InternationalCalling?.available\n      ) {\n        const error = {\n          phoneNumber: parsedToNumber.originalString,\n          type: 'noInternational',\n        };\n        throw error;\n      }\n    }\n\n    let parsedToNumberE164 = toNumber;\n    if (parsedToNumber) {\n      parsedToNumberE164 = parsedToNumber.e164;\n      // add ext back if any\n      if (parsedToNumber.e164 && parsedToNumber.subAddress) {\n        parsedToNumberE164 = [\n          parsedToNumber.e164,\n          parsedToNumber.subAddress,\n        ].join('*');\n      }\n    }\n\n    // using e164 in response to call\n    let parsedFromNumberE164;\n    if (parsedFromNumber) {\n      parsedFromNumberE164 = parsedFromNumber.e164;\n      // add ext back if any\n      if (parsedFromNumber.e164 && parsedFromNumber.subAddress) {\n        parsedFromNumberE164 = [\n          parsedFromNumber.e164,\n          parsedFromNumber.subAddress,\n        ].join('*');\n      }\n    }\n    if (isWebphone && theFromNumber === ANONYMOUS) {\n      parsedFromNumberE164 = ANONYMOUS;\n    }\n    return {\n      toNumber: parsedToNumberE164,\n      fromNumber: parsedFromNumberE164,\n    };\n  }\n\n  @proxify\n  async _makeCall({\n    toNumber,\n    fromNumber,\n    callingMode = this._callingSettings.callingMode,\n    extendedControls = [],\n  }) {\n    const homeCountryId = this._regionSettings.homeCountryId;\n    let session;\n    switch (callingMode) {\n      case callingModes.softphone:\n      case callingModes.jupiter:\n        session = this._softphone.makeCall(toNumber, callingMode);\n        break;\n      case callingModes.ringout:\n        session = await this._ringout.makeCall({\n          fromNumber,\n          toNumber: toNumber && toNumber.split('*')[0], // remove extension number in ringout mode\n          prompt: this._callingSettings.ringoutPrompt,\n        });\n        break;\n      case callingModes.webphone:\n        if (this._webphone) {\n          session = await this._webphone.makeCall({\n            fromNumber,\n            toNumber,\n            homeCountryId,\n            extendedControls,\n          });\n        }\n        break;\n      default:\n        break;\n    }\n    return session;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get callStatus() {\n    return this.state.callStatus;\n  }\n\n  get isIdle() {\n    return this.state.callStatus === callStatus.idle;\n  }\n\n  get lastPhoneNumber() {\n    return this._storage.getItem(this._storageKey).lastPhoneNumber;\n  }\n\n  get lastRecipient() {\n    return this._storage.getItem(this._storageKey).lastRecipient;\n  }\n\n  get toNumber() {\n    return this.state.toNumber;\n  }\n\n  get toNumberEntities() {\n    return this.state.toNumberEntities;\n  }\n}\n"],"file":"index.js"}