{"version":3,"file":"getReducer.js","names":["_redux","require","_getModuleStatusReducer","_interopRequireDefault","_status","e","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","name","Array","from","test","isArray","length","n","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","toPrimitive","String","Number","getGlipPostsStatusReducer","types","state","undefined","status","idle","_ref","type","fetch","fetching","fetchError","fetchSuccess","getGlipPostsCreateStatusReducer","_ref2","create","creating","createError","createSuccess","getGlipPostsStoreReducer","_ref3","groupId","records","record","oldRecordId","isSendByMe","lastPageToken","newState","newPosts","oldPostIndex","preRecords","concat","findIndex","p","id","splice","creatorId","text","sendStatus","resetSuccess","getGlipPostsInputsReducer","_ref4","textValue","mentions","updatePostInput","getGlipPostsReadTimeReducer","_ref5","_ref5$time","time","Date","now","updateReadTime","getGlipPostsPageInfoReducer","_ref6","navigation","getGlipPostsFetchTimeReducer","_ref7","getGlipPostsReducer","reducers","combineReducers","getModuleStatusReducer","fetchStatus","glipPostsStore","createStatus","postInputs","pageInfos","fetchTimes"],"sources":["modules/GlipPosts/getReducer.ts"],"sourcesContent":["import { combineReducers } from 'redux';\n\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nimport status from './status';\n\nexport function getGlipPostsStatusReducer(types: any) {\n  return (state = status.idle, { type }: any) => {\n    switch (type) {\n      case types.fetch:\n        return status.fetching;\n      case types.fetchError:\n      case types.fetchSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsCreateStatusReducer(types: any) {\n  return (state = status.idle, { type }: any) => {\n    switch (type) {\n      case types.create:\n        return status.creating;\n      case types.createError:\n      case types.createSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsStoreReducer(types: any) {\n  return (\n    state = {},\n    {\n      type,\n      groupId,\n      records,\n      record,\n      oldRecordId,\n      isSendByMe,\n      lastPageToken,\n    }: any,\n  ) => {\n    let newState;\n    let newPosts;\n    let oldPostIndex;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        if (!lastPageToken) {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          newState[groupId] = records;\n        } else {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          const preRecords = newState[groupId];\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          newState[groupId] = [].concat(preRecords).concat(records);\n        }\n        return newState;\n      case types.create:\n      case types.createSuccess:\n      case types.createError:\n        newState = {\n          ...state,\n        };\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        newPosts = (newState[groupId] && [...newState[groupId]]) || [];\n        if (oldRecordId) {\n          oldPostIndex = newPosts.findIndex((p: any) => p.id === oldRecordId);\n        } else {\n          oldPostIndex = newPosts.findIndex((p: any) => p.id === record.id);\n        }\n        if (oldPostIndex > -1) {\n          newPosts.splice(oldPostIndex, 1, record);\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          newState[groupId] = newPosts;\n        } else if (isSendByMe) {\n          oldPostIndex = newPosts.findIndex(\n            (p: any) =>\n              p.creatorId === record.creatorId &&\n              p.text === record.text &&\n              p.sendStatus === status.creating,\n          );\n          if (oldPostIndex === -1) {\n            // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n            newState[groupId] = [record].concat(\n              newPosts.filter((p: any) => p.id !== record.id),\n            );\n          }\n        } else {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          newState[groupId] = [record].concat(\n            newPosts.filter((p: any) => p.id !== record.id),\n          );\n        }\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsInputsReducer(types: any) {\n  return (state = {}, { type, groupId, textValue, mentions }: any) => {\n    let newState;\n    switch (type) {\n      case types.updatePostInput:\n        newState = {\n          ...state,\n        };\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        newState[groupId] = {\n          text: textValue,\n          mentions,\n        };\n        return newState;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsReadTimeReducer(types: any) {\n  return (state = {}, { type, groupId, time = Date.now() }: any) => {\n    let newState;\n    switch (type) {\n      case types.updateReadTime:\n        newState = {\n          ...state,\n        };\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        newState[groupId] = time;\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsPageInfoReducer(types: any) {\n  return (state = {}, { type, groupId, navigation }: any) => {\n    let newState;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        newState[groupId] = navigation;\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsFetchTimeReducer(types: any) {\n  return (state = {}, { type, groupId }: any) => {\n    let newState;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        newState[groupId] = Date.now();\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getGlipPostsReducer(types: any, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    fetchStatus: getGlipPostsStatusReducer(types),\n    glipPostsStore: getGlipPostsStoreReducer(types),\n    createStatus: getGlipPostsCreateStatusReducer(types),\n    postInputs: getGlipPostsInputsReducer(types),\n    pageInfos: getGlipPostsPageInfoReducer(types),\n    fetchTimes: getGlipPostsFetchTimeReducer(types),\n  });\n}\n"],"mappings":"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","ignoreList":[]}