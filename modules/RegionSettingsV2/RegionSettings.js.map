{"version":3,"sources":["modules/RegionSettingsV2/RegionSettings.ts"],"names":["RegionSettings","name","deps","dep","optional","that","_deps","dialingPlan","plans","extensionInfo","country","availableCountries","countryCode","enableCache","storageKey","storage","migrationMapping","areaCode","data","ready","tabManager","active","checkRegionSettings","alert","warning","allowDuplicates","message","regionSettingsMessages","dialingPlansChanged","ttl","plan","isoCode","brand","id","_alertSettingsChanged","_setData","danger","areaCodeInvalid","trim","info","saveSuccess","setData","length","homeCountry","find","homeCountryId","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import { find } from 'ramda';\nimport {\n  action,\n  RcModuleV2,\n  state,\n  storage,\n  watch,\n  computed,\n} from '@ringcentral-integration/core';\nimport { Module } from '../../lib/di';\nimport { regionSettingsMessages } from './regionSettingsMessages';\nimport validateAreaCode from '../../lib/validateAreaCode';\nimport proxify from '../../lib/proxy/proxify';\nimport { Deps, RegionSettingsData } from './RegionSettings.interface';\n\n@Module({\n  name: 'RegionSettings',\n  deps: [\n    'Brand',\n    'Alert',\n    'DialingPlan',\n    'ExtensionInfo',\n    'Storage',\n    { dep: 'TabManager', optional: true },\n    { dep: 'RegionSettingsOptions', optional: true },\n  ],\n})\nexport class RegionSettings extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'RegionSettings',\n    });\n    /* migration storage v1 to v2 */\n    if (this._deps.storage) {\n      this._deps.storage.migrationMapping =\n        this._deps.storage.migrationMapping ?? {};\n      this._deps.storage.migrationMapping['RegionSettings-data'] = {\n        countryCode: 'regionSettingsCountryCode',\n        areaCode: 'regionSettingsAreaCode',\n      };\n    }\n    /* migration storage v1 to v2 */\n  }\n\n  @storage\n  @state\n  data = {\n    countryCode: 'US',\n    areaCode: '',\n  };\n\n  get countryCode() {\n    return this.data.countryCode || 'US';\n  }\n\n  get areaCode() {\n    return this.data.areaCode || '';\n  }\n\n  @action\n  _setData({\n    countryCode = this.data.countryCode,\n    areaCode = this.data.areaCode,\n  }: RegionSettingsData) {\n    this.data.countryCode = countryCode;\n    this.data.areaCode = areaCode;\n  }\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this.availableCountries,\n      () => {\n        if (\n          this.ready &&\n          (!this._deps.tabManager || this._deps.tabManager.active)\n        ) {\n          this.checkRegionSettings();\n        }\n      },\n    );\n  }\n\n  onInit() {\n    if (!this._deps.tabManager || this._deps.tabManager.active) {\n      this.checkRegionSettings();\n    }\n  }\n\n  @computed((that: RegionSettings) => [\n    that._deps.dialingPlan.plans,\n    that._deps.extensionInfo.country,\n  ])\n  get availableCountries() {\n    const plans = this._deps.dialingPlan.plans;\n    const country = this._deps.extensionInfo.country;\n    if (plans && plans.length > 0) {\n      return plans;\n    }\n    return country ? [country] : [];\n  }\n\n  _alertSettingsChanged() {\n    this._deps.alert.warning({\n      allowDuplicates: false,\n      message: regionSettingsMessages.dialingPlansChanged,\n      ttl: 0,\n    });\n  }\n\n  @proxify\n  async checkRegionSettings() {\n    let { countryCode } = this;\n    if (\n      countryCode &&\n      !find((plan) => plan.isoCode === countryCode, this.availableCountries)\n    ) {\n      countryCode = null;\n      if (this._deps.brand.id === '1210') {\n        this._alertSettingsChanged();\n      }\n    }\n    if (!countryCode) {\n      const country =\n        find(\n          (plan) => plan.isoCode === this._deps.extensionInfo.country.isoCode,\n          this.availableCountries,\n        ) || this.availableCountries[0];\n      countryCode = country && country.isoCode;\n      this._setData({\n        countryCode,\n        areaCode: '',\n      });\n    }\n  }\n\n  @proxify\n  async setData({ areaCode, countryCode }: RegionSettingsData) {\n    if (!validateAreaCode(areaCode)) {\n      this._deps.alert.danger({\n        message: regionSettingsMessages.areaCodeInvalid,\n      });\n      return;\n    }\n    this._setData({\n      countryCode,\n      areaCode: areaCode && areaCode.trim(),\n    });\n    this._deps.alert.info({\n      message: regionSettingsMessages.saveSuccess,\n    });\n  }\n\n  setCountryCode(countryCode: RegionSettingsData['countryCode']) {\n    this.setData({\n      countryCode,\n    });\n  }\n\n  setAreaCode(areaCode: RegionSettingsData['areaCode']) {\n    this.setData({\n      areaCode,\n    });\n  }\n\n  @computed(({ availableCountries }: RegionSettings) => [availableCountries])\n  get showRegionSetting() {\n    if (this.availableCountries.length > 1) {\n      return true;\n    }\n    if (\n      this.availableCountries.length === 1 &&\n      (this.availableCountries[0].isoCode === 'US' ||\n        this.availableCountries[0].isoCode === 'CA')\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  @computed(({ availableCountries, countryCode }: RegionSettings) => [\n    availableCountries,\n    countryCode,\n  ])\n  get homeCountryId() {\n    const homeCountry = this.availableCountries.find(\n      (country) => country.isoCode === this.countryCode,\n    );\n    const homeCountryId = (homeCountry && homeCountry.id) || '1';\n    return homeCountryId;\n  }\n}\n"],"file":"RegionSettings.js"}