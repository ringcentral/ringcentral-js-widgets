{"version":3,"sources":["modules/ComposeTextUI/index.test.ts"],"names":["describe","phone","composeText","validatePhoneNumber","string","test","addToNumber","jest","fn","mockResolvedValue","beforeEach","clearAllMocks","funcs","ComposeTextUI","getUIFunctions","detectPhoneNumbers","result","expect","toBe","not","toBeCalled","toBeCalledTimes","toBeCalledWith","phoneNumber","toHaveBeenNthCalledWith"],"mappings":"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","sourcesContent":["import { ComposeTextUI } from './ComposeTextUI';\n\ndescribe('detectPhoneNumbers', () => {\n  const phone = {\n    composeText: {\n      validatePhoneNumber(string) {\n        return /^\\d*$/.test(string);\n      },\n      addToNumber: jest.fn().mockResolvedValue(true),\n    },\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test('when text is a plain text without valid phone number', async () => {\n    const funcs = new ComposeTextUI(phone).getUIFunctions({ phone });\n    const result = await funcs.detectPhoneNumbers('sabasdf, qwerrrr');\n    expect(result).toBe(false);\n    expect(phone.composeText.addToNumber).not.toBeCalled();\n  });\n\n  test('when text is a valid phone number', async () => {\n    const funcs = new ComposeTextUI(phone).getUIFunctions({ phone });\n    const result = await funcs.detectPhoneNumbers('123444');\n    expect(result).toBe(true);\n    expect(phone.composeText.addToNumber).toBeCalledTimes(1);\n    expect(phone.composeText.addToNumber).toBeCalledWith({\n      phoneNumber: '123444',\n    });\n  });\n\n  test('when text is \"sabasdf, 1234\"', async () => {\n    const funcs = new ComposeTextUI(phone).getUIFunctions({ phone });\n    const result = await funcs.detectPhoneNumbers('sabasdf, 1234');\n    expect(result).toBe(true);\n    expect(phone.composeText.addToNumber).toBeCalledTimes(1);\n    expect(phone.composeText.addToNumber).toBeCalledWith({\n      phoneNumber: '1234',\n    });\n  });\n\n  test('when text is \"1234,5555\"', async () => {\n    const funcs = new ComposeTextUI(phone).getUIFunctions({ phone });\n    const result = await funcs.detectPhoneNumbers('1234,5555');\n    expect(result).toBe(true);\n    expect(phone.composeText.addToNumber).toBeCalledTimes(2);\n    expect(phone.composeText.addToNumber).toHaveBeenNthCalledWith(1, {\n      phoneNumber: '1234',\n    });\n    expect(phone.composeText.addToNumber).toHaveBeenNthCalledWith(2, {\n      phoneNumber: '5555',\n    });\n  });\n});\n"],"file":"index.test.js"}