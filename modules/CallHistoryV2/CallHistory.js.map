{"version":3,"sources":["modules/CallHistoryV2/CallHistory.ts"],"names":["DEFAULT_CLEAN_TIME","CallHistory","name","deps","dep","optional","trackEvents","clickToSMSCallHistory","that","parentModule","callingSettings","callingMode","callingModes","ringout","clickToDialCallHistoryWithRingOut","clickToDialCallHistory","_deps","callLog","calls","accountInfo","countryCode","normalizedCalls","endedCalls","contactMatcher","dataMapping","activityMatcher","callMonitor","callMatched","filterCalls","searchInput","filteredCalls","storageKey","enableCache","callHistoryOptions","_debouncedSearch","callsSearch","enableContactMatchInCallHistory","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","tabManager","sessionIds","data","input","timestamp","call","callWithDuration","duration","Math","floor","startTime","idx","item","telephonySessionId","push","filter","find","Date","now","markedList","markRemoved","concat","active","triggerMatch","newMonitorCalls","oldMonitorCalls","currentCall","flag","length","_addEndedCalls","currentCalls","ids","forEach","shouldRemovedCalls","removeEndedCalls","multiple","setSearchInput","cleanEndedCalls","result","setEndedCalls","sync","contactMapping","pickNumber","enableFullPhoneNumberMatch","pickFullPhoneNumber","pickPhoneOrExtensionNumber","fromNumber","from","phoneNumber","extensionNumber","toNumber","to","fromMatches","toMatches","args","effectSearchStr","toLowerCase","trim","matches","matchesMatched","some","entities","id","indexOf","phone","sort","sortByStartTime","filterSuccess","map","callFrom","callTo","activityMapping","telephonySessionIds","fromName","toName","findMatches","activityMatches","sessionId","matched","toNumberEntity","filteredEndedCalls","newCalls","output","numberMap","RcModuleV2","storage","state","action","proxify"],"mappings":"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","sourcesContent":["import { findIndex, forEach } from 'ramda';\n\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n  watch,\n} from '@ringcentral-integration/core';\n\nimport { Call } from '../../interfaces/Call.interface';\nimport { Entity } from '../../interfaces/Entity.interface';\nimport { ActiveCall } from '../../interfaces/Presence.model';\nimport {\n  getPhoneNumberMatches,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport debounce from '../../lib/debounce';\nimport { Module } from '../../lib/di';\nimport { normalizeNumber } from '../../lib/normalizeNumber';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { trackEvents } from '../Analytics';\nimport { callingModes } from '../CallingSettingsV2';\nimport { Deps, HistoryCall } from './CallHistory.interface';\nimport {\n  addNumbersFromCall,\n  pickFullPhoneNumber,\n  pickPhoneOrExtensionNumber,\n} from './callHistoryHelper';\n\nconst DEFAULT_CLEAN_TIME = 24 * 60 * 60 * 1000; // 1 day\n\n@Module({\n  name: 'CallHistory',\n  deps: [\n    'AccountInfo',\n    'CallLog',\n    'Storage',\n    { dep: 'CallMonitor', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'CallHistoryOptions', optional: true },\n  ],\n})\nexport class CallHistory<T extends Deps = Deps> extends RcModuleV2<T> {\n  private _debouncedSearch = debounce(this.callsSearch, 230, false);\n\n  constructor(deps: T) {\n    super({\n      deps,\n      storageKey: 'CallHistory',\n      enableCache: deps.callHistoryOptions?.enableCache ?? true,\n    });\n    const enableContactMatchInCallHistory =\n      this._deps.callHistoryOptions?.enableContactMatchInCallHistory ?? true;\n    if (enableContactMatchInCallHistory && this._deps.contactMatcher) {\n      this._deps.contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () =>\n          (!this._deps.callMonitor || this._deps.callMonitor.ready) &&\n          (!this._deps.tabManager || this._deps.tabManager.ready) &&\n          this._deps.callLog.ready &&\n          this._deps.accountInfo.ready,\n      });\n    }\n    this._deps.activityMatcher?.addQuerySource({\n      getQueriesFn: () => this.sessionIds,\n      readyCheckFn: () =>\n        (!this._deps.callMonitor || this._deps.callMonitor.ready) &&\n        (!this._deps.tabManager || this._deps.tabManager.ready) &&\n        this._deps.callLog.ready,\n    });\n  }\n\n  @storage\n  @state\n  endedCalls: Call[] = [];\n\n  @state\n  searchInput = '';\n\n  @state\n  filteredCalls: HistoryCall[] = [];\n\n  @action\n  filterSuccess(data: HistoryCall[] = []) {\n    this.filteredCalls = data;\n  }\n\n  @action\n  setSearchInput(input = '') {\n    this.searchInput = input;\n  }\n\n  @action\n  setEndedCalls(endedCalls: Call[], timestamp: number) {\n    forEach((call) => {\n      const callWithDuration = {\n        ...call,\n        duration: Math.floor((timestamp - call.startTime) / 1000),\n      };\n      const idx = findIndex(\n        (item) => item.telephonySessionId === call.telephonySessionId,\n        this.endedCalls,\n      );\n      if (idx > -1) {\n        // replace old one if found\n        this.endedCalls[idx] = callWithDuration;\n      } else {\n        this.endedCalls.push(callWithDuration);\n      }\n    }, endedCalls);\n  }\n\n  @action\n  removeEndedCalls(endedCalls: Pick<Call, 'telephonySessionId'>[]) {\n    this.endedCalls = this.endedCalls.filter(\n      (call) =>\n        !(\n          endedCalls.find(\n            ({ telephonySessionId }) =>\n              telephonySessionId === call.telephonySessionId,\n          ) ||\n          // clean current overdue ended call (default clean time: 1day).\n          Date.now() - call.startTime > DEFAULT_CLEAN_TIME\n        ),\n    );\n  }\n\n  @action\n  cleanEndedCalls() {\n    this.endedCalls = [];\n  }\n\n  @action\n  removeAllEndedCalls() {\n    this.endedCalls = [];\n    this.markedList = [];\n    this.markRemoved();\n  }\n\n  // The call logs which has been removed from remote\n  // The marked telephonySessionId should not been added to ended calls afterwards.\n  @storage\n  @state\n  markedList: Pick<Call, 'telephonySessionId'>[] = [];\n\n  @action\n  markRemoved() {\n    this.markedList = this.markedList.concat(this._deps.callMonitor.calls);\n  }\n\n  onInitOnce() {\n    if (this._deps.contactMatcher) {\n      watch(\n        this,\n        () => this.uniqueNumbers,\n        () => {\n          if (\n            this.ready &&\n            (!this._deps.tabManager || this._deps.tabManager.active) &&\n            this._deps.contactMatcher.ready\n          ) {\n            this._deps.contactMatcher.triggerMatch();\n          }\n        },\n      );\n    }\n\n    if (this._deps.activityMatcher) {\n      watch(\n        this,\n        () => this.sessionIds,\n        () => {\n          if (\n            this.ready &&\n            (!this._deps.tabManager || this._deps.tabManager.active) &&\n            this._deps.activityMatcher.ready\n          ) {\n            this._deps.activityMatcher.triggerMatch();\n          }\n        },\n      );\n    }\n\n    this._deps.callMonitor &&\n      watch(\n        this,\n        () => this._deps.callMonitor.calls,\n        (newMonitorCalls, oldMonitorCalls) => {\n          if (!this.ready) return;\n          const endedCalls = (oldMonitorCalls || []).filter(\n            (call) =>\n              !newMonitorCalls.find(\n                (currentCall) =>\n                  call.telephonySessionId === currentCall.telephonySessionId,\n              ) &&\n              // if the call's callLog has been fetch, skip\n              !this._deps.callLog.calls.find(\n                (currentCall) =>\n                  call.telephonySessionId === currentCall.telephonySessionId,\n              ) &&\n              // if delete all during active call\n              !this.markedList.find((currentCall) => {\n                const flag =\n                  call.telephonySessionId === currentCall.telephonySessionId;\n                return flag;\n              }),\n          );\n          if (endedCalls.length) {\n            this._addEndedCalls(endedCalls);\n          }\n        },\n      );\n\n    watch(\n      this,\n      // use watch multiple, because this.ready is async, can't become true in time, so need watch this.ready, too\n      () => [this._deps.callLog.calls, this.ready],\n      ([currentCalls = [], ready]) => {\n        if (!ready) return;\n        const ids: Record<string, boolean> = {};\n        currentCalls.forEach((call) => {\n          ids[call.telephonySessionId] = true;\n        });\n        const shouldRemovedCalls = this.endedCalls.filter(\n          (call) => ids[call.telephonySessionId],\n        );\n        if (shouldRemovedCalls.length) {\n          this.removeEndedCalls(shouldRemovedCalls);\n        }\n      },\n      {\n        multiple: true,\n      },\n    );\n  }\n\n  onReset() {\n    this.setSearchInput('');\n    this.cleanEndedCalls();\n  }\n\n  _addEndedCalls(endedCalls: Call[]) {\n    endedCalls.forEach((call) => {\n      // TODO: refactor with immutable data update\n      call.result = 'Disconnected';\n    });\n    this.setEndedCalls(endedCalls, Date.now());\n    this._deps.callLog.sync();\n  }\n\n  // TODO: move to UI module\n  // for track click to sms in call history\n  @proxify\n  @track(trackEvents.clickToSMSCallHistory)\n  async onClickToSMS() {}\n\n  // TODO: move to UI module\n  // for track click to call in call history\n  @proxify\n  @track((that: CallHistory) => [\n    (that.parentModule as any).callingSettings?.callingMode ===\n    callingModes.ringout\n      ? trackEvents.clickToDialCallHistoryWithRingOut\n      : trackEvents.clickToDialCallHistory,\n  ])\n  async onClickToCall() {}\n\n  @proxify\n  async updateSearchInput(input: string) {\n    this.setSearchInput(input);\n  }\n\n  @computed((that: CallHistory) => [\n    that._deps.callLog.calls,\n    that._deps.accountInfo.countryCode,\n  ])\n  get normalizedCalls(): ActiveCall[] {\n    return this._deps.callLog.calls\n      .map((call) => {\n        const callFrom = {\n          ...call.from,\n        };\n        if (callFrom.phoneNumber) {\n          callFrom.phoneNumber = normalizeNumber({\n            phoneNumber: callFrom.phoneNumber,\n            countryCode: this._deps.accountInfo.countryCode,\n          });\n        }\n        const callTo = {\n          ...call.to,\n        };\n        if (callTo.phoneNumber) {\n          callTo.phoneNumber = normalizeNumber({\n            phoneNumber: callTo.phoneNumber,\n            countryCode: this._deps.accountInfo.countryCode,\n          });\n        }\n        return {\n          ...call,\n          from: callFrom,\n          to: callTo,\n        };\n      })\n      .sort(sortByStartTime);\n  }\n\n  get enableFullPhoneNumberMatch() {\n    return this._deps.callHistoryOptions?.enableFullPhoneNumberMatch ?? false;\n  }\n\n  /**\n   * Allow sub class to have different find matches logic.\n   * @param contactMapping\n   * @param call\n   * @returns\n   */\n  findMatches(contactMapping: Record<string, Entity[]>, call: Call) {\n    const pickNumber = this.enableFullPhoneNumberMatch\n      ? pickFullPhoneNumber\n      : pickPhoneOrExtensionNumber;\n\n    const fromNumber =\n      call.from && pickNumber(call.from.phoneNumber, call.from.extensionNumber);\n    const toNumber =\n      call.to && pickNumber(call.to.phoneNumber, call.to.extensionNumber);\n\n    const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n    const toMatches = (toNumber && contactMapping[toNumber]) || [];\n    return {\n      fromMatches,\n      toMatches,\n    };\n  }\n\n  @computed((that: CallHistory) => [\n    that.normalizedCalls,\n    that.endedCalls,\n    that._deps.contactMatcher?.dataMapping,\n    that._deps.activityMatcher?.dataMapping,\n    that._deps.callMonitor?.callMatched,\n  ])\n  get calls(): HistoryCall[] {\n    const contactMapping = this._deps.contactMatcher?.dataMapping ?? {};\n    const activityMapping = this._deps.activityMatcher?.dataMapping ?? {};\n    const callMatched = this._deps.callMonitor?.callMatched ?? {};\n    const telephonySessionIds: Record<string, boolean> = {};\n    const calls = this.normalizedCalls.map((call) => {\n      telephonySessionIds[call.telephonySessionId] = true;\n      const fromName = call.from.name || call.from.phoneNumber;\n      const toName = call.to.name || call.to.phoneNumber;\n      const { fromMatches, toMatches } = this.findMatches(contactMapping, call);\n      const activityMatches = activityMapping[call.sessionId] || [];\n      const matched = callMatched[call.sessionId];\n      return {\n        ...call,\n        fromName,\n        toName,\n        fromMatches,\n        toMatches,\n        activityMatches,\n        toNumberEntity: matched,\n      };\n    });\n    const filteredEndedCalls = this.endedCalls\n      .filter((call) => !telephonySessionIds[call.telephonySessionId])\n      .map((call) => {\n        const activityMatches = activityMapping[call.sessionId] || [];\n        const fromNumber =\n          call.from && (call.from.phoneNumber || call.from.extensionNumber);\n        const toNumber =\n          call.to && (call.to.phoneNumber || call.to.extensionNumber);\n        const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n        const toMatches = (toNumber && contactMapping[toNumber]) || [];\n        return {\n          ...call,\n          activityMatches,\n          fromMatches,\n          toMatches,\n        };\n      });\n    return [...filteredEndedCalls, ...calls].sort(sortByStartTime);\n  }\n\n  @proxify\n  async debouncedSearch(...args: any[]) {\n    this._debouncedSearch.call(this, ...args);\n  }\n\n  @proxify\n  async callsSearch() {\n    if (this.searchInput === '') {\n      return;\n    }\n    const calls = this.calls;\n    const searchInput = this.searchInput;\n    const effectSearchStr = searchInput.toLowerCase().trim();\n    const data = calls\n      .filter((call) => {\n        const { phoneNumber, matches } = getPhoneNumberMatches(call);\n        const matchesMatched = matches.some((entities) => {\n          if (!entities || !entities.id) return false;\n          if (\n            entities.name &&\n            entities.name.toLowerCase().indexOf(effectSearchStr) > -1\n          )\n            return true;\n          if (entities.phone && entities.phone.indexOf(effectSearchStr) > -1)\n            return true;\n          return false;\n        });\n\n        if (matchesMatched) {\n          return true;\n        }\n        if (phoneNumber && phoneNumber.indexOf(effectSearchStr) > -1) {\n          return true;\n        }\n        return false;\n      })\n      .sort(sortByStartTime);\n\n    this.filterSuccess(data);\n  }\n\n  @computed((that: CallHistory) => [\n    that.filterCalls,\n    that._deps.activityMatcher?.dataMapping,\n  ])\n  get latestCalls() {\n    if (this._deps.activityMatcher?.dataMapping) {\n      const newCalls = this.filterCalls.map((call) => ({\n        ...call,\n        activityMatches:\n          this._deps.activityMatcher?.dataMapping[call.sessionId] || [],\n      }));\n      return newCalls;\n    }\n    return this.filterCalls;\n  }\n\n  @computed((that: CallHistory) => [that.normalizedCalls, that.endedCalls])\n  get uniqueNumbers() {\n    const output: string[] = [];\n    const numberMap: Record<string, boolean> = {};\n    this.normalizedCalls.forEach(\n      addNumbersFromCall(output, numberMap, this.enableFullPhoneNumberMatch),\n    );\n    this.endedCalls.forEach(\n      addNumbersFromCall(output, numberMap, this.enableFullPhoneNumberMatch),\n    );\n    return output;\n  }\n\n  @computed((that: CallHistory) => [that._deps.callLog.calls, that.endedCalls])\n  get sessionIds() {\n    const sessionIds: Record<string, boolean> = {};\n    return this._deps.callLog.calls\n      .map((call) => {\n        sessionIds[call.sessionId] = true;\n        return call.sessionId;\n      })\n      .concat(\n        this.endedCalls\n          .filter((call) => !sessionIds[call.sessionId])\n          .map((call) => call.sessionId),\n      );\n  }\n\n  @computed((that: CallHistory) => [\n    that.searchInput,\n    that.calls,\n    that.filteredCalls,\n  ])\n  get filterCalls() {\n    if (this.searchInput === '') {\n      return this.calls;\n    }\n    return this.filteredCalls;\n  }\n\n  // TODO: remove recentlyEndedCalls getter, instead of `endedCalls`.\n  /**\n   * !!Please use `endedCalls` instead of it.\n   * @deprecated\n   */\n  get recentlyEndedCalls() {\n    return this.endedCalls;\n  }\n}\n"],"file":"CallHistory.js"}