{"version":3,"sources":["modules/ConnectivityManager/ConnectivityManager.ts"],"names":["ConnectivityManager","deps","dep","optional","that","_deps","connectivityMonitor","networkLoss","connectivity","proxyRetryCount","isVoIPOnlyModeActivated","isLimitedModeActivated","webphoneAvailable","webphoneUnavailable","connectivityType","ready","showConnectivityAlert","callingSettings","isWebphoneMode","audioSettings","showAlert","getUserMedia","webphone","connect","force","skipConnectDelay","availabilityMonitor","healthCheck","message","alert","danger","allowDuplicates","alertIds","messages","filter","m","type","connectivityTypes","map","id","length","dismiss","_hideAlerts","_showAlert","auth","loggedIn","userMedia","connected","disconnected","connecting","connectFailed","reconnecting","connectError","inactive","oAuth","isVoIPOnlyMode","isLimitedMode","hasLimitedStatusError","offline","voipOnly","serverUnavailable","survival","mode","RcModuleV2","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcMA,mB,WAZL,gBAAO;AACNC,EAAAA,IAAI,EAAE,CACJ,OADI,EAEJ,OAFI,EAGJ,MAHI,EAIJ,qBAJI,EAKJ;AAAEC,IAAAA,GAAG,EAAE,qBAAP;AAA8BC,IAAAA,QAAQ,EAAE;AAAxC,GALI,EAMJ;AAAED,IAAAA,GAAG,EAAE,iBAAP;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GANI,EAOJ;AAAED,IAAAA,GAAG,EAAE,eAAP;AAAwBC,IAAAA,QAAQ,EAAE;AAAlC,GAPI,EAQJ;AAAED,IAAAA,GAAG,EAAE,UAAP;AAAmBC,IAAAA,QAAQ,EAAE;AAA7B,GARI;AADA,CAAP,C,UA6KE,oBAAS,UAACC,IAAD;AAAA,SAA+B,CACvCA,IAAI,CAACC,KAAL,CAAWC,mBAAX,CAA+BC,WADQ,EAEvCH,IAAI,CAACC,KAAL,CAAWC,mBAAX,CAA+BE,YAFQ,EAGvCJ,IAAI,CAACK,eAHkC,EAIvCL,IAAI,CAACM,uBAJkC,EAKvCN,IAAI,CAACO,sBALkC,EAMvCP,IAAI,CAACQ,iBANkC,EAOvCR,IAAI,CAACS,mBAPkC,CAA/B;AAAA,CAAT,C,UAwBA,oBAAS,UAACT,IAAD;AAAA,SAA+B,CAACA,IAAI,CAACU,gBAAN,CAA/B;AAAA,CAAT,C;;;;;AAxLD,+BAAYb,IAAZ,EAAwB;AAAA;;AAAA,6BAChB;AACJA,MAAAA,IAAI,EAAJA;AADI,KADgB;AAIvB;;;;iCAEY;AAAA;;AACX,uBACE,IADF,EAEE;AAAA,eAAM,KAAI,CAACa,gBAAX;AAAA,OAFF,EAGE,YAAM;AACJ,YAAI,KAAI,CAACC,KAAT,EAAgB;AACd,UAAA,KAAI,CAACC,qBAAL;AACD;AACF,OAPH;AASD;;;;;;;;;sBAKG,CAAC,KAAKX,KAAL,CAAWY,eAAZ,IACC,KAAKZ,KAAL,CAAWY,eAAX,KACE,CAAC,KAAKZ,KAAL,CAAWY,eAAX,CAA2BF,KAA5B,IACC,CAAC,KAAKV,KAAL,CAAWY,eAAX,CAA2BC,cAF/B,C;;;;;;;;AAMH,oBAAI,KAAKb,KAAL,CAAWc,aAAX,IAA4B,KAAKd,KAAL,CAAWc,aAAX,CAAyBJ,KAAzD,EAAgE;AAC9D,uBAAKV,KAAL,CAAWc,aAAX,CAAyBC,SAAzB;;AACA,uBAAKf,KAAL,CAAWc,aAAX,CAAyBE,YAAzB;AACD;;AACD,oBAAI,KAAKhB,KAAL,CAAWiB,QAAX,IAAuB,KAAKjB,KAAL,CAAWiB,QAAX,CAAoBP,KAA/C,EAAsD;AACpD,uBAAKV,KAAL,CAAWiB,QAAX,CAAoBC,OAApB,CAA4B;AAAEC,oBAAAA,KAAK,EAAE,IAAT;AAAeC,oBAAAA,gBAAgB,EAAE;AAAjC,mBAA5B;AACD;;;;;;;;;;;;;;;;;;;;;;;;oBAKI,KAAKpB,KAAL,CAAWqB,mB;;;;;;;;AAIhB,qBAAKrB,KAAL,CAAWqB,mBAAX,CAA+BC,WAA/B;;;;;;;;;;;;;;;;;;+BAGSC,O,EAAiB;AAC1B,UAAIA,OAAJ,EAAa;AACX,aAAKvB,KAAL,CAAWwB,KAAX,CAAiBC,MAAjB,CAAwB;AACtBF,UAAAA,OAAO,EAAPA,OADsB;AAEtBG,UAAAA,eAAe,EAAE;AAFK,SAAxB;AAID;AACF;;;kCAEa;AACZ,UAAMC,QAAQ,GAAG,KAAK3B,KAAL,CAAWwB,KAAX,CAAiBI,QAAjB,CACdC,MADc,CACP,UAACC,CAAD,EAAO;AACb,aAAK,IAAMC,IAAX,IAAmBC,oCAAnB,EAAsC;AACpC,cACEF,CAAC,CAACP,OAAF,KACAS,qCAAkBD,IAAlB,CAFF,EAIE,OAAO,IAAP;AACH;;AACD,eAAO,KAAP;AACD,OAVc,EAWdE,GAXc,CAWV,UAACH,CAAD;AAAA,eAAOA,CAAC,CAACI,EAAT;AAAA,OAXU,CAAjB;;AAYA,UAAIP,QAAQ,CAACQ,MAAb,EAAqB;AACnB,aAAKnC,KAAL,CAAWwB,KAAX,CAAiBY,OAAjB,CAAyBT,QAAzB;AACD;AACF;;;;;;;;;AAIC,oBACE,CAAC,KAAKlB,gBAAN,IACA,KAAKA,gBAAL,KAA0BuB,qCAAkBxB,mBAF9C,EAGE;AACA,uBAAK6B,WAAL;AACD,iBALD,MAKO;AACL,uBAAKC,UAAL,CAAgB,KAAK7B,gBAArB;AACD;;;;;;;;;;;;;;;;;;wBAGqB;AACtB,aACE,KAAKT,KAAL,CAAWiB,QAAX,IACA,KAAKjB,KAAL,CAAWY,eADX,IAEA,KAAKZ,KAAL,CAAWc,aAFX,IAGA,KAAKd,KAAL,CAAWc,aAAX,CAAyBJ,KAHzB,IAIA,KAAKV,KAAL,CAAWY,eAAX,CAA2BF,KAJ3B,IAKA,KAAKV,KAAL,CAAWuC,IAAX,CAAgB7B,KALhB,IAMA,KAAKV,KAAL,CAAWuC,IAAX,CAAgBC,QANhB,IAOA,KAAKxC,KAAL,CAAWY,eAAX,CAA2BC,cAP3B,IAQA,KAAKb,KAAL,CAAWc,aAAX,CAAyB2B,SARzB,IASA,KAAKzC,KAAL,CAAWiB,QAAX,CAAoByB,SAVtB;AAYD;;;wBAE4B;AAAA;;AAC3B,aACE,CAAC,2BAAC,KAAK1C,KAAL,CAAWY,eAAZ,0DAAC,sBAA4BC,cAA7B,CAAD,KACC,CAAC,KAAKb,KAAL,CAAWiB,QAAX,CAAoBP,KAArB,IACC,KAAKV,KAAL,CAAWiB,QAAX,CAAoB0B,YADrB,IAEC,KAAK3C,KAAL,CAAWiB,QAAX,CAAoB2B,UAFrB,IAGC,KAAK5C,KAAL,CAAWiB,QAAX,CAAoB4B,aAJtB,CADF;AAOD;;;wBAEwB;AAAA;;AACvB,aACE,CAAC,0BAAC,KAAK7C,KAAL,CAAWiB,QAAZ,yDAAC,qBAAqBP,KAAtB,CAAD,KACC,KAAKV,KAAL,CAAWiB,QAAX,CAAoB2B,UAApB,IAAkC,KAAK5C,KAAL,CAAWiB,QAAX,CAAoB6B,YADvD,CADF;AAID;;;wBAEyB;AACxB,aACE,KAAK9C,KAAL,CAAWiB,QAAX,IACA,KAAKjB,KAAL,CAAWY,eADX,IAEA,KAAKZ,KAAL,CAAWc,aAFX,IAGA,KAAKd,KAAL,CAAWc,aAAX,CAAyBJ,KAHzB,IAIA,KAAKV,KAAL,CAAWuC,IAAX,CAAgB7B,KAJhB,IAKA,KAAKV,KAAL,CAAWuC,IAAX,CAAgBC,QALhB,IAMA,KAAKxC,KAAL,CAAWY,eAAX,CAA2BC,cAN3B,KAOC,CAAC,KAAKb,KAAL,CAAWc,aAAX,CAAyB2B,SAA1B,IACC,KAAKzC,KAAL,CAAWiB,QAAX,CAAoB6B,YADrB,IAEC,KAAK9C,KAAL,CAAWiB,QAAX,CAAoB8B,YAFrB,IAGC,KAAK/C,KAAL,CAAWiB,QAAX,CAAoB+B,QAVtB,CADF;AAaD,K,CAED;;;;wBAC+B;AAC7B;AACA,aAAO,KAAKhD,KAAL,CAAWiD,KAAX,IAAoB,KAAKjD,KAAL,CAAWiD,KAAX,CAAiB7C,eAAjB,GAAmC,CAA9D;AACD;;;wBAE6B;AAC5B,aACE,CAAC,CAAC,KAAKJ,KAAL,CAAWqB,mBAAb,IACA,KAAKrB,KAAL,CAAWqB,mBAAX,CAA+B6B,cAFjC;AAID;;;wBAE4B;AAC3B,aACE,CAAC,CAAC,KAAKlD,KAAL,CAAWqB,mBAAb,IACA,KAAKrB,KAAL,CAAWqB,mBAAX,CAA+B8B,aAFjC;AAID;;;wBAE2B;AAC1B,aACE,CAAC,CAAC,KAAKnD,KAAL,CAAWqB,mBAAb,IACA,KAAKrB,KAAL,CAAWqB,mBAAX,CAA+B+B,qBAFjC;AAID;;;wBAWsB;AACrB,UAAI,KAAKpD,KAAL,CAAWC,mBAAX,CAA+BC,WAAnC,EACE,OAAO8B,qCAAkB9B,WAAzB;AACF,UAAI,KAAKE,eAAT,EAA0B,OAAO4B,qCAAkBqB,OAAzB;AAC1B,UAAI,CAAC,KAAKrD,KAAL,CAAWC,mBAAX,CAA+BE,YAApC,EACE,OAAO6B,qCAAkBqB,OAAzB;;AACF,UAAI,KAAKhD,uBAAT,EAAkC;AAChC,YAAI,KAAKE,iBAAT,EAA4B,OAAOyB,qCAAkBsB,QAAzB;AAC5B,eAAOtB,qCAAkBuB,iBAAzB;AACD;;AACD,UAAI,KAAK/C,mBAAT,EAA8B,OAAOwB,qCAAkBxB,mBAAzB;AAC9B,UAAI,KAAKF,sBAAT,EAAiC,OAAO0B,qCAAkBwB,QAAzB;AACjC,aAAO,IAAP;AACD;;;wBAGU;AACT,UACE,KAAK/C,gBAAL,KAA0BuB,qCAAkB9B,WAA5C,IACA,KAAKO,gBAAL,KAA0BuB,qCAAkBuB,iBAF9C,EAIE,OAAOvB,qCAAkBqB,OAAzB;AACF,aAAO,KAAK5C,gBAAZ;AACD;;;wBAE+B;AAC9B,aAAO,KAAKgD,IAAL,KAAczB,qCAAkBxB,mBAAvC;AACD;;;wBAEmB;AAClB,aAAO,KAAKiD,IAAL,KAAczB,qCAAkBqB,OAAvC;AACD;;;wBAEoB;AACnB,aAAO,KAAKI,IAAL,KAAczB,qCAAkBsB,QAAvC;AACD;;;;EA7M+BI,gB,6EAmB/BC,gB,mKAmBAA,gB,iKAoCAA,gB","sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport { proxify } from '@ringcentral-integration/commons/lib/proxy/proxify';\nimport { computed, RcModuleV2, watch } from '@ringcentral-integration/core';\n\nimport { Deps } from './ConnectivityManager.interface';\nimport { connectivityTypes } from './connectivityTypes';\n\n@Module({\n  deps: [\n    'Alert',\n    'OAuth',\n    'Auth',\n    'ConnectivityMonitor',\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'CallingSettings', optional: true },\n    { dep: 'AudioSettings', optional: true },\n    { dep: 'Webphone', optional: true },\n  ],\n})\nclass ConnectivityManager extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this.connectivityType,\n      () => {\n        if (this.ready) {\n          this.showConnectivityAlert();\n        }\n      },\n    );\n  }\n\n  @proxify\n  async checkWebphoneAndConnect() {\n    if (\n      !this._deps.callingSettings ||\n      (this._deps.callingSettings &&\n        (!this._deps.callingSettings.ready ||\n          !this._deps.callingSettings.isWebphoneMode))\n    ) {\n      return;\n    }\n    if (this._deps.audioSettings && this._deps.audioSettings.ready) {\n      this._deps.audioSettings.showAlert();\n      this._deps.audioSettings.getUserMedia();\n    }\n    if (this._deps.webphone && this._deps.webphone.ready) {\n      this._deps.webphone.connect({ force: true, skipConnectDelay: true });\n    }\n  }\n\n  @proxify\n  async checkStatus() {\n    if (!this._deps.availabilityMonitor) {\n      return;\n    }\n\n    this._deps.availabilityMonitor.healthCheck();\n  }\n\n  _showAlert(message: string) {\n    if (message) {\n      this._deps.alert.danger({\n        message,\n        allowDuplicates: false,\n      });\n    }\n  }\n\n  _hideAlerts() {\n    const alertIds = this._deps.alert.messages\n      .filter((m) => {\n        for (const type in connectivityTypes) {\n          if (\n            m.message ===\n            connectivityTypes[type as keyof typeof connectivityTypes]\n          )\n            return true;\n        }\n        return false;\n      })\n      .map((m) => m.id);\n    if (alertIds.length) {\n      this._deps.alert.dismiss(alertIds);\n    }\n  }\n\n  @proxify\n  async showConnectivityAlert() {\n    if (\n      !this.connectivityType ||\n      this.connectivityType === connectivityTypes.webphoneUnavailable\n    ) {\n      this._hideAlerts();\n    } else {\n      this._showAlert(this.connectivityType);\n    }\n  }\n\n  get webphoneAvailable() {\n    return (\n      this._deps.webphone &&\n      this._deps.callingSettings &&\n      this._deps.audioSettings &&\n      this._deps.audioSettings.ready &&\n      this._deps.callingSettings.ready &&\n      this._deps.auth.ready &&\n      this._deps.auth.loggedIn &&\n      this._deps.callingSettings.isWebphoneMode &&\n      this._deps.audioSettings.userMedia &&\n      this._deps.webphone.connected\n    );\n  }\n\n  get isWebphoneInitializing() {\n    return (\n      !!this._deps.callingSettings?.isWebphoneMode &&\n      (!this._deps.webphone.ready ||\n        this._deps.webphone.disconnected ||\n        this._deps.webphone.connecting ||\n        this._deps.webphone.connectFailed)\n    );\n  }\n\n  get webphoneConnecting() {\n    return (\n      !!this._deps.webphone?.ready &&\n      (this._deps.webphone.connecting || this._deps.webphone.reconnecting)\n    );\n  }\n\n  get webphoneUnavailable() {\n    return (\n      this._deps.webphone &&\n      this._deps.callingSettings &&\n      this._deps.audioSettings &&\n      this._deps.audioSettings.ready &&\n      this._deps.auth.ready &&\n      this._deps.auth.loggedIn &&\n      this._deps.callingSettings.isWebphoneMode &&\n      (!this._deps.audioSettings.userMedia ||\n        this._deps.webphone.reconnecting ||\n        this._deps.webphone.connectError ||\n        this._deps.webphone.inactive)\n    );\n  }\n\n  // todo: fix oAuth type\n  get proxyRetryCount(): boolean {\n    // @ts-ignore\n    return this._deps.oAuth && this._deps.oAuth.proxyRetryCount > 0;\n  }\n\n  get isVoIPOnlyModeActivated() {\n    return (\n      !!this._deps.availabilityMonitor &&\n      this._deps.availabilityMonitor.isVoIPOnlyMode\n    );\n  }\n\n  get isLimitedModeActivated() {\n    return (\n      !!this._deps.availabilityMonitor &&\n      this._deps.availabilityMonitor.isLimitedMode\n    );\n  }\n\n  get hasLimitedStatusError() {\n    return (\n      !!this._deps.availabilityMonitor &&\n      this._deps.availabilityMonitor.hasLimitedStatusError\n    );\n  }\n\n  @computed((that: ConnectivityManager) => [\n    that._deps.connectivityMonitor.networkLoss,\n    that._deps.connectivityMonitor.connectivity,\n    that.proxyRetryCount,\n    that.isVoIPOnlyModeActivated,\n    that.isLimitedModeActivated,\n    that.webphoneAvailable,\n    that.webphoneUnavailable,\n  ])\n  get connectivityType() {\n    if (this._deps.connectivityMonitor.networkLoss)\n      return connectivityTypes.networkLoss;\n    if (this.proxyRetryCount) return connectivityTypes.offline;\n    if (!this._deps.connectivityMonitor.connectivity)\n      return connectivityTypes.offline;\n    if (this.isVoIPOnlyModeActivated) {\n      if (this.webphoneAvailable) return connectivityTypes.voipOnly;\n      return connectivityTypes.serverUnavailable;\n    }\n    if (this.webphoneUnavailable) return connectivityTypes.webphoneUnavailable;\n    if (this.isLimitedModeActivated) return connectivityTypes.survival;\n    return null;\n  }\n\n  @computed((that: ConnectivityManager) => [that.connectivityType])\n  get mode() {\n    if (\n      this.connectivityType === connectivityTypes.networkLoss ||\n      this.connectivityType === connectivityTypes.serverUnavailable\n    )\n      return connectivityTypes.offline;\n    return this.connectivityType;\n  }\n\n  get isWebphoneUnavailableMode() {\n    return this.mode === connectivityTypes.webphoneUnavailable;\n  }\n\n  get isOfflineMode() {\n    return this.mode === connectivityTypes.offline;\n  }\n\n  get isVoipOnlyMode() {\n    return this.mode === connectivityTypes.voipOnly;\n  }\n}\n\nexport { ConnectivityManager };\n"],"file":"ConnectivityManager.js"}