{"version":3,"sources":["modules/Storage/index.ts"],"names":["DEFAULT_DISABLE_ALLOW_INACTIVE_TABS_WRITE","Storage","deps","dep","optional","disableAllowInactiveTabsWrite","auth","tabManager","options","name","_disableAllowInactiveTabsWrite","_auth","_tabManager","storedData","store","subscribe","loginStatus","loggedIn","ready","pending","dispatch","type","actionTypes","init","storageKey","prefix","ownerId","_storage","_StorageProvider","getData","key","_reducers","removeItem","initSuccess","data","_storageHandler","value","sync","on","notLoggedIn","reset","off","removeListener","destroy","resetSuccess","status","moduleStatuses","active","currentData","setItem","StorageBase"],"mappings":"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","sourcesContent":["import moduleStatuses from '../../enums/moduleStatuses';\nimport { Module } from '../../lib/di';\nimport StorageBase from '../../lib/StorageBase';\nimport loginStatus from '../Auth/loginStatus';\n\nconst DEFAULT_DISABLE_ALLOW_INACTIVE_TABS_WRITE = false;\n\n/**\n * @class\n * @description Alternative implementation of the Storage class.\n *  Allows registeration of reducers so that persisted states can be computed with reducers.\n */\n@Module({\n  deps: [\n    'Auth',\n    { dep: 'TabManager', optional: true },\n    { dep: 'StorageOptions', optional: true },\n  ],\n})\nexport default class Storage extends StorageBase {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {disableAllowInactiveTabsWrite} params.disableAllowInactiveTabsWrite - disable Allow Inactive Tabs Write\n   * @param {Auth} params.auth - auth module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   */\n  constructor({\n    disableAllowInactiveTabsWrite = DEFAULT_DISABLE_ALLOW_INACTIVE_TABS_WRITE,\n    auth,\n    tabManager,\n    ...options\n  }) {\n    super({\n      name: 'storage',\n      ...options,\n    });\n    this._disableAllowInactiveTabsWrite = disableAllowInactiveTabsWrite;\n    this._auth = auth;\n    this._tabManager = tabManager;\n  }\n\n  initialize() {\n    let storedData = null;\n    this.store.subscribe(async () => {\n      if (\n        this._auth.loginStatus === loginStatus.loggedIn &&\n        (!this._tabManager || this._tabManager.ready) &&\n        this.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.init,\n        });\n        const storageKey = `${this.prefix ? `${this.prefix}-` : ''}storage-${\n          this._auth.ownerId\n        }`;\n        this._storage = new this._StorageProvider({\n          storageKey,\n        });\n        storedData = await this._storage.getData();\n        for (const key in storedData) {\n          if (!this._reducers[key]) {\n            delete storedData[key];\n            await this._storage.removeItem(key);\n          }\n        }\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n          storageKey,\n          // To fix same reference in redux store with storedData\n          data: {\n            ...this.data,\n            ...storedData,\n          },\n        });\n        this._storageHandler = ({ key, value }) => {\n          if (this.ready) {\n            storedData[key] = value;\n            this.store.dispatch({\n              type: this.actionTypes.sync,\n              key,\n              value,\n            });\n          }\n        };\n        this._storage.on('storage', this._storageHandler);\n      } else if (\n        ((!!this._tabManager && !this._tabManager.ready) ||\n          this._auth.notLoggedIn) &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.reset,\n        });\n        if (this._storageHandler) {\n          if (this._storage.off) {\n            this._storage.off('storage', this._storageHandler);\n          } else if (this._storage.removeListener) {\n            this._storage.removeListener('storage', this._storageHandler);\n          }\n          this._storageHandler = null;\n        }\n        if (this._storage) {\n          this._storage.destroy();\n          this._storage = null;\n        }\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      }\n      if (\n        this.status === moduleStatuses.ready &&\n        (!this._disableAllowInactiveTabsWrite ||\n          !this._tabManager ||\n          this._tabManager.active)\n      ) {\n        // save new data to storage when changed\n        const currentData = this.data;\n        for (const key in currentData) {\n          if (storedData[key] !== currentData[key]) {\n            this._storage.setItem(key, currentData[key]);\n            storedData[key] = currentData[key];\n          }\n        }\n      }\n    });\n  }\n}\n"],"file":"index.js"}