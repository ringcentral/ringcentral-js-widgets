{"version":3,"sources":["modules/ComposeText/getComposeTextReducer.ts"],"names":["getSenderNumber","types","state","type","number","updateSenderNumber","getTypingToNumber","updateTypingToNumber","clean","cleanTypingToNumber","getToNumberEntityReducer","entityId","toNumberMatched","getToNumbers","newState","slice","addToNumber","id","idx","findIndex","item","phoneNumber","oldNumber","find","push","removeToNumber","filter","getMessageText","text","updateMessageText","getComposeTextReducer","status","senderNumber","typingToNumber","toNumbers","messageText","toNumberEntity"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nexport function getSenderNumber(types) {\n  return (state = '', { type, number }) => {\n    switch (type) {\n      case types.updateSenderNumber:\n        return number;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTypingToNumber(types) {\n  return (state = '', { type, number }) => {\n    switch (type) {\n      case types.updateTypingToNumber:\n        return number;\n      case types.clean:\n      case types.cleanTypingToNumber:\n        return '';\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getToNumberEntityReducer(types) {\n  return (state = '', { type, entityId }) => {\n    switch (type) {\n      case types.toNumberMatched:\n        return entityId;\n      case types.clean:\n      case types.cleanTypingToNumber:\n        return '';\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getToNumbers(types) {\n  return (state = [], { type, number }) => {\n    const newState = state.slice();\n    switch (type) {\n      case types.addToNumber:\n        // known entity id eg. from click2SMS\n        if (number.id) {\n          const idx = newState.findIndex(\n            (item) =>\n              number.id === item.id || number.phoneNumber === item.phoneNumber,\n          );\n          if (idx > -1) {\n            // replace old one if found\n            newState[idx] = number;\n            return newState;\n          }\n        } else {\n          const oldNumber = newState.find(\n            (item) => number.phoneNumber === item.phoneNumber,\n          );\n          if (oldNumber) {\n            return newState;\n          }\n        }\n        newState.push(number);\n        return newState;\n      case types.removeToNumber:\n        return state.filter((item) => item.phoneNumber !== number.phoneNumber);\n      case types.clean:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getMessageText(types) {\n  return (state = '', { type, text }) => {\n    switch (type) {\n      case types.updateMessageText:\n        return text;\n      case types.clean:\n        return '';\n      default:\n        return state;\n    }\n  };\n}\nexport default function getComposeTextReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    senderNumber: getSenderNumber(types),\n    typingToNumber: getTypingToNumber(types),\n    toNumbers: getToNumbers(types),\n    messageText: getMessageText(types),\n    toNumberEntity: getToNumberEntityReducer(types),\n  });\n}\n"],"file":"getComposeTextReducer.js"}