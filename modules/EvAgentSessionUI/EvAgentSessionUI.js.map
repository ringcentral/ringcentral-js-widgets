{"version":3,"sources":["modules/EvAgentSessionUI/EvAgentSessionUI.ts"],"names":["EvAgentSessionUI","name","deps","dep","optional","that","_deps","locale","currentLocale","evAgentSession","inboundQueues","formGroup","selectedInboundQueueIds","evAuth","authenticateResponse","agents","agentId","enableCache","storageKey","ready","tabManager","enable","_checkTabManagerEvent","event","tabManagerEvents","RE_CHOOSE_ACCOUNT","_onAccountReChoose","isLoading","setIsLoading","block","next","configureAgent","needAssignFormGroupValue","console","error","modalUI","confirm","title","i18n","getString","content","confirmButtonText","cancelButtonText","childrenSize","onConfirm","onSaveUpdate","onCancel","resetFormGroup","goToSettingsPage","isSessionChanged","showSaveEditionModal","updateAgent","voiceConnectionChanged","gateId","inboundQueuesState","setInboundQueuesState","index","findIndex","option","selectedInboundQueue","checked","severalAssign","map","routerInteraction","goBack","queues","cb","inboundQueue","setFormGroup","loginType","autoAnswer","selectedIntegratedSoftphone","defaultAutoAnswerOn","syncAllTabs","log","hasMultipleTabs","send","evClient","ifSocketExist","closeSocket","setNotAuth","clearAgentId","push","skillProfileList","loginTypeList","isExternalPhone","agentPermissions","allowAutoAnswer","allowLoginControl","allowInbound","selectedSkillProfileId","extensionNumber","inboundQueuesFieldText","isExtensionNumber","showAutoAnswer","showInboundQueues","showSkillProfile","length","selectedAgent","_selectedAgent","showReChooseAccount","isOnlyOneAgent","setSkillProfileId","setLoginType","setExtensionNumber","setAutoAnswer","submitInboundQueues","setConfigure","goToSettingsPageWhetherSessionChanged","searchOption","text","gateName","toLowerCase","includes","getAssignedInboundQueues","filter","isAllAssign","assignedInboundQueues","isSeveralAssign","checkBoxOnChange","_checkBoxOnChange","allCheckBoxOnChange","_allCheckBoxOnChange","onAccountReChoose","find","dropDownOptions","None","id","loginTypes","integratedSoftphone","agent","RcUIModuleV2","storage","state","action"],"mappings":"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","sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport {\n  action,\n  computed,\n  RcUIModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\n\nimport {\n  dropDownOptions,\n  loginTypes,\n  LoginTypes,\n  tabManagerEvents,\n} from '../../enums';\nimport {\n  ChangeQueueStateFn,\n  EvAgentSessionUIFunctions,\n  EvAgentSessionUIProps,\n} from '../../interfaces/EvAgentSessionUI.interface';\nimport { AvailableQueue } from '../../interfaces/SelectableQueue.interface';\nimport { sortByName } from '../../lib/sortByName';\nimport { Deps, SessionConfigUI } from './EvAgentSessionUI.interface';\nimport i18n from './i18n';\n\n@Module({\n  name: 'EvAgentSessionUI',\n  deps: [\n    'Locale',\n    'RouterInteraction',\n    'EvAuth',\n    'EvAgentSession',\n    'EvSettings',\n    'EvWorkingState',\n    'Storage',\n    'ModalUI',\n    'EvCallMonitor',\n    'Block',\n    'EvClient',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvAgentSessionUIOptions', optional: true },\n  ],\n})\nclass EvAgentSessionUI extends RcUIModuleV2<Deps> implements SessionConfigUI {\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvAgentSessionUI',\n    });\n  }\n\n  async onStateChange() {\n    if (\n      this.ready &&\n      this._deps.tabManager.ready &&\n      this._deps.tabManager?.enable\n    ) {\n      await this._checkTabManagerEvent();\n    }\n  }\n\n  private async _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    if (event) {\n      switch (event.name) {\n        case tabManagerEvents.RE_CHOOSE_ACCOUNT:\n          await this._onAccountReChoose();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  @storage\n  @state\n  isLoading = false;\n\n  @computed((that: EvAgentSessionUI) => [\n    that._deps.locale.currentLocale,\n    that._deps.evAgentSession.inboundQueues,\n    that._deps.evAgentSession.formGroup.selectedInboundQueueIds,\n  ])\n  get inboundQueuesFieldText() {\n    const { selectedInboundQueueIds } = this._deps.evAgentSession.formGroup;\n    const { inboundQueues } = this._deps.evAgentSession;\n    const { currentLocale } = this._deps.locale;\n\n    if (selectedInboundQueueIds.length === 1) {\n      const selectedInboundQueue = inboundQueues.find(\n        (inboundQueue) => inboundQueue.gateId === selectedInboundQueueIds[0],\n      );\n      return selectedInboundQueue.gateName;\n    }\n\n    if (selectedInboundQueueIds.length > 1) {\n      return `${i18n.getString('multiple', currentLocale)} (${\n        selectedInboundQueueIds.length\n      })`;\n    }\n\n    return i18n.getString(dropDownOptions.None, currentLocale);\n  }\n\n  @action\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading;\n  }\n\n  onInit() {\n    this.setIsLoading(false);\n  }\n\n  async setConfigure() {\n    await this._deps.block.next(async () => {\n      this.setIsLoading(true);\n      try {\n        await this._deps.evAgentSession.configureAgent({\n          needAssignFormGroupValue: true,\n        });\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.setIsLoading(false);\n      }\n    });\n  }\n\n  private showSaveEditionModal() {\n    const { currentLocale } = this._deps.locale;\n\n    this._deps.modalUI.confirm({\n      title: i18n.getString('saveEditionModalTitle', currentLocale),\n      content: i18n.getString('saveEditionModalContent', currentLocale),\n      confirmButtonText: i18n.getString('save', currentLocale),\n      cancelButtonText: i18n.getString('cancel', currentLocale),\n      childrenSize: 'small',\n      onConfirm: () => {\n        this.onSaveUpdate();\n      },\n      onCancel: () => {\n        this._deps.evAgentSession.resetFormGroup();\n        this._deps.evAgentSession.goToSettingsPage();\n      },\n    });\n  }\n\n  goToSettingsPageWhetherSessionChanged() {\n    if (this._deps.evAgentSession.isSessionChanged) {\n      return this.showSaveEditionModal();\n    }\n    this._deps.evAgentSession.goToSettingsPage();\n  }\n\n  async onSaveUpdate() {\n    if (!this._deps.evAgentSession.isSessionChanged) {\n      return this._deps.evAgentSession.goToSettingsPage();\n    }\n\n    await this._deps.evAgentSession.updateAgent(this.voiceConnectionChanged);\n  }\n\n  // InboundQueue Panel\n  @computed((that: EvAgentSessionUI) => [\n    that._deps.evAgentSession.formGroup.selectedInboundQueueIds,\n    that._deps.evAgentSession.inboundQueues,\n  ])\n  get inboundQueues() {\n    const {\n      inboundQueues,\n      formGroup: { selectedInboundQueueIds },\n    } = this._deps.evAgentSession;\n\n    return sortByName(\n      inboundQueues.map((inboundQueue) => {\n        return {\n          ...inboundQueue,\n          checked: !!selectedInboundQueueIds.find(\n            (id) => id === inboundQueue.gateId,\n          ),\n        };\n      }),\n      'gateName',\n    );\n  }\n\n  private _checkBoxOnChange(\n    gateId: string,\n    inboundQueuesState: AvailableQueue[],\n    setInboundQueuesState: ChangeQueueStateFn,\n  ) {\n    const inboundQueues = [...inboundQueuesState];\n    const index = inboundQueues.findIndex((option) => option.gateId === gateId);\n    const selectedInboundQueue = inboundQueues[index];\n\n    inboundQueues[index] = {\n      ...selectedInboundQueue,\n      checked: !selectedInboundQueue.checked,\n    };\n\n    setInboundQueuesState(inboundQueues);\n  }\n\n  private _allCheckBoxOnChange(\n    severalAssign: boolean,\n    inboundQueuesState: AvailableQueue[],\n    setInboundQueuesState: ChangeQueueStateFn,\n  ) {\n    const inboundQueues = [...inboundQueuesState].map((option) => {\n      return {\n        ...option,\n        // new object\n        checked: severalAssign || !option.checked,\n      };\n    });\n    setInboundQueuesState(inboundQueues);\n  }\n\n  goBack() {\n    this._deps.routerInteraction.goBack();\n  }\n\n  submitInboundQueues(queues: AvailableQueue[], cb: () => void) {\n    const selectedInboundQueueIds = queues.map(\n      (inboundQueue) => inboundQueue.gateId,\n    );\n    this._deps.evAgentSession.setFormGroup({ selectedInboundQueueIds });\n    cb();\n  }\n\n  get selectedIntegratedSoftphone() {\n    return (\n      this._deps.evAgentSession.formGroup.loginType ===\n      loginTypes.integratedSoftphone\n    );\n  }\n\n  get voiceConnectionChanged() {\n    return (\n      this._deps.evAgentSession.loginType !==\n      this._deps.evAgentSession.formGroup.loginType\n    );\n  }\n\n  setLoginType(loginType: LoginTypes) {\n    // set login type first, and reset autoAnswer after login type changed\n    this._deps.evAgentSession.setFormGroup({ loginType });\n    const autoAnswer = this.selectedIntegratedSoftphone\n      ? this._deps.evAgentSession.autoAnswer\n      : this._deps.evAgentSession.defaultAutoAnswerOn;\n    this._deps.evAgentSession.setFormGroup({\n      autoAnswer,\n    });\n  }\n\n  async _onAccountReChoose(syncAllTabs = false) {\n    console.log('_onAccountReChoose~~', syncAllTabs);\n    await this._deps.block.next(async () => {\n      if (syncAllTabs && this._deps.tabManager.hasMultipleTabs) {\n        this._deps.tabManager.send(tabManagerEvents.RE_CHOOSE_ACCOUNT);\n      }\n      if (this._deps.evClient.ifSocketExist) {\n        this._deps.evClient.closeSocket();\n      }\n      this._deps.evAuth.setNotAuth();\n      this._deps.evAuth.clearAgentId();\n      this._deps.routerInteraction.push('/chooseAccount');\n    });\n  }\n\n  @computed((that: EvAgentSessionUI) => [\n    that._deps.evAuth.authenticateResponse.agents,\n    that._deps.evAuth.agentId,\n  ])\n  get _selectedAgent() {\n    const agents = this._deps.evAuth.authenticateResponse.agents;\n    return agents.find((agent) => agent.agentId === this._deps.evAuth.agentId);\n  }\n\n  getUIProps(): EvAgentSessionUIProps {\n    const {\n      skillProfileList,\n      loginTypeList,\n      isExternalPhone,\n      // takingCall,\n    } = this._deps.evAgentSession;\n    const { allowAutoAnswer, allowLoginControl, allowInbound } =\n      this._deps.evAuth.agentPermissions;\n    const { selectedSkillProfileId, loginType, extensionNumber, autoAnswer } =\n      this._deps.evAgentSession.formGroup;\n    return {\n      selectedSkillProfileId,\n      loginType,\n      extensionNumber,\n      inboundQueuesFieldText: this.inboundQueuesFieldText,\n      // takingCall,\n      autoAnswer,\n      skillProfileList,\n      loginTypeList,\n      isExtensionNumber: isExternalPhone,\n      isLoading: this.isLoading,\n      currentLocale: this._deps.locale.currentLocale,\n      // InboundQueue Panel\n      inboundQueues: this.inboundQueues,\n      showAutoAnswer: allowAutoAnswer && this.selectedIntegratedSoftphone,\n      showInboundQueues: allowLoginControl && allowInbound,\n      showSkillProfile: allowLoginControl && skillProfileList.length > 0,\n      selectedAgent: this._selectedAgent,\n      showReChooseAccount: !this._deps.evAuth.isOnlyOneAgent,\n    };\n  }\n\n  getUIFunctions(): EvAgentSessionUIFunctions {\n    return {\n      setSkillProfileId: (selectedSkillProfileId) =>\n        this._deps.evAgentSession.setFormGroup({ selectedSkillProfileId }),\n      setLoginType: (loginType) => this.setLoginType(loginType),\n      setExtensionNumber: (extensionNumber) =>\n        this._deps.evAgentSession.setFormGroup({ extensionNumber }),\n      setAutoAnswer: (autoAnswer) =>\n        this._deps.evAgentSession.setFormGroup({ autoAnswer }),\n      submitInboundQueues: (queues, cb) => this.submitInboundQueues(queues, cb),\n      // setTakingCall: (takingCall) =>\n      //   this._deps.evAgentSession.setTakingCall(takingCall),\n      setConfigure: () => this.setConfigure(),\n      goToSettingsPage: () => this._deps.evAgentSession.goToSettingsPage(),\n      goToSettingsPageWhetherSessionChanged: () =>\n        this.goToSettingsPageWhetherSessionChanged(),\n      onSaveUpdate: () => this.onSaveUpdate(),\n      // InboundQueue Panel\n      searchOption: (option, text) =>\n        option?.gateName?.toLowerCase().includes(text.toLowerCase()),\n      goBack: () => this.goBack(),\n      getAssignedInboundQueues: (inboundQueues) =>\n        inboundQueues.filter(({ checked }) => checked),\n      isAllAssign: (assignedInboundQueues, inboundQueues) =>\n        !!assignedInboundQueues.length &&\n        assignedInboundQueues.length === inboundQueues.length,\n      isSeveralAssign: (assignedInboundQueues, inboundQueues) =>\n        !!assignedInboundQueues.length &&\n        assignedInboundQueues.length !== inboundQueues.length,\n      checkBoxOnChange: (...args) => this._checkBoxOnChange(...args),\n      allCheckBoxOnChange: (...args) => this._allCheckBoxOnChange(...args),\n      onAccountReChoose: () => this._onAccountReChoose(true),\n    };\n  }\n}\nexport { EvAgentSessionUI };\n"],"file":"EvAgentSessionUI.js"}