{"version":3,"sources":["modules/CallLogSectionV2/CallLogSection.ts"],"names":["CallLogSection","deps","dep","optional","that","identifyList","callsMappingState","callsSavingStatus","currentIdentify","_deps","callHistory","calls","callMonitor","currentNotificationIdentify","storageKey","enableCache","_notSyncOpenState","_storageKey","_readyCheckFunction","_logFunction","_onSuccess","_onUpdate","_onError","callLogSectionOptions","notSyncOpenState","ready","identify","newValue","originalState","Array","from","Set","update","isSucceed","isEdited","latestUpdateTime","latestSaveTime","Date","now","saveSuccess","args","saveError","show","setLogSectionIdentify","stateCurrentIdentify","storageCurrentIdentify","stateCurrentNotificationIdentify","storageCurrentNotificationIdentify","showNotification","setLogNotificationIdentify","logFunction","readyCheckFunction","onUpdate","onSuccess","onError","Error","callsMapping","isSaving","saving","result","_handleSuccess","_handleError","console","warn","showLogSection","notificationIsExpand","showLogNotification","closeLogNotification","closeLogSection","saveCallLog","setNotificationIsExpand","isExpand","stateNotificationIsExpand","storageNotificationIsExpand","expandNotification","map","identity","pick","keys","find","call","sessionId","RcModuleV2","state","storage","action","proxify"],"mappings":"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","sourcesContent":["import {\n  assoc,\n  converge,\n  flip,\n  identity,\n  keys,\n  mergeWith,\n  pick,\n  useWith,\n} from 'ramda';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport { proxify } from '@ringcentral-integration/commons/lib/proxy/proxify';\nimport { HistoryCall } from '@ringcentral-integration/commons/modules/CallHistoryV2';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\n\nimport { Mapping } from '../../typings';\nimport {\n  AddLogHandlerFunctions,\n  CallLogSectionCallStatus,\n  CallLogStatus,\n  CallsMappingType,\n  Deps,\n} from './CallLogSection.interface';\n\n@Module({\n  deps: [\n    'Storage',\n    'CallHistory',\n    'CallMonitor',\n    {\n      dep: 'CallLogSectionOptions',\n      optional: true,\n    },\n  ],\n})\nexport class CallLogSection<T extends Deps = Deps> extends RcModuleV2<T> {\n  _notSyncOpenState: boolean;\n  _storageKey: string;\n  private _readyCheckFunction: AddLogHandlerFunctions['readyCheckFunction'];\n  private _logFunction: AddLogHandlerFunctions['logFunction'];\n  private _onSuccess: AddLogHandlerFunctions['onSuccess'];\n  private _onUpdate: AddLogHandlerFunctions['onUpdate'];\n  private _onError: AddLogHandlerFunctions['onError'];\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'callLogSection',\n      enableCache: true,\n    });\n    this._notSyncOpenState =\n      !!this._deps.callLogSectionOptions?.notSyncOpenState;\n  }\n\n  // TODO: merge these states in callLogTasks.loggingmapping\n  @state\n  callsSavingStatus: Record<string, boolean> = {};\n\n  @storage\n  @state\n  callsMappingState: CallsMappingType = {};\n\n  @storage\n  @state\n  identifyList: Array<string> = [];\n\n  @state\n  stateCurrentIdentify: string = null;\n\n  @storage\n  @state\n  storageCurrentIdentify: string = null;\n\n  @state\n  stateCurrentNotificationIdentify: string = null;\n\n  @storage\n  @state\n  storageCurrentNotificationIdentify: string = null;\n\n  @state\n  stateNotificationIsExpand: boolean = false;\n\n  @storage\n  @state\n  storageNotificationIsExpand: boolean = false;\n\n  _shouldInit() {\n    return super._shouldInit() && this._readyCheckFunction();\n  }\n\n  _shouldReset() {\n    return super._shouldReset() || (this.ready && !this._readyCheckFunction());\n  }\n\n  @action\n  update(\n    identify: string,\n    newValue: Partial<CallsMappingType[0]>,\n    callsSavingStatus: boolean,\n  ) {\n    this.callsSavingStatus[identify] = callsSavingStatus;\n    const originalState = this.callsMappingState[identify];\n    this.callsMappingState[identify] = {\n      ...originalState,\n      ...newValue,\n    };\n    this.identifyList = Array.from(new Set([...this.identifyList, identify]));\n  }\n\n  @proxify\n  async saveSuccess(identify: string) {\n    const originalState = this.callsMappingState[identify];\n    this.update(\n      identify,\n      {\n        isSucceed: true,\n        isEdited: !!(\n          originalState?.latestUpdateTime &&\n          originalState?.latestSaveTime &&\n          originalState?.latestSaveTime < originalState?.latestUpdateTime\n        ),\n      },\n      false,\n    );\n  }\n\n  @proxify\n  async saving(identify: string) {\n    this.update(\n      identify,\n      {\n        latestSaveTime: Date.now(),\n      },\n      true,\n    );\n  }\n\n  @proxify\n  async saveError(identify: string) {\n    this.update(\n      identify,\n      {\n        isEdited: true,\n        isSucceed: false,\n      },\n      false,\n    );\n  }\n\n  // TODO: add args type\n  @proxify\n  async _handleSuccess(identify: string, ...args: any) {\n    this.saveSuccess(identify);\n    if (typeof this._onSuccess === 'function')\n      this._onSuccess(identify, ...args);\n  }\n\n  // TODO: add args type\n  @proxify\n  async _handleError(identify: string, ...args: any) {\n    this.saveError(identify);\n    if (typeof this._onError === 'function') {\n      await this._onError(identify, ...args);\n    }\n  }\n\n  @proxify\n  async showLogSection(identify: string) {\n    if (!this.show || identify !== this.currentIdentify) {\n      this.setLogSectionIdentify(identify);\n    }\n  }\n\n  @action\n  setLogSectionIdentify(identify: string) {\n    if (this._notSyncOpenState) {\n      this.stateCurrentIdentify = identify;\n    } else {\n      this.storageCurrentIdentify = identify;\n    }\n  }\n\n  @action\n  setLogNotificationIdentify(identify: string) {\n    if (this._notSyncOpenState) {\n      this.stateCurrentNotificationIdentify = identify;\n    } else {\n      this.storageCurrentNotificationIdentify = identify;\n    }\n  }\n\n  @proxify\n  async showLogNotification(identify: string) {\n    if (\n      !this.showNotification ||\n      identify !== this.currentNotificationIdentify\n    ) {\n      this.setLogNotificationIdentify(identify);\n    }\n  }\n\n  addLogHandler({\n    logFunction,\n    readyCheckFunction,\n    onUpdate,\n    onSuccess,\n    onError,\n  }: AddLogHandlerFunctions) {\n    if (typeof logFunction !== 'function') {\n      throw new Error('CallLogSection: \"logFunction\" must be a function.');\n    }\n    if (typeof readyCheckFunction !== 'function') {\n      throw new Error(\n        'CallLogSection: \"readyCheckFunction\" must be a function.',\n      );\n    }\n    this._logFunction = logFunction;\n    this._readyCheckFunction = readyCheckFunction;\n    this._onUpdate = onUpdate;\n    this._onSuccess = onSuccess;\n    this._onError = onError;\n  }\n\n  // TODO: add args type\n  @proxify\n  async updateCallLog(identify: string, ...args: any) {\n    this.update(\n      identify,\n      {\n        latestUpdateTime: Date.now(),\n        isEdited: true,\n      },\n      this.callsSavingStatus[identify],\n    );\n    await this._onUpdate(identify, ...args);\n  }\n\n  // TODO: add args type when implement call log ui\n  @proxify\n  async saveCallLog(identify: string, ...args: any) {\n    if (\n      identify &&\n      (!this.callsMapping[identify] || !this.callsMapping[identify].isSaving)\n    ) {\n      this.saving(identify);\n      try {\n        const result = await this._logFunction(identify, ...args);\n        if (!result) {\n          throw new Error('Result is empty');\n        }\n        this._handleSuccess(identify, { ...args, result });\n        return result;\n      } catch (e) {\n        await this._handleError(identify, ...args);\n        console.warn(e);\n      }\n    }\n  }\n\n  @proxify\n  async handleLogSection(identify: string) {\n    if (!this.show) {\n      // Preferentially show call log section.\n      await this.showLogSection(identify);\n    } else if (\n      !this.notificationIsExpand &&\n      this.currentIdentify !== identify\n    ) {\n      // Check it to show log notification when the call log notification isn't expanded.\n      await this.showLogNotification(identify);\n    }\n  }\n\n  @proxify\n  async closeLogSection() {\n    if (this.show) {\n      this.setLogSectionIdentify(null);\n    }\n  }\n\n  @proxify\n  async discardAndHandleNotification() {\n    const currentNotificationIdentify = this.currentNotificationIdentify;\n    await this.closeLogNotification();\n    await this.closeLogSection();\n    await this.showLogSection(currentNotificationIdentify);\n  }\n\n  @proxify\n  async saveAndHandleNotification() {\n    const currentNotificationIdentify = this.currentNotificationIdentify;\n    const currentIdentify = this.currentIdentify;\n    await this.saveCallLog(currentIdentify);\n    await this.closeLogNotification();\n    await this.closeLogSection();\n    await this.showLogSection(currentNotificationIdentify);\n  }\n\n  @proxify\n  async closeLogNotification() {\n    if (this.showNotification) {\n      this.setLogNotificationIdentify(null);\n      this.setNotificationIsExpand(false);\n    }\n  }\n\n  @action\n  setNotificationIsExpand(isExpand: boolean) {\n    if (this._notSyncOpenState) {\n      this.stateNotificationIsExpand = isExpand;\n    } else {\n      this.storageNotificationIsExpand = isExpand;\n    }\n  }\n\n  // shrink the popover menu appear when click log button at call notificaiton\n  @proxify\n  async shrinkNotification() {\n    if (this.notificationIsExpand) {\n      this.setNotificationIsExpand(false);\n    }\n  }\n\n  @proxify\n  async expandNotification() {\n    if (!this.notificationIsExpand) {\n      this.setNotificationIsExpand(true);\n    }\n  }\n\n  @proxify\n  async expandLogNotification() {\n    if (!this.show) {\n      await this.showLogSection(this.currentNotificationIdentify);\n      await this.closeLogNotification();\n    }\n    await this.expandNotification();\n  }\n\n  @computed((that: CallLogSection) => [\n    that.identifyList,\n    that.callsMappingState,\n  ])\n  get calls() {\n    const calls = this.identifyList.map(\n      (identify: string) => this.callsMappingState[identify],\n    );\n    return calls;\n  }\n\n  /**\n   * Merge isSaving property from reducer to callsMapping\n   */\n  @computed((that: CallLogSection) => [\n    that.callsMappingState,\n    that.callsSavingStatus,\n  ])\n  get callsMapping(): Mapping<CallLogSectionCallStatus> {\n    return converge(mergeWith(flip(assoc('isSaving'))), [\n      identity,\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useWith(pick, [keys, identity]),\n    ]) as any;\n  }\n\n  @computed((that: CallLogSection) => [\n    that.currentIdentify,\n    that.callsMappingState,\n  ])\n  get currentCallLogStatus() {\n    return (\n      this.callsMappingState[this.currentIdentify] || ({} as CallLogStatus)\n    );\n  }\n\n  @computed((that: CallLogSection) => [\n    that.currentIdentify,\n    that._deps.callHistory.calls,\n    that._deps.callMonitor.calls,\n  ])\n  get currentCall(): HistoryCall {\n    return (\n      [...this._deps.callMonitor.calls, ...this._deps.callHistory.calls].find(\n        (call) => call.sessionId === this.currentIdentify,\n      ) || {}\n    );\n  }\n\n  @computed((that: CallLogSection) => [\n    that.currentNotificationIdentify,\n    that._deps.callMonitor.calls,\n  ])\n  get currentNotificationCall() {\n    return (\n      this._deps.callMonitor.calls.find(\n        (call) => call.sessionId === this.currentNotificationIdentify,\n      ) || {}\n    );\n  }\n\n  get currentIdentify() {\n    return this._notSyncOpenState\n      ? this.stateCurrentIdentify\n      : this.storageCurrentIdentify;\n  }\n\n  get show() {\n    return !!this.currentIdentify;\n  }\n\n  get currentNotificationIdentify() {\n    return this._notSyncOpenState\n      ? this.stateCurrentNotificationIdentify\n      : this.storageCurrentNotificationIdentify;\n  }\n\n  get showNotification() {\n    return !!this.currentNotificationIdentify;\n  }\n\n  get notificationIsExpand() {\n    return this._notSyncOpenState\n      ? this.stateNotificationIsExpand\n      : this.storageNotificationIsExpand;\n  }\n\n  get currentCallSavingStatus() {\n    return this.callsSavingStatus[this.currentIdentify];\n  }\n}\n"],"file":"CallLogSection.js"}