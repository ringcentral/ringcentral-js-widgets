{"version":3,"sources":["modules/ConferenceDialerUI/index.ts"],"names":["ConferenceDialerUI","name","deps","conferenceCall","routerInteraction","backURL","options","_conferenceCall","_routerInteraction","_backURL","_reducer","actionTypes","sessionId","lastSessionId","clearRecipient","clearToNumberField","store","dispatch","type","setLastSessionId","fromSessionId","mergingPair","setMergeParty","showFromField","params","fromNumber","onBack","push","onCallButtonClick","inConference","ObjectMap","prefixKeys","keys","state","DialerUI","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMqBA,kB,WAJpB,gBAAO;AACNC,EAAAA,IAAI,EAAE,oBADA;AAENC,EAAAA,IAAI,EAAE,CAAC,gBAAD,EAAmB,mBAAnB;AAFA,CAAP,C;;;;;AAKC,oCAKG;AAAA;;AAAA,QAJDC,cAIC,QAJDA,cAIC;AAAA,QAHDC,iBAGC,QAHDA,iBAGC;AAAA,4BAFDC,OAEC;AAAA,QAFDA,OAEC,6BAFS,eAET;AAAA,QADEC,OACF;;AAAA;;AACD,gDACKA,OADL;AAGA,UAAKC,eAAL,GAAuBJ,cAAvB;AACA,UAAKK,kBAAL,GAA0BJ,iBAA1B;AACA,UAAKK,QAAL,GAAgBJ,OAAhB;AACA,UAAKK,QAAL,GAAgB,4BAAW,MAAKC,WAAhB,CAAhB;AAPC;AAQF;;;;;uGAUsBC,S;;;;;AACrB,oBAAI,KAAKC,aAAL,KAAuBD,SAA3B,EAAsC;AACpC,uBAAKE,cAAL;AACA,uBAAKC,kBAAL;AACD;;AACD,qBAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAAA,IAAI,EAAE,KAAKP,WAAL,CAAiBQ,gBADL;AAElBP,kBAAAA,SAAS,EAATA;AAFkB,iBAApB;;;;;;;;;;;;;;;;;;kCAUYQ,a,EAAe;AAC3B,UACEA,aAAa,IACb,KAAKb,eAAL,CAAqBc,WADrB,IAEA,CAAC,KAAKd,eAAL,CAAqBc,WAArB,CAAiCD,aAHpC,EAIE;AACA;AACA,aAAKb,eAAL,CAAqBe,aAArB,CAAmC;AACjCF,UAAAA,aAAa,EAAbA;AADiC,SAAnC;AAGD;AACF;;;iCAEY;AACX;AAEEG,QAAAA,aAAa,EAAE;AAFjB;AAID;;;0CAEyD;AAAA;;AAAA,+BAAzCC,MAAyC;AAAA,UAA/BC,UAA+B,gBAA/BA,UAA+B;AAAA,UAAnBL,aAAmB,gBAAnBA,aAAmB;AACxD;AAEEM,QAAAA,MAAM,EAAE;AAAA,iBAAM,MAAI,CAAClB,kBAAL,CAAwBmB,IAAxB,CAA6B,MAAI,CAAClB,QAAlC,CAAN;AAAA,SAFV;AAGEU,QAAAA,gBAAgB,EAAE;AAAA,iBAAM,MAAI,CAACA,gBAAL,CAAsBC,aAAtB,CAAN;AAAA,SAHpB;AAIEQ,QAAAA,iBAAiB,EAAE;AAAA,iBACjB,MAAI,CAACA,iBAAL,CAAuB;AAAEH,YAAAA,UAAU,EAAVA,UAAF;AAAcL,YAAAA,aAAa,EAAbA;AAAd,WAAvB,CADiB;AAAA,SAJrB;AAMES,QAAAA,YAAY,EAAE;AANhB;AAQD;;;wBApDkB;AACjB,aAAOC,qBAAUC,UAAV,8BACDD,qBAAUE,IAAV,2EADC,IACmC,kBADnC,IAEL,oBAFK,CAAP;AAID;;;wBAcmB;AAClB,aAAO,KAAKC,KAAL,CAAWpB,aAAlB;AACD;;;;EArC6CqB,qB,sEAuB7CC,mB","sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport proxify from '@ringcentral-integration/commons/lib/proxy/proxify';\nimport { ObjectMap } from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport DialerUI from '../DialerUI';\nimport getReducer from './getReducer';\n\n@Module({\n  name: 'ConferenceDialerUI',\n  deps: ['ConferenceCall', 'RouterInteraction'],\n})\nexport default class ConferenceDialerUI extends DialerUI {\n  constructor({\n    conferenceCall,\n    routerInteraction,\n    backURL = '/calls/active',\n    ...options\n  }) {\n    super({\n      ...options,\n    });\n    this._conferenceCall = conferenceCall;\n    this._routerInteraction = routerInteraction;\n    this._backURL = backURL;\n    this._reducer = getReducer(this.actionTypes);\n  }\n\n  get _actionTypes() {\n    return ObjectMap.prefixKeys(\n      [...ObjectMap.keys(super._actionTypes), 'setLastSessionId'],\n      'conferenceDialerUI',\n    );\n  }\n\n  @proxify\n  async setLastSessionId(sessionId) {\n    if (this.lastSessionId !== sessionId) {\n      this.clearRecipient();\n      this.clearToNumberField();\n    }\n    this.store.dispatch({\n      type: this.actionTypes.setLastSessionId,\n      sessionId,\n    });\n  }\n\n  get lastSessionId() {\n    return this.state.lastSessionId;\n  }\n\n  _onBeforeCall(fromSessionId) {\n    if (\n      fromSessionId &&\n      this._conferenceCall.mergingPair &&\n      !this._conferenceCall.mergingPair.fromSessionId\n    ) {\n      // set mergingPair if has\n      this._conferenceCall.setMergeParty({\n        fromSessionId,\n      });\n    }\n  }\n\n  getUIProps() {\n    return {\n      ...super.getUIProps(),\n      showFromField: false,\n    };\n  }\n\n  getUIFunctions({ params: { fromNumber, fromSessionId } }) {\n    return {\n      ...super.getUIFunctions(),\n      onBack: () => this._routerInteraction.push(this._backURL),\n      setLastSessionId: () => this.setLastSessionId(fromSessionId),\n      onCallButtonClick: () =>\n        this.onCallButtonClick({ fromNumber, fromSessionId }),\n      inConference: true,\n    };\n  }\n}\n"],"file":"index.js"}