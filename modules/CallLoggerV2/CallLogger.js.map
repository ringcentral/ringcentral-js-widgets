{"version":3,"sources":["modules/CallLoggerV2/CallLogger.ts"],"names":["DEFAULT_OPACITY","CallLogger","name","deps","dep","optional","that","transferredCallsList","enableCache","storageKey","_customMatcherHooks","_identityFunction","callIdentityFunction","_logFunction","_deps","callLoggerOptions","logFunction","_readyCheckFunction","readyCheckFunction","autoLog","logOnRinging","sessionId","transferredMiddleNumber","slice","length","call","options","item","tabManager","checkIsMain","isActive","_ensureActive","contact","inbound","fromEntity","toEntity","log","duration","Object","prototype","hasOwnProperty","Math","round","Date","now","startTime","result","telephonyStatus","triggerType","ready","activityMatcher","dataMapping","some","hook","push","_shouldLogNewCall","triggerMatch","_activityMatcherCheck","_customMatcherCheck","contactMatcher","toNumberEntity","fromMatches","from","phoneNumber","toMatches","to","find","match","id","_autoLogCall","activityMatches","_shouldLogUpdatedCall","callMonitor","calls","newCalls","oldCalls","forEach","oldCallIndex","findIndex","_onNewCall","callLoggerTriggerTypes","presenceUpdate","oldCall","splice","_onCallUpdated","isTransferredCall","transferredCallsMap","_onCallAnswered","_addTransferredCall","phoneNumberUpdated","callHistory","endedCalls","newCall","currentSessions","callInfo","callLogSync","_setAutoLog","_setLogOnRinging","mapping","matcher","LoggerBase","storage","state","action","proxify"],"mappings":"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","sourcesContent":["import { reduce } from 'ramda';\n\nimport {\n  action,\n  computed,\n  state,\n  storage,\n  watch,\n} from '@ringcentral-integration/core';\n\nimport {\n  CallLoggerTriggerType,\n  callLoggerTriggerTypes,\n} from '../../enums/callLoggerTriggerTypes';\nimport { Call } from '../../interfaces/Call.interface';\nimport { ActiveCall } from '../../interfaces/Presence.model';\nimport {\n  isInbound,\n  isRinging,\n  removeDuplicateSelfCalls,\n} from '../../lib/callLogHelpers';\nimport { Module } from '../../lib/di';\nimport { LoggerBase } from '../../lib/LoggerBaseV2';\nimport proxify from '../../lib/proxy/proxify';\nimport { HistoryCall } from '../CallHistoryV2';\nimport { CallLogRecord } from '../CallLogV2';\nimport {\n  AutoLogCallOptions,\n  Deps,\n  Hook,\n  LogCallOptions,\n  LogOptions,\n  TransferredCall,\n  UpdatedCall,\n  UpdatedCallMap,\n} from './CallLogger.interface';\nimport { callIdentityFunction } from './callLoggerHelper';\n\nconst DEFAULT_OPACITY = 20;\n\n@Module({\n  name: 'CallLogger',\n  deps: [\n    'Storage',\n    'CallHistory',\n    'CallMonitor',\n    'CallLoggerOptions',\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'TabManager', optional: true },\n  ],\n})\nexport class CallLogger<T extends Deps = Deps> extends LoggerBase<T> {\n  protected _customMatcherHooks: Hook[] = [];\n\n  protected _identityFunction = callIdentityFunction;\n\n  _logFunction = this._deps.callLoggerOptions.logFunction;\n\n  _readyCheckFunction = this._deps.callLoggerOptions.readyCheckFunction;\n\n  constructor(deps: T) {\n    super(deps, {\n      enableCache: true,\n      storageKey: 'CallLogger',\n    });\n    if (typeof this._deps.callLoggerOptions.autoLog !== 'undefined') {\n      this.autoLog = this._deps.callLoggerOptions.autoLog;\n    }\n  }\n\n  @storage\n  @state\n  autoLog = true;\n\n  @storage\n  @state\n  logOnRinging = true;\n\n  @storage\n  @state\n  transferredCallsList: Record<string, TransferredCall>[] = [];\n\n  @action\n  _setLogOnRinging(logOnRinging: boolean) {\n    this.logOnRinging = !!logOnRinging;\n  }\n\n  @action\n  _setAutoLog(autoLog: boolean) {\n    this.autoLog = !!autoLog;\n  }\n\n  @action\n  _addTransferredCall(sessionId: string, transferredMiddleNumber: string) {\n    this.transferredCallsList = [\n      ...this.transferredCallsList.slice(\n        this.transferredCallsList.length >= DEFAULT_OPACITY ? 1 : 0,\n        DEFAULT_OPACITY,\n      ),\n      { [sessionId]: { transferredMiddleNumber } },\n    ];\n  }\n\n  @proxify\n  async log<T>({ call, ...options }: LogOptions<T>) {\n    return super.log({ item: call, ...options });\n  }\n\n  async _ensureActive() {\n    const isActive =\n      !this._deps.tabManager || (await this._deps.tabManager.checkIsMain());\n    return isActive;\n  }\n\n  @proxify\n  async _shouldLogNewCall(call: Call) {\n    const isActive = await this._ensureActive();\n    return isActive && this.autoLog && (this.logOnRinging || !isRinging(call));\n  }\n\n  @proxify\n  async logCall<T>({ call, contact, ...options }: LogCallOptions<T>) {\n    const inbound = isInbound(call);\n    const fromEntity = (inbound && contact) || null;\n    const toEntity = (!inbound && contact) || null;\n    await this.log({\n      ...options,\n      call: {\n        ...call,\n        duration: Object.prototype.hasOwnProperty.call(call, 'duration')\n          ? (call as CallLogRecord).duration\n          : Math.round((Date.now() - call.startTime) / 1000),\n        result:\n          (call as CallLogRecord).result || (call as Call).telephonyStatus,\n      },\n      fromEntity,\n      toEntity,\n    });\n  }\n\n  @proxify\n  async _autoLogCall({\n    call,\n    fromEntity,\n    toEntity,\n    triggerType,\n  }: AutoLogCallOptions) {\n    if (!this.ready) {\n      return;\n    }\n    await this.log({\n      call: {\n        ...call,\n        duration: Object.prototype.hasOwnProperty.call(call, 'duration')\n          ? (call as CallLogRecord).duration\n          : Math.round((Date.now() - call.startTime) / 1000),\n        result:\n          (call as CallLogRecord).result || (call as Call).telephonyStatus,\n      },\n      fromEntity,\n      toEntity,\n      triggerType,\n    });\n  }\n\n  _activityMatcherCheck(sessionId: string) {\n    return (\n      !this._deps.activityMatcher.dataMapping[sessionId] ||\n      !this._deps.activityMatcher.dataMapping[sessionId].length\n    );\n  }\n\n  _customMatcherCheck(sessionId: string) {\n    if (!this._customMatcherHooks.length) {\n      return true;\n    }\n    return this._customMatcherHooks.some((hook) => hook(sessionId));\n  }\n\n  addCustomMatcherHook(hook: Hook) {\n    this._customMatcherHooks.push(hook);\n  }\n\n  @proxify\n  async _onNewCall(call: Call, triggerType: CallLoggerTriggerType) {\n    if (await this._shouldLogNewCall(call)) {\n      // RCINT-3857 check activity in case instance was reloaded when call is still active\n      await this._deps.activityMatcher.triggerMatch();\n      if (\n        this._activityMatcherCheck(call.sessionId) &&\n        this._customMatcherCheck(call.sessionId)\n      ) {\n        // is completely new, need entity information\n        await this._deps.contactMatcher.triggerMatch();\n\n        const toNumberEntity = call.toNumberEntity || '';\n\n        const fromMatches =\n          (call.from &&\n            call.from.phoneNumber &&\n            this._deps.contactMatcher.dataMapping[call.from.phoneNumber]) ||\n          [];\n\n        const toMatches =\n          (call.to &&\n            call.to.phoneNumber &&\n            this._deps.contactMatcher.dataMapping[call.to.phoneNumber]) ||\n          [];\n\n        const fromEntity =\n          (fromMatches && fromMatches.length === 1 && fromMatches[0]) || null;\n\n        let toEntity = null;\n        if (toMatches && toMatches.length === 1) {\n          /* eslint { \"prefer-destructuring\": 0 } */\n          toEntity = toMatches[0];\n        } else if (toMatches && toMatches.length > 1 && toNumberEntity !== '') {\n          toEntity = toMatches.find((match) => toNumberEntity === match.id);\n        }\n\n        await this._autoLogCall({\n          call,\n          fromEntity,\n          toEntity,\n          triggerType,\n        });\n      } else {\n        // only update call information if call has been logged\n        await this._autoLogCall({\n          call,\n          triggerType,\n        });\n      }\n    }\n  }\n\n  @proxify\n  async _shouldLogUpdatedCall(call: HistoryCall | ActiveCall) {\n    const isActive = await this._ensureActive();\n    if (isActive && (this.logOnRinging || !isRinging(call))) {\n      if (this.autoLog) return true;\n      await this._deps.activityMatcher.triggerMatch();\n      const activityMatches =\n        this._deps.activityMatcher.dataMapping[call.sessionId] || [];\n      return activityMatches.length > 0;\n    }\n    return false;\n  }\n\n  @proxify\n  async _onCallUpdated<T extends keyof UpdatedCallMap>(\n    call: UpdatedCall<T>,\n    triggerType: T,\n  ) {\n    if (await this._shouldLogUpdatedCall(call)) {\n      await this._autoLogCall({ call, triggerType });\n    }\n  }\n\n  @proxify\n  async _onCallAnswered(call: ActiveCall) {}\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this._deps.callMonitor.calls,\n      (newCalls, oldCalls) => {\n        if (this.ready) {\n          oldCalls = oldCalls?.slice() || [];\n          removeDuplicateSelfCalls(newCalls).forEach((call) => {\n            const oldCallIndex = oldCalls.findIndex(\n              (item) => item.sessionId === call.sessionId,\n            );\n            if (oldCallIndex === -1) {\n              this._onNewCall(call, callLoggerTriggerTypes.presenceUpdate);\n            } else {\n              const oldCall = oldCalls[oldCallIndex];\n              oldCalls.splice(oldCallIndex, 1);\n              if (call.telephonyStatus !== oldCall.telephonyStatus) {\n                this._onCallUpdated(\n                  {\n                    ...call,\n                    isTransferredCall:\n                      !!this.transferredCallsMap[call.sessionId],\n                    transferredMiddleNumber: this.transferredCallsMap[\n                      call.sessionId\n                    ]\n                      ? this.transferredCallsMap[call.sessionId]\n                          .transferredMiddleNumber\n                      : null,\n                  },\n                  callLoggerTriggerTypes.presenceUpdate,\n                );\n                if (\n                  oldCall.telephonyStatus === 'Ringing' &&\n                  call.telephonyStatus === 'CallConnected'\n                ) {\n                  this._onCallAnswered(call);\n                }\n              }\n              if (\n                (call.from && call.from.phoneNumber) !==\n                (oldCall.from && oldCall.from.phoneNumber)\n              ) {\n                this._addTransferredCall(\n                  call.sessionId,\n                  oldCall.from?.phoneNumber,\n                );\n                this._onCallUpdated(\n                  {\n                    ...call,\n                    isTransferredCall: true,\n                    transferredMiddleNumber:\n                      oldCall.from && oldCall.from.phoneNumber,\n                    phoneNumberUpdated: true,\n                  },\n                  callLoggerTriggerTypes.presenceUpdate,\n                );\n              }\n            }\n          });\n          oldCalls.forEach((call) => {\n            this._onCallUpdated(\n              {\n                ...call,\n                isTransferredCall: !!this.transferredCallsMap[call.sessionId],\n                transferredMiddleNumber: this.transferredCallsMap[\n                  call.sessionId\n                ]\n                  ? this.transferredCallsMap[call.sessionId]\n                      .transferredMiddleNumber\n                  : null,\n              },\n              callLoggerTriggerTypes.presenceUpdate,\n            );\n          });\n        }\n      },\n    );\n\n    watch(\n      this,\n      () => this._deps.callHistory.endedCalls,\n      (newCall, oldCalls) => {\n        if (this.ready) {\n          oldCalls = oldCalls?.slice() || [];\n          const currentSessions: Record<string, boolean> = {};\n          newCall.forEach((call) => {\n            currentSessions[call.sessionId] = true;\n          });\n          oldCalls.forEach((call) => {\n            if (!currentSessions[call.sessionId]) {\n              // call log updated\n              const callInfo = this._deps.callHistory.calls.find(\n                (item) => item.sessionId === call.sessionId,\n              );\n              if (callInfo) {\n                this._onCallUpdated(\n                  {\n                    ...callInfo,\n                    isTransferredCall:\n                      !!this.transferredCallsMap[callInfo.sessionId],\n                    transferredMiddleNumber: this.transferredCallsMap[\n                      call.sessionId\n                    ]\n                      ? this.transferredCallsMap[call.sessionId]\n                          .transferredMiddleNumber\n                      : null,\n                  },\n                  callLoggerTriggerTypes.callLogSync,\n                );\n              }\n            }\n          });\n        }\n      },\n    );\n  }\n\n  @proxify\n  async setAutoLog(autoLog: boolean) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this._setAutoLog(autoLog);\n    }\n  }\n\n  @proxify\n  async setLogOnRinging(logOnRinging: boolean) {\n    if (this.ready && logOnRinging !== this.logOnRinging) {\n      this._setLogOnRinging(logOnRinging);\n    }\n  }\n\n  @computed((that: CallLogger) => [that.transferredCallsList])\n  get transferredCallsMap() {\n    return reduce(\n      (mapping, matcher) => ({ ...mapping, ...matcher }),\n      {} as Record<string, TransferredCall>,\n      this.transferredCallsList,\n    );\n  }\n}\n"],"file":"CallLogger.js"}