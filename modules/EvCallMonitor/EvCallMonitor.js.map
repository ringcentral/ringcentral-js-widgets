{"version":3,"file":"EvCallMonitor.js","names":["_di","require","_core","_enums","_callUniqueIdentifies","_contactMatchIdentify","_dec","_dec2","_dec3","_class","_class2","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","l","Symbol","iterator","n","i","u","a","f","call","next","done","Array","isArray","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","_arrayLikeToArray","toString","slice","constructor","name","from","test","asyncGeneratorStep","c","Promise","resolve","then","_asyncToGenerator","_next","_throw","_classCallCheck","_defineProperties","key","_createClass","prototype","_toPrimitive","_typeof","toPrimitive","String","Number","_inherits","create","_setPrototypeOf","setPrototypeOf","bind","__proto__","_createSuper","_isNativeReflectConstruct","_getPrototypeOf","s","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","initializer","reverse","reduce","EvCallMonitor","Module","deps","dep","optional","computed","that","callsDataMapping","contactMatches","activityMatches","calls","_RcModuleV","_super","_this$_deps$contactMa","_this$_deps$activityM","_this","_oldCalls","_beforeunloadHandler","_deps","evAgentSession","shouldBlockBrowser","contactMatcher","addQuerySource","getQueriesFn","uniqueIdentifies","readyCheckFn","presence","ready","activityMatcher","callIds","_getMatcher","regeneratorRuntime","mark","_callee","_ref","ani","callType","contactMatchIdentify","wrap","_callee$","_context","prev","contactMatchIdentifyEncode","phoneNumber","forceMatchNumber","stop","getMatcher","_x","getMainCall","uii","id","evClient","getMainId","callsMapping","limitCalls","evCallDataSource","onStateChange","configSuccess","currentCall","mainCall","eventEmitter","emit","callStatus","ANSWERED","clearCalls","ENDED","getCallId","_ref2","sessionId","encodeUii","getActiveCallList","otherCallIds","decodeUii","mainUii","includes","currentOtherCallIds","currentCallIds","concat","map","updateActivityMatches","_ref3","undefined","_ref3$forceMatch","forceMatch","match","queries","_getQueries","ignoreCache","onCallRinging","callback","on","RINGING","onCallAnswered","onCallEnded","bindBeforeunload","beforeunload","add","removeBeforeunload","remove","get","otherCalls","callLogs","callLogsIds","dataMapping","_this2","entries","mapping","_ref4","_call$session","_ref5","session","recordingUrl","_ref6","baggage","agentFirstName","agentLastName","agentName","makeCallsUniqueIdentifies","callsLimited","RcModuleV2","exports"],"sources":["modules/EvCallMonitor/EvCallMonitor.ts"],"sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport { computed, RcModuleV2 } from '@ringcentral-integration/core';\nimport type { Mapping } from '@ringcentral-integration/widgets/typings';\n\nimport { callStatus } from '../../enums';\nimport type { EvCallData } from '../../interfaces/EvData.interface';\nimport type { EvAddSessionNotification } from '../../lib/EvClient/interfaces';\nimport { makeCallsUniqueIdentifies } from '../../lib/callUniqueIdentifies';\nimport { contactMatchIdentifyEncode } from '../../lib/contactMatchIdentify';\n\nimport type { CallMonitor, Deps } from './EvCallMonitor.interface';\n\n@Module({\n  name: 'EvCallMonitor',\n  deps: [\n    'Presence',\n    'EvClient',\n    'Beforeunload',\n    'EvAgentSession',\n    'EvIntegratedSoftphone',\n    'EvCallDataSource',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n  ],\n})\nclass EvCallMonitor extends RcModuleV2<Deps> implements CallMonitor {\n  private _oldCalls: EvCallData[] = [];\n\n  private _beforeunloadHandler = () =>\n    this._deps.evAgentSession.shouldBlockBrowser;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n\n    this._deps.contactMatcher?.addQuerySource({\n      getQueriesFn: () => this.uniqueIdentifies,\n      readyCheckFn: () => this._deps.presence.ready,\n    });\n    this._deps.activityMatcher?.addQuerySource({\n      getQueriesFn: () => this.callIds,\n      readyCheckFn: () => this._deps.presence.ready,\n    });\n  }\n\n  async getMatcher({ ani, callType }: EvCallData) {\n    if (this._deps.contactMatcher) {\n      const contactMatchIdentify = contactMatchIdentifyEncode({\n        phoneNumber: ani,\n        callType,\n      });\n      await this._deps.contactMatcher.forceMatchNumber({\n        phoneNumber: contactMatchIdentify,\n      });\n    }\n  }\n\n  get isOnCall() {\n    return this.calls.length > 0;\n  }\n\n  get calls() {\n    return this._deps.presence.calls || [];\n  }\n\n  get otherCalls() {\n    return this._deps.presence.otherCalls || [];\n  }\n\n  get callLogs() {\n    return this._deps.presence.callLogs || [];\n  }\n\n  get callIds() {\n    return this._deps.presence.callIds || [];\n  }\n\n  get otherCallIds() {\n    return this._deps.presence.otherCallIds || [];\n  }\n\n  get callLogsIds() {\n    return this._deps.presence.callLogsIds || [];\n  }\n\n  get callsDataMapping() {\n    return this._deps.presence.callsMapping || {};\n  }\n\n  get contactMatches(): Mapping<any[]> {\n    return (this._deps.contactMatcher.dataMapping as any) || {};\n  }\n\n  get activityMatches() {\n    return this._deps.activityMatcher.dataMapping || {};\n  }\n\n  @computed((that: EvCallMonitor) => [\n    that.callsDataMapping,\n    that.contactMatches,\n    that.activityMatches,\n  ])\n  get callsMapping() {\n    const { callsDataMapping, contactMatches, activityMatches } = this;\n\n    return Object.entries(callsDataMapping).reduce<Mapping<EvCallData>>(\n      (mapping, [key, call]) => {\n        const contactMatchIdentify = contactMatchIdentifyEncode({\n          phoneNumber: call.ani,\n          callType: call.callType,\n        });\n\n        const id = call.session ? this.getCallId(call.session) : null;\n        const recordingUrl = call.session?.recordingUrl;\n        const { agentFirstName, agentLastName } = call.baggage || {};\n\n        const agentName =\n          agentFirstName && agentLastName\n            ? `${agentFirstName} ${agentLastName}`\n            : null;\n\n        return {\n          ...mapping,\n          [key]: {\n            ...call,\n            recordingUrl,\n            agentName,\n            // TODO: confirm about using `toMatches` & `fromMatches`?\n            contactMatches: contactMatches[contactMatchIdentify] || [],\n            activityMatches:\n              id && activityMatches[id] ? activityMatches[id] : [],\n          } as EvCallData,\n        };\n      },\n      {},\n    );\n  }\n\n  @computed((that: EvCallMonitor) => [that.calls])\n  get uniqueIdentifies() {\n    return makeCallsUniqueIdentifies(this.calls);\n  }\n\n  getMainCall(uii: string) {\n    const id = this._deps.evClient.getMainId(uii);\n    return this._deps.presence.callsMapping[id];\n  }\n\n  get callsLimited() {\n    return this._deps.evCallDataSource.callsLimited;\n  }\n\n  limitCalls() {\n    return this._deps.evCallDataSource.limitCalls();\n  }\n\n  override onStateChange() {\n    if (this._deps.evAgentSession.configSuccess) {\n      if (this.calls.length > this._oldCalls.length) {\n        const currentCall = this.calls[0];\n        const mainCall = this.getMainCall(currentCall.uii);\n\n        if (currentCall && mainCall) {\n          this._oldCalls = this.calls;\n\n          this._deps.presence.eventEmitter.emit(\n            callStatus.ANSWERED,\n            currentCall,\n          );\n        } else {\n          this._deps.presence.clearCalls();\n        }\n      } else if (this.calls.length < this._oldCalls.length) {\n        const call = this._oldCalls[0];\n        this._oldCalls = this.calls;\n\n        this._deps.presence.eventEmitter.emit(callStatus.ENDED, call);\n      }\n    }\n  }\n\n  getCallId({ uii, sessionId }: Partial<EvAddSessionNotification>) {\n    return this._deps.evClient.encodeUii({ uii, sessionId });\n  }\n\n  getActiveCallList(\n    callIds: string[],\n    otherCallIds: string[],\n    callsMapping: Mapping<EvCallData>,\n    id: string,\n  ) {\n    const uii = this._deps.evClient.decodeUii(id);\n    const mainUii = this._deps.evClient.getMainId(uii);\n    if (!otherCallIds.includes(mainUii) || !callIds.includes(id)) return [];\n    const currentOtherCallIds = otherCallIds.filter(\n      (id) => id.includes(uii) && id !== mainUii,\n    );\n    const currentCallIds = [mainUii, id, ...currentOtherCallIds];\n    return currentCallIds.map((id) => callsMapping[id]);\n  }\n\n  updateActivityMatches({ forceMatch = false } = {}) {\n    // it's async function\n    // TODO: fix type in DataMatcher\n    return this._deps.activityMatcher.match({\n      queries: this._deps.activityMatcher._getQueries(),\n      ignoreCache: forceMatch,\n    });\n  }\n\n  onCallRinging(callback: (session?: EvAddSessionNotification) => any) {\n    this._deps.presence.eventEmitter.on(callStatus.RINGING, callback);\n    return this;\n  }\n\n  onCallAnswered(callback: (currentCall?: EvCallData) => any) {\n    this._deps.presence.eventEmitter.on(callStatus.ANSWERED, callback);\n    return this;\n  }\n\n  onCallEnded(callback: (currentCall?: EvCallData) => any) {\n    this._deps.presence.eventEmitter.on(callStatus.ENDED, callback);\n    return this;\n  }\n\n  bindBeforeunload() {\n    this._deps.beforeunload.add(this._beforeunloadHandler);\n  }\n\n  removeBeforeunload() {\n    this._deps.beforeunload.remove(this._beforeunloadHandler);\n  }\n}\n\nexport { EvCallMonitor };\n"],"mappings":"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","ignoreList":[]}