{"version":3,"sources":["modules/EvCallMonitor/EvCallMonitor.ts"],"names":["EvCallMonitor","name","deps","dep","optional","that","callsDataMapping","contactMatches","activityMatches","calls","_oldCalls","_beforeunloadHandler","_deps","evAgentSession","shouldBlockBrowser","contactMatcher","addQuerySource","getQueriesFn","uniqueIdentifies","readyCheckFn","presence","ready","activityMatcher","callIds","ani","callType","contactMatchIdentify","phoneNumber","forceMatchNumber","uii","id","evClient","getMainId","callsMapping","evCallDataSource","limitCalls","configSuccess","length","currentCall","mainCall","getMainCall","eventEmitter","emit","callStatus","ANSWERED","clearCalls","call","ENDED","sessionId","encodeUii","otherCallIds","decodeUii","mainUii","includes","currentOtherCallIds","filter","currentCallIds","map","forceMatch","match","queries","_getQueries","ignoreCache","callback","on","RINGING","beforeunload","add","remove","otherCalls","callLogs","callLogsIds","dataMapping","Object","entries","reduce","mapping","key","session","getCallId","recordingUrl","baggage","agentFirstName","agentLastName","agentName","callsLimited","RcModuleV2"],"mappings":"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","sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport { computed, RcModuleV2 } from '@ringcentral-integration/core';\nimport { Mapping } from '@ringcentral-integration/widgets/typings';\n\nimport { callStatus } from '../../enums';\nimport { EvCallData } from '../../interfaces/EvData.interface';\nimport { makeCallsUniqueIdentifies } from '../../lib/callUniqueIdentifies';\nimport { contactMatchIdentifyEncode } from '../../lib/contactMatchIdentify';\nimport { EvAddSessionNotification } from '../../lib/EvClient/interfaces';\nimport { CallMonitor, Deps } from './EvCallMonitor.interface';\n\n@Module({\n  name: 'EvCallMonitor',\n  deps: [\n    'Presence',\n    'EvClient',\n    'Beforeunload',\n    'EvAgentSession',\n    'EvIntegratedSoftphone',\n    'EvCallDataSource',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n  ],\n})\nclass EvCallMonitor extends RcModuleV2<Deps> implements CallMonitor {\n  private _oldCalls: EvCallData[] = [];\n\n  private _beforeunloadHandler = () =>\n    this._deps.evAgentSession.shouldBlockBrowser;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n\n    this._deps.contactMatcher?.addQuerySource({\n      getQueriesFn: () => this.uniqueIdentifies,\n      readyCheckFn: () => this._deps.presence.ready,\n    });\n    this._deps.activityMatcher?.addQuerySource({\n      getQueriesFn: () => this.callIds,\n      readyCheckFn: () => this._deps.presence.ready,\n    });\n  }\n\n  async getMatcher({ ani, callType }: EvCallData) {\n    if (this._deps.contactMatcher) {\n      const contactMatchIdentify = contactMatchIdentifyEncode({\n        phoneNumber: ani,\n        callType,\n      });\n      await this._deps.contactMatcher.forceMatchNumber({\n        phoneNumber: contactMatchIdentify,\n      });\n    }\n  }\n\n  get isOnCall() {\n    return this.calls.length > 0;\n  }\n\n  get calls() {\n    return this._deps.presence.calls || [];\n  }\n\n  get otherCalls() {\n    return this._deps.presence.otherCalls || [];\n  }\n\n  get callLogs() {\n    return this._deps.presence.callLogs || [];\n  }\n\n  get callIds() {\n    return this._deps.presence.callIds || [];\n  }\n\n  get otherCallIds() {\n    return this._deps.presence.otherCallIds || [];\n  }\n\n  get callLogsIds() {\n    return this._deps.presence.callLogsIds || [];\n  }\n\n  get callsDataMapping() {\n    return this._deps.presence.callsMapping || {};\n  }\n\n  get contactMatches(): Mapping<any[]> {\n    return (this._deps.contactMatcher.dataMapping as any) || {};\n  }\n\n  get activityMatches() {\n    return this._deps.activityMatcher.dataMapping || {};\n  }\n\n  @computed((that: EvCallMonitor) => [\n    that.callsDataMapping,\n    that.contactMatches,\n    that.activityMatches,\n  ])\n  get callsMapping() {\n    const { callsDataMapping, contactMatches, activityMatches } = this;\n\n    return Object.entries(callsDataMapping).reduce<Mapping<EvCallData>>(\n      (mapping, [key, call]) => {\n        const contactMatchIdentify = contactMatchIdentifyEncode({\n          phoneNumber: call.ani,\n          callType: call.callType,\n        });\n\n        const id = call.session ? this.getCallId(call.session) : null;\n        const recordingUrl = call.session?.recordingUrl;\n        const { agentFirstName, agentLastName } = call.baggage || {};\n\n        const agentName =\n          agentFirstName && agentLastName\n            ? `${agentFirstName} ${agentLastName}`\n            : null;\n\n        return {\n          ...mapping,\n          [key]: {\n            ...call,\n            recordingUrl,\n            agentName,\n            // TODO confirm about using `toMatches` & `fromMatches`?\n            contactMatches: contactMatches[contactMatchIdentify] || [],\n            activityMatches:\n              id && activityMatches[id] ? activityMatches[id] : [],\n          } as EvCallData,\n        };\n      },\n      {},\n    );\n  }\n\n  @computed((that: EvCallMonitor) => [that.calls])\n  get uniqueIdentifies() {\n    return makeCallsUniqueIdentifies(this.calls);\n  }\n\n  getMainCall(uii: string) {\n    const id = this._deps.evClient.getMainId(uii);\n    return this._deps.presence.callsMapping[id];\n  }\n\n  get callsLimited() {\n    return this._deps.evCallDataSource.callsLimited;\n  }\n\n  limitCalls() {\n    return this._deps.evCallDataSource.limitCalls();\n  }\n\n  onStateChange() {\n    if (this._deps.evAgentSession.configSuccess) {\n      if (this.calls.length > this._oldCalls.length) {\n        const currentCall = this.calls[0];\n        const mainCall = this.getMainCall(currentCall.uii);\n\n        if (currentCall && mainCall) {\n          this._oldCalls = this.calls;\n\n          this._deps.presence.eventEmitter.emit(\n            callStatus.ANSWERED,\n            currentCall,\n          );\n        } else {\n          this._deps.presence.clearCalls();\n        }\n      } else if (this.calls.length < this._oldCalls.length) {\n        const call = this._oldCalls[0];\n        this._oldCalls = this.calls;\n\n        this._deps.presence.eventEmitter.emit(callStatus.ENDED, call);\n      }\n    }\n  }\n\n  getCallId({ uii, sessionId }: Partial<EvAddSessionNotification>) {\n    return this._deps.evClient.encodeUii({ uii, sessionId });\n  }\n\n  getActiveCallList(\n    callIds: string[],\n    otherCallIds: string[],\n    callsMapping: Mapping<EvCallData>,\n    id: string,\n  ) {\n    const uii = this._deps.evClient.decodeUii(id);\n    const mainUii = this._deps.evClient.getMainId(uii);\n    if (!otherCallIds.includes(mainUii) || !callIds.includes(id)) return [];\n    const currentOtherCallIds = otherCallIds.filter(\n      (id) => id.includes(uii) && id !== mainUii,\n    );\n    const currentCallIds = [mainUii, id, ...currentOtherCallIds];\n    return currentCallIds.map((id) => callsMapping[id]);\n  }\n\n  updateActivityMatches({ forceMatch = false } = {}) {\n    // it's async function\n    // TODO: fix type in DataMatcher\n    return this._deps.activityMatcher.match({\n      queries: this._deps.activityMatcher._getQueries(),\n      ignoreCache: forceMatch,\n    });\n  }\n\n  onCallRinging(callback: (session?: EvAddSessionNotification) => any) {\n    this._deps.presence.eventEmitter.on(callStatus.RINGING, callback);\n    return this;\n  }\n\n  onCallAnswered(callback: (currentCall?: EvCallData) => any) {\n    this._deps.presence.eventEmitter.on(callStatus.ANSWERED, callback);\n    return this;\n  }\n\n  onCallEnded(callback: (currentCall?: EvCallData) => any) {\n    this._deps.presence.eventEmitter.on(callStatus.ENDED, callback);\n    return this;\n  }\n\n  bindBeforeunload() {\n    this._deps.beforeunload.add(this._beforeunloadHandler);\n  }\n\n  removeBeforeunload() {\n    this._deps.beforeunload.remove(this._beforeunloadHandler);\n  }\n}\n\nexport { EvCallMonitor };\n"],"file":"EvCallMonitor.js"}