{"version":3,"sources":["modules/CallHistory/getCallHistoryReducer.ts"],"names":["DEFAULT_CLEAN_TIME","getEndedCallsReducer","types","state","type","endedCalls","timestamp","addEndedCalls","newState","slice","call","callWithDuration","duration","Math","floor","startTime","idx","item","telephonySessionId","push","removeEndedCalls","filter","find","shouldRemove","Date","getTime","resetSuccess","getSearchInputReducer","input","updateSearchInput","getCallsFilterReducer","data","filterSuccess","getCallHistoryReducer","reducers","searchInput","filterCalls","status"],"mappings":"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","sourcesContent":["import { findIndex, forEach } from 'ramda';\nimport { combineReducers } from 'redux';\n\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nconst DEFAULT_CLEAN_TIME = 24 * 60 * 60 * 1000; // 1day\n\nexport function getEndedCallsReducer(types) {\n  return (state = [], { type, endedCalls, timestamp }) => {\n    switch (type) {\n      case types.addEndedCalls: {\n        const newState = state.slice();\n        forEach((call) => {\n          const callWithDuration = {\n            ...call,\n            duration: Math.floor((timestamp - call.startTime) / 1000),\n          };\n          const idx = findIndex(\n            (item) => item.telephonySessionId === call.telephonySessionId,\n            newState,\n          );\n          if (idx > -1) {\n            // replace old one if found\n            newState[idx] = callWithDuration;\n          } else {\n            newState.push(callWithDuration);\n          }\n        }, endedCalls);\n        return newState;\n      }\n      case types.removeEndedCalls:\n        return state.filter(\n          (call) =>\n            !endedCalls.find(\n              (shouldRemove) =>\n                shouldRemove.telephonySessionId === call.telephonySessionId,\n            ) ||\n            // clean current overdue ended call (default clean time: 1day).\n            new Date().getTime() - call.startTime > DEFAULT_CLEAN_TIME,\n        );\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSearchInputReducer(types) {\n  return (state = '', { type, input = '' }) => {\n    switch (type) {\n      case types.updateSearchInput:\n        return input;\n      case types.resetSuccess:\n        return '';\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getCallsFilterReducer(types) {\n  return (state = [], { type, data = [] }) => {\n    switch (type) {\n      case types.filterSuccess:\n        return data;\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallHistoryReducer(types, reducers) {\n  return combineReducers({\n    ...reducers,\n    searchInput: getSearchInputReducer(types),\n    filterCalls: getCallsFilterReducer(types),\n    status: getModuleStatusReducer(types),\n  });\n}\n"],"file":"getCallHistoryReducer.js"}