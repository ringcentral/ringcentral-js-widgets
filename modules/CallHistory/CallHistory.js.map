{"version":3,"file":"CallHistory.js","names":["_core","require","_ramda","_trackEvents","_callLogHelpers","_debounce","_interopRequireDefault","_di","_normalizeNumber","_proxify","_CallingSettings","_callHistoryHelper","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_class","_class2","_descriptor","_descriptor2","_descriptor3","_descriptor4","e","__esModule","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","Symbol","iterator","Array","from","isArray","_arrayLikeToArray","asyncGeneratorStep","n","t","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","toString","call","slice","constructor","name","test","length","l","f","next","Object","push","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_initializerDefineProperty","initializer","_classCallCheck","_defineProperties","key","_createClass","prototype","_toPrimitive","_typeof","toPrimitive","String","Number","_inherits","create","_setPrototypeOf","setPrototypeOf","bind","__proto__","_createSuper","_isNativeReflectConstruct","_getPrototypeOf","s","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","reverse","reduce","_initializerWarningHelper","Error","DEFAULT_CLEAN_TIME","CallHistory","Module","deps","dep","optional","track","trackEvents","clickToSMSCallHistory","that","_callingSettings","parentModule","callingSettings","callingMode","callingModes","ringout","clickToDialCallHistoryWithRingOut","clickToDialCallHistory","computed","_deps","callLog","calls","accountInfo","countryCode","_that$_deps$contactMa","_that$_deps$activityM","_that$_deps$callMonit","normalizedCalls","endedCalls","contactMatcher","dataMapping","activityMatcher","callMonitor","callMatched","_that$_deps$activityM2","filterCalls","searchInput","filteredCalls","_RcModuleV","_super","_deps$callHistoryOpti","_deps$callHistoryOpti2","_this$_deps$callHisto","_this$_deps$callHisto2","_this$_deps$activityM","_this","storageKey","enableCache","callHistoryOptions","_debouncedSearch","debounce","callsSearch","enableContactMatchInCallHistory","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","tabManager","sessionIds","filterSuccess","data","undefined","setSearchInput","input","setEndedCalls","timestamp","_this2","callWithDuration","duration","Math","floor","startTime","idx","findIndex","item","telephonySessionId","removeEndedCalls","find","_ref","Date","now","cleanEndedCalls","removeAllEndedCalls","markedList","markRemoved","concat","onInitOnce","_this3","watch","active","triggerMatch","newMonitorCalls","oldMonitorCalls","currentCall","flag","_addEndedCalls","_ref2","_ref3","_ref3$","currentCalls","ids","shouldRemovedCalls","multiple","onReset","result","isRecording","warmTransferInfo","sync","_onClickToSMS","regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","stop","onClickToSMS","_onClickToCall","_callee2","_callee2$","_context2","onClickToCall","_updateSearchInput","_callee3","_callee3$","_context3","updateSearchInput","_x","findMatches","contactMapping","pickNumber","enableFullPhoneNumberMatch","pickFullPhoneNumber","pickPhoneOrExtensionNumber","fromNumber","phoneNumber","extensionNumber","toNumber","to","fromMatches","toMatches","_callee4","_this$_debouncedSearc","_len","args","_key","_args4","_callee4$","_context4","debouncedSearch","_callsSearch","_callee5","effectSearchStr","_callee5$","_context5","abrupt","toLowerCase","trim","_getPhoneNumberMatche","getPhoneNumberMatches","matches","matchesMatched","some","entities","id","indexOf","phone","sort","sortByStartTime","get","_this4","map","callFrom","normalizeNumber","maxExtensionLength","maxExtensionNumberLength","callTo","_this$_deps$callHisto3","_this$_deps$callHisto4","_this$_deps$contactMa","_this$_deps$contactMa2","_this$_deps$activityM2","_this$_deps$activityM3","_this$_deps$callMonit","_this$_deps$callMonit2","_this5","activityMapping","telephonySessionIds","fromName","toName","_this5$findMatches","activityMatches","sessionId","matched","toNumberEntity","filteredEndedCalls","_this$_deps$activityM4","_this6","newCalls","_this6$_deps$activity","output","numberMap","addNumbersFromCall","RcModuleV2","storage","state","action","proxify","exports"],"sources":["modules/CallHistory/CallHistory.ts"],"sourcesContent":["import CallLogFromParty from '@rc-ex/core/lib/definitions/CallLogFromParty';\nimport CallLogToParty from '@rc-ex/core/lib/definitions/CallLogToParty';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n  watch,\n} from '@ringcentral-integration/core';\nimport { findIndex, forEach } from 'ramda';\n\nimport { trackEvents } from '../../enums/trackEvents';\nimport type { Call } from '../../interfaces/Call.interface';\nimport type { Entity } from '../../interfaces/Entity.interface';\nimport type { ActiveCall } from '../../interfaces/Presence.model';\nimport type { PartialRequired } from '../../interfaces/utilities';\nimport {\n  getPhoneNumberMatches,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport debounce from '../../lib/debounce';\nimport { Module } from '../../lib/di';\nimport { normalizeNumber } from '../../lib/normalizeNumber';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { callingModes } from '../CallingSettings';\n\nimport type { Deps, HistoryCall } from './CallHistory.interface';\nimport {\n  addNumbersFromCall,\n  pickFullPhoneNumber,\n  pickPhoneOrExtensionNumber,\n} from './callHistoryHelper';\n\nconst DEFAULT_CLEAN_TIME = 24 * 60 * 60 * 1000; // 1 day\n\n@Module({\n  name: 'CallHistory',\n  deps: [\n    'AccountInfo',\n    'CallLog',\n    'Storage',\n    { dep: 'CallMonitor', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'CallHistoryOptions', optional: true },\n  ],\n})\nexport class CallHistory<T extends Deps = Deps> extends RcModuleV2<T> {\n  protected _debouncedSearch = debounce(this.callsSearch, 230, false);\n\n  constructor(deps: T) {\n    super({\n      deps,\n      storageKey: 'CallHistory',\n      enableCache: deps.callHistoryOptions?.enableCache ?? true,\n    });\n    const enableContactMatchInCallHistory =\n      this._deps.callHistoryOptions?.enableContactMatchInCallHistory ?? true;\n    if (enableContactMatchInCallHistory && this._deps.contactMatcher) {\n      this._deps.contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () =>\n          (!this._deps.callMonitor || this._deps.callMonitor.ready) &&\n          (!this._deps.tabManager || this._deps.tabManager.ready) &&\n          this._deps.callLog.ready &&\n          this._deps.accountInfo.ready,\n      });\n    }\n    this._deps.activityMatcher?.addQuerySource({\n      getQueriesFn: () => this.sessionIds,\n      readyCheckFn: () =>\n        (!this._deps.callMonitor || this._deps.callMonitor.ready) &&\n        (!this._deps.tabManager || this._deps.tabManager.ready) &&\n        this._deps.callLog.ready,\n    });\n  }\n\n  @storage\n  @state\n  endedCalls: Call[] = [];\n\n  @state\n  searchInput = '';\n\n  @state\n  filteredCalls: HistoryCall[] = [];\n\n  @action\n  filterSuccess(data: HistoryCall[] = []) {\n    this.filteredCalls = data;\n  }\n\n  @action\n  setSearchInput(input = '') {\n    this.searchInput = input;\n  }\n\n  @action\n  setEndedCalls(endedCalls: Call[], timestamp: number) {\n    forEach((call) => {\n      const callWithDuration = {\n        ...call,\n        // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n        duration: Math.floor((timestamp - call.startTime) / 1000),\n      };\n      const idx = findIndex(\n        (item) => item.telephonySessionId === call.telephonySessionId,\n        this.endedCalls,\n      );\n      if (idx > -1) {\n        // replace old one if found\n        this.endedCalls[idx] = callWithDuration;\n      } else {\n        this.endedCalls.push(callWithDuration);\n      }\n    }, endedCalls);\n  }\n\n  @action\n  removeEndedCalls(endedCalls: Pick<Call, 'telephonySessionId'>[]) {\n    this.endedCalls = this.endedCalls.filter(\n      (call) =>\n        !(\n          endedCalls.find(\n            ({ telephonySessionId }) =>\n              telephonySessionId === call.telephonySessionId,\n          ) ||\n          // clean current overdue ended call (default clean time: 1day).\n          // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n          Date.now() - call.startTime > DEFAULT_CLEAN_TIME\n        ),\n    );\n  }\n\n  @action\n  cleanEndedCalls() {\n    this.endedCalls = [];\n  }\n\n  @action\n  removeAllEndedCalls() {\n    this.endedCalls = [];\n    this.markedList = [];\n    this.markRemoved();\n  }\n\n  // The call logs which has been removed from remote\n  // The marked telephonySessionId should not been added to ended calls afterwards.\n  @storage\n  @state\n  markedList: Pick<Call, 'telephonySessionId'>[] = [];\n\n  @action\n  markRemoved() {\n    this.markedList = this.markedList.concat(this._deps.callMonitor.calls);\n  }\n\n  override onInitOnce() {\n    if (this._deps.contactMatcher) {\n      watch(\n        this,\n        () => this.uniqueNumbers,\n        () => {\n          if (\n            this.ready &&\n            (!this._deps.tabManager || this._deps.tabManager.active) &&\n            // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n            this._deps.contactMatcher.ready\n          ) {\n            // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n            this._deps.contactMatcher.triggerMatch();\n          }\n        },\n      );\n    }\n\n    if (this._deps.activityMatcher) {\n      watch(\n        this,\n        () => this.sessionIds,\n        () => {\n          if (\n            this.ready &&\n            (!this._deps.tabManager || this._deps.tabManager.active) &&\n            // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n            this._deps.activityMatcher.ready\n          ) {\n            // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n            this._deps.activityMatcher.triggerMatch();\n          }\n        },\n      );\n    }\n\n    this._deps.callMonitor &&\n      watch(\n        this,\n        () => this._deps.callMonitor.calls,\n        (newMonitorCalls, oldMonitorCalls) => {\n          if (!this.ready) return;\n          const endedCalls = (oldMonitorCalls || []).filter(\n            (call) =>\n              !newMonitorCalls.find(\n                (currentCall) =>\n                  call.telephonySessionId === currentCall.telephonySessionId,\n              ) &&\n              // if the call's callLog has been fetch, skip\n              !this._deps.callLog.calls.find(\n                (currentCall) =>\n                  call.telephonySessionId === currentCall.telephonySessionId,\n              ) &&\n              // if delete all during active call\n              !this.markedList.find((currentCall) => {\n                const flag =\n                  call.telephonySessionId === currentCall.telephonySessionId;\n                return flag;\n              }),\n          );\n          if (endedCalls.length) {\n            this._addEndedCalls(endedCalls);\n          }\n        },\n      );\n\n    watch(\n      this,\n      // use watch multiple, because this.ready is async, can't become true in time, so need watch this.ready, too\n      () => [this._deps.callLog.calls, this.ready],\n      ([currentCalls = [], ready]) => {\n        if (!ready) return;\n        const ids: Record<string, boolean> = {};\n        // @ts-expect-error TS(2339): Property 'forEach' does not exist on type 'boolean... Remove this comment to see the full error message\n        currentCalls.forEach((call: any) => {\n          ids[call.telephonySessionId] = true;\n        });\n        const shouldRemovedCalls = this.endedCalls.filter(\n          // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n          (call) => ids[call.telephonySessionId],\n        );\n        if (shouldRemovedCalls.length) {\n          this.removeEndedCalls(shouldRemovedCalls);\n        }\n      },\n      {\n        multiple: true,\n      },\n    );\n  }\n\n  override onReset() {\n    this.setSearchInput('');\n    this.cleanEndedCalls();\n  }\n\n  _addEndedCalls(endedCalls: Call[]) {\n    endedCalls.forEach((call) => {\n      // TODO: refactor with immutable data update\n      call.result = 'Disconnected';\n      call.isRecording = false;\n      call.warmTransferInfo = undefined;\n    });\n    this.setEndedCalls(endedCalls, Date.now());\n    this._deps.callLog.sync();\n  }\n\n  // TODO: move to UI module\n  // for track click to sms in call history\n  @proxify\n  @track(trackEvents.clickToSMSCallHistory)\n  async onClickToSMS() {\n    // track holder\n  }\n\n  // TODO: move to UI module\n  // for track click to call in call history\n  @proxify\n  @track((that: CallHistory) => [\n    (that.parentModule as any).callingSettings?.callingMode ===\n    callingModes.ringout\n      ? trackEvents.clickToDialCallHistoryWithRingOut\n      : trackEvents.clickToDialCallHistory,\n  ])\n  async onClickToCall() {\n    // track holder\n  }\n\n  @proxify\n  async updateSearchInput(input: string) {\n    this.setSearchInput(input);\n  }\n\n  @computed((that: CallHistory) => [\n    that._deps.callLog.calls,\n    that._deps.accountInfo.countryCode,\n  ])\n  get normalizedCalls(): ActiveCall[] {\n    return this._deps.callLog.calls\n      .map((call) => {\n        const callFrom: CallLogFromParty = {\n          ...call.from,\n        };\n        if (callFrom.phoneNumber) {\n          callFrom.phoneNumber = normalizeNumber({\n            phoneNumber: callFrom.phoneNumber,\n            countryCode: this._deps.accountInfo.countryCode,\n            maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n          });\n        }\n        const callTo: CallLogToParty = {\n          ...call.to,\n        };\n        if (callTo.phoneNumber) {\n          callTo.phoneNumber = normalizeNumber({\n            phoneNumber: callTo.phoneNumber,\n            countryCode: this._deps.accountInfo.countryCode,\n            maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n          });\n        }\n        return {\n          ...call,\n          from: callFrom,\n          to: callTo,\n        };\n      })\n      .sort(sortByStartTime);\n  }\n\n  get enableFullPhoneNumberMatch() {\n    return this._deps.callHistoryOptions?.enableFullPhoneNumberMatch ?? false;\n  }\n\n  /**\n   * Allow sub class to have different find matches logic.\n   * @param contactMapping\n   * @param call\n   * @returns\n   */\n  findMatches(contactMapping: Record<string, Entity[]>, call: Call) {\n    const pickNumber = this.enableFullPhoneNumberMatch\n      ? pickFullPhoneNumber\n      : pickPhoneOrExtensionNumber;\n\n    const fromNumber =\n      // @ts-expect-error TS(2345): Argument of type 'string | undefined' is not assig... Remove this comment to see the full error message\n      call.from && pickNumber(call.from.phoneNumber, call.from.extensionNumber);\n    const toNumber =\n      // @ts-expect-error TS(2345): Argument of type 'string | undefined' is not assig... Remove this comment to see the full error message\n      call.to && pickNumber(call.to.phoneNumber, call.to.extensionNumber);\n\n    const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n    const toMatches = (toNumber && contactMapping[toNumber]) || [];\n    return {\n      fromMatches,\n      toMatches,\n    };\n  }\n\n  @computed((that: CallHistory) => [\n    that.normalizedCalls,\n    that.endedCalls,\n    that._deps.contactMatcher?.dataMapping,\n    that._deps.activityMatcher?.dataMapping,\n    that._deps.callMonitor?.callMatched,\n  ])\n  get calls(): HistoryCall[] {\n    const contactMapping = this._deps.contactMatcher?.dataMapping ?? {};\n    const activityMapping = this._deps.activityMatcher?.dataMapping ?? {};\n    const callMatched = this._deps.callMonitor?.callMatched ?? {};\n    const telephonySessionIds: Record<string, boolean> = {};\n    const calls = this.normalizedCalls.map((call) => {\n      // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n      telephonySessionIds[call.telephonySessionId] = true;\n      // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n      const fromName = call.from.name || call.from.phoneNumber;\n      const toName = call.to.name || call.to.phoneNumber;\n      // @ts-expect-error TS(2345): Argument of type 'ActiveCall' is not assignable to... Remove this comment to see the full error message\n      const { fromMatches, toMatches } = this.findMatches(contactMapping, call);\n      // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n      const activityMatches = activityMapping[call.sessionId] || [];\n      // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n      const matched = callMatched[call.sessionId];\n      return {\n        ...call,\n        fromName,\n        toName,\n        fromMatches,\n        toMatches,\n        activityMatches,\n        toNumberEntity: matched,\n      };\n    });\n    const filteredEndedCalls = this.endedCalls\n      // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n      .filter((call) => !telephonySessionIds[call.telephonySessionId])\n      .map((call) => {\n        const activityMatches = activityMapping[call.sessionId] || [];\n        const fromNumber =\n          call.from && (call.from.phoneNumber || call.from.extensionNumber);\n        const toNumber =\n          call.to && (call.to.phoneNumber || call.to.extensionNumber);\n        const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n        const toMatches = (toNumber && contactMapping[toNumber]) || [];\n        return {\n          ...call,\n          activityMatches,\n          fromMatches,\n          toMatches,\n        };\n      });\n    return [...filteredEndedCalls, ...calls].sort(sortByStartTime);\n  }\n\n  @proxify\n  async debouncedSearch(...args: any[]) {\n    this._debouncedSearch.call(this, ...args);\n  }\n\n  @proxify\n  async callsSearch() {\n    if (this.searchInput === '') {\n      return;\n    }\n    const calls = this.calls;\n    const searchInput = this.searchInput;\n    const effectSearchStr = searchInput.toLowerCase().trim();\n    const data = calls\n      .filter((call) => {\n        // @ts-expect-error TS(2345): Argument of type 'HistoryCall' is not assignable t... Remove this comment to see the full error message\n        const { phoneNumber, matches } = getPhoneNumberMatches(call);\n        // @ts-expect-error TS(2533): Object is possibly 'null' or 'undefined'.\n        const matchesMatched = matches.some((entities) => {\n          if (!entities || !entities.id) return false;\n          if (\n            entities.name &&\n            entities.name.toLowerCase().indexOf(effectSearchStr) > -1\n          )\n            return true;\n          if (entities.phone && entities.phone.indexOf(effectSearchStr) > -1)\n            return true;\n          return false;\n        });\n\n        if (matchesMatched) {\n          return true;\n        }\n        if (phoneNumber && phoneNumber.indexOf(effectSearchStr) > -1) {\n          return true;\n        }\n        return false;\n      })\n      .sort(sortByStartTime);\n\n    this.filterSuccess(data);\n  }\n\n  @computed((that: CallHistory) => [\n    that.filterCalls,\n    that._deps.activityMatcher?.dataMapping,\n  ])\n  get latestCalls() {\n    if (this._deps.activityMatcher?.dataMapping) {\n      const newCalls = this.filterCalls.map((call) => ({\n        ...call,\n        activityMatches:\n          // @ts-expect-error TS(2538): Type 'undefined' cannot be used as an index type.\n          this._deps.activityMatcher?.dataMapping[call.sessionId] || [],\n      }));\n      return newCalls;\n    }\n    return this.filterCalls;\n  }\n\n  @computed((that: CallHistory) => [that.normalizedCalls, that.endedCalls])\n  get uniqueNumbers() {\n    const output: string[] = [];\n    const numberMap: Record<string, boolean> = {};\n    this.normalizedCalls.forEach(\n      // @ts-expect-error TS(2345): Argument of type '(call: Call) => void' is not ass... Remove this comment to see the full error message\n      addNumbersFromCall(output, numberMap, this.enableFullPhoneNumberMatch),\n    );\n    this.endedCalls.forEach(\n      addNumbersFromCall(output, numberMap, this.enableFullPhoneNumberMatch),\n    );\n    return output;\n  }\n\n  @computed((that: CallHistory) => [that._deps.callLog.calls, that.endedCalls])\n  get sessionIds() {\n    const sessionIds: Record<string, boolean> = {};\n    return (\n      this._deps.callLog.calls as PartialRequired<ActiveCall, 'sessionId'>[]\n    )\n      .map((call) => {\n        sessionIds[call.sessionId] = true;\n        return call.sessionId;\n      })\n      .concat(\n        this.endedCalls\n          .filter((call) => !sessionIds[call.sessionId])\n          .map((call) => call.sessionId),\n      );\n  }\n\n  @computed((that: CallHistory) => [\n    that.searchInput,\n    that.calls,\n    that.filteredCalls,\n  ])\n  get filterCalls() {\n    if (this.searchInput === '') {\n      return this.calls;\n    }\n    return this.filteredCalls;\n  }\n\n  // TODO: remove recentlyEndedCalls getter, instead of `endedCalls`.\n  /**\n   * !!Please use `endedCalls` instead of it.\n   * @deprecated\n   */\n  get recentlyEndedCalls() {\n    return this.endedCalls;\n  }\n}\n"],"mappings":"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","ignoreList":[]}