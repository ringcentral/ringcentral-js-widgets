{"version":3,"sources":["modules/DynamicConfig/DynamicConfig.ts"],"names":["getRcmUriRegExp","regExpText","RegExp","getRcvUriRegExp","DEFAULT_CONFIG_URL","DynamicConfig","name","deps","dep","optional","_rcmUriRegExp","_rcvUriRegExp","data","meetingUriReg","rcv","ConfigData","rcm","_source","DataSource","dynamicConfigOptions","key","readyCheckFunction","_deps","auth","loggedIn","fetchFunction","configUrl","dataFetcherV2","register","isDiscoveryApi","updateDiscoveryConfig","fetchData","client","service","platform","discovery","externalData","baseWebUri","replace","frequentUpdate","console","warn","fetchConfig","rcvUriRegExp","rcmUriRegExp","callWithJupiter","DataFetcherV2Consumer"],"mappings":"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","sourcesContent":["import { computed } from '@ringcentral-integration/core';\nimport ConfigData from './ConfigData.json';\nimport { Module } from '../../lib/di';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport { Deps } from './DynamicConfig.interface';\nimport { fetchWithJsonp } from '../../lib/fetchWithJsonp';\n\nexport const getRcmUriRegExp = (regExpText: string) =>\n  new RegExp(\n    `(https?):\\\\/\\\\/${regExpText}(\\\\/\\\\w+)?(\\\\/(\\\\d+))(\\\\?pwd=\\\\w+)?`,\n    'i',\n  );\nexport const getRcvUriRegExp = (regExpText: string) =>\n  new RegExp(\n    `(https?):\\\\/\\\\/${regExpText}(\\\\/{1,2}\\\\w+)*(\\\\/{1,2}(\\\\d+))(\\\\?pw=\\\\w{32})?`,\n    'i',\n  );\n\nconst DEFAULT_CONFIG_URL =\n  'https://apps.ringcentral.com/integration/dynamic-config/ConfigData.js';\n\n@Module({\n  name: 'DynamicConfig',\n  deps: [\n    'Auth',\n    'Client',\n    'DataFetcherV2',\n    { dep: 'DynamicConfigOptions', optional: true },\n  ],\n})\nclass DynamicConfig extends DataFetcherV2Consumer<Deps, typeof ConfigData> {\n  private _rcmUriRegExp = ConfigData.meetingUriReg.rcm;\n  private _rcvUriRegExp = ConfigData.meetingUriReg.rcv;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    this._source = new DataSource({\n      ...deps.dynamicConfigOptions,\n      key: 'dynamicConfig',\n      readyCheckFunction: () => this._deps.auth.loggedIn,\n      fetchFunction: () => fetchWithJsonp(this.configUrl),\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  get configUrl() {\n    return this._deps.dynamicConfigOptions?.configUrl ?? DEFAULT_CONFIG_URL;\n  }\n\n  get frequentUpdate() {\n    return this._deps.dynamicConfigOptions?.frequentUpdate ?? false;\n  }\n\n  async onInit() {\n    if (this.isDiscoveryApi) {\n      await this.updateDiscoveryConfig();\n    }\n    await this.fetchData();\n  }\n\n  get isDiscoveryApi() {\n    return !!this._deps.client.service.platform().discovery();\n  }\n\n  async updateDiscoveryConfig() {\n    if (this.isDiscoveryApi) {\n      const data = await this._deps.client.service\n        .platform()\n        .discovery()\n        ?.externalData();\n      if (data) {\n        // just use static regexp\n        // `data.rcm.sdkDomain` example: `ringcentral.zoom.us` -> `ringcentral\\.zoom\\.us`\n        // this._rcmUriRegExp =\n        //   data.rcm.sdkDomain?.replace(/\\./g, '\\\\.') ?? this._rcmUriRegExp;\n\n        // `data.rcv.baseWebUri` example: `https://v.ringcentral.com` -> `v\\.ringcentral\\.com`\n        this._rcvUriRegExp =\n          data.rcv.baseWebUri\n            ?.replace(/^https?:\\/\\//, '')\n            .replace(/\\./g, '\\\\.') ?? this._rcvUriRegExp;\n      } else {\n        // handle discovery api  error in sdk\n      }\n    }\n  }\n\n  async fetchConfig() {\n    if (!this.frequentUpdate) return;\n    try {\n      if (this.isDiscoveryApi) {\n        await this.updateDiscoveryConfig();\n      }\n      await this.fetchData();\n    } catch (e) {\n      console.warn(`Failed to update meeting domain`);\n    }\n  }\n\n  async getMeetingUriRegExp() {\n    await this.fetchConfig();\n    return {\n      rcvUriRegExp: this.rcvUriRegExp,\n      rcmUriRegExp: this.rcmUriRegExp,\n    };\n  }\n\n  @computed(({ _rcmUriRegExp }: DynamicConfig) => [\n    _rcmUriRegExp,\n    // data?.meetingUriReg.rcm,\n  ])\n  get rcmUriRegExp() {\n    // just use static regexp\n    // const regExpText =\n    // (this.isDiscoveryApi\n    //   ? this._rcmUriRegExp\n    //   : this.data?.meetingUriReg.rcm) ?? this._rcmUriRegExp;\n\n    return getRcmUriRegExp(this._rcmUriRegExp);\n  }\n\n  @computed(({ _rcvUriRegExp, data }: DynamicConfig) => [\n    _rcvUriRegExp,\n    data?.meetingUriReg.rcv,\n  ])\n  get rcvUriRegExp() {\n    const regExpText =\n      (this.isDiscoveryApi\n        ? `(${this._rcvUriRegExp}|${this.data?.meetingUriReg.rcv})`\n        : this.data?.meetingUriReg.rcv) ?? this._rcvUriRegExp;\n    return getRcvUriRegExp(regExpText);\n  }\n\n  get callWithJupiter() {\n    return this.data.callWithJupiter;\n  }\n}\n\nexport { DynamicConfig };\n"],"file":"DynamicConfig.js"}