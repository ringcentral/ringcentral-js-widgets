{"version":3,"sources":["modules/MessageStoreV2/MessageStore.ts"],"names":["DEFAULT_CONVERSATIONS_LOAD_LENGTH","DEFAULT_CONVERSATION_LOAD_LENGTH","DEFAULT_POLLING_INTERVAL","DEFAULT_TTL","DEFAULT_RETRY","DEFAULT_DAY_SPAN","DEFAULT_MESSAGES_FILTER","list","UPDATE_MESSAGE_ONCE_COUNT","MessageStore","name","deps","dep","optional","trackEvents","flagVoicemail","that","conversationId","conversationStore","conversation","type","deleteVoicemail","deleteFax","clickToSMSVoicemailList","_","action","fromType","clickToDialTextList","clickToDialVoicemailList","parentModule","callingSettings","callingMode","callingModes","ringout","callPlaceRingOutCallSMSHistory","data","conversationList","allConversations","textConversations","faxMessages","voicemailMessages","voiceUnreadCounts","textUnreadCounts","faxUnreadCounts","_conversationsLoadLength","_deps","messageStoreOptions","conversationsLoadLength","_conversationLoadLength","conversationLoadLength","_messagesFilter","messagesFilter","_daySpan","daySpan","_eventEmitter","EventEmitter","_dispatchedMessageIds","_handledRecord","_debouncedSetConversationAsRead","fn","_setConversationAsRead","threshold","leading","disableCache","polling","timeToRetry","pollingInterval","ttl","_source","DataSource","key","cleanOnReset","permissionCheckFunction","_hasPermission","readyCheckFunction","appFeatures","ready","fetchFunction","_syncData","dataFetcherV2","register","subscription","subscribe","subscriptionFilters","messageStore","connectivityMonitor","connectivity","newValue","fetchData","message","tabManager","active","accountExtensionEndPoint","test","event","body","changes","passive","timestamp","Date","now","updateData","records","isFSyncSuccess","state","newState","stateMap","length","forEach","oldConversation","push","id","index","record","messageHelper","normalizeRecord","newCreationTime","creationTime","isDeleted","messageIsDeleted","messageId","oldMessageList","exsitedMessageList","filter","m","messageIsAcceptable","c","sort","sortByCreationTime","updatedConversations","newMessages","concat","oldMessageIndex","findIndex","r","lastModifiedTime","Object","keys","noSorted","recordCount","dateFrom","dateTo","syncToken","receivedRecordsLength","params","client","account","extension","messageSync","syncInfo","olderRecordsExist","olderDateTo","_syncFunction","olderRecordResult","ownerId","auth","setDate","getDate","_processRawConversationList","_processRawConversationStore","console","error","_updateData","_dispatchMessageHandlers","handler","on","slice","a","b","getTime","direction","availability","messageStatus","readStatus","_messageDispatched","emit","some","pushMessages","status","put","updateRequest","response","conversationIds","messages","reduce","acc","messageIds","map","item","indexOf","persist","ids","decodeURIComponent","join","platform","service","url","responses","allMessageIds","results","nextLength","_updateMessageApi","result","leftIds","_batchUpdateMessagesApi","Promise","all","res","json","messageList","unreadMessageIds","messageIsUnread","_updateMessagesApi","updatedMessages","availabilityMonitor","checkIfHAError","alert","warning","messageStoreErrors","readFailed","onUnmarkMessages","pushMessage","unreadFailed","onDeleteConversation","_deleteConversationStore","deleteMessageApi","_deleteConversation","deleteFailed","onClickToCallWithRingout","getData","getTimestamp","hasReadMessagesPermission","conversationItem","unreadCounts","messageIsTextMessage","messageIsFax","messageIsVoicemail","hasReadTextPermission","hasVoicemailPermission","hasReadFaxPermission","DataFetcherV2Consumer","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAOA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAUA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,iCAAiC,GAAG,EAA1C;AACA,IAAMC,gCAAgC,GAAG,GAAzC;AACA,IAAMC,wBAAwB,GAAG,KAAK,EAAL,GAAU,IAA3C,C,CAAiD;;AACjD,IAAMC,WAAW,GAAG,IAAI,EAAJ,GAAS,IAA7B,C,CAAmC;;AACnC,IAAMC,aAAa,GAAG,KAAK,IAA3B,C,CAAiC;;AAEjC,IAAMC,gBAAgB,GAAG,CAAzB,C,CAA4B;;AAC5B,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,IAAD;AAAA,SAAoBA,IAApB;AAAA,CAAhC;;AACA,IAAMC,yBAAyB,GAAG,EAAlC,C,CAAsC;;AAEtC;AACA;AACA;AACA;AACA;;IAgBaC,Y,WAfZ,gBAAO;AACNC,EAAAA,IAAI,EAAE,cADA;AAENC,EAAAA,IAAI,EAAE,CACJ,OADI,EAEJ,MAFI,EAGJ,QAHI,EAIJ,eAJI,EAKJ,cALI,EAMJ,qBANI,EAOJ,aAPI,EAQJ;AAAEC,IAAAA,GAAG,EAAE,qBAAP;AAA8BC,IAAAA,QAAQ,EAAE;AAAxC,GARI,EASJ;AAAED,IAAAA,GAAG,EAAE,YAAP;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GATI,EAUJ;AAAED,IAAAA,GAAG,EAAE,qBAAP;AAA8BC,IAAAA,QAAQ,EAAE;AAAxC,GAVI;AAFA,CAAP,C,UA0oBE,iBAAMC,uBAAYC,aAAlB,C,UAMA,iBAAM,UAACC,IAAD,EAAqBC,cAArB,EAAmE;AAAA;;AAAA,sCACjDD,IAAI,CAACE,iBAAL,CAAuBD,cAAvB,CADiD,yEACP,EADO;AAAA;AAAA,MACjEE,YADiE;;AAExE,MAAI,CAACA,YAAL,EAAmB;;AACnB,MAAIA,YAAY,CAACC,IAAb,KAAsB,WAA1B,EAAuC;AACrC,WAAO,CAACN,uBAAYO,eAAb,CAAP;AACD;;AACD,MAAIF,YAAY,CAACC,IAAb,KAAsB,KAA1B,EAAiC;AAC/B,WAAO,CAACN,uBAAYQ,SAAb,CAAP;AACD;AACF,CATA,C,UAwFA,iBAAMR,uBAAYS,uBAAlB,C,UAMA,iBAAM,UAACC,CAAD,EAAkBC,MAAlB,EAA6D;AAClE,MAAIA,MAAM,CAACC,QAAP,KAAoB,OAApB,IAA+BD,MAAM,CAACC,QAAP,KAAoB,KAAvD,EAA8D;AAC5D,WAAO,CAACZ,uBAAYa,mBAAb,CAAP;AACD;;AACD,MAAIF,MAAM,CAACC,QAAP,KAAoB,WAAxB,EAAqC;AACnC,WAAO,CAACZ,uBAAYc,wBAAb,CAAP;AACD;AACF,CAPA,C,UAcA,iBAAM,UAACZ,IAAD,EAAwB;AAAA;;AAC7B,OACE;AACA,uBAACA,IAAI,CAACa,YAAN,CAA2BC,eAA3B,sEAA4CC,WAA5C,MACAC,+BAAaC,OAHf,EAIE;AACA,WAAO,CAACnB,uBAAYoB,8BAAb,CAAP;AACD;AACF,CARA,C,UA0BA,oBAAS,UAAClB,IAAD;AAAA;;AAAA,SAAwB,eAACA,IAAI,CAACmB,IAAN,+CAAC,WAAWjB,iBAAZ,CAAxB;AAAA,CAAT,C,UASA,oBAAS,UAACF,IAAD;AAAA;;AAAA,SAAwB,gBAChCA,IAAI,CAACmB,IAD2B,gDAChC,YAAWC,gBADqB,EAEhCpB,IAAI,CAACE,iBAF2B,CAAxB;AAAA,CAAT,C,UAeA,oBAAS,UAACF,IAAD;AAAA,SAAwB,CAACA,IAAI,CAACqB,gBAAN,CAAxB;AAAA,CAAT,C,WAOA,oBAAS,UAACrB,IAAD;AAAA,SAAwB,CAACA,IAAI,CAACsB,iBAAN,CAAxB;AAAA,CAAT,C,WAKA,oBAAS,UAACtB,IAAD;AAAA,SAAwB,CAACA,IAAI,CAACqB,gBAAN,CAAxB;AAAA,CAAT,C,WAOA,oBAAS,UAACrB,IAAD;AAAA,SAAwB,CAACA,IAAI,CAACuB,WAAN,CAAxB;AAAA,CAAT,C,WAKA,oBAAS,UAACvB,IAAD;AAAA,SAAwB,CAACA,IAAI,CAACqB,gBAAN,CAAxB;AAAA,CAAT,C,WAOA,oBAAS,UAACrB,IAAD;AAAA,SAAwB,CAACA,IAAI,CAACwB,iBAAN,CAAxB;AAAA,CAAT,C,WAKA,oBAAS,UAACxB,IAAD;AAAA,SAAwB,CAChCA,IAAI,CAACyB,iBAD2B,EAEhCzB,IAAI,CAAC0B,gBAF2B,EAGhC1B,IAAI,CAAC2B,eAH2B,CAAxB;AAAA,CAAT,C;;;;;AA3yBD,wBAAYhC,IAAZ,EAAwB;AAAA;;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,IAAI,EAAJA;AADI,KAAN;AADsB,UApBdiC,wBAoBc,sDAnBtB,MAAKC,KAAL,CAAWC,mBAmBW,2DAnBtB,uBAAgCC,uBAmBV,yEAlBtB/C,iCAkBsB;AAAA,UAhBdgD,uBAgBc,uDAftB,MAAKH,KAAL,CAAWC,mBAeW,2DAftB,uBAAgCG,sBAeV,2EAdtBhD,gCAcsB;AAAA,UAZdiD,eAYc,uDAXtB,MAAKL,KAAL,CAAWC,mBAWW,2DAXtB,uBAAgCK,cAWV,2EAX4B7C,uBAW5B;AAAA,UATd8C,QASc,uDARtB,MAAKP,KAAL,CAAWC,mBAQW,2DARtB,uBAAgCO,OAQV,2EARqBhD,gBAQrB;AAAA,UANdiD,aAMc,GANE,IAAIC,oBAAJ,EAMF;AAAA,UAJdC,qBAIc,GAJgC,EAIhC;AAAA,UAFdC,cAEc,GAF6B,IAE7B;AAAA,UAqiBxBC,+BAriBwB,GAqiBU,gCAAS;AACzCC,MAAAA,EAAE,EAAE,MAAKC,sBADgC;AAEzCC,MAAAA,SAAS,EAAE,GAF8B;AAGzCC,MAAAA,OAAO,EAAE;AAHgC,KAAT,CAriBV;;AAAA,0CAWlB,MAAKjB,KAAL,CAAWC,mBAXO,2EAWgB,EAXhB;AAAA,mCAMpBiB,YANoB;AAAA,QAMpBA,YANoB,mCAML,KANK;AAAA,8BAOpBC,OAPoB;AAAA,QAOpBA,OAPoB,8BAOV,KAPU;AAAA,kCAQpBC,WARoB;AAAA,QAQpBA,WARoB,kCAQN7D,aARM;AAAA,sCASpB8D,eAToB;AAAA,QASpBA,eAToB,sCASFhE,wBATE;AAAA,0BAUpBiE,GAVoB;AAAA,QAUpBA,GAVoB,0BAUdhE,WAVc;;AAYtB,UAAKiE,OAAL,GAAe,IAAIC,wBAAJ,iCACV,MAAKxB,KAAL,CAAWC,mBADD;AAEbwB,MAAAA,GAAG,EAAE,cAFQ;AAGbP,MAAAA,YAAY,EAAZA,YAHa;AAIbI,MAAAA,GAAG,EAAHA,GAJa;AAKbH,MAAAA,OAAO,EAAPA,OALa;AAMbC,MAAAA,WAAW,EAAXA,WANa;AAObC,MAAAA,eAAe,EAAfA,eAPa;AAQbK,MAAAA,YAAY,EAAE,IARD;AASbC,MAAAA,uBAAuB,EAAE;AAAA,eAAM,MAAKC,cAAX;AAAA,OATZ;AAUbC,MAAAA,kBAAkB,EAAE;AAAA,eAAM,MAAK7B,KAAL,CAAW8B,WAAX,CAAuBC,KAA7B;AAAA,OAVP;AAWbC,MAAAA,aAAa;AAAA,qFAAE;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAY,MAAKC,SAAL,EAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAXA,OAAf;;AAaA,UAAKjC,KAAL,CAAWkC,aAAX,CAAyBC,QAAzB,CAAkC,MAAKZ,OAAvC;;AAzBsB;AA0BvB;;;;6BAEQ;AACP,UAAI,KAAKK,cAAT,EAAyB;AACvB,aAAK5B,KAAL,CAAWoC,YAAX,CAAwBC,SAAxB,CAAkC,CAACC,yCAAoBC,YAArB,CAAlC;AACD;AACF;;;iCAEY;AAAA;;AACX,UAAI,KAAKvC,KAAL,CAAWwC,mBAAf,EAAoC;AAClC,yBACE,IADF,EAEE;AAAA,iBAAM,MAAI,CAACxC,KAAL,CAAWwC,mBAAX,CAA+BC,YAArC;AAAA,SAFF,EAGE,UAACC,QAAD,EAAc;AACZ,cAAI,MAAI,CAACX,KAAL,IAAc,MAAI,CAAC/B,KAAL,CAAWwC,mBAAX,CAA+BT,KAA7C,IAAsDW,QAA1D,EAAoE;AAClE,YAAA,MAAI,CAAC1C,KAAL,CAAWkC,aAAX,CAAyBS,SAAzB,CAAmC,MAAI,CAACpB,OAAxC;AACD;AACF,SAPH;AASD;;AACD,uBACE,IADF,EAEE;AAAA,eAAM,MAAI,CAACvB,KAAL,CAAWoC,YAAX,CAAwBQ,OAA9B;AAAA,OAFF,EAGE,UAACF,QAAD,EAAc;AAAA;;AACZ,YACE,CAAC,MAAI,CAACX,KAAN,IACC,MAAI,CAAC/B,KAAL,CAAW6C,UAAX,IAAyB,CAAC,MAAI,CAAC7C,KAAL,CAAW6C,UAAX,CAAsBC,MAFnD,EAGE;AACA;AACD;;AACD,YAAMC,wBAAwB,GAAG,kBAAjC;;AACA,YACEL,QAAQ,IACRK,wBAAwB,CAACC,IAAzB,CAA8BN,QAAQ,CAACO,KAAvC,CADA,uBAEAP,QAAQ,CAACQ,IAFT,mDAEA,eAAeC,OAFf,CADF,EAIE;AACA,UAAA,MAAI,CAACR,SAAL,CAAe;AAAES,YAAAA,OAAO,EAAE;AAAX,WAAf;AACD;AACF,OAlBH;AAoBD;;;;mGAGiB9D,I;;;;;;;AAAW+D,gBAAAA,S,8DAAYC,IAAI,CAACC,GAAL,E;;AACvC,qBAAKvD,KAAL,CAAWkC,aAAX,CAAyBsB,UAAzB,CAAoC,KAAKjC,OAAzC,EAAkDjC,IAAlD,EAAwD+D,SAAxD;;;;;;;;;;;;;;;;;;uDAOoC;AAAA;;AAAA,UAHpCI,OAGoC,SAHpCA,OAGoC;AAAA,UAFpCpF,iBAEoC,SAFpCA,iBAEoC;AAAA,UADpCqF,cACoC,SADpCA,cACoC;AACpC,UAAMC,KAAK,GAAG,oBAAKrE,IAAL,0DAAWC,gBAAX,KAA+B,EAA7C;AACA,UAAMqE,QAA+C,GAAG,EAAxD;AACA,UAAMC,QAA2C,GAAG,EAApD;;AACA,UAAI,CAACH,cAAL,EAAqB;AACnB,YAAI,CAACD,OAAD,IAAYA,OAAO,CAACK,MAAR,KAAmB,CAAnC,EAAsC;AACpC,iBAAOH,KAAP;AACD;;AACDA,QAAAA,KAAK,CAACI,OAAN,CAAc,UAACC,eAAD,EAAqB;AACjCJ,UAAAA,QAAQ,CAACK,IAAT,CAAcD,eAAd;AACAH,UAAAA,QAAQ,CAACG,eAAe,CAACE,EAAjB,CAAR,GAA+B;AAC7BC,YAAAA,KAAK,EAAEP,QAAQ,CAACE,MAAT,GAAkB;AADI,WAA/B;AAGD,SALD;AAMD;;AACDL,MAAAA,OAAO,CAACM,OAAR,CAAgB,UAACK,MAAD,EAAY;AAC1B,YAAMxB,OAAO,GAAGyB,aAAa,CAACC,eAAd,CAA8BF,MAA9B,CAAhB;AACA,YAAMF,EAAE,GAAGtB,OAAO,CAACxE,cAAnB;AACA,YAAMmG,eAAe,GAAG3B,OAAO,CAAC4B,YAAhC;AACA,YAAMC,SAAS,GAAGJ,aAAa,CAACK,gBAAd,CAA+B9B,OAA/B,CAAlB;;AACA,YAAIiB,QAAQ,CAACK,EAAD,CAAZ,EAAkB;AAChB,cAAMF,eAAe,GAAGJ,QAAQ,CAACC,QAAQ,CAACK,EAAD,CAAR,CAAaC,KAAd,CAAhC;AACA,cAAMK,YAAY,GAAGR,eAAe,CAACQ,YAArC;;AACA,cAAIA,YAAY,GAAGD,eAAf,IAAkC,CAACE,SAAvC,EAAkD;AAChDb,YAAAA,QAAQ,CAACC,QAAQ,CAACK,EAAD,CAAR,CAAaC,KAAd,CAAR,GAA+B;AAC7BD,cAAAA,EAAE,EAAFA,EAD6B;AAE7BM,cAAAA,YAAY,EAAED,eAFe;AAG7BhG,cAAAA,IAAI,EAAEqE,OAAO,CAACrE,IAHe;AAI7BoG,cAAAA,SAAS,EAAE/B,OAAO,CAACsB;AAJU,aAA/B;AAMD,WAVe,CAWhB;;;AACA,cAAIO,SAAS,IAAI7B,OAAO,CAACsB,EAAR,KAAeF,eAAe,CAACW,SAAhD,EAA2D;AACzD,gBAAMC,cAAc,GAAGvG,iBAAiB,CAAC6F,EAAD,CAAjB,IAAyB,EAAhD;AACA,gBAAMW,kBAAkB,GAAGD,cAAc,CAACE,MAAf,CACzB,UAACC,CAAD;AAAA,qBAAOA,CAAC,CAACb,EAAF,KAAStB,OAAO,CAACsB,EAAxB;AAAA,aADyB,CAA3B;;AAGA,gBAAIW,kBAAkB,CAACf,MAAnB,GAA4B,CAAhC,EAAmC;AACjCF,cAAAA,QAAQ,CAACC,QAAQ,CAACK,EAAD,CAAR,CAAaC,KAAd,CAAR,GAA+B;AAC7BD,gBAAAA,EAAE,EAAFA,EAD6B;AAE7BM,gBAAAA,YAAY,EAAEK,kBAAkB,CAAC,CAAD,CAAlB,CAAsBL,YAFP;AAG7BjG,gBAAAA,IAAI,EAAEsG,kBAAkB,CAAC,CAAD,CAAlB,CAAsBtG,IAHC;AAI7BoG,gBAAAA,SAAS,EAAEE,kBAAkB,CAAC,CAAD,CAAlB,CAAsBX;AAJJ,eAA/B;AAMA;AACD,aAbwD,CAczD;;;AACAN,YAAAA,QAAQ,CAACC,QAAQ,CAACK,EAAD,CAAR,CAAaC,KAAd,CAAR,GAA+B,IAA/B;AACA,mBAAON,QAAQ,CAACK,EAAD,CAAf;AACD;;AACD;AACD;;AACD,YAAIO,SAAS,IAAI,CAACJ,aAAa,CAACW,mBAAd,CAAkCpC,OAAlC,CAAlB,EAA8D;AAC5D;AACD;;AACDgB,QAAAA,QAAQ,CAACK,IAAT,CAAc;AACZC,UAAAA,EAAE,EAAFA,EADY;AAEZM,UAAAA,YAAY,EAAED,eAFF;AAGZhG,UAAAA,IAAI,EAAEqE,OAAO,CAACrE,IAHF;AAIZoG,UAAAA,SAAS,EAAE/B,OAAO,CAACsB;AAJP,SAAd;AAMAL,QAAAA,QAAQ,CAACK,EAAD,CAAR,GAAe;AACbC,UAAAA,KAAK,EAAEP,QAAQ,CAACE,MAAT,GAAkB;AADZ,SAAf;AAGD,OAjDD;AAkDA,aAAOF,QAAQ,CACZkB,MADI,CACG,UAACG,CAAD;AAAA,eAAO,CAAC,CAACA,CAAF,IAAO,OAAOA,CAAC,CAACT,YAAT,KAA0B,QAAxC;AAAA,OADH,EAEJU,IAFI,CAECb,aAAa,CAACc,kBAFf,CAAP;AAGD;;;wDAKsC;AAAA;;AAAA,UAFrC1B,OAEqC,SAFrCA,OAEqC;AAAA,UADrCC,cACqC,SADrCA,cACqC;AACrC,UAAMC,KAAK,2CAAG,KAAKrE,IAAR,gDAAG,YAAWjB,iBAAd,yEAAmC,EAA9C;AACA,UAAIuF,QAAgD,GAAG,EAAvD;AACA,UAAMwB,oBAA4C,GAAG,EAArD;;AACA,UAAI,CAAC1B,cAAL,EAAqB;AACnB,YAAI,CAACD,OAAD,IAAYA,OAAO,CAACK,MAAR,KAAmB,CAAnC,EAAsC;AACpC,iBAAOH,KAAP;AACD;;AACDC,QAAAA,QAAQ,qBACHD,KADG,CAAR;AAGD;;AACDF,MAAAA,OAAO,CAACM,OAAR,CAAgB,UAACK,MAAD,EAAY;AAC1B,YAAMxB,OAAO,GAAGyB,aAAa,CAACC,eAAd,CAA8BF,MAA9B,CAAhB;AACA,YAAMF,EAAE,GAAGtB,OAAO,CAACxE,cAAnB;AACA,YAAMiH,WAAW,GAAGzB,QAAQ,CAACM,EAAD,CAAR,GAAe,GAAGoB,MAAH,CAAU1B,QAAQ,CAACM,EAAD,CAAlB,CAAf,GAAyC,EAA7D;AACA,YAAMqB,eAAe,GAAGF,WAAW,CAACG,SAAZ,CAAsB,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACvB,EAAF,KAASE,MAAM,CAACF,EAAvB;AAAA,SAAtB,CAAxB;;AACA,YAAIG,aAAa,CAACK,gBAAd,CAA+B9B,OAA/B,CAAJ,EAA6C;AAC3CgB,UAAAA,QAAQ,CAACM,EAAD,CAAR,GAAemB,WAAW,CAACP,MAAZ,CAAmB,UAACC,CAAD;AAAA,mBAAOA,CAAC,CAACb,EAAF,KAAStB,OAAO,CAACsB,EAAxB;AAAA,WAAnB,CAAf;;AACA,cAAIN,QAAQ,CAACM,EAAD,CAAR,CAAaJ,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,mBAAOF,QAAQ,CAACM,EAAD,CAAf;AACD;;AACD;AACD;;AACD,YAAIqB,eAAe,GAAG,CAAC,CAAvB,EAA0B;AACxB,cACEF,WAAW,CAACE,eAAD,CAAX,CAA6BG,gBAA7B,GACA9C,OAAO,CAAC8C,gBAFV,EAGE;AACAL,YAAAA,WAAW,CAACE,eAAD,CAAX,GAA+B3C,OAA/B;AACD;AACF,SAPD,MAOO,IAAIyB,aAAa,CAACW,mBAAd,CAAkCpC,OAAlC,CAAJ,EAAgD;AACrDyC,UAAAA,WAAW,CAACpB,IAAZ,CAAiBrB,OAAjB;AACD;;AACDwC,QAAAA,oBAAoB,CAAClB,EAAD,CAApB,GAA2B,CAA3B;AACAN,QAAAA,QAAQ,CAACM,EAAD,CAAR,GAAemB,WAAf;AACD,OAxBD;AAyBAM,MAAAA,MAAM,CAACC,IAAP,CAAYR,oBAAZ,EAAkCrB,OAAlC,CAA0C,UAACG,EAAD,EAAQ;AAChD,YAAM2B,QAAQ,GAAGjC,QAAQ,CAACM,EAAD,CAAzB;AACAN,QAAAA,QAAQ,CAACM,EAAD,CAAR,GAAe2B,QAAQ,CAACX,IAAT,CAAcb,aAAa,CAACc,kBAA5B,CAAf;AACD,OAHD;AAIA,aAAOvB,QAAP;AACD;;;;;;;;;;;AAGCkC,gBAAAA,W,SAAAA,W,EACA1F,sB,SAAAA,sB,EACA2F,Q,SAAAA,Q,EACAC,M,SAAAA,M,EACAC,S,SAAAA,S,gCACAC,qB,EAAAA,qB,sCAAwB,C;AAElBC,gBAAAA,M,GAAS,uCAAc;AAC3BL,kBAAAA,WAAW,EAAXA,WAD2B;AAE3B1F,kBAAAA,sBAAsB,EAAtBA,sBAF2B;AAG3B2F,kBAAAA,QAAQ,EAARA,QAH2B;AAI3BC,kBAAAA,MAAM,EAANA,MAJ2B;AAK3BC,kBAAAA,SAAS,EAATA;AAL2B,iBAAd,C;;uBAUY,KAAKjG,KAAL,CAAWoG,MAAX,CACxBC,OADwB,GAExBC,SAFwB,GAGxBC,WAHwB,GAIxB7I,IAJwB,CAInByI,MAJmB,C;;;;AAFzB1C,gBAAAA,O,yBAAAA,O;AACA+C,gBAAAA,Q,yBAAAA,Q;AAMFN,gBAAAA,qBAAqB,IAAIzC,OAAO,CAACK,MAAjC;;sBACI,CAAC0C,QAAQ,CAACC,iBAAV,IAA+BP,qBAAqB,IAAIJ,W;;;;;kDACnD;AAAErC,kBAAAA,OAAO,EAAPA,OAAF;AAAW+C,kBAAAA,QAAQ,EAARA;AAAX,iB;;;;uBAEH,uBAAM,GAAN,C;;;AACAE,gBAAAA,W,GAAc,IAAIpD,IAAJ,CAASG,OAAO,CAACA,OAAO,CAACK,MAAR,GAAiB,CAAlB,CAAP,CAA4BU,YAArC,C;;uBACY,KAAKmC,aAAL,CAAmB;AACjDvG,kBAAAA,sBAAsB,EAAtBA,sBADiD;AAEjD2F,kBAAAA,QAAQ,EAARA,QAFiD;AAGjDC,kBAAAA,MAAM,EAAEU;AAHyC,iBAAnB,C;;;AAA1BE,gBAAAA,iB;kDAKC;AACLnD,kBAAAA,OAAO,EAAEA,OAAO,CAAC6B,MAAR,CAAesB,iBAAiB,CAACnD,OAAjC,CADJ;AAEL+C,kBAAAA,QAAQ,EAARA;AAFK,iB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mFAMoD,E,uBAA3CR,M,EAAAA,M,6BAAS,I,uCAAc5C,O,EAAAA,O,8BAAU,K;AAC3ClD,gBAAAA,uB,GAA0B,KAAKH,wB;AAC/BK,gBAAAA,sB,GAAyB,KAAKD,uB;AAC5B0G,gBAAAA,O,GAAY,KAAK7G,KAAL,CAAW8G,I,CAAvBD,O;;AAEAd,gBAAAA,Q,GAAW,IAAIzC,IAAJ,E;AACjByC,gBAAAA,QAAQ,CAACgB,OAAT,CAAiBhB,QAAQ,CAACiB,OAAT,KAAqB,KAAKzG,QAA3C;AACI0F,gBAAAA,S,GAAYD,MAAM,GAAG,IAAH,qBAAU,KAAKQ,QAAf,mDAAU,eAAeP,S;AACzCH,gBAAAA,W,GAAc5F,uBAAuB,GAAGE,sB;;;uBAG/B,KAAKuG,aAAL,CAAmB;AAC9Bb,kBAAAA,WAAW,EAAXA,WAD8B;AAE9B1F,kBAAAA,sBAAsB,EAAtBA,sBAF8B;AAG9B2F,kBAAAA,QAAQ,EAARA,QAH8B;AAI9BE,kBAAAA,SAAS,EAATA,SAJ8B;AAK9BD,kBAAAA,MAAM,EAANA;AAL8B,iBAAnB,C;;;AAAb1G,gBAAAA,I;;;;;;;;sBASE,iBACC,aAAMsD,OAAN,KAAkB,wCAAlB,IACC,aAAMA,OAAN,KAAkB,kCAFpB,C;;;;;;uBAIa,KAAK+D,aAAL,CAAmB;AAC9Bb,kBAAAA,WAAW,EAAXA,WAD8B;AAE9B1F,kBAAAA,sBAAsB,EAAtBA,sBAF8B;AAG9B2F,kBAAAA,QAAQ,EAARA,QAH8B;AAI9BE,kBAAAA,SAAS,EAAE,IAJmB;AAK9BD,kBAAAA,MAAM,EAANA;AAL8B,iBAAnB,C;;;AAAb1G,gBAAAA,I;AAOA2G,gBAAAA,SAAS,GAAG,IAAZ;;;;;;;;sBAKA,KAAKjG,KAAL,CAAW8G,IAAX,CAAgBD,OAAhB,KAA4BA,O;;;;;AACxBpD,gBAAAA,O,GAAU,KAAKpD,eAAL,CAAqBf,IAAI,CAACmE,OAA1B,C;AACVC,gBAAAA,c,GAAiB,CAACuC,S,EACxB;;AACA,oBAAI7C,OAAJ,EAAa;AACX,uBAAKxC,cAAL,GAAsB6C,OAAtB;AACD;;kDACM;AACLlE,kBAAAA,gBAAgB,EAAE,KAAK0H,2BAAL,CAAiC;AACjDxD,oBAAAA,OAAO,EAAPA,OADiD;AAEjDpF,oBAAAA,iBAAiB,EAAE,KAAKA,iBAFyB;AAGjDqF,oBAAAA,cAAc,EAAdA;AAHiD,mBAAjC,CADb;AAMLrF,kBAAAA,iBAAiB,EAAE,KAAK6I,4BAAL,CAAkC;AACnDzD,oBAAAA,OAAO,EAAPA,OADmD;AAEnDC,oBAAAA,cAAc,EAAdA;AAFmD,mBAAlC,CANd;AAUL8C,kBAAAA,QAAQ,EAAElH,IAAI,CAACkH;AAVV,iB;;;;;;;;;;sBAcL,KAAKxG,KAAL,CAAW8G,IAAX,CAAgBD,OAAhB,KAA4BA,O;;;;;AAC9BM,gBAAAA,OAAO,CAACC,KAAR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mFAOgC,E,wBAApBhE,O,EAAAA,O,8BAAU,K;;uBACP,KAAKnB,SAAL,CAAe;AAAEmB,kBAAAA,OAAO,EAAPA;AAAF,iBAAf,C;;;AAAb9D,gBAAAA,I;;AACN,qBAAK+H,WAAL,CAAiB/H,IAAjB;;AACA,oBAAI8D,OAAO,IAAI,KAAKxC,cAApB,EAAoC;AAClC,uBAAK0G,wBAAL,CAA8B,KAAK1G,cAAnC;;AACA,uBAAKA,cAAL,GAAsB,IAAtB;AACD;;;;;;;;;;;;;;;;;;wCAGiB2G,O,EAAyB;AAC3C,UAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC,aAAK9G,aAAL,CAAmB+G,EAAnB,CAAsB,+BAAtB,EAAuDD,OAAvD;AACD;AACF;;;qCAEgBA,O,EAAyB;AACxC,UAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC,aAAK9G,aAAL,CAAmB+G,EAAnB,CAAsB,gBAAtB,EAAwCD,OAAxC;AACD;AACF;AAED;AACF;AACA;;;;6CAC2B9D,O,EAAmC;AAC1D;AACAA,MAAAA,OAAO,GAAGA,OAAO,CACdgE,KADO,GAEPvC,IAFO,CAGN,UAACwC,CAAD,EAAIC,CAAJ;AAAA,eACE,IAAIrE,IAAJ,CAASoE,CAAC,CAAClD,YAAX,EAAyBoD,OAAzB,KACA,IAAItE,IAAJ,CAASqE,CAAC,CAACnD,YAAX,EAAyBoD,OAAzB,EAFF;AAAA,OAHM,CAAV;;AAF0D,iDASrCnE,OATqC;AAAA;;AAAA;AAS1D,4DAA8B;AAAA,cAAnBW,MAAmB;;AAAA,sBASxBA,MAAM,IAAI,EATc;AAAA,cAE1BF,EAF0B,SAE1BA,EAF0B;AAAA,cAG1B2D,SAH0B,SAG1BA,SAH0B;AAAA,cAI1BC,YAJ0B,SAI1BA,YAJ0B;AAAA,cAK1BC,aAL0B,SAK1BA,aAL0B;AAAA,cAM1BC,UAN0B,SAM1BA,UAN0B;AAAA,cAO1BtC,gBAP0B,SAO1BA,gBAP0B;AAAA,cAQ1BlB,YAR0B,SAQ1BA,YAR0B,EAU5B;AACA;;;AACA,cAAI,CAAC,KAAKyD,kBAAL,CAAwB7D,MAAxB,CAAL,EAAsC;AACpC;AACA;AACA,iBAAKzD,qBAAL,GAA6B,CAAC;AAAEuD,cAAAA,EAAE,EAAFA,EAAF;AAAMwB,cAAAA,gBAAgB,EAAhBA;AAAN,aAAD,EAC1BJ,MAD0B,CACnB,KAAK3E,qBADc,EAE1B8G,KAF0B,CAEpB,CAFoB,EAEjB,EAFiB,CAA7B;;AAGA,iBAAKhH,aAAL,CAAmByH,IAAnB,CAAwB,gBAAxB,EAA0C9D,MAA1C,EANoC,CAOpC;;;AACA,gBACEyD,SAAS,KAAK,SAAd,IACAG,UAAU,KAAK,QADf,IAEAD,aAAa,KAAK,UAFlB,IAGAD,YAAY,KAAK,OAHjB,IAIA,IAAIxE,IAAJ,CAASkB,YAAT,EAAuBoD,OAAvB,KACE,IAAItE,IAAJ,CAASoC,gBAAT,EAA2BkC,OAA3B,KAAuC,MAAM,IANjD,EAOE;AACA,mBAAKnH,aAAL,CAAmByH,IAAnB,CAAwB,+BAAxB,EAAyD9D,MAAzD;AACD;AACF;AACF;AAxCyD;AAAA;AAAA;AAAA;AAAA;AAyC3D;;;uCAEkBxB,O,EAAiC;AAClD,aAAO,KAAKjC,qBAAL,CAA2BwH,IAA3B,CACL,UAACpD,CAAD;AAAA,eACEA,CAAC,CAACb,EAAF,KAAStB,OAAO,CAACsB,EAAjB,IAAuBa,CAAC,CAACW,gBAAF,KAAuB9C,OAAO,CAAC8C,gBADxD;AAAA,OADK,CAAP;AAID;;;;oGAGkBjC,O;;;;;AACjB,qBAAKzD,KAAL,CAAWkC,aAAX,CAAyBsB,UAAzB,CACE,KAAKjC,OADP,kCAGO,KAAKjC,IAHZ;AAIIC,kBAAAA,gBAAgB,EAAE,KAAK0H,2BAAL,CAAiC;AACjDxD,oBAAAA,OAAO,EAAPA,OADiD;AAEjDpF,oBAAAA,iBAAiB,EAAE,KAAKA;AAFyB,mBAAjC,CAJtB;AAQIA,kBAAAA,iBAAiB,EAAE,KAAK6I,4BAAL,CAAkC;AACnDzD,oBAAAA,OAAO,EAAPA;AADmD,mBAAlC;AARvB,oBAYE,KAAKJ,SAZP;;;;;;;;;;;;;;;;;;gCAgBUe,M,EAAgC;AAC1C,WAAKgE,YAAL,CAAkB,CAAChE,MAAD,CAAlB;AACD;;;;yGAEuBO,S,EAAmB0D,M;;;;;;AACnCnF,gBAAAA,I,GAAO;AACX8E,kBAAAA,UAAU,EAAEK;AADD,iB;;uBAGuC,KAAKrI,KAAL,CAAWoG,MAAX,CACjDC,OADiD,GAEjDC,SAFiD,GAGjD/D,YAHiD,CAGpCoC,SAHoC,EAIjD2D,GAJiD,CAI7CpF,IAJ6C,C;;;AAA9CqF,gBAAAA,a;kDAKCA,a;;;;;;;;;;;;;;;;;;;wGAGc5D,S;;;;;;;uBACU,KAAK3E,KAAL,CAAWoG,MAAX,CAC5BC,OAD4B,GAE5BC,SAF4B,GAG5B/D,YAH4B,CAGfoC,SAHe,a;;;AAAzB6D,gBAAAA,Q;kDAKCA,Q;;;;;;;;;;;;;;;;;;yCAGY;AAAA;AAAA;AAAA;;AACnB,UAAMC,eAAe,GAAG9C,MAAM,CAACC,IAAP,CAAY,KAAKvH,iBAAjB,CAAxB;AACA,UAAMqK,QAAQ,GAAGD,eAAe,CAACE,MAAhB,CACf,UAACC,GAAD,EAAM1E,EAAN;AAAA,eAAa0E,GAAG,CAACtD,MAAJ,CAAW,MAAI,CAACjH,iBAAL,CAAuB6F,EAAvB,CAAX,CAAb;AAAA,OADe,EAEf,EAFe,CAAjB;;AAIA,UAAM2E,UAAU,GAAG,KAAKxI,eAAL,CAAqBqI,QAArB,EAA+BI,GAA/B,CACjB,UAACC,IAAD;AAAA,eAAmBA,IAAI,CAAC7E,EAAxB;AAAA,OADiB,CAAnB;;AAGA,UAAM3E,gBAAgB,GAAG,0CAAC,KAAKD,IAAN,gDAAC,YAAWC,gBAAZ,2EAAgC,EAAhC,EAAoCuF,MAApC,CACvB;AAAA,YAAGH,SAAH,UAAGA,SAAH;AAAA,eAAmBkE,UAAU,CAACG,OAAX,CAAmBrE,SAAnB,IAAgC,CAAC,CAApD;AAAA,OADuB,CAAzB;AAGA,UAAMtG,iBAAiB,GAAGsH,MAAM,CAACC,IAAP,CAAY,KAAKvH,iBAAjB,EAAoCsK,MAApC,CACxB,UAACC,GAAD,EAAMnH,GAAN,EAAc;AACZ,YAAMiH,QAAQ,GAAG,MAAI,CAACrK,iBAAL,CAAuBoD,GAAvB,CAAjB;AACA,YAAMwH,OAAO,GAAGP,QAAQ,CAAC5D,MAAT,CACd;AAAA,cAAGZ,EAAH,UAAGA,EAAH;AAAA,iBAAY2E,UAAU,CAACG,OAAX,CAAmB9E,EAAnB,IAAyB,CAAC,CAAtC;AAAA,SADc,CAAhB;;AAGA,YAAI,CAAC+E,OAAO,CAACnF,MAAb,EAAqB;AACnB,iBAAO8E,GAAP;AACD;;AACDA,QAAAA,GAAG,CAACnH,GAAD,CAAH,GAAWwH,OAAX;AACA,eAAOL,GAAP;AACD,OAXuB,EAYxB,EAZwB,CAA1B;;AAcA,WAAK5I,KAAL,CAAWkC,aAAX,CAAyBsB,UAAzB,CACE,KAAKjC,OADP,kCAGO,KAAKjC,IAHZ;AAIIC,QAAAA,gBAAgB,EAAhBA,gBAJJ;AAKIlB,QAAAA,iBAAiB,EAAjBA;AALJ,UAOE,KAAKgF,SAPP;AASD;AAED;AACF;AACA;;;;;+GAEIwF,U,EACA3F,I;;;;;;sBAOI,CAAC2F,UAAD,IAAeA,UAAU,CAAC/E,MAAX,KAAsB,C;;;;;;;;AAInCoF,gBAAAA,G,GAAMC,kBAAkB,CAACN,UAAU,CAACO,IAAX,CAAgB,GAAhB,CAAD,C;AACxBC,gBAAAA,Q,GAAW,KAAKrJ,KAAL,CAAWoG,MAAX,CAAkBkD,OAAlB,CAA0BD,QAA1B,E;;uBACmB,iCAAY;AAC9CA,kBAAAA,QAAQ,EAARA,QAD8C;AAE9CE,kBAAAA,GAAG,8DAAuDL,GAAvD,CAF2C;AAG9ChG,kBAAAA,IAAI,EAAJA;AAH8C,iBAAZ,C;;;AAA9BsG,gBAAAA,S;kDAKCA,S;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;;;;;2GAEIX,U,EACAR,M;;;;;;AAEMoB,gBAAAA,a,GAAgBZ,U;;sBAClB,CAACY,aAAD,IAAkBA,aAAa,CAAC3F,MAAd,KAAyB,C;;;;;mDACtC,E;;;AAGH4F,gBAAAA,O,GAAoC,E;AAEjCvF,gBAAAA,K,GAAQ,C;;;AACXwF,gBAAAA,U,GAAa,CAACxF,KAAK,GAAG,CAAT,IAAcxG,yB;;AAE/B,oBAAIgM,UAAU,GAAGF,aAAa,CAAC3F,MAA/B,EAAuC;AACrC6F,kBAAAA,UAAU,GAAGF,aAAa,CAAC3F,MAAd,GAAuBK,KAAK,GAAGxG,yBAA5C;AACD,iBAFD,MAEO;AACLgM,kBAAAA,UAAU,GAAGhM,yBAAb;AACD,iB,CAED;;;sBACIgM,UAAU,KAAK,C;;;;;;uBACI,KAAKC,iBAAL,CAAuBf,UAAU,CAAC,CAAD,CAAjC,EAAsCR,MAAtC,C;;;AAAfwB,gBAAAA,M;mDACC,CAACA,MAAD,C;;;AAGHC,gBAAAA,O,GAAUL,aAAa,CAAChC,KAAd,CACdtD,KAAK,GAAGxG,yBADM,EAEdwG,KAAK,GAAGxG,yBAAR,GAAoCgM,UAFtB,C;AAKVzG,gBAAAA,I,GAAO4G,OAAO,CAAChB,GAAR,CAAY;AAAA,yBAAO;AAAE5F,oBAAAA,IAAI,EAAE;AAAE8E,sBAAAA,UAAU,EAAEK;AAAd;AAAR,mBAAP;AAAA,iBAAZ,C;;uBACW,KAAK0B,uBAAL,CAA6BD,OAA7B,EAAsC5G,IAAtC,C;;;AAAlBsG,gBAAAA,S;;uBACAQ,OAAO,CAACC,GAAR,CACJT,SAAS,CAACV,GAAV;AAAA,uFAAc,mBAAOoB,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCACRA,GAAG,CAAC7B,MAAJ,KAAe,GADP;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAEW6B,GAAG,CAACC,IAAJ,EAFX;;AAAA;AAEJN,4BAAAA,OAFI;AAGVH,4BAAAA,OAAO,CAACzF,IAAR,CAAa4F,OAAb;;AAHU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAd;;AAAA;AAAA;AAAA;AAAA,oBADI,C;;;AASEhD,gBAAAA,O,GAAY,KAAK7G,KAAL,CAAW8G,I,CAAvBD,O;;sBACJ4C,aAAa,CAAC3F,MAAd,GAAuB,CAACK,KAAK,GAAG,CAAT,IAAcxG,yB;;;;;;uBACjC,uBAAM,IAAN,C;;;sBAEFkJ,OAAO,KAAK,KAAK7G,KAAL,CAAW8G,IAAX,CAAgBD,O;;;;;mDACvB,E;;;;;;;;;;AApCS1C,gBAAAA,KAAK,E;;;;;mDA2CpBuF,O;;;;;;;;;;;;;;;;AAGT;AACF;AACA;;;;;qGAEqBtL,c;;;;;AACjB,qBAAKyC,+BAAL,CAAqCzC,cAArC;;;;;;;;;;;;;;;;;;;+GAS2BA,c;;;;;;AACrBgM,gBAAAA,W,GAAc,KAAK/L,iBAAL,CAAuBD,cAAvB,C;;sBAChB,CAACgM,WAAD,IAAgBA,WAAW,CAACtG,MAAZ,KAAuB,C;;;;;;;;AAGrCuG,gBAAAA,gB,GAAmBD,WAAW,CACjCtF,MADsB,CACfT,aAAa,CAACiG,eADC,EAEtBxB,GAFsB,CAElB,UAAC/D,CAAD;AAAA,yBAAOA,CAAC,CAACb,EAAT;AAAA,iBAFkB,C;;sBAGrBmG,gBAAgB,CAACvG,MAAjB,KAA4B,C;;;;;;;;;AAItB+C,gBAAAA,O,GAAY,KAAK7G,KAAL,CAAW8G,I,CAAvBD,O;;uBACsB,KAAK0D,kBAAL,CAC5BF,gBAD4B,EAE5B,MAF4B,C;;;AAAxBG,gBAAAA,e;;sBAKF3D,OAAO,KAAK,KAAK7G,KAAL,CAAW8G,IAAX,CAAgBD,O;;;;;;;;AAIhC,qBAAKuB,YAAL,CAAkBoC,eAAlB;;;;;;;AAEArD,gBAAAA,OAAO,CAACC,KAAR;gCAGE,CAAC,KAAKpH,KAAL,CAAWyK,mB;;;;;;;;uBACJ,KAAKzK,KAAL,CAAWyK,mBAAX,CAA+BC,cAA/B,e;;;;;;;;;;;AAER,qBAAK1K,KAAL,CAAW2K,KAAX,CAAiBC,OAAjB,CAAyB;AAAEhI,kBAAAA,OAAO,EAAEiI,uCAAmBC;AAA9B,iBAAzB;;;;;;;;;;;;;;;;AAKN;AACF;AACA;;;;;sGAEsBnG,S;;;;;;AAClB,qBAAKoG,gBAAL;;;uBAEwB,KAAKnB,iBAAL,CAAuBjF,SAAvB,EAAkC,QAAlC,C;;;AAAhB/B,gBAAAA,O;AACN,qBAAKoI,WAAL,CAAiBpI,OAAjB;;;;;;;AAEAuE,gBAAAA,OAAO,CAACC,KAAR;gCAGE,CAAC,KAAKpH,KAAL,CAAWyK,mB;;;;;;;;uBACJ,KAAKzK,KAAL,CAAWyK,mBAAX,CAA+BC,cAA/B,e;;;;;;;;;;;AAER,qBAAK1K,KAAL,CAAW2K,KAAX,CAAiBC,OAAjB,CAAyB;AAAEhI,kBAAAA,OAAO,EAAEiI,uCAAmBI;AAA9B,iBAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6GAsBqB7M,c;;;;;;;;;;;;;;;;;;;;6CAIFA,c,EAA2C;AAClE,UAAI,CAAC,KAAKC,iBAAL,CAAuBD,cAAvB,CAAL,EAA6C;AAC3C,eAAO,KAAKC,iBAAZ;AACD;;AACD,UAAMuF,QAAQ,qBAAQ,KAAKvF,iBAAb,CAAd;;AACA,aAAOuF,QAAQ,CAACxF,cAAD,CAAf;AACA,aAAOwF,QAAP;AACD;;;wCAEmBxF,c,EAA2C;AAAA;;AAC7D,UAAMmB,gBAAgB,GAAG,0CAAC,KAAKD,IAAN,gDAAC,YAAWC,gBAAZ,2EAAgC,EAAhC,EAAoCuF,MAApC,CACvB,UAACG,CAAD;AAAA,eAAOA,CAAC,CAACf,EAAF,KAAS9F,cAAhB;AAAA,OADuB,CAAzB;AAGA,WAAK8M,oBAAL,CAA0B9M,cAA1B;;AACA,UAAMC,iBAAiB,GAAG,KAAK8M,wBAAL,CAA8B/M,cAA9B,CAA1B;;AACA,WAAK4B,KAAL,CAAWkC,aAAX,CAAyBsB,UAAzB,CACE,KAAKjC,OADP,kCAGO,KAAKjC,IAHZ;AAIIC,QAAAA,gBAAgB,EAAhBA,gBAJJ;AAKIlB,QAAAA,iBAAiB,EAAjBA;AALJ,UAOE,KAAKgF,SAPP;AASD;;;;mHAGgCjF,c;;;;;;oBAC1BA,c;;;;;;;;AAGCgM,gBAAAA,W,GAAc,KAAK/L,iBAAL,CAAuBD,cAAvB,C;;sBAChB,CAACgM,WAAD,IAAgBA,WAAW,CAACtG,MAAZ,KAAuB,C;;;;;;;;AAGrCa,gBAAAA,S,GAAYyF,WAAW,CAACtB,GAAZ,CAAgB,UAAC/D,CAAD;AAAA,yBAAOA,CAAC,CAACb,EAAT;AAAA,iBAAhB,EAA6BkF,IAA7B,CAAkC,GAAlC,C;;;uBAEV,KAAKgC,gBAAL,CAAsBzG,SAAtB,C;;;AACN,qBAAK0G,mBAAL,CAAyBjN,cAAzB;;;;;;;;AAEA+I,gBAAAA,OAAO,CAACC,KAAR;gCAGE,CAAC,KAAKpH,KAAL,CAAWyK,mB;;;;;;;;uBACJ,KAAKzK,KAAL,CAAWyK,mBAAX,CAA+BC,cAA/B,e;;;;;;;;;;;AAER,qBAAK1K,KAAL,CAAW2K,KAAX,CAAiBC,OAAjB,CAAyB;AAAEhI,kBAAAA,OAAO,EAAEiI,uCAAmBS;AAA9B,iBAAzB;;;;;;;;;;;;;;;;;;;4GAMmBlN,c;;;;;oBAClBA,c;;;;;;;;;;uBAIG,KAAK4B,KAAL,CAAWoG,MAAX,CAAkBC,OAAlB,GAA4BC,SAA5B,GAAwC/D,YAAxC,aAA8D;AAClEnE,kBAAAA,cAAc,EAAdA;AADkE,iBAA9D,C;;;AAGN,qBAAKiN,mBAAL,CAAyBjN,cAAzB;;;;;;;;AAEA+I,gBAAAA,OAAO,CAACC,KAAR;gCAGE,CAAC,KAAKpH,KAAL,CAAWyK,mB;;;;;;;;uBACJ,KAAKzK,KAAL,CAAWyK,mBAAX,CAA+BC,cAA/B,e;;;;;;;;;;;AAER,qBAAK1K,KAAL,CAAW2K,KAAX,CAAiBC,OAAjB,CAAyB;AAAEhI,kBAAAA,OAAO,EAAEiI,uCAAmBS;AAA9B,iBAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAoBgBzM,Q,EAAAA,Q,gCAAW,E;AAC/B;AACA,qBAAK0M,wBAAL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAiBS;AACT,aAAO,KAAKvL,KAAL,CAAWkC,aAAX,CAAyBsJ,OAAzB,CAAiC,KAAKjK,OAAtC,CAAP;AACD;;;wBAEe;AACd,aAAO,KAAKvB,KAAL,CAAWkC,aAAX,CAAyBuJ,YAAzB,CAAsC,KAAKlK,OAA3C,CAAP;AACD;;;wBAEc;AAAA;;AACb,4BAAO,KAAKjC,IAAZ,gDAAO,YAAWkH,QAAlB;AACD;;;wBAGuB;AAAA;;AACtB,aAAO,qBAAKlH,IAAL,4DAAWjB,iBAAX,KAAgC,EAAvC;AACD;;;wBAEoB;AACnB,aAAO,KAAK2B,KAAL,CAAW8B,WAAX,CAAuB4J,yBAA9B;AACD;;;wBAMiD;AAAA;AAAA;;AAAA,kCACd,KAAKpM,IADS,qDACD,EADC;AAAA,yCACxCC,gBADwC;AAAA,UACxCA,gBADwC,sCACrB,EADqB;;AAEhD,aAAOA,gBAAgB,CAACuJ,GAAjB,CAAqB,UAAC6C,gBAAD,EAAsB;AAChD,YAAMvB,WAAW,GAAG,MAAI,CAAC/L,iBAAL,CAAuBsN,gBAAgB,CAACzH,EAAxC,KAA+C,EAAnE;AACA,+CACKkG,WAAW,CAAC,CAAD,CADhB;AAEEwB,UAAAA,YAAY,EAAExB,WAAW,CAACtF,MAAZ,CAAmBT,aAAa,CAACiG,eAAjC,EAAkDxG;AAFlE;AAID,OANM,CAAP;AAOD;;;wBAGuB;AACtB,aAAO,KAAKtE,gBAAL,CAAsBsF,MAAtB,CAA6B,UAACxG,YAAD;AAAA,eAClC+F,aAAa,CAACwH,oBAAd,CAAmCvN,YAAnC,CADkC;AAAA,OAA7B,CAAP;AAGD;;;wBAGsB;AACrB,aAAO,KAAKmB,iBAAL,CAAuBkJ,MAAvB,CAA8B,UAACjB,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,GAAGC,CAAC,CAACiE,YAAhB;AAAA,OAA9B,EAA4D,CAA5D,CAAP;AACD;;;wBAGiB;AAChB,aAAO,KAAKpM,gBAAL,CAAsBsF,MAAtB,CAA6B,UAACxG,YAAD;AAAA,eAClC+F,aAAa,CAACyH,YAAd,CAA2BxN,YAA3B,CADkC;AAAA,OAA7B,CAAP;AAGD;;;wBAGqB;AACpB,aAAO,KAAKoB,WAAL,CAAiBiJ,MAAjB,CAAwB,UAACjB,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,GAAGC,CAAC,CAACiE,YAAhB;AAAA,OAAxB,EAAsD,CAAtD,CAAP;AACD;;;wBAGuB;AACtB,aAAO,KAAKpM,gBAAL,CAAsBsF,MAAtB,CAA6B,UAACxG,YAAD;AAAA,eAClC+F,aAAa,CAAC0H,kBAAd,CAAiCzN,YAAjC,CADkC;AAAA,OAA7B,CAAP;AAGD;;;wBAGuB;AACtB,aAAO,KAAKqB,iBAAL,CAAuBgJ,MAAvB,CAA8B,UAACjB,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,GAAGC,CAAC,CAACiE,YAAhB;AAAA,OAA9B,EAA4D,CAA5D,CAAP;AACD;;;wBAOkB;AACjB,UAAIA,YAAY,GAAG,CAAnB;;AACA,UAAI,KAAK5L,KAAL,CAAW8B,WAAX,CAAuBkK,qBAA3B,EAAkD;AAChDJ,QAAAA,YAAY,IAAI,KAAK/L,gBAArB;AACD;;AACD,UAAI,KAAKG,KAAL,CAAW8B,WAAX,CAAuBmK,sBAA3B,EAAmD;AACjDL,QAAAA,YAAY,IAAI,KAAKhM,iBAArB;AACD;;AACD,UAAI,KAAKI,KAAL,CAAW8B,WAAX,CAAuBoK,oBAA3B,EAAiD;AAC/CN,QAAAA,YAAY,IAAI,KAAK9L,eAArB;AACD;;AACD,aAAO8L,YAAP;AACD;;;;EAp1B+BO,mC,iEA4F/BC,gB,qJAsOAA,gB,sJA2EAA,gB,yJA2KAA,gB,0JAiDAA,gB,qKAmBAA,gB,4KAeAA,gB,+KA+BAA,gB,6KAyBAA,gB,sKAuBAA,gB,iKAaAA,gB,6KAeAA,gB","sourcesContent":["import { GetMessageInfoResponse } from '@rc-ex/core/definitions';\nimport { computed, track, watch } from '@ringcentral-integration/core';\nimport { EventEmitter } from 'events';\nimport { subscriptionFilters } from '../../enums/subscriptionFilters';\nimport {\n  Message,\n  Messages,\n  MessageStoreModel,\n  MessageSyncList,\n} from '../../interfaces/MessageStore.model';\nimport { batchPutApi } from '../../lib/batchApiHelper';\nimport { debounce } from '../../lib/debounce-throttle';\nimport { Module } from '../../lib/di';\nimport * as messageHelper from '../../lib/messageHelper';\nimport { proxify } from '../../lib/proxy/proxify';\nimport sleep from '../../lib/sleep';\nimport { trackEvents } from '../Analytics';\nimport { callingModes } from '../CallingSettingsV2';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport {\n  Deps,\n  DispatchedMessageIds,\n  MessageHandler,\n  MessageStoreConversations,\n  ProcessRawConversationListOptions,\n  ProcessRawConversationStoreOptions,\n  SyncFunctionOptions,\n} from './MessageStore.interface';\nimport { messageStoreErrors } from './messageStoreErrors';\nimport { getSyncParams } from './messageStoreHelper';\n\nconst DEFAULT_CONVERSATIONS_LOAD_LENGTH = 10;\nconst DEFAULT_CONVERSATION_LOAD_LENGTH = 100;\nconst DEFAULT_POLLING_INTERVAL = 30 * 60 * 1000; // 30 min\nconst DEFAULT_TTL = 5 * 60 * 1000; // 5 min\nconst DEFAULT_RETRY = 62 * 1000; // 62 sec\n\nconst DEFAULT_DAY_SPAN = 7; // default to load 7 days messages\nconst DEFAULT_MESSAGES_FILTER = (list: Messages) => list;\nconst UPDATE_MESSAGE_ONCE_COUNT = 20; // Number of messages to be updated in one time\n\n/**\n * Messages data managing module\n * fetch conversations\n * handle new message subscription\n */\n@Module({\n  name: 'MessageStore',\n  deps: [\n    'Alert',\n    'Auth',\n    'Client',\n    'DataFetcherV2',\n    'Subscription',\n    'ConnectivityMonitor',\n    'AppFeatures',\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'MessageStoreOptions', optional: true },\n  ],\n})\nexport class MessageStore extends DataFetcherV2Consumer<\n  Deps,\n  MessageStoreModel\n> {\n  protected _conversationsLoadLength =\n    this._deps.messageStoreOptions?.conversationsLoadLength ??\n    DEFAULT_CONVERSATIONS_LOAD_LENGTH;\n\n  protected _conversationLoadLength =\n    this._deps.messageStoreOptions?.conversationLoadLength ??\n    DEFAULT_CONVERSATION_LOAD_LENGTH;\n\n  protected _messagesFilter =\n    this._deps.messageStoreOptions?.messagesFilter ?? DEFAULT_MESSAGES_FILTER;\n\n  protected _daySpan =\n    this._deps.messageStoreOptions?.daySpan ?? DEFAULT_DAY_SPAN;\n\n  protected _eventEmitter = new EventEmitter();\n\n  protected _dispatchedMessageIds: DispatchedMessageIds = [];\n\n  protected _handledRecord: GetMessageInfoResponse[] = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n\n    const {\n      disableCache = false,\n      polling = false,\n      timeToRetry = DEFAULT_RETRY,\n      pollingInterval = DEFAULT_POLLING_INTERVAL,\n      ttl = DEFAULT_TTL,\n    } = this._deps.messageStoreOptions ?? {};\n    this._source = new DataSource({\n      ...this._deps.messageStoreOptions,\n      key: 'messageStore',\n      disableCache,\n      ttl,\n      polling,\n      timeToRetry,\n      pollingInterval,\n      cleanOnReset: true,\n      permissionCheckFunction: () => this._hasPermission,\n      readyCheckFunction: () => this._deps.appFeatures.ready,\n      fetchFunction: async () => this._syncData(),\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  onInit() {\n    if (this._hasPermission) {\n      this._deps.subscription.subscribe([subscriptionFilters.messageStore]);\n    }\n  }\n\n  onInitOnce() {\n    if (this._deps.connectivityMonitor) {\n      watch(\n        this,\n        () => this._deps.connectivityMonitor.connectivity,\n        (newValue) => {\n          if (this.ready && this._deps.connectivityMonitor.ready && newValue) {\n            this._deps.dataFetcherV2.fetchData(this._source);\n          }\n        },\n      );\n    }\n    watch(\n      this,\n      () => this._deps.subscription.message,\n      (newValue) => {\n        if (\n          !this.ready ||\n          (this._deps.tabManager && !this._deps.tabManager.active)\n        ) {\n          return;\n        }\n        const accountExtensionEndPoint = /\\/message-store$/;\n        if (\n          newValue &&\n          accountExtensionEndPoint.test(newValue.event) &&\n          newValue.body?.changes\n        ) {\n          this.fetchData({ passive: true });\n        }\n      },\n    );\n  }\n\n  @proxify\n  async _updateData(data: any, timestamp = Date.now()) {\n    this._deps.dataFetcherV2.updateData(this._source, data, timestamp);\n  }\n\n  _processRawConversationList({\n    records,\n    conversationStore,\n    isFSyncSuccess,\n  }: ProcessRawConversationListOptions) {\n    const state = this.data?.conversationList || [];\n    const newState: MessageStoreModel['conversationList'] = [];\n    const stateMap: Record<string, { index: number }> = {};\n    if (!isFSyncSuccess) {\n      if (!records || records.length === 0) {\n        return state;\n      }\n      state.forEach((oldConversation) => {\n        newState.push(oldConversation);\n        stateMap[oldConversation.id] = {\n          index: newState.length - 1,\n        };\n      });\n    }\n    records.forEach((record) => {\n      const message = messageHelper.normalizeRecord(record);\n      const id = message.conversationId;\n      const newCreationTime = message.creationTime;\n      const isDeleted = messageHelper.messageIsDeleted(message);\n      if (stateMap[id]) {\n        const oldConversation = newState[stateMap[id].index];\n        const creationTime = oldConversation.creationTime;\n        if (creationTime < newCreationTime && !isDeleted) {\n          newState[stateMap[id].index] = {\n            id,\n            creationTime: newCreationTime,\n            type: message.type,\n            messageId: message.id,\n          };\n        }\n        // when user deleted a coversation message\n        if (isDeleted && message.id === oldConversation.messageId) {\n          const oldMessageList = conversationStore[id] || [];\n          const exsitedMessageList = oldMessageList.filter(\n            (m) => m.id !== message.id,\n          );\n          if (exsitedMessageList.length > 0) {\n            newState[stateMap[id].index] = {\n              id,\n              creationTime: exsitedMessageList[0].creationTime,\n              type: exsitedMessageList[0].type,\n              messageId: exsitedMessageList[0].id,\n            };\n            return;\n          }\n          // when user delete conversation\n          newState[stateMap[id].index] = null;\n          delete stateMap[id];\n        }\n        return;\n      }\n      if (isDeleted || !messageHelper.messageIsAcceptable(message)) {\n        return;\n      }\n      newState.push({\n        id,\n        creationTime: newCreationTime,\n        type: message.type,\n        messageId: message.id,\n      });\n      stateMap[id] = {\n        index: newState.length - 1,\n      };\n    });\n    return newState\n      .filter((c) => !!c && typeof c.creationTime === 'number')\n      .sort(messageHelper.sortByCreationTime);\n  }\n\n  _processRawConversationStore({\n    records,\n    isFSyncSuccess,\n  }: ProcessRawConversationStoreOptions) {\n    const state = this.data?.conversationStore ?? {};\n    let newState: MessageStoreModel['conversationStore'] = {};\n    const updatedConversations: Record<string, number> = {};\n    if (!isFSyncSuccess) {\n      if (!records || records.length === 0) {\n        return state;\n      }\n      newState = {\n        ...state,\n      };\n    }\n    records.forEach((record) => {\n      const message = messageHelper.normalizeRecord(record);\n      const id = message.conversationId;\n      const newMessages = newState[id] ? [].concat(newState[id]) : [];\n      const oldMessageIndex = newMessages.findIndex((r) => r.id === record.id);\n      if (messageHelper.messageIsDeleted(message)) {\n        newState[id] = newMessages.filter((m) => m.id !== message.id);\n        if (newState[id].length === 0) {\n          delete newState[id];\n        }\n        return;\n      }\n      if (oldMessageIndex > -1) {\n        if (\n          newMessages[oldMessageIndex].lastModifiedTime <\n          message.lastModifiedTime\n        ) {\n          newMessages[oldMessageIndex] = message;\n        }\n      } else if (messageHelper.messageIsAcceptable(message)) {\n        newMessages.push(message);\n      }\n      updatedConversations[id] = 1;\n      newState[id] = newMessages;\n    });\n    Object.keys(updatedConversations).forEach((id) => {\n      const noSorted = newState[id];\n      newState[id] = noSorted.sort(messageHelper.sortByCreationTime);\n    });\n    return newState;\n  }\n\n  async _syncFunction({\n    recordCount,\n    conversationLoadLength,\n    dateFrom,\n    dateTo,\n    syncToken,\n    receivedRecordsLength = 0,\n  }: SyncFunctionOptions): Promise<MessageSyncList> {\n    const params = getSyncParams({\n      recordCount,\n      conversationLoadLength,\n      dateFrom,\n      dateTo,\n      syncToken,\n    });\n    const {\n      records,\n      syncInfo,\n    }: MessageSyncList = await this._deps.client\n      .account()\n      .extension()\n      .messageSync()\n      .list(params);\n    receivedRecordsLength += records.length;\n    if (!syncInfo.olderRecordsExist || receivedRecordsLength >= recordCount) {\n      return { records, syncInfo };\n    }\n    await sleep(500);\n    const olderDateTo = new Date(records[records.length - 1].creationTime);\n    const olderRecordResult = await this._syncFunction({\n      conversationLoadLength,\n      dateFrom,\n      dateTo: olderDateTo,\n    });\n    return {\n      records: records.concat(olderRecordResult.records),\n      syncInfo,\n    };\n  }\n\n  async _syncData({ dateTo = null as Date, passive = false } = {}) {\n    const conversationsLoadLength = this._conversationsLoadLength;\n    const conversationLoadLength = this._conversationLoadLength;\n    const { ownerId } = this._deps.auth;\n    try {\n      const dateFrom = new Date();\n      dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n      let syncToken = dateTo ? null : this.syncInfo?.syncToken;\n      const recordCount = conversationsLoadLength * conversationLoadLength;\n      let data;\n      try {\n        data = await this._syncFunction({\n          recordCount,\n          conversationLoadLength,\n          dateFrom,\n          syncToken,\n          dateTo,\n        });\n      } catch (error) {\n        if (\n          error &&\n          (error.message === 'Parameter [syncToken] value is invalid' ||\n            error.message === 'Parameter [syncToken] is invalid')\n        ) {\n          data = await this._syncFunction({\n            recordCount,\n            conversationLoadLength,\n            dateFrom,\n            syncToken: null,\n            dateTo,\n          });\n          syncToken = null;\n        } else {\n          throw error;\n        }\n      }\n      if (this._deps.auth.ownerId === ownerId) {\n        const records = this._messagesFilter(data.records);\n        const isFSyncSuccess = !syncToken;\n        // this is only executed in passive sync mode (aka. invoked by subscription)\n        if (passive) {\n          this._handledRecord = records;\n        }\n        return {\n          conversationList: this._processRawConversationList({\n            records,\n            conversationStore: this.conversationStore,\n            isFSyncSuccess,\n          }),\n          conversationStore: this._processRawConversationStore({\n            records,\n            isFSyncSuccess,\n          }),\n          syncInfo: data.syncInfo,\n        };\n      }\n    } catch (error) {\n      if (this._deps.auth.ownerId === ownerId) {\n        console.error(error);\n        throw error;\n      }\n    }\n  }\n\n  @proxify\n  async fetchData({ passive = false } = {}) {\n    const data = await this._syncData({ passive });\n    this._updateData(data);\n    if (passive && this._handledRecord) {\n      this._dispatchMessageHandlers(this._handledRecord);\n      this._handledRecord = null;\n    }\n  }\n\n  onNewInboundMessage(handler: MessageHandler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on('newInboundMessageNotification', handler);\n    }\n  }\n\n  onMessageUpdated(handler: MessageHandler) {\n    if (typeof handler === 'function') {\n      this._eventEmitter.on('messageUpdated', handler);\n    }\n  }\n\n  /**\n   * Dispatch events to different handlers\n   */\n  _dispatchMessageHandlers(records: GetMessageInfoResponse[]) {\n    // Sort all records by creation time\n    records = records\n      .slice()\n      .sort(\n        (a, b) =>\n          new Date(a.creationTime).getTime() -\n          new Date(b.creationTime).getTime(),\n      );\n    for (const record of records) {\n      const {\n        id,\n        direction,\n        availability,\n        messageStatus,\n        readStatus,\n        lastModifiedTime,\n        creationTime,\n      } = record || {};\n      // Notify when new message incoming\n      // fix mix old messages and new messages logic error.\n      if (!this._messageDispatched(record)) {\n        // Mark last 10 messages that dispatched\n        // To present dispatching same record twice\n        this._dispatchedMessageIds = [{ id, lastModifiedTime }]\n          .concat(this._dispatchedMessageIds)\n          .slice(0, 20);\n        this._eventEmitter.emit('messageUpdated', record);\n        // For new inbound message notification\n        if (\n          direction === 'Inbound' &&\n          readStatus === 'Unread' &&\n          messageStatus === 'Received' &&\n          availability === 'Alive' &&\n          new Date(creationTime).getTime() >\n            new Date(lastModifiedTime).getTime() - 600 * 1000\n        ) {\n          this._eventEmitter.emit('newInboundMessageNotification', record);\n        }\n      }\n    }\n  }\n\n  _messageDispatched(message: GetMessageInfoResponse) {\n    return this._dispatchedMessageIds.some(\n      (m) =>\n        m.id === message.id && m.lastModifiedTime === message.lastModifiedTime,\n    );\n  }\n\n  @proxify\n  async pushMessages(records: GetMessageInfoResponse[]) {\n    this._deps.dataFetcherV2.updateData(\n      this._source,\n      {\n        ...this.data,\n        conversationList: this._processRawConversationList({\n          records,\n          conversationStore: this.conversationStore,\n        }),\n        conversationStore: this._processRawConversationStore({\n          records,\n        }),\n      },\n      this.timestamp,\n    );\n  }\n\n  pushMessage(record: GetMessageInfoResponse) {\n    this.pushMessages([record]);\n  }\n\n  async _updateMessageApi(messageId: string, status: Message['readStatus']) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest: GetMessageInfoResponse = await this._deps.client\n      .account()\n      .extension()\n      .messageStore(messageId)\n      .put(body);\n    return updateRequest;\n  }\n\n  async deleteMessageApi(messageId: string) {\n    const response: string = await this._deps.client\n      .account()\n      .extension()\n      .messageStore(messageId)\n      .delete();\n    return response;\n  }\n\n  sliceConversations() {\n    const conversationIds = Object.keys(this.conversationStore);\n    const messages = conversationIds.reduce(\n      (acc, id) => acc.concat(this.conversationStore[id]),\n      [] as Messages,\n    );\n    const messageIds = this._messagesFilter(messages).map(\n      (item: Message) => item.id,\n    );\n    const conversationList = (this.data?.conversationList ?? []).filter(\n      ({ messageId }) => messageIds.indexOf(messageId) > -1,\n    );\n    const conversationStore = Object.keys(this.conversationStore).reduce(\n      (acc, key) => {\n        const messages = this.conversationStore[key];\n        const persist = messages.filter(\n          ({ id }) => messageIds.indexOf(id) > -1,\n        );\n        if (!persist.length) {\n          return acc;\n        }\n        acc[key] = persist;\n        return acc;\n      },\n      {} as Record<string, Messages>,\n    );\n    this._deps.dataFetcherV2.updateData(\n      this._source,\n      {\n        ...this.data,\n        conversationList,\n        conversationStore,\n      },\n      this.timestamp,\n    );\n  }\n\n  /**\n   * Batch update messages status\n   */\n  async _batchUpdateMessagesApi(\n    messageIds: Message['id'][],\n    body: {\n      body: {\n        readStatus: Message['readStatus'];\n      };\n    }[],\n  ) {\n    // Not to request when there're no messages\n    if (!messageIds || messageIds.length === 0) {\n      return;\n    }\n\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._deps.client.service.platform();\n    const responses: Response[] = await batchPutApi({\n      platform,\n      url: `/restapi/v1.0/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  /**\n   * Change messages' status to `READ` or `UNREAD`.\n   * Update 20 messages per time with `_batchUpdateMessagesApi`,\n   * or `_updateMessageApi` one by one in recursion.\n   */\n  async _updateMessagesApi(\n    messageIds: Message['id'][],\n    status: Message['readStatus'],\n  ) {\n    const allMessageIds = messageIds;\n    if (!allMessageIds || allMessageIds.length === 0) {\n      return [];\n    }\n\n    const results: GetMessageInfoResponse[] = [];\n\n    for (let index = 0; ; index++) {\n      let nextLength = (index + 1) * UPDATE_MESSAGE_ONCE_COUNT;\n\n      if (nextLength > allMessageIds.length) {\n        nextLength = allMessageIds.length - index * UPDATE_MESSAGE_ONCE_COUNT;\n      } else {\n        nextLength = UPDATE_MESSAGE_ONCE_COUNT;\n      }\n\n      // If there's only one message, use another api to update its status\n      if (nextLength === 1) {\n        const result = await this._updateMessageApi(messageIds[0], status);\n        return [result];\n      }\n\n      const leftIds = allMessageIds.slice(\n        index * UPDATE_MESSAGE_ONCE_COUNT,\n        index * UPDATE_MESSAGE_ONCE_COUNT + nextLength,\n      );\n\n      const body = leftIds.map(() => ({ body: { readStatus: status } }));\n      const responses = await this._batchUpdateMessagesApi(leftIds, body);\n      await Promise.all(\n        responses.map(async (res) => {\n          if (res.status === 200) {\n            const result = await res.json();\n            results.push(result);\n          }\n        }),\n      );\n\n      const { ownerId } = this._deps.auth;\n      if (allMessageIds.length > (index + 1) * UPDATE_MESSAGE_ONCE_COUNT) {\n        await sleep(1300);\n        // Check if owner ID has been changed. If it is, cancel this update.\n        if (ownerId !== this._deps.auth.ownerId) {\n          return [];\n        }\n      } else {\n        break;\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Set message status to `READ`.\n   */\n  @proxify\n  async readMessages(conversationId: Message['conversationId']) {\n    this._debouncedSetConversationAsRead(conversationId);\n  }\n\n  _debouncedSetConversationAsRead = debounce({\n    fn: this._setConversationAsRead,\n    threshold: 500,\n    leading: true,\n  });\n\n  async _setConversationAsRead(conversationId: Message['conversationId']) {\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return;\n    }\n    const unreadMessageIds = messageList\n      .filter(messageHelper.messageIsUnread)\n      .map((m) => m.id);\n    if (unreadMessageIds.length === 0) {\n      return;\n    }\n    try {\n      const { ownerId } = this._deps.auth;\n      const updatedMessages = await this._updateMessagesApi(\n        unreadMessageIds,\n        'Read',\n      );\n\n      if (ownerId !== this._deps.auth.ownerId) {\n        return;\n      }\n\n      this.pushMessages(updatedMessages);\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._deps.availabilityMonitor ||\n        !(await this._deps.availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: messageStoreErrors.readFailed });\n      }\n    }\n  }\n\n  /**\n   * Set message status to `UNREAD`.\n   */\n  @proxify\n  async unreadMessage(messageId: string) {\n    this.onUnmarkMessages();\n    try {\n      const message = await this._updateMessageApi(messageId, 'Unread');\n      this.pushMessage(message);\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._deps.availabilityMonitor ||\n        !(await this._deps.availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: messageStoreErrors.unreadFailed });\n      }\n    }\n  }\n\n  @track(trackEvents.flagVoicemail)\n  @proxify\n  async onUnmarkMessages() {\n    //  for track mark message\n  }\n\n  @track((that: MessageStore, conversationId: Message['conversationId']) => {\n    const [conversation] = that.conversationStore[conversationId] ?? [];\n    if (!conversation) return;\n    if (conversation.type === 'VoiceMail') {\n      return [trackEvents.deleteVoicemail];\n    }\n    if (conversation.type === 'Fax') {\n      return [trackEvents.deleteFax];\n    }\n  })\n  @proxify\n  async onDeleteConversation(conversationId: Message['conversationId']) {\n    //  for track delete message\n  }\n\n  _deleteConversationStore(conversationId: Message['conversationId']) {\n    if (!this.conversationStore[conversationId]) {\n      return this.conversationStore;\n    }\n    const newState = { ...this.conversationStore };\n    delete newState[conversationId];\n    return newState;\n  }\n\n  _deleteConversation(conversationId: Message['conversationId']) {\n    const conversationList = (this.data?.conversationList ?? []).filter(\n      (c) => c.id !== conversationId,\n    );\n    this.onDeleteConversation(conversationId);\n    const conversationStore = this._deleteConversationStore(conversationId);\n    this._deps.dataFetcherV2.updateData(\n      this._source,\n      {\n        ...this.data,\n        conversationList,\n        conversationStore,\n      },\n      this.timestamp,\n    );\n  }\n\n  @proxify\n  async deleteConversationMessages(conversationId: Message['conversationId']) {\n    if (!conversationId) {\n      return;\n    }\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return;\n    }\n    const messageId = messageList.map((m) => m.id).join(',');\n    try {\n      await this.deleteMessageApi(messageId);\n      this._deleteConversation(conversationId);\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._deps.availabilityMonitor ||\n        !(await this._deps.availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: messageStoreErrors.deleteFailed });\n      }\n    }\n  }\n\n  @proxify\n  async deleteConversation(conversationId: Message['conversationId']) {\n    if (!conversationId) {\n      return;\n    }\n    try {\n      await this._deps.client.account().extension().messageStore().delete({\n        conversationId,\n      });\n      this._deleteConversation(conversationId);\n    } catch (error) {\n      console.error(error);\n\n      if (\n        !this._deps.availabilityMonitor ||\n        !(await this._deps.availabilityMonitor.checkIfHAError(error))\n      ) {\n        this._deps.alert.warning({ message: messageStoreErrors.deleteFailed });\n      }\n    }\n  }\n\n  @track(trackEvents.clickToSMSVoicemailList)\n  @proxify\n  async onClickToSMS() {\n    // for track click to sms in message list\n  }\n\n  @track((_: MessageStore, action: { fromType?: Message['type'] }) => {\n    if (action.fromType === 'Pager' || action.fromType === 'SMS') {\n      return [trackEvents.clickToDialTextList];\n    }\n    if (action.fromType === 'VoiceMail') {\n      return [trackEvents.clickToDialVoicemailList];\n    }\n  })\n  @proxify\n  async onClickToCall({ fromType = '' }) {\n    // for track click to call in message list\n    this.onClickToCallWithRingout();\n  }\n\n  @track((that: MessageStore) => {\n    if (\n      // TODO: refactor for Analytics\n      (that.parentModule as any).callingSettings?.callingMode ===\n      callingModes.ringout\n    ) {\n      return [trackEvents.callPlaceRingOutCallSMSHistory];\n    }\n  })\n  @proxify\n  async onClickToCallWithRingout() {\n    // for track click to call with Ringout in message list\n  }\n\n  get data() {\n    return this._deps.dataFetcherV2.getData(this._source);\n  }\n\n  get timestamp() {\n    return this._deps.dataFetcherV2.getTimestamp(this._source);\n  }\n\n  get syncInfo() {\n    return this.data?.syncInfo;\n  }\n\n  @computed((that: MessageStore) => [that.data?.conversationStore])\n  get conversationStore() {\n    return this.data?.conversationStore || {};\n  }\n\n  get _hasPermission() {\n    return this._deps.appFeatures.hasReadMessagesPermission;\n  }\n\n  @computed((that: MessageStore) => [\n    that.data?.conversationList,\n    that.conversationStore,\n  ])\n  get allConversations(): MessageStoreConversations {\n    const { conversationList = [] } = this.data ?? {};\n    return conversationList.map((conversationItem) => {\n      const messageList = this.conversationStore[conversationItem.id] || [];\n      return {\n        ...messageList[0],\n        unreadCounts: messageList.filter(messageHelper.messageIsUnread).length,\n      };\n    });\n  }\n\n  @computed((that: MessageStore) => [that.allConversations])\n  get textConversations() {\n    return this.allConversations.filter((conversation) =>\n      messageHelper.messageIsTextMessage(conversation),\n    );\n  }\n\n  @computed((that: MessageStore) => [that.textConversations])\n  get textUnreadCounts() {\n    return this.textConversations.reduce((a, b) => a + b.unreadCounts, 0);\n  }\n\n  @computed((that: MessageStore) => [that.allConversations])\n  get faxMessages() {\n    return this.allConversations.filter((conversation) =>\n      messageHelper.messageIsFax(conversation),\n    );\n  }\n\n  @computed((that: MessageStore) => [that.faxMessages])\n  get faxUnreadCounts() {\n    return this.faxMessages.reduce((a, b) => a + b.unreadCounts, 0);\n  }\n\n  @computed((that: MessageStore) => [that.allConversations])\n  get voicemailMessages() {\n    return this.allConversations.filter((conversation) =>\n      messageHelper.messageIsVoicemail(conversation),\n    );\n  }\n\n  @computed((that: MessageStore) => [that.voicemailMessages])\n  get voiceUnreadCounts() {\n    return this.voicemailMessages.reduce((a, b) => a + b.unreadCounts, 0);\n  }\n\n  @computed((that: MessageStore) => [\n    that.voiceUnreadCounts,\n    that.textUnreadCounts,\n    that.faxUnreadCounts,\n  ])\n  get unreadCounts() {\n    let unreadCounts = 0;\n    if (this._deps.appFeatures.hasReadTextPermission) {\n      unreadCounts += this.textUnreadCounts;\n    }\n    if (this._deps.appFeatures.hasVoicemailPermission) {\n      unreadCounts += this.voiceUnreadCounts;\n    }\n    if (this._deps.appFeatures.hasReadFaxPermission) {\n      unreadCounts += this.faxUnreadCounts;\n    }\n    return unreadCounts;\n  }\n}\n"],"file":"MessageStore.js"}