{"version":3,"sources":["modules/RecentMessagesV2/RecentMessages.ts"],"names":["RecentMessages","name","deps","that","messages","_deps","messageStore","timestamp","ready","Object","keys","length","contacts","key","getMessages","currentContact","sessionId","indexOf","split","fromLocal","forceUpdate","messageStatus","MessageStatus","loading","contact","loaded","contactId","String","id","initLoad","_getRecentMessages","textConversations","loadSuccess","loadReset","conversations","daySpan","dateFrom","recentMessages","_getLocalRecentMessages","dateTo","Date","creationTime","undefined","_fetchRemoteRecentMessages","toISOString","concat","console","error","slice","phoneNumbers","matches","i","conversation","messageList","conversationStore","conversationId","find","sort","sortByDate","params","messageType","perPage","recentMessagesPromise","reduce","acc","phoneNumber","promise","_fetchMessageList","allMessages","messageRecords","remoteMessage","client","account","extension","list","unreadCounts","cur","readStatus","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import { GetMessageList } from '@rc-ex/core/definitions';\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  watch,\n} from '@ringcentral-integration/core';\n\nimport { Entity } from '../../interfaces/Entity.interface';\nimport { Message, Messages } from '../../interfaces/MessageStore.model';\nimport concurrentExecute from '../../lib/concurrentExecute';\nimport { Module } from '../../lib/di';\nimport getDateFrom from '../../lib/getDateFrom';\nimport { sortByDate } from '../../lib/messageHelper';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { MessageStoreConversations } from '../MessageStoreV2';\nimport { MessageStatus } from './messageStatus';\nimport {\n  CleanUpMessagesOptions,\n  Deps,\n  FetchMessageListOptions,\n  GetMessagesOptions,\n  LoadResetOptions,\n  LoadSuccessOptions,\n  RecentMessage,\n} from './RecentMessages.interface';\nimport {\n  dedup,\n  filterPhoneNumber,\n  flattenToMessageRecords,\n  markAsRemoteMessage,\n  sortMessages,\n} from './recentMessagesHelper';\n\n/**\n * Retrieve all recent messages related to a specified contact.\n */\n@Module({\n  name: 'RecentMessages',\n  deps: ['Client', 'MessageStore'],\n})\nexport class RecentMessages extends RcModuleV2<Deps> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  onInitOnce() {\n    watch(\n      this,\n      () => this._deps.messageStore.timestamp,\n      () => {\n        if (this.ready && Object.keys(this.messages).length > 0) {\n          for (const key of Object.keys(this.contacts)) {\n            this.getMessages({\n              currentContact: this.contacts[key],\n              sessionId: key.indexOf('-') > -1 ? key.split('-')[1] : null,\n              fromLocal: false,\n              forceUpdate: true,\n            });\n          }\n        }\n      },\n    );\n  }\n\n  @state\n  contacts: Record<string, Entity> = {};\n\n  @state\n  messages: Record<string, (Message | RecentMessage)[]> = {};\n\n  @state\n  messageStatus: MessageStatus = null;\n\n  @action\n  initLoad() {\n    this.messageStatus = MessageStatus.loading;\n  }\n\n  @action\n  loadSuccess({ contact, messages, sessionId }: LoadSuccessOptions) {\n    this.messageStatus = MessageStatus.loaded;\n    const contactId = String(contact && contact.id);\n    const id = sessionId ? `${contactId}-${sessionId}` : contactId;\n    this.contacts[id] = contact;\n    this.messages[id] = messages;\n  }\n\n  @action\n  loadReset({ contact, sessionId }: LoadResetOptions) {\n    const contactId = String(contact && contact.id);\n    const id = sessionId ? `${contactId}-${sessionId}` : contactId;\n    delete this.contacts[id];\n    delete this.messages[id];\n  }\n\n  @computed((that: RecentMessages) => [that.messages])\n  get unreadMessageCounts() {\n    return Object.keys(this.messages).reduce((unreadCounts, contactId) => {\n      unreadCounts[contactId] = this.messages[contactId].reduce(\n        (acc, cur) => acc + (cur.readStatus !== 'Read' ? 1 : 0),\n        0,\n      );\n      return unreadCounts;\n    }, {} as Record<string, number>);\n  }\n\n  get isMessagesLoaded() {\n    return this.messageStatus === MessageStatus.loaded;\n  }\n\n  @proxify\n  async getMessages({\n    currentContact,\n    sessionId = null,\n    fromLocal = false,\n    forceUpdate = false,\n  }: GetMessagesOptions) {\n    // No need to calculate recent messages of the same contact repeatly\n    if (!currentContact) {\n      return;\n    }\n    const contactId = currentContact.id;\n    if (\n      !forceUpdate &&\n      !!this.messages[sessionId ? `${contactId}-${sessionId}` : contactId]\n    ) {\n      return;\n    }\n    this.initLoad();\n    const messages = await this._getRecentMessages(\n      currentContact,\n      this._deps.messageStore.textConversations,\n      fromLocal,\n    );\n    this.loadSuccess({\n      messages,\n      contact: currentContact,\n      sessionId,\n    });\n  }\n\n  cleanUpMessages({ contact, sessionId = null }: CleanUpMessagesOptions) {\n    this.loadReset({\n      contact,\n      sessionId,\n    });\n  }\n\n  /**\n   * Searching for recent messages of specific contact.\n   * @param currentContact - Current contact\n   * @param messages - Messages in messageStore\n   * @param fromLocal - Only get recent messages locally\n   * @param daySpan - Find messages within certain days\n   * @param length - Maximum length of recent messages\n   * @return\n   * @private\n   */\n  async _getRecentMessages(\n    currentContact: Entity,\n    conversations: MessageStoreConversations = [],\n    fromLocal: boolean,\n    daySpan = 60,\n    length = 5,\n  ) {\n    const dateFrom = getDateFrom(daySpan);\n    let recentMessages: (Message | RecentMessage)[] =\n      this._getLocalRecentMessages(\n        currentContact,\n        conversations,\n        dateFrom,\n        length,\n      );\n\n    // If we could not find enough recent messages,\n    // we need to search for messages on server.\n    if (!fromLocal && recentMessages.length < length) {\n      const dateTo =\n        recentMessages.length > 0\n          ? new Date(recentMessages[recentMessages.length - 1].creationTime)\n          : undefined;\n\n      try {\n        // This will always be sorted\n        recentMessages = recentMessages.concat(\n          await this._fetchRemoteRecentMessages(\n            currentContact,\n            dateFrom.toISOString(),\n            dateTo && dateTo.toISOString(),\n            length,\n          ),\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    recentMessages = dedup(recentMessages);\n    return recentMessages.length > length\n      ? recentMessages.slice(0, length)\n      : recentMessages;\n  }\n\n  /**\n   * Get recent messages from messageStore.\n   */\n  _getLocalRecentMessages(\n    { phoneNumbers }: Entity,\n    conversations: MessageStoreConversations,\n    dateFrom: Date,\n    length: number,\n  ) {\n    // Get all messages related to this contact\n    let recentMessages: Messages = [];\n    let matches;\n    for (let i = conversations.length - 1; i >= 0; i -= 1) {\n      const conversation = conversations[i];\n      const messageList =\n        this._deps.messageStore.conversationStore[\n          conversation.conversationId\n        ] || [];\n      matches = phoneNumbers.find(filterPhoneNumber(conversation));\n      // Check if message is within certain days\n      if (!!matches && new Date(conversation.creationTime) > dateFrom) {\n        recentMessages = recentMessages.concat(messageList);\n      }\n      if (recentMessages.length >= length) break;\n    }\n    return recentMessages.sort(sortByDate).slice(0, length);\n  }\n\n  /**\n   * Fetch recent messages from server by given current contact.\n   */\n  async _fetchRemoteRecentMessages(\n    { phoneNumbers }: Entity,\n    dateFrom: string,\n    dateTo = new Date().toISOString(),\n    length: number,\n  ) {\n    const params = {\n      dateTo,\n      dateFrom,\n      messageType: ['SMS', 'Text', 'Pager'],\n      perPage: length,\n    };\n    const recentMessagesPromise = phoneNumbers.reduce(\n      (acc, { phoneNumber }) => {\n        if (phoneNumber) {\n          const promise = this._fetchMessageList({\n            ...params,\n            phoneNumber,\n          });\n          return acc.concat(promise);\n        }\n        return acc;\n      },\n      [] as (() => Promise<GetMessageList>)[],\n    );\n\n    // TODO: Because we need to navigate to the message page,\n    // So we may need to push new messages to messageStore\n    const allMessages = await concurrentExecute(recentMessagesPromise, 5, 500);\n    const messageRecords = flattenToMessageRecords(allMessages);\n    const remoteMessage = markAsRemoteMessage(messageRecords);\n    return sortMessages(remoteMessage);\n  }\n\n  _fetchMessageList(params: FetchMessageListOptions) {\n    return () =>\n      this._deps.client\n        .account()\n        .extension()\n        .messageStore()\n        .list(params) as Promise<GetMessageList>;\n  }\n}\n"],"file":"RecentMessages.js"}