{"version":3,"sources":["modules/RingoutV2/Ringout.ts"],"names":["DEFAULT_MONITOR_INTERVAL","DEFAULT_TIME_BETWEEN_CALLS","Ringout","name","deps","dep","optional","_monitorInterval","_timeBetweenCalls","_deps","ringoutOptions","monitorInterval","timeBetweenCalls","ringoutStatus","auth","loggedIn","pending","ready","fromNumber","toNumber","prompt","setRingoutStatus","connecting","client","account","extension","ringOut","post","from","phoneNumber","to","playPrompt","resp","contactMatcher","forceMatchBatchNumbers","phoneNumbers","startTime","Date","now","_monitorRingout","id","idle","message","ringoutErrors","pollingCancelled","ringoutId","_fetchRingoutStatus","callerStatus","Error","firstLegConnectFailed","get","error","response","status","callStatus","pollingFailed","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import { GetRingOutStatusResponse } from '@rc-ex/core/definitions';\nimport RestException from '@rc-ex/core/RestException';\nimport { action, RcModuleV2, state } from '@ringcentral-integration/core';\n\nimport { Module } from '../../lib/di';\nimport proxify from '../../lib/proxy/proxify';\nimport sleep from '../../lib/sleep';\nimport { Deps, MakeCallOptions } from './Ringout.interface';\nimport { ringoutErrors } from './ringoutErrors';\nimport { ringoutStatus } from './ringoutStatus';\n\nconst DEFAULT_MONITOR_INTERVAL = 2500;\nconst DEFAULT_TIME_BETWEEN_CALLS = 10000;\n\n@Module({\n  name: 'Ringout',\n  deps: [\n    'Auth',\n    'Client',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'RingoutOptions', optional: true },\n  ],\n})\nexport class Ringout extends RcModuleV2<Deps> {\n  protected _monitorInterval: number;\n  protected _timeBetweenCalls: number;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    this._monitorInterval =\n      this._deps.ringoutOptions?.monitorInterval ?? DEFAULT_MONITOR_INTERVAL;\n    this._timeBetweenCalls =\n      this._deps.ringoutOptions?.timeBetweenCalls ?? DEFAULT_TIME_BETWEEN_CALLS;\n  }\n\n  @state\n  ringoutStatus: string = ringoutStatus.idle;\n\n  @action\n  setRingoutStatus(ringoutStatus: string) {\n    this.ringoutStatus = ringoutStatus;\n  }\n\n  _shouldInit() {\n    return this._deps.auth.loggedIn && this.pending;\n  }\n\n  _shouldReset() {\n    return !this._deps.auth.loggedIn && this.ready;\n  }\n\n  @proxify\n  async makeCall({ fromNumber, toNumber, prompt }: MakeCallOptions) {\n    if (this.ready) {\n      this.setRingoutStatus(ringoutStatus.connecting);\n      try {\n        const resp: GetRingOutStatusResponse = await this._deps.client\n          .account()\n          .extension()\n          .ringOut()\n          .post({\n            from: { phoneNumber: fromNumber },\n            to: { phoneNumber: toNumber },\n            playPrompt: prompt,\n          });\n\n        if (this._deps.contactMatcher) {\n          await this._deps.contactMatcher.forceMatchBatchNumbers({\n            phoneNumbers: [fromNumber, toNumber],\n          });\n        }\n\n        const startTime = Date.now();\n        await this._monitorRingout(resp.id, startTime);\n\n        this.setRingoutStatus(ringoutStatus.idle);\n      } catch (e) {\n        this.setRingoutStatus(ringoutStatus.idle);\n        if (e.message !== ringoutErrors.pollingCancelled) {\n          throw e;\n        }\n      }\n    } else {\n      // TODO: Need to dispatch a generic error action\n    }\n  }\n\n  @proxify\n  async _monitorRingout(\n    ringoutId: GetRingOutStatusResponse['id'],\n    startTime: number,\n  ) {\n    let callerStatus = await this._fetchRingoutStatus(ringoutId);\n    while (callerStatus === 'InProgress') {\n      if (Date.now() - startTime > this._timeBetweenCalls) {\n        throw new Error(ringoutErrors.pollingCancelled);\n      }\n      await sleep(this._monitorInterval);\n      callerStatus = await this._fetchRingoutStatus(ringoutId);\n    }\n    if (callerStatus !== 'Success' && callerStatus !== 'NoAnswer') {\n      throw new Error(ringoutErrors.firstLegConnectFailed);\n    }\n  }\n\n  @proxify\n  async _fetchRingoutStatus(ringoutId: GetRingOutStatusResponse['id']) {\n    try {\n      let callStatus;\n      const resp = await this._deps.client\n        .account()\n        .extension()\n        .ringOut(ringoutId)\n        .get()\n        .catch((error: RestException | Error) => {\n          if (\n            error &&\n            (error as RestException).response &&\n            (error as RestException).response.status === 404\n          ) {\n            callStatus = 'Success';\n          }\n        });\n      return callStatus || resp.status.callerStatus;\n    } catch (e) {\n      throw new Error(ringoutErrors.pollingFailed);\n    }\n  }\n}\n"],"file":"Ringout.js"}