{"version":3,"sources":["modules/CallLogSection/getStorageReducer.js"],"names":["getCallsMappingReducer","types","state","type","identify","originalState","update","latestUpdateTime","Date","now","isEdited","saving","syncing","latestSaveTime","saveSuccess","isSucceed","saveError","cleanUp","getCallsListReducer","Array","from","Set","getCurrentIdentifyReducer","showLogSection","closeLogSection","getCurrentNotificationIdentifyReducer","showLogNotification","closeLogNotification","getNotificationIsExpandReducer","expandNotification","shrinkNotification","getStorageReducer","notSyncOpenState","baseReducer","callsList","callsMapping","openStateReducer","currentIdentify","currentNotificationIdentify","notificationIsExpand","reducers"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n\nfunction getCallsMappingReducer(types) {\n  return (state = {}, { type, identify }) => {\n    const originalState = state[identify];\n    switch (type) {\n      case types.update:\n        return {\n          ...state,\n          [identify]: {\n            ...originalState,\n            latestUpdateTime: Date.now(),\n            isEdited: true,\n          },\n        };\n      case types.saving:\n      case types.syncing:\n        return {\n          ...state,\n          [identify]: {\n            ...originalState,\n            latestSaveTime: Date.now(),\n          },\n        };\n      case types.saveSuccess:\n        return {\n          ...state,\n          [identify]: {\n            ...originalState,\n            isSucceed: true,\n            isEdited: !!(\n              originalState?.latestUpdateTime &&\n              originalState?.latestSaveTime &&\n              originalState?.latestSaveTime < originalState?.latestUpdateTime\n            ),\n          },\n        };\n      case types.saveError:\n        return {\n          ...state,\n          [identify]: {\n            ...originalState,\n            isEdited: true,\n            isSucceed: false,\n          },\n        };\n      case types.cleanUp:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nfunction getCallsListReducer(types) {\n  return (state = [], { type, identify }) => {\n    switch (type) {\n      case types.update:\n      case types.saving:\n      case types.saveSuccess:\n      case types.saveError:\n        return Array.from(new Set([...state, identify]));\n      case types.cleanUp:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getCurrentIdentifyReducer(types) {\n  return (state = null, { type, identify }) => {\n    switch (type) {\n      case types.showLogSection:\n        return identify;\n      case types.closeLogSection:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getCurrentNotificationIdentifyReducer(types) {\n  return (state = null, { type, identify }) => {\n    switch (type) {\n      case types.showLogNotification:\n        return identify;\n      case types.closeLogNotification:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getNotificationIsExpandReducer(types) {\n  return (state = false, { type }) => {\n    switch (type) {\n      case types.expandNotification:\n        return true;\n      case types.shrinkNotification:\n      case types.closeLogNotification:\n        return false;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getStorageReducer(types, notSyncOpenState = false) {\n  const baseReducer = {\n    callsList: getCallsListReducer(types),\n    callsMapping: getCallsMappingReducer(types),\n  };\n  const openStateReducer = {\n    currentIdentify: getCurrentIdentifyReducer(types),\n    currentNotificationIdentify: getCurrentNotificationIdentifyReducer(types),\n    notificationIsExpand: getNotificationIsExpandReducer(types),\n  };\n  const reducers = {\n    ...baseReducer,\n    ...(notSyncOpenState ? {} : openStateReducer),\n  };\n  return combineReducers(reducers);\n}\n"],"file":"getStorageReducer.js"}