{"version":3,"sources":["modules/CallLogSection/index.ts"],"names":["CallLogSection","deps","dep","optional","storage","notSyncOpenState","options","actionTypes","_notSyncOpenState","_storageKey","_storageReducer","_storage","registerReducer","key","reducer","_reducer","_shouldInit","store","dispatch","type","init","_onInit","initSuccess","_shouldReset","_onReset","resetSuccess","ready","_readyCheckFunction","pending","identify","saveSuccess","args","_onSuccess","saveError","_onError","show","currentIdentify","showLogSection","showNotification","currentNotificationIdentify","showLogNotification","logFunction","readyCheckFunction","onUpdate","onSuccess","onError","_logFunction","ensureExist","call","_onUpdate","update","callsMapping","isSaving","saving","result","_handleSuccess","_handleError","console","warn","isSameCall","_showLogSection","notificationIsExpand","_showLogNotification","closeLogSection","closeLogNotification","saveCallLog","shrinkNotification","expandNotification","getItem","callsList","state","callsSavingStatus","_stateCurrentIdentify","_storageCurrentIdentify","_stateCurrentNotificationIdentify","_storageCurrentNotificationIdentify","_stateNotificationIsExpand","_storageNotificationIsExpand","status","RcModule","proxify","selector","list","mapping","a","map","log","_callsMapping","_callsSavingStatus","identity","pick","keys"],"mappings":"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","sourcesContent":["import {\n  assoc,\n  converge,\n  flip,\n  identity,\n  keys,\n  mergeWith,\n  pick,\n  useWith,\n} from 'ramda';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport ensureExist from '@ringcentral-integration/commons/lib/ensureExist';\nimport { proxify } from '@ringcentral-integration/commons/lib/proxy/proxify';\nimport RcModule from '@ringcentral-integration/commons/lib/RcModule';\nimport { selector } from '@ringcentral-integration/commons/lib/selector';\n\nimport { Mapping } from '../../typings';\nimport actionTypes from './actionTypes';\nimport { CallLogSectionCallStatus } from './CallLogSection.interface';\nimport getCallLogSectionReducer from './getCallLogSectionReducer';\nimport getStorageReducer from './getStorageReducer';\n\n@Module({\n  deps: [\n    'Storage',\n    {\n      dep: 'CallLogSectionOptions',\n      optional: true,\n    },\n  ],\n})\nexport default class CallLogSection extends RcModule {\n  _notSyncOpenState: boolean;\n  _storageKey: string;\n  _storageReducer: any;\n\n  constructor({ storage, notSyncOpenState = false, ...options }) {\n    super({\n      storage,\n      actionTypes,\n      ...options,\n    });\n    this._storage = storage;\n    this._notSyncOpenState = notSyncOpenState;\n    this._storageReducer = getStorageReducer(\n      this.actionTypes,\n      notSyncOpenState,\n    );\n    this._storageKey = 'callLogSection';\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: this._storageReducer,\n    });\n    this._reducer = getCallLogSectionReducer(\n      this.actionTypes,\n      notSyncOpenState,\n    );\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (typeof this._onInit === 'function') {\n        await this._onInit();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      if (typeof this._onReset === 'function') {\n        await this._onReset();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return this._storage.ready && this._readyCheckFunction() && this.pending;\n  }\n\n  _shouldReset() {\n    return (!this._storage.ready || !this._readyCheckFunction()) && this.ready;\n  }\n\n  _handleSuccess(identify, ...args) {\n    this.store.dispatch({\n      type: this.actionTypes.saveSuccess,\n      identify,\n    });\n    if (typeof this._onSuccess === 'function')\n      this._onSuccess(identify, ...args);\n  }\n\n  _handleError(identify, ...args) {\n    this.store.dispatch({\n      type: this.actionTypes.saveError,\n      identify,\n    });\n    if (typeof this._onError === 'function') this._onError(identify, ...args);\n  }\n\n  @proxify\n  async _showLogSection(identify: string) {\n    if (!this.show || identify !== this.currentIdentify) {\n      this.store.dispatch({\n        type: this.actionTypes.showLogSection,\n        identify,\n      });\n    }\n  }\n\n  @proxify\n  async _showLogNotification(identify: string) {\n    if (\n      !this.showNotification ||\n      identify !== this.currentNotificationIdentify\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.showLogNotification,\n        identify,\n      });\n    }\n  }\n\n  addLogHandler({\n    logFunction,\n    readyCheckFunction,\n    onUpdate,\n    onSuccess,\n    onError,\n  }) {\n    this._logFunction = ensureExist.call(this, logFunction, 'logFunction');\n    this._readyCheckFunction = ensureExist.call(\n      this,\n      readyCheckFunction,\n      'readyCheckFunction',\n    );\n    this._onUpdate = onUpdate;\n    this._onSuccess = onSuccess;\n    this._onError = onError;\n  }\n\n  @proxify\n  async updateCallLog(identify, ...args) {\n    this.store.dispatch({\n      type: this.actionTypes.update,\n      identify,\n    });\n    await this._onUpdate(identify, ...args);\n  }\n\n  @proxify\n  async saveCallLog(identify, ...args) {\n    if (\n      identify &&\n      (!this.callsMapping[identify] || !this.callsMapping[identify].isSaving)\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.saving,\n        identify,\n      });\n      try {\n        const result = await this._logFunction(identify, ...args);\n        if (result) {\n          this._handleSuccess(identify, ...args);\n        } else {\n          this._handleError(identify, ...args);\n        }\n        return result;\n      } catch (e) {\n        this._handleError(identify, ...args);\n        console.warn(e);\n      }\n    }\n    return null;\n  }\n\n  @proxify\n  async handleLogSection(identify: string) {\n    // prevent `isSameCall` for repeat run more time.\n    const isSameCall = this.currentIdentify === identify;\n    if (!this.show) {\n      // Preferentially show call log section.\n      await this._showLogSection(identify);\n    } else if (!this.notificationIsExpand && !isSameCall) {\n      // Check it to show log notification when the call log notification isn't expanded.\n      await this._showLogNotification(identify);\n    }\n  }\n\n  @proxify\n  async closeLogSection() {\n    if (this.show) {\n      this.store.dispatch({\n        type: this.actionTypes.closeLogSection,\n      });\n    }\n  }\n\n  @proxify\n  async discardAndHandleNotification() {\n    const currentNotificationIdentify = this.currentNotificationIdentify;\n    await this.closeLogNotification();\n    await this.closeLogSection();\n    await this._showLogSection(currentNotificationIdentify);\n  }\n\n  @proxify\n  async saveAndHandleNotification() {\n    const currentNotificationIdentify = this.currentNotificationIdentify;\n    const currentIdentify = this.currentIdentify;\n    await this.saveCallLog(currentIdentify);\n    await this.closeLogNotification();\n    await this.closeLogSection();\n    await this._showLogSection(currentNotificationIdentify);\n  }\n\n  @proxify\n  async closeLogNotification() {\n    if (this.showNotification) {\n      this.store.dispatch({\n        type: this.actionTypes.closeLogNotification,\n      });\n    }\n  }\n\n  // shrink the popover menu appear when click log button at call notificaiton\n  @proxify\n  async shrinkNotification() {\n    if (this.notificationIsExpand) {\n      this.store.dispatch({\n        type: this.actionTypes.shrinkNotification,\n      });\n    }\n  }\n\n  @proxify\n  async expandLogNotification() {\n    if (!this.show) {\n      await this._showLogSection(this.currentNotificationIdentify);\n      await this.closeLogNotification();\n    } else if (!this.notificationIsExpand) {\n      this.store.dispatch({\n        type: this.actionTypes.expandNotification,\n      });\n    }\n  }\n\n  @selector\n  calls = [\n    () => this.callsList,\n    () => this.callsMapping,\n    (list, mapping) => {\n      const a = list.map((identify) => mapping[identify]);\n      console.log('calls', a);\n      return a;\n    },\n  ];\n\n  /**\n   * Merge isSaving property from reducer to callsMapping\n   */\n  @selector\n  callsMapping: Mapping<CallLogSectionCallStatus> = [\n    () => this._callsMapping,\n    () => this._callsSavingStatus,\n    converge(mergeWith(flip(assoc('isSaving'))), [\n      identity,\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useWith(pick, [keys, identity]),\n    ]),\n  ] as any;\n\n  get callsList() {\n    return this._storage.getItem(this._storageKey).callsList;\n  }\n\n  /**\n   * Private calls mapping relationship without isSaving property\n   */\n  get _callsMapping() {\n    return this._storage.getItem(this._storageKey).callsMapping;\n  }\n\n  get _callsSavingStatus() {\n    return this.state.callsSavingStatus;\n  }\n\n  get _storageCurrentIdentify() {\n    return this._storage.getItem(this._storageKey).currentIdentify;\n  }\n\n  get _stateCurrentIdentify() {\n    return this.state.currentIdentify;\n  }\n\n  get currentIdentify() {\n    return this._notSyncOpenState\n      ? this._stateCurrentIdentify\n      : this._storageCurrentIdentify;\n  }\n\n  get show() {\n    return !!this.currentIdentify;\n  }\n\n  get _storageCurrentNotificationIdentify() {\n    return this._storage.getItem(this._storageKey).currentNotificationIdentify;\n  }\n\n  get _stateCurrentNotificationIdentify() {\n    return this.state.currentNotificationIdentify;\n  }\n\n  get currentNotificationIdentify() {\n    return this._notSyncOpenState\n      ? this._stateCurrentNotificationIdentify\n      : this._storageCurrentNotificationIdentify;\n  }\n\n  get showNotification() {\n    return !!this.currentNotificationIdentify;\n  }\n\n  get _storageNotificationIsExpand() {\n    return this._storage.getItem(this._storageKey).notificationIsExpand;\n  }\n\n  get _stateNotificationIsExpand() {\n    return this.state.notificationIsExpand;\n  }\n\n  get notificationIsExpand() {\n    return this._notSyncOpenState\n      ? this._stateNotificationIsExpand\n      : this._storageNotificationIsExpand;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n}\n"],"file":"index.js"}