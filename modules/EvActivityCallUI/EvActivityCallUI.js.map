{"version":3,"sources":["modules/EvActivityCallUI/EvActivityCallUI.ts"],"names":["EvActivityCallUI","name","deps","dep","optional","that","_deps","evTransferCall","allowTransferCall","evRequeueCall","allowRequeueCall","currentEvMainCall","agentRecording","pause","currentEvCall","callId","evCallDisposition","callsMapping","validated","required","locale","currentLocale","dispositionPickList","evCallMonitor","callIds","otherCallIds","callList","isMultipleCalls","evAuth","agentId","console","warn","enableCache","storageKey","isFirstTimeHandled","pickUpDirectly","_stopWatching","goToActivityCallPage","id","routerInteraction","push","goToActivityCallListPage","value","keypadValue","activeCallControl","onKeypadClick","match","pop","error","message","status","isKeypadOpen","resetKeypadStatus","onCallRinging","setIsRecording","isDefaultRecord","record","stopRecord","pauseRecord","_sendTabManager","tabManagerEvents","RECORD_PAUSED","alert","success","messageTypes","resumeRecord","RECORD_RESUME","saveStatus","disabled","scrollTo","dispositionId","notes","submit","ready","tabManagerEnabled","tabManager","_checkTabManagerEvent","callStatus","task","isEvCallDisposition","Object","hasOwnProperty","call","data","setDisposition","gate","gateGroupId","gateId","setStatus","selectedQueueGroupId","selectedGateId","stayOnCall","requeuing","changeTransferType","transferTypes","queue","_redirectTransferCall","type","resetTransferStatus","fetchAgentList","url","evCall","setDialoutStatus","dialoutStatuses","idle","getPageRole","backUrl","reset","activityCallId","pageRoles","activityCallLog","initSaveStatus","tabManagerEventSuccess","CALL_DISPOSITION_SUCCESS","logTypesEventSuccess","logTypes","logTypesEventFailure","CALL_DISPOSITION_FAILURE","callLogCreate","callLogMethods","create","CALL_LOG_CREATE_SUCCESS","CALL_LOG_CREATE_FAILURE","currentPath","indexOf","test","disposeCall","evAgentScript","scriptId","setCurrentCallScript","saveScriptResult","event","_dispositionSuccess","some","key","saveFields","changeFormStatus","_hasError","changeSavingStatus","saving","danger","ttl","payload","undefined","Error","saved","setTimeout","goBack","evWorkingState","setIsPendingDisposition","send","hangUp","session","sessionId","currentLog","showSmallCallControl","currentEvRawCall","endedCall","isInbound","isOnMute","evIntegratedSoftphone","muteActive","isOnHold","isOnActive","isInComingCall","smallCallControlSize","environment","isWide","currentCallControlPermission","disableDispose","disableLinks","disableTransfer","allowTransfer","disableInternalTransfer","allowInternalTransfer","disableHold","allowHoldCall","disableHangup","allowHangupCall","disableMute","evAgentSession","isIntegratedSoftphone","showMuteButton","showRecordCall","allowRecordControl","disableActive","isRecording","disableRecordControl","ivrAlertData","disablePauseRecord","allowPauseRecord","agentScriptData","recordPauseCount","timeStamp","onMute","mute","onUnmute","unmute","onHangup","onReject","reject","onHold","_onHoldOrUnHold","onUnHold","onActive","onRecord","onStopRecord","onPauseRecord","onRestartTimer","onResumeRecord","setKeypadIsOpen","setKeypadValue","onUpdateCallLog","_submitData","onCopySuccess","toUpperCase","info","action","goToRequeueCallPage","goToTransferCallPage","transferType","connectivityMonitor","connectivity","rateLimiter","throttling","enable","currentCall","allowHold","allowHangup","outdialDispositions","dispositions","map","item","label","disposition","callDisposition","callType","dnis","uii","ani","queueDts","fromNumber","toNumber","direction","from","phoneNumber","to","telephonyStatus","telephonySessionId","partyId","startTime","Date","getTime","offset","fromMatches","toMatches","activityMatches","currentSessionId","currentLogCall","isFailed","isAutoSave","isCreated","customLogFields","length","sort","maxLength","onChange","placeholder","i18n","getString","picklistOptions","enableScrollError","helperText","currentDisposition","find","noteRequired","requireNote","isHold","getMainCall","getActiveCallList","getIsAgentScript","onClick","openAgentScriptTab","baggage","i","ivrAlertSubject","ivrAlertBody","subject","body","RcUIModuleV2","storage","state"],"mappings":"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","sourcesContent":["import { keys } from 'ramda';\nimport { Unsubscribe } from 'redux';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport {\n  action,\n  computed,\n  RcUIModuleV2,\n  state,\n  storage,\n  watch,\n} from '@ringcentral-integration/core';\nimport { CallLogPanelProps } from '@ringcentral-integration/widgets/components/CallLogPanel';\n\nimport {\n  dialoutStatuses,\n  EvTransferType,\n  logTypes,\n  messageTypes,\n  MessageTypes,\n  tabManagerEvents,\n  transferTypes,\n} from '../../enums';\nimport {\n  callLogMethods,\n  CallLogMethods,\n  EvActivityCallUIFunctions,\n  EvActivityCallUIProps,\n  EvCurrentLog,\n  saveStatus,\n  SaveStatus,\n} from '../../interfaces/EvActivityCallUI.interface';\nimport {\n  EvAgentScriptData,\n  EvCallData,\n  EvIvrData,\n} from '../../interfaces/EvData.interface';\nimport { EvBaggage } from '../../lib/EvClient';\nimport { ActivityCallUI, Deps } from './EvActivityCallUI.interface';\nimport i18n from './i18n';\n\ntype FormState = {\n  validated?: Partial<EvActivityCallUI['validated']>;\n  required?: Partial<EvActivityCallUI['required']>;\n  disabled?: Partial<EvActivityCallUI['disabled']>;\n};\n\n@Module({\n  name: 'EvActivityCallUI',\n  deps: [\n    'Locale',\n    'Alert',\n    'ActiveCallControl',\n    'EvCallMonitor',\n    'EvCall',\n    'EvAgentScript',\n    'EvRequeueCall',\n    'EvTransferCall',\n    'EvCallDisposition',\n    'EvWorkingState',\n    'EvAgentSession',\n    'EvIntegratedSoftphone',\n    'RouterInteraction',\n    'ConnectivityMonitor',\n    'RateLimiter',\n    'Environment',\n    'Storage',\n    'EvAuth',\n    { dep: 'TabManager', optional: true },\n    { dep: 'EvActivityCallUIOptions', optional: true },\n  ],\n})\nclass EvActivityCallUI<T = {}>\n  extends RcUIModuleV2<Deps & T>\n  implements ActivityCallUI\n{\n  public isFirstTimeHandled = false;\n\n  /** Is the call pick up directly */\n  pickUpDirectly = true;\n  protected _stopWatching: Unsubscribe = null;\n\n  protected openAgentScriptTab() {\n    console.warn('this should be implement in extend module');\n  }\n\n  constructor(deps: Deps & T) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'EvActivityCallUI',\n    });\n  }\n\n  @storage\n  @state\n  validated = {\n    dispositionId: true,\n    notes: true,\n  };\n\n  @storage\n  @state\n  required = {\n    notes: false,\n  };\n\n  @storage\n  @state\n  disabled: any = {};\n\n  @storage\n  @state\n  saveStatus: SaveStatus | CallLogMethods = saveStatus.submit;\n\n  @storage\n  @state\n  scrollTo: string = null;\n\n  @storage\n  @state\n  isKeypadOpen: boolean = false;\n\n  @storage\n  @state\n  keypadValue: string = '';\n\n  @action\n  setKeypadValue(value: string) {\n    this.keypadValue = value;\n    try {\n      this._deps.activeCallControl.onKeypadClick(value.match(/.$/).pop());\n    } catch (error) {\n      console.error(error?.message);\n    }\n  }\n\n  @action\n  setKeypadIsOpen(status: boolean) {\n    this.isKeypadOpen = status;\n  }\n\n  get isDefaultRecord() {\n    return this.agentRecording?.default === 'ON';\n  }\n\n  @action\n  resetKeypadStatus() {\n    this.keypadValue = '';\n    this.isKeypadOpen = false;\n  }\n\n  onInitOnce() {\n    this.resetKeypadStatus();\n\n    this._deps.evCallMonitor.onCallRinging(() => {\n      this._stopWatching = watch(\n        this,\n        () => this.currentEvMainCall,\n        (currentEvMainCall: EvCallData) => {\n          if (currentEvMainCall) {\n            this._deps.activeCallControl.setIsRecording(this.isDefaultRecord);\n          }\n          this._stopWatching();\n          this._stopWatching = null;\n        },\n      );\n    });\n  }\n\n  async onRecord() {\n    try {\n      await this._deps.activeCallControl.record();\n    } catch (error) {\n      console.error(error?.message);\n    }\n  }\n\n  async onStopRecord() {\n    try {\n      await this._deps.activeCallControl.stopRecord();\n    } catch (error) {\n      console.error(error?.message);\n    }\n  }\n\n  async onPauseRecord() {\n    try {\n      await this._deps.activeCallControl.pauseRecord();\n      this._sendTabManager(tabManagerEvents.RECORD_PAUSED);\n\n      this._deps.alert.success({\n        message: messageTypes.RECORD_PAUSED,\n      });\n    } catch (error) {\n      console.error(error?.message);\n    }\n  }\n\n  async onRestartTimer() {\n    try {\n      await this._deps.activeCallControl.pauseRecord();\n    } catch (error) {\n      console.error(error?.message);\n    }\n  }\n\n  onResumeRecord() {\n    this._deps.activeCallControl.resumeRecord();\n    this._deps.alert.success({\n      message: messageTypes.RECORD_RESUME,\n    });\n  }\n\n  get callId() {\n    return this._deps.evCall.activityCallId;\n  }\n\n  get disableLinks() {\n    return (\n      !this._deps.connectivityMonitor.connectivity ||\n      this._deps.rateLimiter.throttling\n    );\n  }\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?.enable;\n  }\n\n  get currentEvCall() {\n    return this._deps.evCall.currentCall;\n  }\n\n  // TODO: should check with outbound call\n  get isInComingCall() {\n    return this._deps.evCall.isInbound && !this.pickUpDirectly;\n    // currentSession.callStatus === telephonyStatuses.ringing\n  }\n\n  // transferCall and requeueCall are two parts of transfer menu\n  get allowTransfer() {\n    return (\n      this._deps.evTransferCall.allowTransferCall ||\n      this._deps.evRequeueCall.allowRequeueCall\n    );\n  }\n\n  @computed((that: EvActivityCallUI) => [\n    that._deps.evTransferCall.allowTransferCall,\n    that._deps.evRequeueCall.allowRequeueCall,\n    that.currentEvMainCall,\n    that.agentRecording?.agentRecording,\n    that.agentRecording?.pause,\n  ])\n  get currentCallControlPermission() {\n    return {\n      allowTransferCall: this._deps.evTransferCall.allowTransferCall,\n      allowRequeueCall: this._deps.evRequeueCall.allowRequeueCall,\n      allowHoldCall: this.currentEvMainCall?.allowHold,\n      allowHangupCall: this.currentEvMainCall?.allowHangup,\n      allowRecordControl: this.agentRecording?.agentRecording,\n      allowPauseRecord: typeof this.agentRecording?.pause === 'number',\n    };\n  }\n\n  @computed((that: EvActivityCallUI) => [that.currentEvCall])\n  get dispositionPickList() {\n    return (\n      this.currentEvCall?.outdialDispositions?.dispositions?.map((item) => ({\n        ...item,\n        label: item.disposition,\n        value: item.dispositionId,\n      })) || []\n    );\n  }\n\n  // TODO add `callDisposition` in CallLog\n  @computed((that: EvActivityCallUI) => [\n    that.callId,\n    that.currentEvCall,\n    that._deps.evCallDisposition.callsMapping[that.callId],\n    that.validated,\n    that.required,\n    that._deps.locale.currentLocale,\n    that.dispositionPickList,\n  ])\n  get activityCallLog(): EvCurrentLog {\n    const {\n      callId,\n      currentEvCall: currentCall,\n\n      validated,\n      required,\n    } = this;\n\n    const callDisposition =\n      this._deps.evCallDisposition.callsMapping[this.callId];\n\n    if (!currentCall) {\n      return undefined;\n    }\n    const { callType, dnis, uii, ani, queueDts, agentId } = currentCall;\n\n    // TODO confirm about  dialDest or dnis?\n    const fromNumber = callType === 'OUTBOUND' ? dnis : ani;\n    // TODO confirm about  dialDest or dnis?\n    const toNumber = callType === 'OUTBOUND' ? ani : dnis;\n    const { dispositionId, notes } = callDisposition || {};\n\n    const dispositionPickList = this.dispositionPickList;\n\n    return {\n      currentEvRawCall: currentCall,\n      // the call which maps for rc component\n      call: {\n        id: uii,\n        direction: callType,\n        from: {\n          phoneNumber: fromNumber,\n          name: fromNumber,\n        },\n        to: {\n          phoneNumber: toNumber,\n          name: toNumber,\n        },\n        telephonyStatus: 'CallConnected', // TODO handle with call state and agent state\n        sessionId: currentCall.session.sessionId,\n        telephonySessionId: uii,\n        partyId: agentId,\n        startTime: new Date(queueDts).getTime(),\n        offset: 0,\n        fromMatches: [],\n        toMatches: [],\n        activityMatches: [],\n      },\n      currentSessionId: callId,\n      // TODO: this will be remove when api can using.\n      currentLogCall: {\n        isFailed: false,\n        isAutoSave: false,\n        isCreated: false,\n        phoneNumber: currentCall.ani,\n      },\n      customLogFields:\n        dispositionPickList.length === 0\n          ? []\n          : [\n              {\n                label: 'Notes',\n                sort: 3,\n                type: 'textarea',\n                value: 'notes',\n                maxLength: 32000,\n                required: required.notes,\n                error: !validated.notes,\n                onChange: (value: string) => {\n                  if (required.notes) {\n                    this.changeFormStatus({ validated: { notes: !!value } });\n                  } else {\n                    this.changeFormStatus({ validated: { notes: true } });\n                  }\n                },\n              },\n              {\n                label: 'Disposition',\n                sort: 5,\n                type: 'picklist',\n                value: 'dispositionId',\n                placeholder: i18n.getString(\n                  'pleaseSelect',\n                  this._deps.locale.currentLocale,\n                ),\n                required: true,\n                picklistOptions: dispositionPickList,\n                enableScrollError: true,\n                error: !validated.dispositionId,\n                helperText: !validated.dispositionId\n                  ? i18n.getString(\n                      'dispositionError',\n                      this._deps.locale.currentLocale,\n                    )\n                  : undefined,\n                onChange: (value: string) => {\n                  const currentDisposition = dispositionPickList.find(\n                    (item) => item.value === value,\n                  );\n\n                  const noteRequired =\n                    currentDisposition && currentDisposition.requireNote;\n\n                  this.changeFormStatus({\n                    validated: {\n                      dispositionId: !!value,\n                      notes: !noteRequired || (noteRequired && !!notes),\n                    },\n                    required: {\n                      notes: noteRequired,\n                    },\n                  });\n                },\n              },\n            ],\n      task: {\n        dispositionId,\n        notes,\n      },\n    };\n  }\n\n  @computed((that: EvActivityCallUI) => [\n    that.currentEvCall,\n    that.currentEvMainCall,\n  ])\n  get callStatus() {\n    let status: EvActivityCallUIProps['status'] = 'active';\n\n    if (this.currentEvCall?.endedCall) {\n      status = 'callEnd';\n    } else if (this.currentEvMainCall?.isHold) {\n      status = 'onHold';\n    }\n    return status;\n  }\n\n  @computed((that: EvActivityCallUI) => [that.currentEvCall])\n  get currentEvMainCall() {\n    return this.currentEvCall\n      ? this._deps.activeCallControl.getMainCall(this.currentEvCall.uii)\n      : null;\n  }\n\n  @computed((that: EvActivityCallUI) => [\n    that.callId,\n    that._deps.evCallMonitor.callIds,\n    that._deps.evCallMonitor.otherCallIds,\n    that._deps.evCallMonitor.callsMapping,\n  ])\n  get callList() {\n    const { callIds, otherCallIds, callsMapping } = this._deps.evCallMonitor;\n\n    return this._deps.evCallMonitor.getActiveCallList(\n      callIds,\n      otherCallIds,\n      callsMapping,\n      this.callId,\n    );\n  }\n\n  @computed((that: EvActivityCallUI) => [that.callList])\n  get isMultipleCalls() {\n    return this.callList.length > 2;\n  }\n\n  @computed((that: EvActivityCallUI) => [\n    that.isMultipleCalls,\n    that.callList,\n    that._deps.evAuth.agentId,\n    that.currentEvMainCall,\n  ])\n  get isOnHold() {\n    const { isMultipleCalls, callList, currentEvMainCall } = this;\n    if (isMultipleCalls) {\n      return !!callList.find(\n        (call) =>\n          !(call.session.agentId === this._deps.evAuth.agentId) &&\n          !!call.isHold,\n      );\n    }\n    return currentEvMainCall?.isHold;\n  }\n\n  @computed((that: EvActivityCallUI) => [that.currentEvCall])\n  get agentScriptData() {\n    const call = this.currentEvCall;\n    let agentScriptData: EvAgentScriptData = null;\n    if (\n      this._deps.environment.isWide &&\n      this._deps.evAgentScript.getIsAgentScript(call)\n    ) {\n      agentScriptData = { onClick: () => this.openAgentScriptTab() };\n    }\n    return agentScriptData;\n  }\n\n  @computed((that: EvActivityCallUI) => [that.currentEvCall])\n  get ivrAlertData() {\n    const call = this.currentEvCall;\n    const ivrAlertData: EvIvrData[] = [];\n\n    if (call?.baggage) {\n      for (let i = 1; i <= 3; i++) {\n        const ivrAlertSubject =\n          call.baggage[`ivrAlertSubject_${i}` as keyof EvBaggage];\n        const ivrAlertBody =\n          call.baggage[`ivrAlertBody_${i}` as keyof EvBaggage];\n        if (ivrAlertSubject || ivrAlertBody)\n          ivrAlertData.push({\n            subject: ivrAlertSubject || '',\n            body: ivrAlertBody || '',\n          });\n      }\n    }\n    return ivrAlertData as EvIvrData[];\n  }\n\n  @action\n  changeSavingStatus(status: SaveStatus | CallLogMethods) {\n    this.saveStatus = status;\n  }\n\n  @action\n  protected changeFormStatus({ validated, required, disabled }: FormState) {\n    if (validated) {\n      this.validated = {\n        ...this.validated,\n        ...validated,\n      };\n    }\n    if (required) {\n      this.required = {\n        ...this.required,\n        ...required,\n      };\n    }\n    if (disabled) {\n      this.disabled = {\n        ...this.disabled,\n        ...disabled,\n      };\n    }\n  }\n\n  @action\n  setScrollTo(id: string) {\n    this.scrollTo = id;\n  }\n\n  @action\n  reset() {\n    this.validated = {\n      dispositionId: true,\n      notes: true,\n    };\n    this.required = {\n      notes: false,\n    };\n    this.disabled = {};\n    this.saveStatus = saveStatus.submit;\n    this.resetKeypadStatus();\n  }\n\n  onStateChange() {\n    if (this.ready && this.tabManagerEnabled && this._deps.tabManager.ready) {\n      this._checkTabManagerEvent();\n\n      // * when call end reset keypad status\n      if (this.callStatus === 'callEnd') {\n        this.resetKeypadStatus();\n      }\n    }\n  }\n\n  onUpdateCallLog(\n    { task }: Parameters<CallLogPanelProps['onUpdateCallLog']>[0],\n    id: Parameters<CallLogPanelProps['onUpdateCallLog']>[1],\n  ) {\n    const isEvCallDisposition =\n      Object.hasOwnProperty.call(task, 'dispositionId') ||\n      Object.hasOwnProperty.call(task, 'notes');\n    if (isEvCallDisposition) {\n      const data = {\n        ...this._deps.evCallDisposition.callsMapping[id],\n        ...task,\n      };\n      this._deps.evCallDisposition.setDisposition(id, {\n        dispositionId: data.dispositionId,\n        notes: data.notes,\n      });\n    }\n  }\n\n  goToActivityCallPage = (id: string = this.callId) => {\n    this._deps.routerInteraction.push(`/activityCallLog/${id}`);\n  };\n\n  goToActivityCallListPage = (id: string = this.callId) => {\n    this._deps.routerInteraction.push(`/activityCallLog/${id}/activeCallList`);\n  };\n\n  goToRequeueCallPage() {\n    const { gateGroupId, gateId } =\n      this._deps.evCallMonitor.callsMapping[this.callId].gate;\n    this._deps.evRequeueCall.setStatus({\n      selectedQueueGroupId: gateGroupId,\n      selectedGateId: gateId,\n      stayOnCall: false,\n      requeuing: false,\n    });\n    this._deps.evTransferCall.changeTransferType(transferTypes.queue);\n    this._redirectTransferCall('/transferCall');\n  }\n\n  goToTransferCallPage(type: EvTransferType) {\n    this._deps.evTransferCall.resetTransferStatus();\n    this._deps.evTransferCall.fetchAgentList();\n    this._redirectTransferCall(`/transferCall/${type}`);\n  }\n\n  private _redirectTransferCall(url: string = '') {\n    this._deps.routerInteraction.push(`/activityCallLog/${this.callId}${url}`);\n  }\n\n  goBack() {\n    // set status to 'idle' in case of EvCallMonitor does not emit ENDED\n    this._deps.evCall.setDialoutStatus(dialoutStatuses.idle);\n\n    const { backUrl } = this.getPageRole();\n    this._deps.routerInteraction.push(backUrl);\n    this.reset();\n    this._deps.evCall.activityCallId = null;\n  }\n\n  private getPageRole(): {\n    initSaveStatus: SaveStatus | CallLogMethods;\n    backUrl: string;\n    tabManagerEventSuccess: string;\n    logTypesEventSuccess: string;\n    logTypesEventFailure: string;\n  } {\n    const pageRoles = {\n      activityCallLog: {\n        initSaveStatus: saveStatus.submit,\n        backUrl: '/dialer',\n        tabManagerEventSuccess: tabManagerEvents.CALL_DISPOSITION_SUCCESS,\n        logTypesEventSuccess: logTypes.CALL_DISPOSITION_SUCCESS,\n        logTypesEventFailure: logTypes.CALL_DISPOSITION_FAILURE,\n      },\n      callLogCreate: {\n        initSaveStatus: callLogMethods.create,\n        backUrl: '/history',\n        tabManagerEventSuccess: tabManagerEvents.CALL_DISPOSITION_SUCCESS,\n        logTypesEventSuccess: logTypes.CALL_LOG_CREATE_SUCCESS,\n        logTypesEventFailure: logTypes.CALL_LOG_CREATE_FAILURE,\n      },\n    };\n\n    const { currentPath } = this._deps.routerInteraction;\n    if (currentPath.indexOf('/activityCallLog') > -1) {\n      return pageRoles.activityCallLog;\n    }\n    if (/^\\/history\\/callLog\\/.*\\/create$/.test(currentPath)) {\n      return pageRoles.callLogCreate;\n    }\n\n    // return activityCallLog by default\n    return pageRoles.activityCallLog;\n  }\n\n  async disposeCall() {\n    this._deps.evCallDisposition.disposeCall(this.callId);\n\n    const { evAgentScript } = this._deps;\n    const call = this.currentEvCall;\n    // evAgentScript.isDisplayAgentScript &&\n    if (call.scriptId) {\n      evAgentScript.setCurrentCallScript(null);\n      evAgentScript.saveScriptResult(call);\n    }\n  }\n\n  private _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    if (event) {\n      // const data = event.args[0];\n      switch (event.name) {\n        case tabManagerEvents.CALL_DISPOSITION_SUCCESS:\n        case tabManagerEvents.CALL_LOG_CREATE_SUCCESS:\n          this._dispositionSuccess();\n          break;\n        case tabManagerEvents.RECORD_PAUSED:\n          this._deps.alert.success({\n            message: messageTypes.RECORD_PAUSED,\n          });\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private _hasError() {\n    return keys(this.validated).some((key) => {\n      return !this.validated[key];\n    });\n  }\n\n  private async _submitData(id: string) {\n    try {\n      const saveFields = this._deps.evCallDisposition.callsMapping[id];\n      if (saveFields) {\n        this.changeFormStatus({\n          validated: {\n            dispositionId: !!saveFields.dispositionId,\n            notes:\n              !this.required.notes || (saveFields.notes && this.required.notes),\n          },\n        });\n      }\n\n      if (this._hasError()) {\n        return;\n      }\n      this.changeSavingStatus(saveStatus.saving);\n      await this.disposeCall();\n\n      const { tabManagerEventSuccess } = this.getPageRole();\n      this._sendTabManager(tabManagerEventSuccess);\n      this._dispositionSuccess();\n    } catch (e) {\n      const { logTypesEventFailure, initSaveStatus } = this.getPageRole();\n      this._deps.alert.danger({\n        message: logTypesEventFailure,\n        ttl: 0,\n        payload: e?.error?.status === false ? e?.error?.message : undefined,\n      });\n      this.changeSavingStatus(initSaveStatus);\n      console.error(e);\n      throw new Error(`Failed to save log.`);\n    }\n  }\n\n  private _dispositionSuccess() {\n    this.changeSavingStatus(saveStatus.saved);\n\n    const { logTypesEventSuccess } = this.getPageRole();\n    this._deps.alert.success({\n      message: logTypesEventSuccess,\n    });\n    // delay for animation with loading ui.\n    setTimeout(() => this.goBack(), 1000);\n\n    this._deps.evWorkingState.setIsPendingDisposition(false);\n  }\n\n  private _onHoldOrUnHold(type: 'hold' | 'unhold') {\n    if (this.isMultipleCalls) {\n      return this.goToActivityCallListPage();\n    }\n    this._deps.activeCallControl[type]();\n  }\n\n  private _sendTabManager(event: string, value?: any) {\n    this._deps.tabManager?.send(event, value);\n  }\n\n  async onHangup() {\n    await this._deps.activeCallControl.hangUp(\n      this.currentEvCall.session.sessionId,\n    );\n    this.changeSavingStatus(saveStatus.submit);\n  }\n\n  get agentRecording() {\n    return this.currentEvMainCall?.agentRecording;\n  }\n\n  getUIProps({ id }: { id: string }): EvActivityCallUIProps {\n    this._deps.evCall.activityCallId = id;\n\n    return {\n      scrollTo: this.scrollTo,\n      currentLog: this.activityCallLog,\n      showSmallCallControl: !this.activityCallLog?.currentEvRawCall?.endedCall,\n      currentLocale: this._deps.locale.currentLocale,\n      currentEvCall: this.currentEvCall,\n      saveStatus: this.saveStatus,\n      status: this.callStatus,\n      isInbound: this._deps.evCall.isInbound,\n      isOnMute: this._deps.evIntegratedSoftphone.muteActive,\n      isOnHold: this.isOnHold,\n      isOnActive: this.isMultipleCalls,\n      isInComingCall: this.isInComingCall,\n      smallCallControlSize: this._deps.environment.isWide ? 'medium' : 'small',\n      currentCallControlPermission: this.currentCallControlPermission,\n      disableDispose:\n        this.disableLinks || this.saveStatus === saveStatus.saving,\n      disableTransfer:\n        this.disableLinks || this.isInComingCall || !this.allowTransfer,\n      disableInternalTransfer:\n        this.disableLinks ||\n        this.isInComingCall ||\n        !this.allowTransfer ||\n        !this._deps.evTransferCall.allowInternalTransfer,\n      disableHold:\n        this.disableLinks ||\n        this.isInComingCall ||\n        !this.currentCallControlPermission.allowHoldCall,\n      disableHangup:\n        this.disableLinks || !this.currentCallControlPermission.allowHangupCall,\n      disableMute:\n        !this._deps.evAgentSession.isIntegratedSoftphone || this.disableLinks,\n      showMuteButton: this._deps.evAgentSession.isIntegratedSoftphone,\n      showRecordCall:\n        this.currentCallControlPermission.allowRecordControl ||\n        this.isDefaultRecord,\n      disableActive: this.disableLinks,\n      isRecording: this._deps.activeCallControl.isRecording,\n      disableRecordControl:\n        this.disableLinks ||\n        !this.currentCallControlPermission.allowRecordControl,\n      ivrAlertData: this.ivrAlertData,\n      disablePauseRecord:\n        this.disableLinks ||\n        !this.currentCallControlPermission.allowPauseRecord,\n      agentScriptData: this.agentScriptData,\n      recordPauseCount: this.agentRecording?.pause,\n      timeStamp: this._deps.activeCallControl.timeStamp,\n      isKeypadOpen: this.isKeypadOpen,\n      keypadValue: this.keypadValue,\n    };\n  }\n\n  getUIFunctions(): EvActivityCallUIFunctions {\n    return {\n      goBack: () => this.goBack(),\n      onMute: () => this._deps.activeCallControl.mute(),\n      onUnmute: () => this._deps.activeCallControl.unmute(),\n      onHangup: () => this.onHangup(),\n      onReject: () => this._deps.activeCallControl.reject(),\n      onHold: () => this._onHoldOrUnHold('hold'),\n      onUnHold: () => this._onHoldOrUnHold('unhold'),\n      onActive: () => this.goToActivityCallListPage(),\n      onRecord: () => this.onRecord(),\n      onStopRecord: () => this.onStopRecord(),\n      onPauseRecord: () => this.onPauseRecord(),\n      onRestartTimer: () => this.onRestartTimer(),\n      onResumeRecord: () => this.onResumeRecord(),\n      setKeypadIsOpen: (status) => this.setKeypadIsOpen(status),\n      setKeypadValue: (value) => this.setKeypadValue(value),\n      onUpdateCallLog: (data, id) => this.onUpdateCallLog(data, id),\n      disposeCall: async () => {\n        if (this.saveStatus === saveStatus.saved) {\n          return this.goBack();\n        }\n        await this._submitData(this.callId);\n      },\n      onCopySuccess: (name) => {\n        name = name.toUpperCase();\n        this._deps.alert.info({\n          message: messageTypes[`COPY_${name}_SUCCESS` as MessageTypes],\n          action: '',\n        });\n      },\n      goToRequeueCallPage: () => this.goToRequeueCallPage(),\n      goToTransferCallPage: (transferType: EvTransferType) =>\n        this.goToTransferCallPage(transferType),\n    };\n  }\n}\nexport { EvActivityCallUI };\n"],"file":"EvActivityCallUI.js"}