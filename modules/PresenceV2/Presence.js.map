{"version":3,"sources":["modules/PresenceV2/Presence.ts"],"names":["DEFAULT_TTL","DEFAULT_POLLING_INTERVAL","DEFAULT_FETCH_DELAY","DEFAULT_MAX_FETCH_DELAY","presenceRegExp","detailedPresenceRegExp","acceptCallQueueToggles","dndStatus","takeAllCalls","doNotAcceptDepartmentCalls","Presence","name","deps","dep","optional","data","activeCalls","calls","_debouncedFetchData","_stopWatchingConnectivity","_stopWatchingSubscription","presenceOptions","ttl","pollingInterval","_source","DataSource","key","cleanOnReset","fetchFunction","_deps","client","service","platform","get","_endPoint","response","json","meetingStatus","presenceStatus","telephonyStatus","userStatus","_processRawActiveCalls","totalActiveCalls","Date","now","lastDndStatus","_lastDndStatus","sequence","_sequence","readyCheckFunction","auth","ready","loggedIn","subscription","extensionFeatures","connectivityMonitor","dataFetcherV2","permissionCheckFunction","_checkPermission","register","fn","fetchData","threshold","_fetchDelay","maxThreshold","_maxFetchDelay","features","ReadPresenceStatus","available","timestamp","length","activeCall","existingCall","find","call","sessionId","normalizedCall","startTime","offset","Math","min","message","regExp","_detailed","disableCache","tabManager","active","test","event","body","_updateData","_calculateLastDndStatus","activeCallsLength","subscribe","connectivity","_handleConnectivity","_handleSubscription","cancel","newDndStatus","doNotAcceptAnyCalls","params","EditPresenceStatus","ownerId","put","updateData","_getUpdateStatusParams","_update","busy","offline","presenceData","setAvailable","setBusy","setDoNotDisturb","setInvisible","index","findIndex","queueStatus","subscriptionFilters","detailedPresence","presence","detailed","max","fetchDelay","maxFetchDelay","DataFetcherV2Consumer","proxify"],"mappings":"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","sourcesContent":["import { filter, map } from 'ramda';\nimport { Unsubscribe } from 'redux';\n\nimport {\n  DetailedExtensionPresenceEvent,\n  GetPresenceInfo,\n  PresenceInfoResponse,\n} from '@rc-ex/core/definitions';\nimport { computed, watch } from '@ringcentral-integration/core';\nimport { ObjectMapValue } from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport { presenceStatus } from '../../enums/presenceStatus.enum';\nimport { subscriptionFilters } from '../../enums/subscriptionFilters';\nimport { PresenceInfoModel } from '../../interfaces/Presence.model';\nimport {\n  isEnded,\n  normalizeFromTo,\n  normalizeStartTime,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\nimport { debounce, DebouncedFunction } from '../../lib/debounce-throttle';\nimport { Module } from '../../lib/di';\nimport { proxify } from '../../lib/proxy/proxify';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport { dndStatus } from '../Presence/dndStatus';\nimport { removeIntermediateCall } from '../Presence/getPresenceReducer';\nimport { Deps, UpdatePresenceParams } from './Presence.interface';\n\nexport const DEFAULT_TTL = 62 * 1000;\nexport const DEFAULT_POLLING_INTERVAL = 3 * 60 * 1000;\nexport const DEFAULT_FETCH_DELAY = 2 * 1000;\nexport const DEFAULT_MAX_FETCH_DELAY = 4 * 1000;\n\nexport const presenceRegExp = /.*\\/presence(\\?.*)?/;\nexport const detailedPresenceRegExp =\n  /.*\\/presence\\?detailedTelephonyState=true&sipData=true/;\n\nconst acceptCallQueueToggles = [\n  dndStatus.takeAllCalls,\n  dndStatus.doNotAcceptDepartmentCalls,\n];\n\n@Module({\n  name: 'Presence',\n  deps: [\n    'Auth',\n    'Client',\n    'ConnectivityMonitor',\n    'DataFetcherV2',\n    'ExtensionFeatures',\n    'Subscription',\n    { dep: 'TabManager', optional: true },\n    { dep: 'PresenceOptions', optional: true },\n  ],\n})\nexport class Presence extends DataFetcherV2Consumer<Deps, PresenceInfoModel> {\n  protected _debouncedFetchData: DebouncedFunction<Presence['fetchData']>;\n\n  protected _stopWatchingConnectivity: Unsubscribe = null;\n  protected _stopWatchingSubscription: Unsubscribe = null;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    const presenceOptions = deps.presenceOptions ?? {};\n    const { ttl = DEFAULT_TTL, pollingInterval = DEFAULT_POLLING_INTERVAL } =\n      presenceOptions;\n    this._source = new DataSource({\n      ...presenceOptions,\n      key: 'presence',\n      cleanOnReset: true,\n      ttl,\n      pollingInterval,\n      fetchFunction: async (): Promise<PresenceInfoModel> => {\n        const response = await this._deps.client.service\n          .platform()\n          .get(this._endPoint);\n        const data = await response.json();\n        const {\n          dndStatus = this.dndStatus,\n          meetingStatus = this.meetingStatus,\n          presenceStatus = this.presenceStatus,\n          telephonyStatus = this.telephonyStatus,\n          userStatus = this.userStatus,\n        } = data;\n        const activeCalls = this._processRawActiveCalls(\n          data.activeCalls,\n          data.totalActiveCalls,\n          Date.now(),\n        );\n        return {\n          lastDndStatus: this._lastDndStatus,\n          sequence: this._sequence,\n          activeCalls,\n          dndStatus,\n          meetingStatus,\n          presenceStatus,\n          telephonyStatus,\n          userStatus,\n        };\n      },\n      readyCheckFunction: () =>\n        this._deps.auth.ready &&\n        this._deps.auth.loggedIn &&\n        this._deps.subscription.ready &&\n        this._deps.extensionFeatures.ready &&\n        this._deps.connectivityMonitor.ready &&\n        this._deps.dataFetcherV2.ready,\n      permissionCheckFunction: () => this._checkPermission(),\n    });\n    this._deps.dataFetcherV2.register(this._source);\n    this._debouncedFetchData = debounce({\n      fn: this.fetchData,\n      threshold: this._fetchDelay,\n      maxThreshold: this._maxFetchDelay,\n    });\n  }\n\n  get _endPoint() {\n    return this._detailed\n      ? subscriptionFilters.detailedPresence\n      : subscriptionFilters.presence;\n  }\n\n  get _detailed() {\n    return !!(this._deps.presenceOptions?.detailed ?? true);\n  }\n\n  get _fetchDelay() {\n    return Math.max(\n      0,\n      this._deps.presenceOptions?.fetchDelay ?? DEFAULT_FETCH_DELAY,\n    );\n  }\n\n  get _maxFetchDelay() {\n    return Math.max(\n      this._fetchDelay,\n      this._deps.presenceOptions?.maxFetchDelay ?? DEFAULT_MAX_FETCH_DELAY,\n    );\n  }\n\n  protected _checkPermission() {\n    return (\n      this._deps.extensionFeatures.features?.ReadPresenceStatus?.available ??\n      false\n    );\n  }\n\n  _processRawActiveCalls(\n    activeCalls: GetPresenceInfo['activeCalls'] = [],\n    totalActiveCalls: number = 0,\n    timestamp: number,\n  ) {\n    if (activeCalls.length < totalActiveCalls) {\n      return this.activeCalls;\n    }\n    return map((activeCall) => {\n      const existingCall = this.activeCalls.find(\n        (call) => call.sessionId === activeCall.sessionId,\n      );\n      if (!existingCall) {\n        const normalizedCall = normalizeStartTime(normalizeFromTo(activeCall));\n        const startTime = normalizedCall.startTime || timestamp;\n        const offset = Math.min(timestamp - startTime, 0);\n        return {\n          ...normalizedCall,\n          startTime,\n          offset,\n        };\n      }\n      return {\n        ...existingCall,\n        ...normalizeStartTime(normalizeFromTo(activeCall)),\n      };\n    }, removeIntermediateCall([], activeCalls));\n  }\n\n  protected _handleSubscription(message: DetailedExtensionPresenceEvent) {\n    const regExp = this._detailed ? detailedPresenceRegExp : presenceRegExp;\n    if (\n      this.ready &&\n      (this._source.disableCache || (this._deps.tabManager?.active ?? true)) &&\n      regExp.test(message.event) &&\n      message.body\n    ) {\n      if (message.body.sequence && message.body.sequence < this._sequence) {\n        return;\n      }\n      const timestamp = Date.now();\n      const {\n        sequence = this._sequence,\n        dndStatus = this.dndStatus,\n        meetingStatus = this.meetingStatus,\n        presenceStatus = this.presenceStatus,\n        telephonyStatus = this.telephonyStatus,\n        userStatus = this.userStatus,\n      } = message.body;\n      const activeCalls = this._processRawActiveCalls(\n        message.body.activeCalls,\n        message.body.totalActiveCalls,\n        timestamp,\n      );\n      this._updateData(\n        {\n          sequence,\n          activeCalls,\n          dndStatus,\n          meetingStatus,\n          presenceStatus,\n          telephonyStatus,\n          userStatus,\n          lastDndStatus: this._calculateLastDndStatus(dndStatus),\n        },\n        timestamp,\n      );\n      /**\n       * as pointed out by Igor in https://jira.ringcentral.com/browse/PLA-33391,\n       * when the real calls count larger than the active calls returned by the pubnub,\n       * we need to pulling the calls manually.\n       */\n      const activeCallsLength = message.body.activeCalls?.length ?? 0;\n      const totalActiveCalls = message.body.totalActiveCalls ?? 0;\n      if (this._detailed && activeCallsLength < totalActiveCalls) {\n        this._debouncedFetchData();\n      }\n    }\n  }\n\n  onInit() {\n    this._deps.subscription.subscribe([this._endPoint]);\n    this._stopWatchingConnectivity = watch(\n      this,\n      () => this._deps.connectivityMonitor.connectivity,\n      (connectivity) => this._handleConnectivity(connectivity),\n    );\n    this._stopWatchingSubscription = watch(\n      this,\n      () => this._deps.subscription.message,\n      (message) => this._handleSubscription(message),\n    );\n  }\n\n  protected _handleConnectivity(connectivity: boolean) {\n    if (\n      this.ready &&\n      (this._source.disableCache || (this._deps.tabManager?.active ?? true)) &&\n      connectivity &&\n      this._checkPermission()\n    ) {\n      this.fetchData();\n    }\n  }\n\n  onReset() {\n    this._stopWatchingConnectivity?.();\n    this._stopWatchingConnectivity = null;\n    this._stopWatchingSubscription?.();\n    this._stopWatchingSubscription = null;\n    this._debouncedFetchData.cancel();\n  }\n\n  get _lastDndStatus() {\n    return this.data?.lastDndStatus ?? null;\n  }\n\n  get _sequence() {\n    return this.data?.sequence ?? 0;\n  }\n\n  @computed(({ data }: Presence) => [data])\n  get activeCalls() {\n    return this.data?.activeCalls ?? [];\n  }\n\n  @computed(({ activeCalls }: Presence) => [activeCalls])\n  get calls() {\n    return filter(\n      (call) => !isEnded(call),\n      removeInboundRingOutLegs(this.activeCalls),\n    );\n  }\n\n  _calculateLastDndStatus(\n    newDndStatus: ObjectMapValue<typeof dndStatus>,\n  ): ObjectMapValue<typeof dndStatus> {\n    return newDndStatus !== this.dndStatus &&\n      newDndStatus !== dndStatus.doNotAcceptAnyCalls\n      ? newDndStatus\n      : this._lastDndStatus;\n  }\n\n  @proxify\n  async _update(params: UpdatePresenceParams) {\n    if (!this._deps.extensionFeatures.features?.EditPresenceStatus?.available) {\n      return;\n    }\n    const ownerId = this._deps.auth.ownerId;\n    const response = await this._deps.client.service\n      .platform()\n      .put('/restapi/v1.0/account/~/extension/~/presence', params);\n    const data: PresenceInfoResponse = await response.json();\n\n    if (ownerId === this._deps.auth.ownerId) {\n      const newDndStatus = ((data.dndStatus !== 'Unknown' && data.dndStatus) ??\n        this.data.dndStatus) as ObjectMapValue<typeof dndStatus>;\n      this._updateData({\n        presenceStatus: data.presenceStatus,\n        userStatus: data.userStatus,\n        telephonyStatus: data.telephonyStatus,\n        dndStatus: newDndStatus,\n        meetingStatus: data.meetingStatus,\n        lastDndStatus: this._calculateLastDndStatus(newDndStatus),\n      });\n    }\n  }\n\n  @proxify\n  async _updateData(data: PresenceInfoModel, timestamp = Date.now()) {\n    this._deps.dataFetcherV2.updateData(\n      this._source,\n      {\n        ...this.data,\n        ...data,\n      },\n      timestamp,\n    );\n  }\n\n  _getUpdateStatusParams(userStatus: GetPresenceInfo['userStatus']) {\n    const params: UpdatePresenceParams = {\n      dndStatus: this.dndStatus,\n      userStatus,\n    };\n    if (\n      params.dndStatus !== dndStatus.takeAllCalls &&\n      params.dndStatus !== dndStatus.doNotAcceptDepartmentCalls\n    ) {\n      params.dndStatus = this._lastDndStatus ?? dndStatus.takeAllCalls;\n    }\n    return params;\n  }\n\n  async setAvailable() {\n    if (\n      this.userStatus === presenceStatus.available &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.available);\n    await this._update(params);\n  }\n\n  async setBusy() {\n    if (\n      this.userStatus === presenceStatus.busy &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.busy);\n    await this._update(params);\n  }\n\n  async setDoNotDisturb() {\n    if (this.dndStatus === dndStatus.doNotAcceptAnyCalls) {\n      return;\n    }\n    const params = {\n      dndStatus: dndStatus.doNotAcceptAnyCalls,\n    };\n    await this._update(params);\n  }\n\n  async setInvisible() {\n    if (\n      this.userStatus === presenceStatus.offline &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.offline);\n    await this._update(params);\n  }\n\n  async setPresence(\n    presenceData:\n      | ObjectMapValue<typeof presenceStatus>\n      | ObjectMapValue<typeof dndStatus>,\n  ) {\n    switch (presenceData) {\n      case presenceStatus.available:\n        await this.setAvailable();\n        break;\n      case presenceStatus.busy:\n        await this.setBusy();\n        break;\n      case dndStatus.doNotAcceptAnyCalls:\n        await this.setDoNotDisturb();\n        break;\n      case presenceStatus.offline:\n        await this.setInvisible();\n        break;\n      default:\n        await this.setAvailable();\n        break;\n    }\n  }\n\n  async toggleAcceptCallQueueCalls() {\n    const index = acceptCallQueueToggles.findIndex(\n      (queueStatus) => this.dndStatus === queueStatus,\n    );\n\n    if (index > -1) {\n      return this._update({ dndStatus: acceptCallQueueToggles[+!index] });\n    }\n  }\n\n  @computed(({ calls }: Presence) => [calls])\n  get sessionIdList() {\n    return map((call) => call.sessionId, this.calls);\n  }\n\n  get telephonyStatus() {\n    return this.data?.telephonyStatus ?? null;\n  }\n\n  get dndStatus() {\n    return this.data?.dndStatus ?? null;\n  }\n\n  get userStatus() {\n    return this.data?.userStatus ?? null;\n  }\n\n  get presenceStatus() {\n    return this.data?.presenceStatus ?? null;\n  }\n\n  get meetingStatus() {\n    return this.data?.meetingStatus ?? null;\n  }\n\n  get presenceOption() {\n    // doNotDisturb\n    if (this.dndStatus === dndStatus.doNotAcceptAnyCalls) {\n      return dndStatus.doNotAcceptAnyCalls;\n    }\n\n    // busy\n    if (this.userStatus === presenceStatus.busy) {\n      return presenceStatus.busy;\n    }\n\n    // invisible\n    if (this.userStatus === presenceStatus.offline) {\n      return presenceStatus.offline;\n    }\n\n    // available\n    return presenceStatus.available;\n  }\n\n  async fetchData() {\n    this._debouncedFetchData.cancel();\n    return this._deps.dataFetcherV2.fetchData(this._source);\n  }\n}\n"],"file":"Presence.js"}