{"version":3,"sources":["modules/ConversationsUI/ConversationsUI.ts"],"names":["ConversationsUI","name","deps","dep","optional","showTitle","enableContactFallback","showGroupNumberName","_deps","brand","locale","conversations","contactMatcher","dateTimeFormat","regionSettings","appFeatures","call","conversationLogger","connectivityMonitor","rateLimiter","messageStore","connectivityManager","extensionInfo","currentLocale","currentSiteCode","site","code","isMultipleSiteEnabled","pagingConversations","areaCode","countryCode","disableLinks","isOfflineMode","isVoipOnlyMode","throttling","disableCallButton","isWebphoneUnavailableMode","isWebphoneInitializing","disableClickToDial","isIdle","outboundSmsPermission","hasOutboundSMSPermission","internalSmsPermission","hasInternalSMSPermission","composeTextPermission","hasComposeTextPermission","loggingMap","showSpinner","ready","searchInput","autoLog","typeFilter","textUnreadCounts","voiceUnreadCounts","faxUnreadCounts","readTextPermission","hasReadTextPermission","readVoicemailPermission","hasVoicemailPermission","readFaxPermission","hasReadFaxPermission","loadingNextPage","loadingOldConversations","enableCDC","isCDCEnabled","showViewContact","dateTimeFormatter","dialerRoute","onCreateContact","onLogConversation","onViewContact","conversationDetailRoute","composeTextRoute","previewFaxMessages","onFaxDownload","dialerUI","routerInteraction","contactDetailsUI","composeText","contactSearch","formatDateTime","contact","id","type","showContactDetails","direct","phoneNumber","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","isCallingEnabled","recipient","push","onClickToCall","fromType","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","redirect","options","logConversation","onSearchInputChange","e","updateSearchInput","currentTarget","value","showConversationDetail","conversationId","replace","readMessage","readMessages","markMessage","unreadMessage","unmarkMessage","onUnmarkMessages","goToComposeText","updateTypeFilter","deleteMessage","deleteConversation","uri","window","open","loadNextPage","onUnmount","currentPage","resetCurrentPage","RcUIModuleV2"],"mappings":"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","sourcesContent":["import { Module } from '@ringcentral-integration/commons/lib/di';\nimport {\n  RcUIModuleV2,\n  UIFunctions,\n  UIProps,\n} from '@ringcentral-integration/core';\n\nimport {\n  ConversationsContainerProps,\n  ConversationsPanelProps,\n  Deps,\n} from './ConversationsUI.interface';\n\n@Module({\n  name: 'ConversationsUI',\n  deps: [\n    'Brand',\n    'Locale',\n    'Conversations',\n    'DateTimeFormat',\n    'RegionSettings',\n    'AppFeatures',\n    'Call',\n    'ConnectivityMonitor',\n    'RateLimiter',\n    'MessageStore',\n    'ConnectivityManager',\n    'ExtensionInfo',\n    'RouterInteraction',\n    'ComposeText',\n    'ContactSearch',\n    { dep: 'DialerUI', optional: true },\n    { dep: 'ContactDetailsUI', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ConversationLogger', optional: true },\n    { dep: 'ConversationsUIOptions', optional: true },\n  ],\n})\nexport class ConversationsUI<T> extends RcUIModuleV2<Deps & T> {\n  constructor(deps: Deps & T) {\n    super({\n      deps,\n    });\n  }\n\n  getUIProps({\n    showTitle = false,\n    enableContactFallback = false,\n    showGroupNumberName = false,\n  }: ConversationsContainerProps): UIProps<ConversationsPanelProps> {\n    const {\n      brand,\n      locale,\n      conversations,\n      contactMatcher,\n      dateTimeFormat,\n      regionSettings,\n      appFeatures,\n      call,\n      conversationLogger,\n      connectivityMonitor,\n      rateLimiter,\n      messageStore,\n      connectivityManager,\n      extensionInfo,\n    } = this._deps;\n    return {\n      showTitle,\n      enableContactFallback,\n      showGroupNumberName,\n      brand: brand.name,\n      currentLocale: locale.currentLocale,\n      currentSiteCode: extensionInfo?.site?.code ?? '',\n      isMultipleSiteEnabled: extensionInfo?.isMultipleSiteEnabled ?? false,\n      conversations: conversations.pagingConversations,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n      disableLinks:\n        connectivityManager.isOfflineMode ||\n        connectivityManager.isVoipOnlyMode ||\n        rateLimiter.throttling,\n      disableCallButton:\n        connectivityManager.isOfflineMode ||\n        connectivityManager.isWebphoneUnavailableMode ||\n        connectivityManager.isWebphoneInitializing ||\n        rateLimiter.throttling,\n      disableClickToDial: !(call && call.isIdle),\n      outboundSmsPermission: appFeatures.hasOutboundSMSPermission,\n      internalSmsPermission: appFeatures.hasInternalSMSPermission,\n      composeTextPermission: appFeatures.hasComposeTextPermission,\n      loggingMap: conversationLogger && conversationLogger.loggingMap,\n      showSpinner: !(\n        locale.ready &&\n        conversations.ready &&\n        (!contactMatcher || contactMatcher.ready) &&\n        dateTimeFormat.ready &&\n        regionSettings.ready &&\n        appFeatures.ready &&\n        connectivityMonitor.ready &&\n        rateLimiter.ready &&\n        (!call || call.ready) &&\n        (!conversationLogger || conversationLogger.ready)\n      ),\n      searchInput: conversations.searchInput,\n      autoLog: !!(conversationLogger && conversationLogger.autoLog),\n      typeFilter: conversations.typeFilter,\n      textUnreadCounts: messageStore.textUnreadCounts,\n      voiceUnreadCounts: messageStore.voiceUnreadCounts,\n      faxUnreadCounts: messageStore.faxUnreadCounts,\n      readTextPermission: appFeatures.hasReadTextPermission,\n      readVoicemailPermission: appFeatures.hasVoicemailPermission,\n      readFaxPermission: appFeatures.hasReadFaxPermission,\n      loadingNextPage: conversations.loadingOldConversations,\n      enableCDC: appFeatures.isCDCEnabled,\n    };\n  }\n\n  getUIFunctions({\n    showViewContact = true,\n    dateTimeFormatter,\n    dialerRoute = '/dialer',\n    onCreateContact,\n    onLogConversation,\n    onViewContact,\n    conversationDetailRoute = '/conversations/{conversationId}',\n    composeTextRoute = '/composeText',\n    previewFaxMessages,\n    onFaxDownload,\n  }: ConversationsContainerProps): UIFunctions<ConversationsPanelProps> {\n    const {\n      dateTimeFormat,\n      conversations,\n      messageStore,\n      conversationLogger,\n      contactMatcher,\n      call,\n      dialerUI,\n      routerInteraction,\n      contactDetailsUI,\n      composeText,\n      contactSearch,\n      appFeatures,\n    } = this._deps;\n\n    return {\n      dateTimeFormatter:\n        dateTimeFormatter ??\n        ((...args) => dateTimeFormat.formatDateTime(...args)),\n      onViewContact: showViewContact\n        ? onViewContact ||\n          (({ contact: { id, type } }) => {\n            if (contactDetailsUI) {\n              contactDetailsUI.showContactDetails({ id, type, direct: true });\n            }\n          })\n        : null,\n      onCreateContact: onCreateContact\n        ? async ({ phoneNumber, name, entityType }) => {\n            const hasMatchNumber = await contactMatcher.hasMatchNumber({\n              phoneNumber,\n              ignoreCache: true,\n            });\n            // console.debug('confirm hasMatchNumber:', hasMatchNumber);\n            if (!hasMatchNumber) {\n              await onCreateContact({ phoneNumber, name, entityType });\n              await contactMatcher.forceMatchNumber({ phoneNumber });\n            }\n          }\n        : undefined,\n      onClickToDial:\n        dialerUI && appFeatures.isCallingEnabled\n          ? (recipient) => {\n              if (call.isIdle) {\n                routerInteraction.push(dialerRoute);\n                // for track router\n                messageStore.onClickToCall({ fromType: recipient.fromType });\n                dialerUI.call({ recipient });\n              }\n            }\n          : undefined,\n      onClickToSms: appFeatures.hasComposeTextPermission\n        ? (contact, isDummyContact = false) => {\n            if (routerInteraction) {\n              routerInteraction.push(composeTextRoute);\n            }\n            // if contact autocomplete, if no match fill the number only\n            if (contact.name && contact.phoneNumber && isDummyContact) {\n              composeText.updateTypingToNumber(contact.name);\n              contactSearch.search({ searchString: contact.name });\n            } else {\n              composeText.addToNumber(contact);\n              if (composeText.typingToNumber === contact.phoneNumber) {\n                composeText.cleanTypingToNumber();\n              }\n            }\n            // for track\n            messageStore.onClickToSMS();\n          }\n        : undefined,\n      onLogConversation:\n        onLogConversation ||\n        (conversationLogger &&\n          (async ({ redirect = true, ...options }) => {\n            await conversationLogger.logConversation({\n              ...options,\n              redirect,\n            });\n          })),\n      onSearchInputChange(e) {\n        conversations.updateSearchInput(e.currentTarget.value);\n      },\n      showConversationDetail(conversationId) {\n        routerInteraction.push(\n          conversationDetailRoute.replace('{conversationId}', conversationId),\n        );\n      },\n      readMessage(conversationId) {\n        messageStore.readMessages(conversationId);\n      },\n      markMessage(conversationId) {\n        messageStore.unreadMessage(conversationId);\n      },\n      unmarkMessage(conversationId) {\n        messageStore.readMessages(conversationId);\n        messageStore.onUnmarkMessages();\n      },\n      goToComposeText: () => routerInteraction.push(composeTextRoute),\n      updateTypeFilter: (type) => conversations.updateTypeFilter(type),\n      deleteMessage(conversationId) {\n        conversations.deleteConversation(conversationId);\n      },\n      previewFaxMessages(uri, conversationId) {\n        if (!previewFaxMessages) {\n          window.open(uri);\n        } else {\n          previewFaxMessages(uri);\n        }\n        messageStore.readMessages(conversationId);\n      },\n      async loadNextPage() {\n        await conversations.loadNextPage();\n      },\n      onUnmount() {\n        if (conversations.currentPage > 2) {\n          conversations.resetCurrentPage();\n        }\n      },\n      onFaxDownload,\n    };\n  }\n}\n"],"file":"ConversationsUI.js"}