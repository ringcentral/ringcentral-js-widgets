{"version":3,"file":"ConversationsUI.interface.js","names":[],"sources":["modules/ConversationsUI/ConversationsUI.interface.ts"],"sourcesContent":["import type messageTypes from '@ringcentral-integration/commons/enums/messageTypes';\nimport type { Entity } from '@ringcentral-integration/commons/interfaces/Entity.interface';\nimport type { AppFeatures } from '@ringcentral-integration/commons/modules/AppFeatures';\nimport type { Brand } from '@ringcentral-integration/commons/modules/Brand';\nimport type { Call } from '@ringcentral-integration/commons/modules/Call';\nimport type { ComposeText } from '@ringcentral-integration/commons/modules/ComposeText';\nimport type { ConnectivityMonitor } from '@ringcentral-integration/commons/modules/ConnectivityMonitor';\nimport type { ContactMatcher } from '@ringcentral-integration/commons/modules/ContactMatcher';\nimport type { ContactSearch } from '@ringcentral-integration/commons/modules/ContactSearch';\nimport type { ConversationLogger } from '@ringcentral-integration/commons/modules/ConversationLogger';\nimport type {\n  Conversations,\n  CurrentConversation,\n  FilteredConversation,\n} from '@ringcentral-integration/commons/modules/Conversations';\nimport type {\n  DateTimeFormat,\n  FormatDateTimeOptions,\n} from '@ringcentral-integration/commons/modules/DateTimeFormat';\nimport type { ExtensionInfo } from '@ringcentral-integration/commons/modules/ExtensionInfo';\nimport type { Locale } from '@ringcentral-integration/commons/modules/Locale';\nimport type { MessageStore } from '@ringcentral-integration/commons/modules/MessageStore';\nimport type { RateLimiter } from '@ringcentral-integration/commons/modules/RateLimiter';\nimport type { RegionSettings } from '@ringcentral-integration/commons/modules/RegionSettings';\nimport type { ObjectMapValue } from '@ringcentral-integration/core/lib/ObjectMap';\nimport type { AccountInfo } from '@ringcentral-integration/commons/modules/AccountInfo';\nimport type { Message } from '@ringcentral-integration/commons/interfaces/MessageStore.model';\n\nimport type { ReactNode } from 'react';\nimport type { ContactDetailsUI } from '../ContactDetailsUI';\nimport type { RouterInteraction } from '../RouterInteraction';\n\nexport interface ConversationsUIOptions {\n  //\n}\n\nexport interface Deps {\n  appFeatures: AppFeatures;\n  brand: Brand;\n  locale: Locale;\n  conversations: Conversations;\n  contactMatcher: ContactMatcher;\n  dateTimeFormat: DateTimeFormat;\n  regionSettings: RegionSettings;\n  call: Call;\n  conversationLogger: ConversationLogger;\n  connectivityMonitor: ConnectivityMonitor;\n  rateLimiter: RateLimiter;\n  messageStore: MessageStore;\n  // TODO: fix type in `../ConnectivityManager`\n  connectivityManager: any;\n  extensionInfo: ExtensionInfo;\n  // TODO: fix type in `../DialerUI`\n  dialerUI: any;\n  routerInteraction: RouterInteraction;\n  contactDetailsUI?: ContactDetailsUI;\n  composeText: ComposeText;\n  contactSearch: ContactSearch;\n  conversationsUIOptions?: ConversationsUIOptions;\n  accountInfo: AccountInfo;\n}\n\nexport interface OnCreateContactOptions {\n  phoneNumber: string;\n  name: string;\n  entityType: string;\n}\n\nexport interface OnLogConversationOptions {\n  conversationId: string;\n  correspondentEntity: Entity;\n  redirect: boolean;\n}\n\nexport interface OnViewContactOptions {\n  contact: { id: string; type: string };\n  contactMatches: Entity[];\n  phoneNumber?: string;\n  matchEntitiesIds?: string[];\n}\n\nexport interface ConversationsContainerProps {\n  showTitle?: boolean;\n  enableContactFallback?: boolean;\n  showGroupNumberName?: boolean;\n  showViewContact?: boolean;\n  dateTimeFormatter?(options: Partial<FormatDateTimeOptions>): string;\n  dialerRoute?: string;\n  onCreateContact?(options: OnCreateContactOptions): Promise<void> | void;\n  onLogConversation?(options: OnLogConversationOptions): Promise<void>;\n  onViewContact?(options: OnViewContactOptions): void;\n  conversationDetailRoute?: string;\n  composeTextRoute?: string;\n  previewFaxMessages(uri: string): void;\n  onFaxDownload?(options: { uri: string }): void;\n  renderExtraButton?(\n    conversation: CurrentConversation,\n    options: RenderExtraButtonOptions,\n  ): React.ReactElement;\n  renderContactName?: (options: {\n    conversation: CurrentConversation;\n    phoneNumber: string;\n    unread: boolean;\n    defaultContactDisplay: JSX.Element;\n  }) => ReactNode;\n}\n\nexport type OnClickToDialOptions = Entity & {\n  phoneNumber: string;\n  fromType: string;\n};\n\nexport type OnClickToSmsOptions = Entity & {\n  phoneNumber: string;\n};\n\nexport interface OnFaxDownloadOptions {\n  uri: string;\n}\n\nexport interface RenderExtraButtonOptions {\n  logConversation: (options: {\n    redirect?: boolean;\n    selected: number;\n    prefill?: boolean;\n  }) => Promise<void> | void;\n  isLogging: boolean;\n}\n\n// TODO: remove to ConversationsPanel folder with TypeScript\nexport interface ConversationsPanelProps {\n  showTitle: boolean;\n  enableContactFallback: boolean;\n  showGroupNumberName: boolean;\n  brand: string;\n  currentLocale: string;\n  currentSiteCode: string;\n  isMultipleSiteEnabled: boolean;\n  conversations: FilteredConversation[];\n  areaCode: string;\n  countryCode: string;\n  disableLinks: boolean;\n  disableCallButton: boolean;\n  disableClickToDial: boolean;\n  outboundSmsPermission: boolean;\n  internalSmsPermission: boolean;\n  composeTextPermission: boolean;\n  loggingMap: Record<string, boolean>;\n  showSpinner: boolean;\n  searchInput: string;\n  autoLog: boolean;\n  typeFilter: ObjectMapValue<typeof messageTypes>;\n  textUnreadCounts: number;\n  voiceUnreadCounts: number;\n  faxUnreadCounts: number;\n  readTextPermission: boolean;\n  readVoicemailPermission: boolean;\n  readFaxPermission: boolean;\n  loadingNextPage: boolean;\n  showChooseEntityModal?: boolean;\n  shouldLogSelectRecord?: boolean;\n  createEntityTypes?: string[];\n  dateTimeFormatter: (options: Partial<FormatDateTimeOptions>) => string;\n  onViewContact: (options: OnViewContactOptions) => void;\n  onCreateContact: (options: OnCreateContactOptions) => void | Promise<void>;\n  onClickToDial?: (options: OnClickToDialOptions) => void;\n  onClickToSms?: (\n    contact: OnClickToSmsOptions,\n    isDummyContact?: boolean,\n  ) => void;\n  onLogConversation: (options: OnLogConversationOptions) => Promise<void>;\n  onSearchInputChange: (options: React.ChangeEvent<HTMLInputElement>) => void;\n  showConversationDetail: (conversationId: string) => void;\n  readMessage: (conversationId: string) => void;\n  markMessage: (conversationId: string) => void;\n  unmarkMessage: (conversationId: string) => void;\n  goToComposeText: () => Promise<void> | void;\n  updateTypeFilter: (\n    type: ObjectMapValue<typeof messageTypes>,\n  ) => Promise<void>;\n  deleteMessage: (conversationId: string) => void;\n  previewFaxMessages: (uri: string, conversationId: string) => void;\n  loadNextPage(): Promise<void> | void;\n  onUnmount: () => void;\n  renderExtraButton?(\n    conversation: CurrentConversation,\n    options: RenderExtraButtonOptions,\n  ): React.ReactElement;\n  onFaxDownload: (options: OnFaxDownloadOptions) => void;\n  onSelectContact?: (options: {\n    correspondentEntity: Entity;\n    conversation: CurrentConversation;\n  }) => Promise<void> | void;\n  contactPlaceholder?: string;\n  dropdownClassName?: string;\n  renderContactList?: (entity: { name: string; labelType: string }) => any;\n  enableCDC: boolean;\n  maxExtensionNumberLength: number;\n  renderContactName?(options: {\n    conversation: CurrentConversation;\n    phoneNumber: string;\n    unread: boolean;\n    defaultContactDisplay: JSX.Element;\n  }): ReactNode;\n  externalHasEntity: (conversation: FilteredConversation) => boolean;\n  externalViewEntity: (conversation: FilteredConversation) => void;\n  renderActionMenuExtraButton?: (conversation: Message) => ReactNode;\n}\n"],"mappings":""}