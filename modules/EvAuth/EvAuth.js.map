{"version":3,"sources":["modules/EvAuth/EvAuth.ts"],"names":["DEFAULT_COUNTRIES","EvAuth","name","deps","dep","optional","that","inboundSettings","availableQueues","availableRequeueQueues","agentSettings","callerIds","agentConfig","applicationSettings","availableCountries","_deps","locale","currentLocale","_","connected","agent","trackEvents","loginAgent","authenticateResponse","agents","map","agentId","rcUserId","undefined","tabManager","enable","length","storageKey","enableGlobalCache","connecting","_eventEmitter","EventEmitter","canUserLogoutFn","_logout","auth","logout","dismissAllAlert","setNotAuth","_logoutByOtherTab","_authenticateResponseWatcher","_agentConfigWatcher","token","accessToken","authenticateWithToken","rcAccessToken","shouldEmitAuthSuccess","authenticateRes","openSocketWithSelectedAgentId","addAfterLoggedInHandler","console","log","clearAgentId","addBeforeLogoutHandler","loginStatus","AUTH_SUCCESS","LOGIN_SUCCESS","asyncAllTabs","NOT_AUTH","tabManagerEnabled","send","tabManagerEvents","LOGGED_OUT","loggedIn","evSubscription","subscribe","EvCallbackTypes","LOGOUT","_emitLogoutBefore","alert","info","message","messageTypes","FORCE_LOGOUT","newReconnect","ready","_checkTabManagerEvent","block","next","cb","once","sendLogoutTabEvent","logoutAgent","logoutAgentResponse","setConnectionData","evClient","callback","on","LOGOUT_BEFORE","isBlock","closeSocket","fn","tokenType","initSDK","getAndHandleAuthenticateResponse","setAgent","setAuthSuccess","_emitAuthSuccess","type","NO_AGENT","CONNECT_TIMEOUT","UNEXPECTED_AGENT","warning","danger","CONNECT_ERROR","syncOtherTabs","retryOpenSocket","getAgentConfig","Promise","resolve","LOGIN_PHASE_1","selectedAgentId","EvTypeError","openSocket","openSocketResult","error","refreshToken","access_token","openSocketRes","OPEN_SOCKET_ERROR","OPEN_SOCKET","setLoginSuccess","_emitLoginSuccess","INVALID_BROWSER","emit","event","isFreshLogin","outboundManualDefaultRingtime","availableSkillProfiles","queues","skillProfile","agentPermissions","gateId","gateName","i18n","getString","description","number","callerId","phoneNumber","countryCode","countriesUsaCan","filter","countryId","includes","countryName","RcModuleV2","globalStorage","state","action"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { Unsubscribe } from 'redux';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport sleep from '@ringcentral-integration/commons/lib/sleep';\nimport {\n  action,\n  computed,\n  globalStorage,\n  RcModuleV2,\n  state,\n  track,\n} from '@ringcentral-integration/core';\nimport format from '@ringcentral-integration/phone-number/lib/format';\n\nimport { loginStatus, messageTypes, tabManagerEvents } from '../../enums';\nimport { EvAgentConfig, EvAgentData } from '../../lib/EvClient';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums';\nimport { EvTypeError } from '../../lib/EvTypeError';\nimport { sortByName } from '../../lib/sortByName';\nimport { trackEvents } from '../../lib/trackEvents';\nimport {\n  Auth,\n  AuthenticateWithTokenType,\n  Deps,\n  State,\n} from './EvAuth.interface';\nimport i18n from './i18n';\n\nconst DEFAULT_COUNTRIES = ['USA', 'CAN'];\n\n@Module({\n  name: 'EvAuth',\n  deps: [\n    'EvClient',\n    'Auth',\n    'Block',\n    'Alert',\n    'Locale',\n    'RouterInteraction',\n    'EvSubscription',\n    'TabManager',\n    'GlobalStorage',\n    { dep: 'EvAuthOptions', optional: true },\n  ],\n})\nclass EvAuth extends RcModuleV2<Deps> implements Auth {\n  public connecting?: boolean;\n\n  private _eventEmitter = new EventEmitter();\n\n  public canUserLogoutFn: () => Promise<boolean> = async () => true;\n\n  private _logout = async () => {\n    await this._deps.auth.logout({ dismissAllAlert: false });\n    this.setNotAuth(true);\n  };\n\n  private _logoutByOtherTab = false;\n\n  private _authenticateResponseWatcher: Unsubscribe = null;\n  private _agentConfigWatcher: Unsubscribe = null;\n\n  get tabManagerEnabled() {\n    return this._deps.tabManager?.enable;\n  }\n\n  get isOnlyOneAgent() {\n    return this.agent?.authenticateResponse.agents.length === 1;\n  }\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      storageKey: 'EvAuth',\n      enableGlobalCache: true,\n    });\n    this._deps.auth.addAfterLoggedInHandler(() => {\n      console.log('addAfterLoggedInHandler~~');\n      this.clearAgentId();\n    });\n\n    this._deps.auth.addBeforeLogoutHandler(() => {\n      console.log('addBeforeLogoutHandler~~');\n      this.clearAgentId();\n    });\n  }\n\n  @globalStorage\n  @state\n  connected = false;\n\n  @globalStorage\n  @state\n  agent: EvAgentData = null;\n\n  @globalStorage\n  @state\n  agentId = '';\n\n  @action\n  setAgentId(agentId: string) {\n    this.agentId = agentId;\n  }\n\n  get isFreshLogin() {\n    return this._deps.auth.isFreshLogin;\n  }\n\n  get agentConfig() {\n    return this.agent?.agentConfig || null;\n  }\n\n  get authenticateResponse() {\n    return this.agent?.authenticateResponse || null;\n  }\n\n  get agentSettings() {\n    return this.agentConfig?.agentSettings;\n  }\n\n  get outboundManualDefaultRingtime() {\n    return this.agentSettings?.outboundManualDefaultRingtime;\n  }\n\n  get inboundSettings() {\n    return (\n      this.agentConfig.inboundSettings || {\n        availableQueues: [] as Array<undefined>,\n        availableSkillProfiles: [] as Array<undefined>,\n        queues: [] as Array<undefined>,\n        skillProfile: {} as any,\n        availableRequeueQueues: [] as Array<undefined>,\n      }\n    );\n  }\n\n  get assignedQueue() {\n    return this.inboundSettings.queues;\n  }\n\n  get agentPermissions() {\n    return this.agentConfig?.agentPermissions;\n  }\n\n  @computed((that: EvAuth) => [that.inboundSettings.availableQueues])\n  get availableQueues() {\n    return [\n      {\n        gateId: '-1',\n        gateName: i18n.getString('default', this._deps.locale.currentLocale),\n      },\n      ...sortByName([...this.inboundSettings.availableQueues], 'gateName'),\n    ];\n  }\n\n  @computed((that: EvAuth) => [that.inboundSettings.availableRequeueQueues])\n  get availableRequeueQueues() {\n    return sortByName(\n      [...this.inboundSettings.availableRequeueQueues],\n      'groupName',\n    );\n  }\n\n  @computed((that: EvAuth) => [that.agentSettings.callerIds])\n  get callerIds() {\n    return [\n      {\n        description: i18n.getString('default', this._deps.locale.currentLocale),\n        number: '-1',\n      },\n      ...this.agentSettings.callerIds.map((callerId) => {\n        const number =\n          format({\n            phoneNumber: callerId.number,\n            countryCode: 'US',\n          }) || callerId.number;\n        return {\n          ...callerId,\n          number,\n        };\n      }),\n    ];\n  }\n\n  @computed((that: EvAuth) => [\n    that.agentConfig.applicationSettings.availableCountries,\n    that._deps.locale.currentLocale,\n  ])\n  get availableCountries() {\n    const { availableCountries } = this.agentConfig?.applicationSettings;\n    // The default Engage Voice service area is `USA` and `CAN` with `+1` international code.\n    const countriesUsaCan = availableCountries.filter(({ countryId }) =>\n      DEFAULT_COUNTRIES.includes(countryId),\n    );\n    return countriesUsaCan.length > 0\n      ? countriesUsaCan\n      : [\n          {\n            countryId: 'USA',\n            countryName: i18n.getString('us', this._deps.locale.currentLocale),\n          },\n        ];\n  }\n\n  @track((_: EvAuth, { connected, agent }: State) => {\n    return [\n      trackEvents.loginAgent,\n      connected\n        ? {\n            'agentId(s)': agent.authenticateResponse?.agents?.map(\n              (agent) => agent.agentId,\n            ),\n            'userId(s)': agent.authenticateResponse?.agents?.map(\n              (agent) => agent.rcUserId,\n            ),\n          }\n        : undefined,\n    ];\n  })\n  @action\n  setConnectionData({ connected, agent }: State) {\n    // ! agent must be set before connected\n    this.agent = agent;\n    this.connected = connected;\n  }\n\n  @action\n  setAgent(agent: EvAgentData) {\n    this.agent = agent;\n  }\n\n  @action\n  clearAgentId() {\n    this.agentId = '';\n  }\n\n  @state\n  loginStatus: string = null;\n\n  @action\n  setAuthSuccess() {\n    this.loginStatus = loginStatus.AUTH_SUCCESS;\n  }\n\n  @action\n  setLoginSuccess() {\n    this.loginStatus = loginStatus.LOGIN_SUCCESS;\n  }\n\n  get isEvLogged() {\n    return this.loginStatus === loginStatus.LOGIN_SUCCESS;\n  }\n\n  @action\n  setNotAuth(asyncAllTabs = false) {\n    this.loginStatus = loginStatus.NOT_AUTH;\n    if (asyncAllTabs && this.tabManagerEnabled) {\n      this._deps.tabManager.send(tabManagerEvents.LOGGED_OUT);\n    }\n  }\n\n  _shouldInit() {\n    return super._shouldInit() && this._deps.auth.loggedIn && this.connected;\n  }\n\n  onInitOnce() {\n    this._deps.evSubscription.subscribe(EvCallbackTypes.LOGOUT, async () => {\n      this._emitLogoutBefore();\n\n      // if that is logout by same browser that will only trigger emit\n      // if there is logout by other browser, that need redirect to home page,\n      if (!this._logoutByOtherTab) {\n        this._deps.alert.info({\n          message: messageTypes.FORCE_LOGOUT,\n        });\n\n        this._logoutByOtherTab = false;\n\n        await this.newReconnect();\n      }\n    });\n  }\n\n  async onStateChange() {\n    // here not need check this.ready, because that should work when not login\n    if (this.tabManagerEnabled && this._deps.tabManager.ready) {\n      await this._checkTabManagerEvent();\n    }\n\n    if (\n      this._deps.auth.loggedIn &&\n      this.loginStatus !== loginStatus.AUTH_SUCCESS &&\n      this.loginStatus !== loginStatus.LOGIN_SUCCESS &&\n      !this.connecting\n    ) {\n      this.connecting = true;\n      // when login make sure the logoutByOtherTab is false\n      this._logoutByOtherTab = false;\n      await this._deps.block.next(async () => {\n        if (this.agentId) {\n          await this.loginAgent();\n        } else {\n          await this.authenticateWithToken();\n        }\n      });\n    }\n  }\n\n  onceLogout(cb: () => any) {\n    return this._deps.evSubscription.once(EvCallbackTypes.LOGOUT, cb);\n  }\n\n  async logout() {\n    if (!(await this.canUserLogoutFn())) {\n      return;\n    }\n    console.log('logout~~');\n\n    const agentId = this.agentId;\n\n    this.sendLogoutTabEvent();\n\n    await this._deps.block.next(this._logout);\n\n    const logoutAgentResponse = await this.logoutAgent(agentId);\n\n    // TODO: error handle when logout fail\n    // TODO: when failed need tell other tab not logout => this._deps.tabManager.send(tabManagerEvents.LOGOUT);\n    if (!logoutAgentResponse.message || logoutAgentResponse.message !== 'OK') {\n      console.log('logoutAgent failed');\n    }\n    this.setConnectionData({ connected: false, agent: null });\n  }\n\n  sendLogoutTabEvent() {\n    this._emitLogoutBefore();\n    if (this.tabManagerEnabled) {\n      this._deps.tabManager.send(tabManagerEvents.LOGOUT);\n    }\n  }\n\n  logoutAgent(agentId: string = this.agentId) {\n    return this._deps.evClient.logoutAgent(agentId);\n  }\n\n  beforeAgentLogout(callback: () => void) {\n    this._eventEmitter.on(loginStatus.LOGOUT_BEFORE, callback);\n  }\n\n  newReconnect(isBlock: boolean = true) {\n    this._deps.evClient.closeSocket();\n\n    const fn = this.loginAgent;\n\n    return isBlock ? this._deps.block.next(fn) : fn();\n  }\n\n  async authenticateWithToken({\n    rcAccessToken = this._deps.auth.accessToken,\n    tokenType = 'Bearer',\n    shouldEmitAuthSuccess = true,\n  }: AuthenticateWithTokenType = {}) {\n    console.log('authenticateWithToken', shouldEmitAuthSuccess);\n    try {\n      this._deps.evClient.initSDK();\n\n      const authenticateResponse =\n        await this._deps.evClient.getAndHandleAuthenticateResponse(\n          rcAccessToken,\n          tokenType,\n        );\n      const agent = { ...this.agent, authenticateResponse };\n      // if (shouldEmitAuthSuccess && !this._authenticateResponseWatcher) {\n      //   this._authenticateResponseWatcher = watch(\n      //     this,\n      //     () => this.agent?.authenticateResponse,\n      //     (authenticateResponse) => {\n      //       if (authenticateResponse) {\n      //         this._emitAuthSuccess();\n      //         this._authenticateResponseWatcher();\n      //         this._authenticateResponseWatcher = null;\n      //       }\n      //     },\n      //   );\n      // }\n      this.setAgent(agent);\n      this.setAuthSuccess();\n      if (shouldEmitAuthSuccess) {\n        this._emitAuthSuccess();\n      }\n      return authenticateResponse;\n    } catch (error) {\n      switch (error.type) {\n        case messageTypes.NO_AGENT:\n          this._deps.alert.warning({\n            message: error.type,\n          });\n          break;\n        case messageTypes.CONNECT_TIMEOUT:\n        case messageTypes.UNEXPECTED_AGENT:\n          this._deps.alert.danger({\n            message: error.type,\n          });\n          break;\n        default:\n          this._deps.alert.danger({\n            message: messageTypes.CONNECT_ERROR,\n          });\n      }\n      await this._logout();\n    }\n  }\n\n  async openSocketWithSelectedAgentId({\n    syncOtherTabs = false,\n    retryOpenSocket = false,\n  } = {}) {\n    console.log(\n      'openSocketWithSelectedAgentId',\n      syncOtherTabs,\n      retryOpenSocket,\n    );\n    try {\n      // TODO: here need check time when no message come back, that will block app.\n      const getAgentConfig = new Promise<EvAgentConfig>((resolve) => {\n        this._deps.evClient.on(EvCallbackTypes.LOGIN_PHASE_1, resolve);\n      });\n\n      const selectedAgentId = this.agentId;\n      if (!selectedAgentId) {\n        throw new EvTypeError({\n          type: messageTypes.NO_AGENT,\n        });\n      }\n      const openSocketResult = await this._deps.evClient.openSocket(\n        selectedAgentId,\n      );\n      // wait for socketOpened\n      // Because instance.socket Opened(); was performed after callback.\n      await sleep(0);\n      if (openSocketResult.error) {\n        console.log('retryOpenSocket~~', retryOpenSocket);\n        if (retryOpenSocket) {\n          const { access_token } = await this._deps.auth.refreshToken();\n          const authenticateRes = await this.authenticateWithToken({\n            rcAccessToken: access_token,\n            shouldEmitAuthSuccess: false,\n          });\n          if (!authenticateRes) return;\n          const openSocketRes: any = await this.openSocketWithSelectedAgentId({\n            syncOtherTabs,\n          });\n          return openSocketRes;\n        }\n        throw new EvTypeError({\n          type: messageTypes.OPEN_SOCKET_ERROR,\n        });\n      }\n\n      // TODO： implement multiple sync back drop\n      if (syncOtherTabs && this.tabManagerEnabled) {\n        this._deps.tabManager.send(tabManagerEvents.OPEN_SOCKET);\n      }\n\n      const agentConfig = await getAgentConfig;\n\n      const agent = { ...this.agent, agentConfig };\n\n      // if (!this._agentConfigWatcher) {\n      //   this._agentConfigWatcher = watch(\n      //     this,\n      //     () => this.agent?.agentConfig,\n      //     (agentConfig) => {\n      //       if (agentConfig) {\n      //         this._emitLoginSuccess();\n      //         this._agentConfigWatcher();\n      //         this._agentConfigWatcher = null;\n      //       }\n      //     },\n      //   );\n      // }\n\n      this.setConnectionData({ agent, connected: true });\n\n      this.connecting = false;\n\n      this.setLoginSuccess();\n\n      this._emitLoginSuccess();\n\n      return agentConfig;\n    } catch (error) {\n      switch (error.type) {\n        case messageTypes.NO_AGENT:\n          this._deps.alert.warning({\n            message: error.type,\n          });\n          break;\n        case messageTypes.INVALID_BROWSER:\n        case messageTypes.OPEN_SOCKET_ERROR:\n          this._deps.alert.danger({\n            message: error.type,\n          });\n          break;\n        default:\n          this._deps.alert.danger({\n            message: messageTypes.CONNECT_ERROR,\n          });\n      }\n\n      await this._logout();\n    }\n  }\n\n  loginAgent = async (token: string = this._deps.auth.accessToken) => {\n    const authenticateRes = await this.authenticateWithToken({\n      rcAccessToken: token,\n      shouldEmitAuthSuccess: false,\n    });\n    if (!authenticateRes) return;\n    await this.openSocketWithSelectedAgentId();\n  };\n\n  onceLoginSuccess(callback: () => void) {\n    this._eventEmitter.once(loginStatus.LOGIN_SUCCESS, callback);\n  }\n\n  onAuthSuccess(callback: () => void) {\n    this._eventEmitter.on(loginStatus.AUTH_SUCCESS, callback);\n  }\n\n  private _emitLogoutBefore() {\n    this._eventEmitter.emit(loginStatus.LOGOUT_BEFORE);\n  }\n\n  private _emitLoginSuccess() {\n    this._eventEmitter.emit(loginStatus.LOGIN_SUCCESS);\n  }\n\n  private _emitAuthSuccess() {\n    this._eventEmitter.emit(loginStatus.AUTH_SUCCESS);\n  }\n\n  private async _checkTabManagerEvent() {\n    const { event } = this._deps.tabManager;\n    if (event) {\n      switch (event.name) {\n        case tabManagerEvents.LOGOUT:\n          this._logoutByOtherTab = true;\n          break;\n        case tabManagerEvents.OPEN_SOCKET:\n          await this._deps.block.next(async () => {\n            await this.openSocketWithSelectedAgentId({\n              retryOpenSocket: true,\n            });\n          });\n          break;\n        case tabManagerEvents.LOGGED_OUT:\n          this.setNotAuth();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}\n\nexport { EvAuth };\n"],"file":"EvAuth.js"}