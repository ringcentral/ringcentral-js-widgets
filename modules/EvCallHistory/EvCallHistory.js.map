{"version":3,"sources":["modules/EvCallHistory/EvCallHistory.ts"],"names":["EvCallHistory","name","deps","dep","optional","that","rawCalls","contactMatches","activityMatches","formattedCalls","_deps","contactMatcher","addQuerySource","getQueriesFn","uniqueIdentifies","readyCheckFn","evCallMonitor","ready","activityMatcher","callLogsIds","phoneNumber","countryCode","currentLocale","locale","evSubscription","subscribe","EvCallbackTypes","DIRECT_AGENT_TRANSFER_NOTIF","data","status","directTransferNotificationTypes","VOICEMAIL","evAgentSession","configSuccess","callsLimited","calls","length","limitCalls","dataMapping","callLogs","callsMapping","slice","map","call","contactMatchIdentify","ani","callType","id","getCallId","session","direction","toLowerCase","callDirection","outbound","inbound","agent","agentId","_formatPhoneNumber","contact","from","to","fromName","toName","fromMatches","toMatches","startTime","timestamp","isDisposed","RcModuleV2"],"mappings":"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","sourcesContent":["import { callDirection } from '@ringcentral-integration/commons/enums/callDirections';\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport { computed, RcModuleV2, watch } from '@ringcentral-integration/core';\n\nimport { directTransferNotificationTypes } from '../../enums/directTransferNotificationTypes';\nimport { makeCallsUniqueIdentifies } from '../../lib/callUniqueIdentifies';\nimport { contactMatchIdentifyEncode } from '../../lib/contactMatchIdentify';\nimport { EvCallbackTypes } from '../../lib/EvClient/enums/callbackTypes';\nimport { formatPhoneNumber } from '../../lib/FormatPhoneNumber';\nimport { CallHistory, Deps } from './EvCallHistory.interface';\n\n@Module({\n  name: 'EvCallHistory',\n  deps: [\n    'EvCallMonitor',\n    'EvSubscription',\n    'Locale',\n    'EvAgentSession',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n  ],\n})\nclass EvCallHistory extends RcModuleV2<Deps> implements CallHistory {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    this._deps.contactMatcher?.addQuerySource({\n      getQueriesFn: () => this.uniqueIdentifies,\n      readyCheckFn: () => this._deps.evCallMonitor.ready,\n    });\n    this._deps.activityMatcher?.addQuerySource({\n      getQueriesFn: () => this.callLogsIds,\n      readyCheckFn: () => this._deps.evCallMonitor.ready,\n    });\n  }\n\n  get contactMatches() {\n    // TODO: create EvContactMatcher with specific entity type instead of ContactMatcher in Phone DI\n    return (this._deps.contactMatcher.dataMapping || {}) as {\n      [key: string]: { id: string; name: string; type: string }[];\n    };\n  }\n\n  get activityMatches() {\n    return this._deps.activityMatcher.dataMapping || {};\n  }\n\n  get rawCalls() {\n    return this._deps.evCallMonitor.callLogs;\n  }\n\n  get callLogsIds() {\n    return this._deps.evCallMonitor.callLogsIds;\n  }\n\n  get callsMapping() {\n    return this._deps.evCallMonitor.callsMapping;\n  }\n\n  @computed((that: EvCallHistory) => [\n    that.rawCalls,\n    that.contactMatches,\n    that.activityMatches,\n  ])\n  get formattedCalls() {\n    return this.rawCalls.slice(0, 250).map((call) => {\n      const contactMatchIdentify = contactMatchIdentifyEncode({\n        phoneNumber: call.ani,\n        callType: call.callType,\n      });\n\n      const id = this._deps.evCallMonitor.getCallId(call.session);\n      const direction =\n        call.callType.toLowerCase() === 'outbound'\n          ? callDirection.outbound\n          : callDirection.inbound;\n      const contactMatches = this.contactMatches[contactMatchIdentify] || [];\n      const activityMatches = this.activityMatches[id] || [];\n      const agent = {\n        name: call.agentId,\n        phoneNumber: this._formatPhoneNumber(call.agentId),\n      };\n\n      const contact = {\n        name: this._formatPhoneNumber(call.ani),\n        phoneNumber: this._formatPhoneNumber(call.ani),\n      };\n\n      const from = direction === callDirection.outbound ? agent : contact;\n      const to = direction === callDirection.outbound ? contact : agent;\n\n      return {\n        id,\n        direction,\n        agent,\n        contact,\n        from,\n        to,\n        fromName: from.name,\n        toName: to.name,\n        fromMatches: contactMatches,\n        toMatches: contactMatches,\n        activityMatches,\n        startTime: call.timestamp,\n        isDisposed: false,\n      };\n    });\n  }\n\n  private _formatPhoneNumber(phoneNumber: string) {\n    // TODO: support countryCode\n    return formatPhoneNumber({\n      phoneNumber,\n      countryCode: 'US',\n      currentLocale: this._deps.locale.currentLocale,\n    });\n  }\n\n  @computed((that: EvCallHistory) => [that.formattedCalls])\n  get lastEndedCall() {\n    return this.formattedCalls.length > 0 ? this.formattedCalls[0] : null;\n  }\n\n  @computed((that: EvCallHistory) => [that.rawCalls])\n  get uniqueIdentifies() {\n    return makeCallsUniqueIdentifies(this.rawCalls);\n  }\n\n  onInitOnce() {\n    this._deps.evSubscription.subscribe(\n      EvCallbackTypes.DIRECT_AGENT_TRANSFER_NOTIF,\n      (data) => {\n        if (data.status === directTransferNotificationTypes.VOICEMAIL) {\n          // TODO add `data` for list and alert message about 'Direct Transfer: data.ani, Click to view call detail.'\n        }\n      },\n    );\n\n    watch(\n      this,\n      () => this._deps.evAgentSession.configSuccess,\n      (configSuccess) => {\n        if (\n          configSuccess &&\n          !this._deps.evCallMonitor.callsLimited &&\n          !this._deps.evCallMonitor.calls.length\n        ) {\n          this._deps.evCallMonitor.limitCalls();\n        }\n      },\n    );\n  }\n}\n\nexport { EvCallHistory };\n"],"file":"EvCallHistory.js"}