{"version":3,"sources":["modules/AccountInfoV2/AccountInfo.ts"],"names":["AccountInfo","name","deps","dep","optional","that","analytics","identify","userId","_deps","auth","ownerId","accountId","id","servicePlanId","servicePlan","edition","CRMEnabled","tierChecker","isCRMEnabled","data","info","serviceInfo","_source","DataSource","accountInfoOptions","key","fetchFunction","client","account","get","readyCheckFunction","extensionFeatures","ready","permissionCheckFunction","_checkPermission","cleanOnReset","dataFetcherV2","register","features","ReadCompanyInfo","available","loginStatus","loggedIn","logout","alert","danger","message","permissionsMessages","insufficientPrivilege","ttl","billingPlan","brand","homeCountry","country","isoCode","mainNumber","DataFetcherV2Consumer"],"mappings":"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","sourcesContent":["import { GetAccountInfoResponse } from '@rc-ex/core/definitions';\nimport { computed, track } from '@ringcentral-integration/core';\n\nimport { permissionsMessages } from '../../enums/permissionsMessages';\nimport { Module } from '../../lib/di';\nimport { loginStatus } from '../AuthV2';\nimport { DataFetcherV2Consumer, DataSource } from '../DataFetcherV2';\nimport { Deps } from './AccountInfo.interfaces';\n\n@Module({\n  name: 'AccountInfo',\n  deps: [\n    'Auth',\n    'Client',\n    'Alert',\n    'ExtensionFeatures',\n    'DataFetcherV2',\n    { dep: 'TierChecker', optional: true },\n    { dep: 'AccountInfoOptions', optional: true },\n  ],\n})\nexport class AccountInfo extends DataFetcherV2Consumer<\n  Deps,\n  GetAccountInfoResponse\n> {\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n    this._source = new DataSource({\n      ...deps.accountInfoOptions,\n      key: 'accountInfo',\n      fetchFunction: async () =>\n        (await this._deps.client.account().get()) as GetAccountInfoResponse,\n      readyCheckFunction: () => !!this._deps.extensionFeatures.ready,\n      permissionCheckFunction: () => this._checkPermission(),\n      cleanOnReset: true,\n    });\n    this._deps.dataFetcherV2.register(this._source);\n  }\n\n  protected _checkPermission() {\n    return !!this._deps.extensionFeatures.features?.ReadCompanyInfo?.available;\n  }\n\n  async onStateChange() {\n    if (\n      this._deps.auth.loginStatus === loginStatus.loggedIn &&\n      this.ready &&\n      !this._checkPermission()\n    ) {\n      await this._deps.auth.logout();\n      this._deps.alert.danger({\n        message: permissionsMessages.insufficientPrivilege,\n        ttl: 0,\n      });\n    }\n  }\n\n  @track((that: AccountInfo) => (analytics) => {\n    analytics.identify?.({\n      userId: that._deps.auth?.ownerId,\n      accountId: that.id,\n      servicePlanId: that.servicePlan.id,\n      edition: that.servicePlan.edition,\n      CRMEnabled: that._deps.tierChecker?.isCRMEnabled,\n    });\n  })\n  onInitSuccess() {}\n\n  @computed(({ data }: AccountInfo) => [data])\n  get info() {\n    return this.data ?? {};\n  }\n\n  @computed(({ info }: AccountInfo) => [info])\n  get serviceInfo() {\n    return this.info.serviceInfo ?? {};\n  }\n\n  @computed(({ serviceInfo }: AccountInfo) => [serviceInfo])\n  get servicePlan() {\n    return this.serviceInfo.servicePlan ?? {};\n  }\n\n  @computed(({ serviceInfo }: AccountInfo) => [serviceInfo])\n  get billingPlan() {\n    return this.serviceInfo.billingPlan ?? {};\n  }\n\n  get id() {\n    return this.info.id;\n  }\n\n  get country() {\n    return this.serviceInfo.brand?.homeCountry;\n  }\n\n  get countryCode() {\n    return this.country?.isoCode ?? 'US';\n  }\n\n  get mainCompanyNumber() {\n    return this.info.mainNumber;\n  }\n}\n"],"file":"AccountInfo.js"}