{"version":3,"sources":["modules/CallMonitor/getCallMonitorReducer.ts"],"names":["getCallMatchedReducer","types","state","type","sessionId","toEntityId","setData","getCallMonitorReducer","status"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;AAEO,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AAC3C,SAAO,YAAiD;AAAA,QAAhDC,KAAgD,uEAAxC,EAAwC;;AAAA;AAAA,QAAlCC,IAAkC,QAAlCA,IAAkC;AAAA,QAA5BC,SAA4B,QAA5BA,SAA4B;AAAA,QAAjBC,UAAiB,QAAjBA,UAAiB;;AACtD,QAAIF,IAAI,KAAKF,KAAK,CAACK,OAAnB,EAA4B;AAC1B,6CACKJ,KADL,2BAEGE,SAFH,EAEeC,UAFf;AAID;;AACD,WAAOH,KAAP;AACD,GARD;AASD;AAED;;;AACe,SAASK,qBAAT,CAA+BN,KAA/B,EAAsC;AACnD,SAAO,4BAAgB;AACrBO,IAAAA,MAAM,EAAE,wCAAuBP,KAAvB;AADa,GAAhB,CAAP;AAGD","sourcesContent":["import { combineReducers } from 'redux';\n\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nexport function getCallMatchedReducer(types) {\n  return (state = {}, { type, sessionId, toEntityId }) => {\n    if (type === types.setData) {\n      return {\n        ...state,\n        [sessionId]: toEntityId,\n      };\n    }\n    return state;\n  };\n}\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallMonitorReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n  });\n}\n"],"file":"getCallMonitorReducer.js"}