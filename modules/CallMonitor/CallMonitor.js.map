{"version":3,"file":"CallMonitor.js","names":["_core","require","_events","_ramda","_trackEvents","_callLogHelpers","_di","_normalizeNumber","_ActiveCallControl","_webphoneHelper","_callEvents","_callMonitorHelper","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_dec19","_dec20","_dec21","_dec22","_dec23","_dec24","_dec25","_dec26","_dec27","_dec28","_dec29","_dec30","_dec31","_dec32","_class","_class2","_descriptor","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","Symbol","iterator","isArray","length","e","n","ownKeys","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","_initializerDefineProperty","i","l","initializer","_classCallCheck","_defineProperties","key","_createClass","prototype","_toPrimitive","_typeof","toPrimitive","String","Number","_inherits","create","_setPrototypeOf","setPrototypeOf","bind","__proto__","_createSuper","_isNativeReflectConstruct","_getPrototypeOf","s","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","reverse","reduce","_initializerWarningHelper","Error","CallMonitor","Module","deps","dep","optional","track","trackEvents","callInboundCallConnected","callOutboundRingOutCallConnected","clickCallItem","clickHoldAllCalls","clickHangupAllCalls","clickRejectAllCalls","clickAddCallControl","clickHangupMergeCallControl","that","_that$_deps$conferenc","_that$_deps$conferenc2","values","_deps","conferenceCall","state","mergingPair","clickMergeCallControl","clickMergeMergeCallControl","clickCloseConfirmMergeModal","clickMergeConfirmMergeModal","clickAddCallsOnHold","clickMergeCallsOnHold","clickHangupCallsOnHold","clickParticipantAreaCallControl","computed","_that$_deps$contactMa","_that$_deps$activityM","normalizedCalls","contactMatcher","dataMapping","activityMatcher","callMatched","useTelephonySession","normalizedCallsFromPresence","normalizedCallsFromTelephonySessions","_that$_deps$webphone","_that$_deps$webphone2","presence","calls","accountInfo","countryCode","webphone","sessions","cachedSessions","_that$_deps$activeCal","_that$_deps$activeCal2","_that$_deps$activeCal3","activeCallControl","currentDeviceCallsMap","transferCallMapping","_that$_deps$conferenc3","allCalls","isMerging","_activeOnHoldCalls","_activeCurrentCalls","_that$_deps$webphone3","_that$_deps$activeCal4","lastEndedSessions","lastEndedSessionIds","otherDeviceCalls","_RcModuleV","_super","_this$_deps$callMonit","_this$_deps$callMonit2","_this$_deps$callMonit3","_this$_deps$callMonit4","_this","enableCache","storageKey","_eventEmitter","EventEmitter","_useTelephonySession","callMonitorOptions","_normalizedCalls","_enableContactMatchWhenNewCall","enableContactMatchWhenNewCall","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","console","warn","setMatchedData","_ref","sessionId","toEntityId","onNewCall","callback","on","callEvents","newCall","onCallRinging","callRinging","onCallEnded","callEnded","onCallUpdated","callUpdated","onInitOnce","_this2","watch","lastProcessedNumbers","_this2$_deps$tabManag","tabManager","active","newNumbers","difference","match","queries","ignoreQueue","lastProcessedIds","_this2$_deps$tabManag2","newSessions","_","lastProcessedCalls","_lastProcessedCalls$s","handleCalls","oldCalls","_this$_deps$call$toNu","_this3","toNumberEntities","cleanToNumberEntities","entities","sort","sortByStartTime","oldCallIndex","findIndex","item","emit","isRinging","oldCall","splice","telephonyStatus","phoneNumber","isInbound","inboundCallConnectedTrack","outboundCallConnectedTrack","entity","index","indexOf","toEntity","find","toMatch","id","entityId","toMatches","undefined","_removeMatched","callItemClickTrack","allCallsClickHoldTrack","allCallsClickHangupTrack","allCallsClickRejectTrack","callControlClickAddTrack","mergeControlClickHangupTrack","callControlClickMergeTrack","confirmMergeClickCloseTrack","confirmMergeClickMergeTrack","callsOnHoldClickAddTrack","callsOnHoldClickMergeTrack","callsOnHoldClickHangupTrack","callControlClickParticipantAreaTrack","get","hasRingingCalls","_this$_deps$contactMa","_this$_deps$contactMa2","_this$_deps$activityM","_this$_deps$activityM2","_this4","contactMapping","activityMapping","map","callItem","fromNumber","toNumber","to","fromMatches","toNumberEntity","activityMatches","_this$_deps$webphone","_this$_deps$webphone$","_this5","_this$_deps$webphone$2","_this$_deps$webphone2","cachedCalls","x","_this5$_deps$webphone","webphoneSession","_x$webphoneSession","combinedCalls","cachedCall","theSessions","sortByLastActiveTimeDesc","normalizeNumber","maxExtensionLength","maxExtensionNumberLength","matchWebphoneSessionWithActiveCall","startTime","_this$_deps$activeCal","_this$_deps$webphone3","_this$_deps$webphone4","_this6","_this6$_deps$webphone","some","_i$partyData","partyData","telephonySessionId","_this$_deps$activeCal2","_party$status","isForwardedToVoiceMail","isOnSetupStage","isFaxSession","direction","party","isRecording","activeCallId","presenceCall","toName","fromName","partyId","mapTelephonyStatus","status","code","telephonySession","warmTransferInfo","_this7","_this7$_deps$conferen","isConferenceSession","_this8","isProceeding","isRing","isHolding","isOnHold","_this9","_this10","_this$_deps$activeCal3","_this$_deps$webphone5","_ref2","sessionsCache","res","concat","endCall","isCurrentDeviceEndCall","output","numberMap","addIfNotExist","number","isRingingInboundCall","isRingOutOnHold","RcModuleV2","storage","action","exports"],"sources":["modules/CallMonitor/CallMonitor.ts"],"sourcesContent":["import {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n  watch,\n} from '@ringcentral-integration/core';\nimport { EventEmitter } from 'events';\nimport {\n  difference,\n  filter,\n  find,\n  findIndex,\n  forEach,\n  map,\n  reduce,\n  sort,\n} from 'ramda';\n\nimport { trackEvents } from '../../enums/trackEvents';\nimport type {\n  Call,\n  NormalizedCall,\n  NormalizedCalls,\n} from '../../interfaces/Call.interface';\nimport type { ActiveCall } from '../../interfaces/Presence.model';\nimport type { NormalizedSession } from '../../interfaces/Webphone.interface';\nimport {\n  hasRingingCalls,\n  isInbound,\n  isOnHold as isRingOutOnHold,\n  isRinging,\n  isRingingInboundCall,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport { Module } from '../../lib/di';\nimport { normalizeNumber } from '../../lib/normalizeNumber';\nimport {\n  isForwardedToVoiceMail,\n  isHolding,\n  isOnSetupStage,\n  isRinging as isProceeding,\n  mapTelephonyStatus,\n  isFaxSession,\n} from '../ActiveCallControl';\nimport type { ToNumberMatched } from '../Call';\nimport {\n  isConferenceSession,\n  isOnHold,\n  isRing,\n  sortByLastActiveTimeDesc,\n} from '../Webphone/webphoneHelper';\n\nimport type { CallEventCallback, Deps } from './CallMonitor.interface';\nimport { callEvents } from './callEvents';\nimport {\n  isCurrentDeviceEndCall,\n  matchWebphoneSessionWithActiveCall,\n} from './callMonitorHelper';\n\n@Module({\n  name: 'CallMonitor',\n  deps: [\n    'AccountInfo',\n    'Storage',\n    'Presence',\n    'ExtensionInfo',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'Call', optional: true },\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'ActiveCallControl', optional: true },\n    { dep: 'CallMonitorOptions', optional: true },\n  ],\n})\nexport class CallMonitor extends RcModuleV2<Deps> {\n  private _eventEmitter = new EventEmitter();\n\n  protected _useTelephonySession =\n    this._deps.callMonitorOptions?.useTelephonySession ?? false;\n\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'NormalizedC... Remove this comment to see the full error message\n  protected _normalizedCalls: NormalizedCalls = null;\n  private _enableContactMatchWhenNewCall: boolean =\n    this._deps.callMonitorOptions?.enableContactMatchWhenNewCall ?? true;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'CallMonitor',\n    });\n    if (this._deps.contactMatcher && this._enableContactMatchWhenNewCall) {\n      this._deps.contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () =>\n          this._deps.accountInfo.ready && this._deps.presence.ready,\n      });\n    }\n\n    if (this._deps.activityMatcher) {\n      this._deps.activityMatcher.addQuerySource({\n        getQueriesFn: () => this.sessionIds,\n        readyCheckFn: () => this._deps.presence.ready,\n      });\n    }\n    if (this._useTelephonySession && !this._deps.activeCallControl) {\n      console.warn(\n        'Use telephonySession at CallMonitor module requires ActiveCallControl module',\n      );\n      this._useTelephonySession = false;\n    }\n  }\n\n  @storage\n  @state\n  callMatched: Record<string, string> = {};\n\n  @action\n  setMatchedData({\n    sessionId,\n    toEntityId,\n  }: {\n    sessionId: string;\n    toEntityId: string;\n  }) {\n    this.callMatched[sessionId] = toEntityId;\n  }\n\n  onNewCall(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.newCall, callback);\n    return this;\n  }\n\n  onCallRinging(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.callRinging, callback);\n    return this;\n  }\n\n  onCallEnded(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.callEnded, callback);\n    return this;\n  }\n\n  onCallUpdated(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.callUpdated, callback);\n    return this;\n  }\n\n  override onInitOnce() {\n    watch(\n      this,\n      () => this.uniqueNumbers,\n      (uniqueNumbers, lastProcessedNumbers) => {\n        if (!this.ready || !this._deps.tabManager?.active) return;\n        const newNumbers = difference(\n          uniqueNumbers,\n          lastProcessedNumbers || [],\n        );\n        if (\n          this._deps.contactMatcher &&\n          this._deps.contactMatcher.ready &&\n          this._enableContactMatchWhenNewCall\n        ) {\n          this._deps.contactMatcher.match({\n            queries: newNumbers,\n            ignoreQueue: true,\n          });\n        }\n      },\n    );\n\n    watch(\n      this,\n      () => this.sessionIds,\n      (sessionIds, lastProcessedIds) => {\n        if (!this.ready || !this._deps.tabManager?.active) return;\n        const newSessions = difference(sessionIds, lastProcessedIds || []);\n        if (this._deps.activityMatcher && this._deps.activityMatcher.ready) {\n          this._deps.activityMatcher.match({\n            queries: newSessions,\n            ignoreQueue: true,\n          });\n        }\n      },\n    );\n\n    watch(\n      this,\n      () => this.calls,\n      (_, lastProcessedCalls) => {\n        if (!this.ready) return;\n        this.handleCalls(lastProcessedCalls?.slice() ?? []);\n      },\n    );\n\n    watch(\n      this,\n      () => this.ready,\n      () => {\n        if (this.ready) {\n          // It is possible that `this.calls` may have changed before the `CallMonitor` module status becomes `true`.\n          // So make sure that in this case, `this.calls` handling must be forced\n          this.handleCalls([]);\n        }\n      },\n    );\n  }\n\n  handleCalls(oldCalls: Call[]) {\n    // no ringing calls\n    if (\n      this._deps.call &&\n      oldCalls.length &&\n      !this.calls.length &&\n      this._deps.call.toNumberEntities?.length\n    ) {\n      this._deps.call.cleanToNumberEntities();\n    }\n\n    const entities: ToNumberMatched[] = this._deps.call\n      ? sort(sortByStartTime, this._deps.call.toNumberEntities)\n      : [];\n    forEach((call) => {\n      const oldCallIndex = findIndex(\n        (item) => item.sessionId === call.sessionId,\n        oldCalls,\n      );\n      if (oldCallIndex === -1) {\n        this._eventEmitter.emit(callEvents.newCall, call);\n        // loop to execute the onRinging handlers\n        if (isRinging(call)) {\n          this._eventEmitter.emit(callEvents.callRinging, call);\n        }\n      } else {\n        const oldCall = oldCalls[oldCallIndex];\n        oldCalls.splice(oldCallIndex, 1);\n        if (\n          call.telephonyStatus !== oldCall.telephonyStatus ||\n          (oldCall.from && oldCall.from.phoneNumber) !==\n            (call.from && call.from.phoneNumber)\n        ) {\n          this._eventEmitter.emit(callEvents.callUpdated, call);\n          if (call.telephonyStatus === 'CallConnected') {\n            if (isInbound(call)) {\n              this.inboundCallConnectedTrack();\n            } else {\n              this.outboundCallConnectedTrack();\n            }\n          }\n        }\n      }\n      forEach((entity) => {\n        const index = entities.indexOf(entity);\n        const toEntity =\n          entity &&\n          // @ts-expect-error TS(2345): Argument of type 'Entity[] | undefined' is not ass... Remove this comment to see the full error message\n          find((toMatch) => toMatch.id === entity.entityId, call.toMatches);\n        if (toEntity !== undefined) {\n          this._removeMatched(index, entities);\n          this.setMatchedData({\n            sessionId: call.sessionId,\n            toEntityId: toEntity.id,\n          });\n        }\n      }, entities);\n    }, this.calls);\n\n    forEach((call) => {\n      this._eventEmitter.emit(callEvents.callEnded, call);\n    }, oldCalls);\n  }\n\n  _removeMatched(index: number, entities: ToNumberMatched[]) {\n    entities.splice(index, 1);\n    return entities;\n  }\n\n  @track(trackEvents.callInboundCallConnected)\n  inboundCallConnectedTrack() {}\n\n  @track(trackEvents.callOutboundRingOutCallConnected)\n  outboundCallConnectedTrack() {}\n\n  @track(trackEvents.clickCallItem)\n  callItemClickTrack() {}\n\n  @track(trackEvents.clickHoldAllCalls)\n  allCallsClickHoldTrack() {}\n\n  @track(trackEvents.clickHangupAllCalls)\n  allCallsClickHangupTrack() {}\n\n  @track(trackEvents.clickRejectAllCalls)\n  allCallsClickRejectTrack() {}\n\n  @track(trackEvents.clickAddCallControl)\n  callControlClickAddTrack() {}\n\n  @track(trackEvents.clickHangupMergeCallControl)\n  mergeControlClickHangupTrack() {}\n\n  @track((that: CallMonitor) => [\n    // @ts-expect-error TS(2341): Property 'state' is private and only accessible wi... Remove this comment to see the full error message\n    Object.values(that._deps.conferenceCall?.state.mergingPair ?? {}).length\n      ? trackEvents.clickMergeCallControl\n      : trackEvents.clickMergeMergeCallControl,\n  ])\n  callControlClickMergeTrack() {}\n\n  @track(trackEvents.clickCloseConfirmMergeModal)\n  confirmMergeClickCloseTrack() {}\n\n  @track(trackEvents.clickMergeConfirmMergeModal)\n  confirmMergeClickMergeTrack() {}\n\n  @track(trackEvents.clickAddCallsOnHold)\n  callsOnHoldClickAddTrack() {}\n\n  @track(trackEvents.clickMergeCallsOnHold)\n  callsOnHoldClickMergeTrack() {}\n\n  @track(trackEvents.clickHangupCallsOnHold)\n  callsOnHoldClickHangupTrack() {}\n\n  @track(trackEvents.clickParticipantAreaCallControl)\n  callControlClickParticipantAreaTrack() {}\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get useTelephonySession() {\n    return this._useTelephonySession;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.normalizedCalls,\n    that._deps.contactMatcher?.dataMapping,\n    that._deps.activityMatcher?.dataMapping,\n    that.callMatched,\n  ])\n  get allCalls(): Call[] {\n    const contactMapping = this._deps.contactMatcher?.dataMapping ?? {};\n    const activityMapping = this._deps.activityMatcher?.dataMapping ?? {};\n    const calls = map((callItem) => {\n      const fromNumber = callItem.from && callItem.from.phoneNumber;\n      const toNumber = callItem.to && callItem.to.phoneNumber;\n      const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n      const toMatches = (toNumber && contactMapping[toNumber]) || [];\n      const toNumberEntity = this.callMatched[callItem.sessionId];\n      return {\n        ...callItem,\n        fromMatches,\n        toMatches,\n        activityMatches: activityMapping[callItem.sessionId] || [],\n        toNumberEntity,\n      };\n    }, this.normalizedCalls);\n    return calls;\n  }\n\n  @computed((that: CallMonitor) => [\n    // Use \"null\" to avoid triggering get property unnecessarily that may cause issues\n    that.useTelephonySession ? null : that.normalizedCallsFromPresence,\n    that.useTelephonySession ? that.normalizedCallsFromTelephonySessions : null,\n    that.useTelephonySession,\n  ])\n  get normalizedCalls() {\n    if (this.useTelephonySession) {\n      return this.normalizedCallsFromTelephonySessions;\n    }\n    return this.normalizedCallsFromPresence;\n  }\n\n  @computed((that: CallMonitor) => [\n    that._deps.presence.calls,\n    that._deps.accountInfo.countryCode,\n    that._deps.webphone?.sessions,\n    that._deps.webphone?.cachedSessions,\n  ])\n  get normalizedCallsFromPresence() {\n    // match cached calls\n    let cachedCalls: NormalizedCalls = [];\n    if (this._normalizedCalls && this._deps.webphone?.cachedSessions?.length) {\n      cachedCalls = filter(\n        (x) =>\n          !!(\n            x.webphoneSession &&\n            find(\n              (i) => i.id === x.webphoneSession?.id,\n              this._deps.webphone?.cachedSessions || [],\n            )\n          ),\n        this._normalizedCalls,\n      );\n    }\n\n    // combine\n    const combinedCalls: (NormalizedCall | ActiveCall)[] = [\n      ...this._deps.presence.calls,\n    ]; // clone\n    forEach((cachedCall) => {\n      if (!find((x) => x.id === cachedCall.id, this._deps.presence.calls)) {\n        combinedCalls.push(cachedCall);\n      }\n    }, cachedCalls);\n\n    // mapping and sort\n    let theSessions = this._deps.webphone?.sessions ?? [];\n    // @ts-expect-error TS(2322): Type '({ from: { phoneNumber: string; }; to: { pho... Remove this comment to see the full error message\n    this._normalizedCalls = sort(\n      // @ts-expect-error TS(2345): Argument of type 'NormalizedSession | undefined' i... Remove this comment to see the full error message\n      (l, r) => sortByLastActiveTimeDesc(l.webphoneSession, r.webphoneSession),\n      // @ts-expect-error TS(2345): Argument of type '({ from: { phoneNumber: string; ... Remove this comment to see the full error message\n      map((callItem) => {\n        // use account countryCode to normalize number due to API issues [RCINT-3419]\n        const fromNumber = normalizeNumber({\n          // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n          phoneNumber: callItem.from && callItem.from.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n          maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n        });\n        const toNumber = normalizeNumber({\n          // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n          phoneNumber: callItem.to && callItem.to.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n          maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n        });\n        const webphoneSession = matchWebphoneSessionWithActiveCall(\n          theSessions,\n          callItem,\n        );\n        theSessions = filter((x) => x !== webphoneSession, theSessions);\n        return {\n          ...callItem,\n          from: {\n            phoneNumber: fromNumber,\n          },\n          to: {\n            phoneNumber: toNumber,\n          },\n          startTime:\n            (webphoneSession && webphoneSession.startTime) ||\n            callItem.startTime,\n          webphoneSession,\n        };\n      }, combinedCalls),\n    );\n    return this._normalizedCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that._deps.activeCallControl?.sessions,\n    that._deps.activeCallControl?.currentDeviceCallsMap,\n    that._deps.activeCallControl?.transferCallMapping,\n    that._deps.accountInfo.countryCode,\n    that._deps.presence.calls,\n  ])\n  get normalizedCallsFromTelephonySessions() {\n    if (!this._deps.activeCallControl?.sessions) {\n      return [];\n    }\n\n    // Match cached calls at the very beginning\n    let cachedCalls: NormalizedCalls = [];\n    if (this._normalizedCalls && this._deps.webphone?.cachedSessions?.length) {\n      cachedCalls = this._normalizedCalls.filter((x) =>\n        this._deps.webphone?.cachedSessions.some(\n          (i) => i.partyData?.sessionId === x.telephonySessionId,\n        ),\n      );\n    }\n\n    const combinedCalls = [...this._deps.activeCallControl!.sessions]; // clone\n    const { currentDeviceCallsMap, transferCallMapping } =\n      this._deps.activeCallControl;\n\n    // mapping and sort\n    // @ts-ignore\n    this._normalizedCalls = sort(\n      (l, r) =>\n        sortByLastActiveTimeDesc(l!.webphoneSession, r!.webphoneSession),\n      map((callItem) => {\n        // sessionId arrives when telephony session event push and it's a required\n        // reference https://github.com/ringcentral/ringcentral-call-js/blob/master/src/Session.ts\n        if (\n          !callItem ||\n          !callItem.sessionId ||\n          isForwardedToVoiceMail(callItem) ||\n          (isInbound(callItem) && isOnSetupStage(callItem)) ||\n          isFaxSession(callItem)\n        ) {\n          return null;\n        }\n        const {\n          to,\n          from,\n          direction,\n          party,\n          telephonySessionId,\n          sessionId,\n          startTime,\n          isRecording,\n        } = callItem;\n        let { activeCallId: id } = callItem;\n        // find id from presence call one time, due to telephony session event not push call id back\n        // with ringout call\n        if (!id) {\n          const presenceCall = this._deps.presence.calls.find(\n            (presenceCall) => presenceCall.telephonySessionId === callItem.id,\n          );\n          // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n          id = presenceCall?.id;\n        }\n        const fromNumber = normalizeNumber({\n          phoneNumber: from?.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n          maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n        });\n        const toNumber = normalizeNumber({\n          phoneNumber: to?.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n          maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n        });\n        const toName = to?.name;\n        const fromName = from?.name;\n        const partyId = party?.id;\n        // @ts-expect-error TS(2345): Argument of type 'PartyStatusCode | undefined' is ... Remove this comment to see the full error message\n        const telephonyStatus = mapTelephonyStatus(party?.status?.code);\n\n        // TODO: add sipData here\n        // const sipData = {};\n        return {\n          id,\n          partyId,\n          direction,\n          telephonySession: callItem,\n          telephonySessionId,\n          toName,\n          fromName,\n          from: {\n            ...from,\n            phoneNumber: fromNumber,\n          },\n          to: {\n            ...to,\n            phoneNumber: toNumber,\n          },\n          startTime,\n          sessionId,\n          webphoneSession: currentDeviceCallsMap[telephonySessionId],\n          telephonyStatus,\n          warmTransferInfo: transferCallMapping[telephonySessionId],\n          isRecording,\n        };\n      }, combinedCalls).filter((x) => !!x),\n    );\n\n    // Keep the cached calls in the list\n    if (this._normalizedCalls) {\n      cachedCalls.forEach((cachedCall) => {\n        if (!this._normalizedCalls!.find((x) => x.id === cachedCall.id)) {\n          this._normalizedCalls!.push(cachedCall);\n        }\n      });\n    }\n\n    return this._normalizedCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.allCalls,\n    that._deps.conferenceCall?.isMerging,\n  ])\n  get calls() {\n    return filter((callItem) => {\n      // filtering out the conference during merging\n      if (this._deps.conferenceCall?.isMerging) {\n        return !isConferenceSession(callItem.webphoneSession);\n      }\n      return true;\n    }, this.allCalls);\n  }\n\n  @computed((that: CallMonitor) => [that.calls, that.useTelephonySession])\n  get activeRingCalls() {\n    // @ts-expect-error TS(2769): No overload matches this call.\n    return filter((callItem) => {\n      if (this.useTelephonySession) {\n        return (\n          callItem.webphoneSession &&\n          callItem.telephonySession &&\n          // @ts-expect-error TS(2345): Argument of type '{ status: string; id: string; di... Remove this comment to see the full error message\n          isProceeding(callItem.telephonySession)\n        );\n      }\n      return callItem.webphoneSession && isRing(callItem.webphoneSession);\n    }, this.calls);\n  }\n\n  @computed((that: CallMonitor) => [that.calls, that.useTelephonySession])\n  get _activeOnHoldCalls() {\n    if (this.useTelephonySession) {\n      return filter(\n        (callItem) =>\n          // @ts-expect-error TS(2769): No overload matches this call.\n          callItem.webphoneSession &&\n          callItem.telephonySession &&\n          // @ts-expect-error TS(2345): Argument of type '{ status: string; id: string; di... Remove this comment to see the full error message\n          isHolding(callItem.telephonySession),\n        this.calls,\n      );\n    }\n    return filter(\n      (callItem) =>\n        // @ts-expect-error TS(2769): No overload matches this call.\n        callItem.webphoneSession && isOnHold(callItem.webphoneSession),\n      this.calls,\n    );\n  }\n\n  @computed((that: CallMonitor) => [that.calls, that.useTelephonySession])\n  get _activeCurrentCalls() {\n    // @ts-expect-error TS(2769): No overload matches this call.\n    return filter((callItem) => {\n      if (this.useTelephonySession) {\n        return (\n          callItem.webphoneSession &&\n          callItem.telephonySession &&\n          // @ts-expect-error TS(2345): Argument of type '{ status: string; id: string; di... Remove this comment to see the full error message\n          !isProceeding(callItem.telephonySession) &&\n          // @ts-expect-error TS(2345): Argument of type '{ status: string; id: string; di... Remove this comment to see the full error message\n          !isHolding(callItem.telephonySession)\n        );\n      }\n      return (\n        callItem.webphoneSession &&\n        !isOnHold(callItem.webphoneSession) &&\n        !isRing(callItem.webphoneSession)\n      );\n    }, this.calls);\n  }\n\n  @computed((that: CallMonitor) => [\n    that._activeOnHoldCalls,\n    that._activeCurrentCalls,\n  ])\n  get activeOnHoldCalls() {\n    if (this._activeOnHoldCalls.length && !this._activeCurrentCalls.length) {\n      return this._activeOnHoldCalls.slice(1);\n    }\n    return this._activeOnHoldCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that._activeCurrentCalls,\n    that._activeOnHoldCalls,\n  ])\n  get activeCurrentCalls() {\n    return !this._activeCurrentCalls.length && this._activeOnHoldCalls.length\n      ? this._activeOnHoldCalls.slice(0, 1)\n      : this._activeCurrentCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.calls,\n    that._deps.webphone?.lastEndedSessions,\n    that.useTelephonySession,\n    that._deps.activeCallControl?.lastEndedSessionIds,\n  ])\n  get otherDeviceCalls() {\n    return reduce(\n      ({ sessionsCache, res }, callItem) => {\n        if (callItem.webphoneSession) {\n          return {\n            sessionsCache,\n            res,\n          };\n        }\n\n        if (!sessionsCache || !sessionsCache.length) {\n          return {\n            sessionsCache,\n            res: [...res, callItem],\n          };\n        }\n        // TODO: refactor\n        // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'boolean | N... Remove this comment to see the full error message\n        let endCall: boolean | NormalizedSession = null;\n        if (this.useTelephonySession) {\n          endCall = isCurrentDeviceEndCall(sessionsCache as string[], callItem);\n        } else {\n          // @ts-expect-error TS(2322): Type 'NormalizedSession | undefined' is not assign... Remove this comment to see the full error message\n          endCall = matchWebphoneSessionWithActiveCall(\n            sessionsCache as NormalizedSession[],\n            callItem,\n          );\n        }\n\n        return {\n          sessionsCache: filter(\n            (x) => x !== endCall,\n            sessionsCache as NormalizedSession[],\n          ),\n          res: endCall ? res : [...res, callItem],\n        };\n      },\n      {\n        sessionsCache: this.useTelephonySession\n          ? this._deps.activeCallControl?.lastEndedSessionIds\n          : this._deps.webphone?.lastEndedSessions,\n        res: [] as Call[],\n      },\n      this.calls,\n    ).res;\n  }\n\n  @computed((that: CallMonitor) => [that.normalizedCalls])\n  get uniqueNumbers() {\n    const output: string[] = [];\n    const numberMap: Record<string, boolean> = {};\n    function addIfNotExist(number: string) {\n      if (!numberMap[number]) {\n        output.push(number);\n        numberMap[number] = true;\n      }\n    }\n    forEach((callItem) => {\n      if (callItem.from && callItem.from.phoneNumber) {\n        addIfNotExist(callItem.from.phoneNumber);\n      }\n      if (callItem.to && callItem.to.phoneNumber) {\n        addIfNotExist(callItem.to.phoneNumber);\n      }\n    }, this.normalizedCalls);\n    return output;\n  }\n\n  @computed((that: CallMonitor) => [that.normalizedCalls])\n  get sessionIds() {\n    return map((callItem) => callItem.sessionId, this.normalizedCalls);\n  }\n\n  @computed((that: CallMonitor) => [that.otherDeviceCalls])\n  get ringoutRingCalls() {\n    return filter(\n      (callItem) => isRingingInboundCall(callItem),\n      this.otherDeviceCalls,\n    );\n  }\n\n  @computed((that: CallMonitor) => [that.otherDeviceCalls])\n  get ringoutCurrentCalls() {\n    return filter(\n      (callItem) =>\n        !isRingingInboundCall(callItem) && !isRingOutOnHold(callItem),\n      this.otherDeviceCalls,\n    );\n  }\n\n  @computed((that: CallMonitor) => [that.otherDeviceCalls])\n  get ringoutOnHoldCalls() {\n    return filter(\n      (callItem) => isRingOutOnHold(callItem),\n      this.otherDeviceCalls,\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}