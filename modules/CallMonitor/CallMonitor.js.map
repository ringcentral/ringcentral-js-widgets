{"version":3,"file":"CallMonitor.js","names":["_events","require","_ramda","_core","_callLogHelpers","_di","_normalizeNumber","_ActiveCallControl","_trackEvents","_webphoneHelper","_callEvents","_callMonitorHelper","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_dec19","_dec20","_dec21","_dec22","_dec23","_dec24","_dec25","_dec26","_dec27","_dec28","_dec29","_dec30","_dec31","_dec32","_class","_class2","_descriptor","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","_initializerDefineProperty","property","descriptor","context","initializer","_classCallCheck","instance","Constructor","_defineProperties","props","_createClass","protoProps","staticProps","arg","_toPrimitive","_typeof","String","input","hint","prim","toPrimitive","undefined","res","Number","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_applyDecoratedDescriptor","decorators","desc","reverse","reduce","decorator","_initializerWarningHelper","Error","CallMonitor","Module","deps","dep","optional","track","trackEvents","callInboundCallConnected","callOutboundRingOutCallConnected","clickCallItem","clickHoldAllCalls","clickHangupAllCalls","clickRejectAllCalls","clickAddCallControl","clickHangupMergeCallControl","that","_that$_deps$conferenc","_that$_deps$conferenc2","values","_deps","conferenceCall","state","mergingPair","clickMergeCallControl","clickMergeMergeCallControl","clickCloseConfirmMergeModal","clickMergeConfirmMergeModal","clickAddCallsOnHold","clickMergeCallsOnHold","clickHangupCallsOnHold","clickParticipantAreaCallControl","computed","_that$_deps$contactMa","_that$_deps$activityM","normalizedCalls","contactMatcher","dataMapping","activityMatcher","callMatched","normalizedCallsFromPresence","normalizedCallsFromTelephonySessions","useTelephonySession","_that$_deps$webphone","_that$_deps$webphone2","presence","calls","accountInfo","countryCode","webphone","sessions","cachedSessions","_that$_deps$activeCal","_that$_deps$activeCal2","_that$_deps$activeCal3","activeCallControl","currentDeviceCallsMap","transferCallMapping","_that$_deps$conferenc3","allCalls","isMerging","_activeOnHoldCalls","_activeCurrentCalls","_that$_deps$webphone3","_that$_deps$activeCal4","lastEndedSessions","lastEndedSessionIds","otherDeviceCalls","_RcModuleV","_super","_this$_deps$callMonit","_this$_deps$callMonit2","_this$_deps$callMonit3","_this$_deps$callMonit4","_this","enableCache","storageKey","_eventEmitter","EventEmitter","_useTelephonySession","callMonitorOptions","_normalizedCalls","_enableContactMatchWhenNewCall","enableContactMatchWhenNewCall","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","console","warn","setMatchedData","_ref","sessionId","toEntityId","onNewCall","callback","on","callEvents","newCall","onCallRinging","callRinging","onCallEnded","callEnded","onCallUpdated","callUpdated","onInitOnce","_this2","watch","lastProcessedNumbers","_this2$_deps$tabManag","tabManager","active","newNumbers","difference","match","queries","ignoreQueue","lastProcessedIds","_this2$_deps$tabManag2","newSessions","_","lastProcessedCalls","_lastProcessedCalls$s","handleCalls","oldCalls","_this$_deps$call$toNu","_this3","toNumberEntities","cleanToNumberEntities","entities","sort","sortByStartTime","oldCallIndex","findIndex","item","emit","isRinging","oldCall","splice","telephonyStatus","phoneNumber","isInbound","inboundCallConnectedTrack","outboundCallConnectedTrack","entity","index","indexOf","toEntity","find","toMatch","id","entityId","toMatches","_removeMatched","log","callItemClickTrack","allCallsClickHoldTrack","allCallsClickHangupTrack","allCallsClickRejectTrack","callControlClickAddTrack","mergeControlClickHangupTrack","callControlClickMergeTrack","confirmMergeClickCloseTrack","confirmMergeClickMergeTrack","callsOnHoldClickAddTrack","callsOnHoldClickMergeTrack","callsOnHoldClickHangupTrack","callControlClickParticipantAreaTrack","get","hasRingingCalls","_this$_deps$contactMa","_this$_deps$contactMa2","_this$_deps$activityM","_this$_deps$activityM2","_this4","contactMapping","activityMapping","map","callItem","fromNumber","toNumber","to","fromMatches","toNumberEntity","activityMatches","_this$_deps$webphone","_this$_deps$webphone$","_this5","_this$_deps$webphone$2","_this$_deps$webphone2","cachedCalls","x","_this5$_deps$webphone","webphoneSession","_x$webphoneSession","combinedCalls","cachedCall","theSessions","l","r","sortByLastActiveTimeDesc","normalizeNumber","maxExtensionLength","maxExtensionNumberLength","matchWephoneSessionWithAcitveCall","startTime","_this$_deps$activeCal","_this$_deps$activeCal2","_this6","_this$_deps$activeCal3","_party$status","isForwardedToVoiceMail","isOnSetupStage","isFaxSession","direction","party","telephonySessionId","isRecording","activeCallId","presenceCall","toName","fromName","partyId","mapTelephonyStatus","status","code","telephonySession","warmTransferInfo","_this7","_this7$_deps$conferen","isConferenceSession","_this8","isProceeding","isRing","isHolding","isOnHold","_this9","_this10","_this$_deps$activeCal4","_this$_deps$webphone3","_ref2","sessionsCache","concat","endCall","isCurrentDeviceEndCall","output","numberMap","addIfNotExist","number","isRingingInboundCall","isRingOutOnHold","RcModuleV2","storage","action","exports"],"sources":["modules/CallMonitor/CallMonitor.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport {\n  difference,\n  filter,\n  find,\n  findIndex,\n  forEach,\n  map,\n  reduce,\n  sort,\n} from 'ramda';\n\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n  track,\n  watch,\n} from '@ringcentral-integration/core';\n\nimport type {\n  Call,\n  NormalizedCall,\n  NormalizedCalls,\n} from '../../interfaces/Call.interface';\nimport type { ActiveCall } from '../../interfaces/Presence.model';\nimport type { NormalizedSession } from '../../interfaces/Webphone.interface';\nimport {\n  hasRingingCalls,\n  isInbound,\n  isOnHold as isRingOutOnHold,\n  isRinging,\n  isRingingInboundCall,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport { Module } from '../../lib/di';\nimport { normalizeNumber } from '../../lib/normalizeNumber';\nimport {\n  isForwardedToVoiceMail,\n  isHolding,\n  isOnSetupStage,\n  isRinging as isProceeding,\n  mapTelephonyStatus,\n  isFaxSession,\n} from '../ActiveCallControl';\nimport { trackEvents } from '../../enums/trackEvents';\nimport type { ToNumberMatched } from '../Call';\nimport {\n  isConferenceSession,\n  isOnHold,\n  isRing,\n  sortByLastActiveTimeDesc,\n} from '../Webphone/webphoneHelper';\nimport { callEvents } from './callEvents';\nimport type { CallEventCallback, Deps } from './CallMonitor.interface';\nimport {\n  isCurrentDeviceEndCall,\n  matchWephoneSessionWithAcitveCall,\n} from './callMonitorHelper';\n\n@Module({\n  name: 'CallMonitor',\n  deps: [\n    'AccountInfo',\n    'Storage',\n    'Presence',\n    'ExtensionInfo',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'Call', optional: true },\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'ActiveCallControl', optional: true },\n    { dep: 'CallMonitorOptions', optional: true },\n  ],\n})\nexport class CallMonitor extends RcModuleV2<Deps> {\n  private _eventEmitter = new EventEmitter();\n\n  protected _useTelephonySession =\n    this._deps.callMonitorOptions?.useTelephonySession ?? false;\n\n  // @ts-expect-error\n  protected _normalizedCalls: NormalizedCalls = null;\n  private _enableContactMatchWhenNewCall: boolean =\n    this._deps.callMonitorOptions?.enableContactMatchWhenNewCall ?? true;\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n      enableCache: true,\n      storageKey: 'CallMonitor',\n    });\n    if (this._deps.contactMatcher && this._enableContactMatchWhenNewCall) {\n      this._deps.contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () =>\n          this._deps.accountInfo.ready && this._deps.presence.ready,\n      });\n    }\n\n    if (this._deps.activityMatcher) {\n      this._deps.activityMatcher.addQuerySource({\n        getQueriesFn: () => this.sessionIds,\n        readyCheckFn: () => this._deps.presence.ready,\n      });\n    }\n    if (this._useTelephonySession && !this._deps.activeCallControl) {\n      console.warn(\n        'Use telephonySession at CallMonitor module requires ActiveCallControl module',\n      );\n      this._useTelephonySession = false;\n    }\n  }\n\n  @storage\n  @state\n  callMatched: Record<string, string> = {};\n\n  @action\n  setMatchedData({\n    sessionId,\n    toEntityId,\n  }: {\n    sessionId: string;\n    toEntityId: string;\n  }) {\n    this.callMatched[sessionId] = toEntityId;\n  }\n\n  onNewCall(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.newCall, callback);\n    return this;\n  }\n\n  onCallRinging(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.callRinging, callback);\n    return this;\n  }\n\n  onCallEnded(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.callEnded, callback);\n    return this;\n  }\n\n  onCallUpdated(callback: CallEventCallback) {\n    this._eventEmitter.on(callEvents.callUpdated, callback);\n    return this;\n  }\n\n  override onInitOnce() {\n    watch(\n      this,\n      () => this.uniqueNumbers,\n      (uniqueNumbers, lastProcessedNumbers) => {\n        if (!this.ready || !this._deps.tabManager?.active) return;\n        const newNumbers = difference(\n          uniqueNumbers,\n          lastProcessedNumbers || [],\n        );\n        if (\n          this._deps.contactMatcher &&\n          this._deps.contactMatcher.ready &&\n          this._enableContactMatchWhenNewCall\n        ) {\n          this._deps.contactMatcher.match({\n            queries: newNumbers,\n            ignoreQueue: true,\n          });\n        }\n      },\n    );\n\n    watch(\n      this,\n      () => this.sessionIds,\n      (sessionIds, lastProcessedIds) => {\n        if (!this.ready || !this._deps.tabManager?.active) return;\n        const newSessions = difference(sessionIds, lastProcessedIds || []);\n        if (this._deps.activityMatcher && this._deps.activityMatcher.ready) {\n          this._deps.activityMatcher.match({\n            queries: newSessions,\n            ignoreQueue: true,\n          });\n        }\n      },\n    );\n\n    watch(\n      this,\n      () => this.calls,\n      (_, lastProcessedCalls) => {\n        if (!this.ready) return;\n        this.handleCalls(lastProcessedCalls?.slice() ?? []);\n      },\n    );\n\n    watch(\n      this,\n      () => this.ready,\n      () => {\n        if (this.ready) {\n          // It is possible that `this.calls` may have changed before the `CallMonitor` module status becomes `true`.\n          // So make sure that in this case, `this.calls` handling must be forced\n          this.handleCalls([]);\n        }\n      },\n    );\n  }\n\n  handleCalls(oldCalls: Call[]) {\n    // no ringing calls\n    if (\n      this._deps.call &&\n      oldCalls.length &&\n      !this.calls.length &&\n      this._deps.call.toNumberEntities?.length\n    ) {\n      this._deps.call.cleanToNumberEntities();\n    }\n\n    const entities: ToNumberMatched[] = this._deps.call\n      ? sort(sortByStartTime, this._deps.call.toNumberEntities)\n      : [];\n    forEach((call) => {\n      const oldCallIndex = findIndex(\n        (item) => item.sessionId === call.sessionId,\n        oldCalls,\n      );\n      if (oldCallIndex === -1) {\n        this._eventEmitter.emit(callEvents.newCall, call);\n        // loop to execut the onRinging handlers\n        if (isRinging(call)) {\n          this._eventEmitter.emit(callEvents.callRinging, call);\n        }\n      } else {\n        const oldCall = oldCalls[oldCallIndex];\n        oldCalls.splice(oldCallIndex, 1);\n        if (\n          call.telephonyStatus !== oldCall.telephonyStatus ||\n          (oldCall.from && oldCall.from.phoneNumber) !==\n            (call.from && call.from.phoneNumber)\n        ) {\n          this._eventEmitter.emit(callEvents.callUpdated, call);\n          if (call.telephonyStatus === 'CallConnected') {\n            if (isInbound(call)) {\n              this.inboundCallConnectedTrack();\n            } else {\n              this.outboundCallConnectedTrack();\n            }\n          }\n        }\n      }\n      forEach((entity) => {\n        const index = entities.indexOf(entity);\n        const toEntity =\n          entity &&\n          // @ts-expect-error\n          find((toMatch) => toMatch.id === entity.entityId, call.toMatches);\n        if (toEntity !== undefined) {\n          this._removeMatched(index, entities);\n          this.setMatchedData({\n            sessionId: call.sessionId,\n            toEntityId: toEntity.id,\n          });\n        }\n      }, entities);\n    }, this.calls);\n\n    forEach((call) => {\n      this._eventEmitter.emit(callEvents.callEnded, call);\n    }, oldCalls);\n  }\n\n  _removeMatched(index: number, entities: ToNumberMatched[]) {\n    console.log('removeMatched:', index);\n    entities.splice(index, 1);\n    console.log('entities after splice:', entities);\n    return entities;\n  }\n\n  @track(trackEvents.callInboundCallConnected)\n  inboundCallConnectedTrack() {}\n\n  @track(trackEvents.callOutboundRingOutCallConnected)\n  outboundCallConnectedTrack() {}\n\n  @track(trackEvents.clickCallItem)\n  callItemClickTrack() {}\n\n  @track(trackEvents.clickHoldAllCalls)\n  allCallsClickHoldTrack() {}\n\n  @track(trackEvents.clickHangupAllCalls)\n  allCallsClickHangupTrack() {}\n\n  @track(trackEvents.clickRejectAllCalls)\n  allCallsClickRejectTrack() {}\n\n  @track(trackEvents.clickAddCallControl)\n  callControlClickAddTrack() {}\n\n  @track(trackEvents.clickHangupMergeCallControl)\n  mergeControlClickHangupTrack() {}\n\n  @track((that: CallMonitor) => [\n    // @ts-expect-error\n    Object.values(that._deps.conferenceCall?.state.mergingPair ?? {}).length\n      ? trackEvents.clickMergeCallControl\n      : trackEvents.clickMergeMergeCallControl,\n  ])\n  callControlClickMergeTrack() {}\n\n  @track(trackEvents.clickCloseConfirmMergeModal)\n  confirmMergeClickCloseTrack() {}\n\n  @track(trackEvents.clickMergeConfirmMergeModal)\n  confirmMergeClickMergeTrack() {}\n\n  @track(trackEvents.clickAddCallsOnHold)\n  callsOnHoldClickAddTrack() {}\n\n  @track(trackEvents.clickMergeCallsOnHold)\n  callsOnHoldClickMergeTrack() {}\n\n  @track(trackEvents.clickHangupCallsOnHold)\n  callsOnHoldClickHangupTrack() {}\n\n  @track(trackEvents.clickParticipantAreaCallControl)\n  callControlClickParticipantAreaTrack() {}\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get useTelephonySession() {\n    return this._useTelephonySession;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.normalizedCalls,\n    that._deps.contactMatcher?.dataMapping,\n    that._deps.activityMatcher?.dataMapping,\n    that.callMatched,\n  ])\n  get allCalls(): Call[] {\n    const contactMapping = this._deps.contactMatcher?.dataMapping ?? {};\n    const activityMapping = this._deps.activityMatcher?.dataMapping ?? {};\n    const calls = map((callItem) => {\n      const fromNumber = callItem.from && callItem.from.phoneNumber;\n      const toNumber = callItem.to && callItem.to.phoneNumber;\n      const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n      const toMatches = (toNumber && contactMapping[toNumber]) || [];\n      const toNumberEntity = this.callMatched[callItem.sessionId];\n      return {\n        ...callItem,\n        fromMatches,\n        toMatches,\n        activityMatches: activityMapping[callItem.sessionId] || [],\n        toNumberEntity,\n      };\n    }, this.normalizedCalls);\n    return calls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.normalizedCallsFromPresence,\n    that.normalizedCallsFromTelephonySessions,\n    that.useTelephonySession,\n  ])\n  get normalizedCalls() {\n    if (this.useTelephonySession) {\n      return this.normalizedCallsFromTelephonySessions;\n    }\n    return this.normalizedCallsFromPresence;\n  }\n\n  @computed((that: CallMonitor) => [\n    that._deps.presence.calls,\n    that._deps.accountInfo.countryCode,\n    that._deps.webphone?.sessions,\n    that._deps.webphone?.cachedSessions,\n  ])\n  get normalizedCallsFromPresence() {\n    // match cached calls\n    let cachedCalls: NormalizedCalls = [];\n    if (this._normalizedCalls && this._deps.webphone?.cachedSessions?.length) {\n      cachedCalls = filter(\n        (x) =>\n          !!(\n            x.webphoneSession &&\n            find(\n              (i) => i.id === x.webphoneSession?.id,\n              this._deps.webphone?.cachedSessions || [],\n            )\n          ),\n        this._normalizedCalls,\n      );\n    }\n\n    // combine\n    const combinedCalls: (NormalizedCall | ActiveCall)[] = [\n      ...this._deps.presence.calls,\n    ]; // clone\n    forEach((cachedCall) => {\n      if (!find((x) => x.id === cachedCall.id, this._deps.presence.calls)) {\n        combinedCalls.push(cachedCall);\n      }\n    }, cachedCalls);\n\n    // mapping and sort\n    let theSessions = this._deps.webphone?.sessions ?? [];\n    // @ts-expect-error\n    this._normalizedCalls = sort(\n      // @ts-expect-error\n      (l, r) => sortByLastActiveTimeDesc(l.webphoneSession, r.webphoneSession),\n      // @ts-expect-error\n      map((callItem) => {\n        // use account countryCode to normalize number due to API issues [RCINT-3419]\n        const fromNumber = normalizeNumber({\n          // @ts-expect-error\n          phoneNumber: callItem.from && callItem.from.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n          maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n        });\n        const toNumber = normalizeNumber({\n          // @ts-expect-error\n          phoneNumber: callItem.to && callItem.to.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n          maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n        });\n        const webphoneSession = matchWephoneSessionWithAcitveCall(\n          theSessions,\n          callItem,\n        );\n        theSessions = filter((x) => x !== webphoneSession, theSessions);\n        return {\n          ...callItem,\n          from: {\n            phoneNumber: fromNumber,\n          },\n          to: {\n            phoneNumber: toNumber,\n          },\n          startTime:\n            (webphoneSession && webphoneSession.startTime) ||\n            callItem.startTime,\n          webphoneSession,\n        };\n      }, combinedCalls),\n    );\n    return this._normalizedCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that._deps.activeCallControl?.sessions,\n    that._deps.activeCallControl?.currentDeviceCallsMap,\n    that._deps.activeCallControl?.transferCallMapping,\n    that._deps.accountInfo.countryCode,\n    that._deps.presence.calls,\n  ])\n  get normalizedCallsFromTelephonySessions() {\n    // TODO: match cached calls when there are conference merging calls, refer to `normalizedCallsFromPresence` function\n    if (!this._deps.activeCallControl?.sessions) return [];\n    const combinedCalls = [...this._deps.activeCallControl?.sessions]; // clone\n    const { currentDeviceCallsMap, transferCallMapping } =\n      this._deps.activeCallControl;\n    // mapping and sort\n    // @ts-expect-error\n    this._normalizedCalls = sort(\n      // @ts-expect-error\n      (l, r) => sortByLastActiveTimeDesc(l.webphoneSession, r.webphoneSession),\n      map((callItem) => {\n        // sessionId arrives when telephony session event push and it's a required\n        // reference https://github.com/ringcentral/ringcentral-call-js/blob/master/src/Session.ts\n        if (\n          !callItem ||\n          !callItem.sessionId ||\n          isForwardedToVoiceMail(callItem) ||\n          (isInbound(callItem) && isOnSetupStage(callItem)) ||\n          isFaxSession(callItem)\n        ) {\n          return null;\n        }\n        const {\n          to,\n          from,\n          direction,\n          party,\n          telephonySessionId,\n          sessionId,\n          startTime,\n          isRecording,\n        } = callItem;\n        let { activeCallId: id } = callItem;\n        // find id from presence call one time, due to telephony session event not push call id back\n        // with ringout call\n        if (!id) {\n          const presenceCall = this._deps.presence.calls.find(\n            (presenceCall) => presenceCall.telephonySessionId === callItem.id,\n          );\n          // @ts-expect-error\n          id = presenceCall?.id;\n        }\n        const fromNumber = normalizeNumber({\n          phoneNumber: from?.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n          maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n        });\n        const toNumber = normalizeNumber({\n          phoneNumber: to?.phoneNumber,\n          countryCode: this._deps.accountInfo.countryCode,\n          maxExtensionLength: this._deps.accountInfo.maxExtensionNumberLength,\n        });\n        const toName = to?.name;\n        const fromName = from?.name;\n        const partyId = party?.id;\n        // @ts-expect-error\n        const telephonyStatus = mapTelephonyStatus(party?.status?.code);\n\n        // TODO: add sipData here\n        // const sipData = {};\n        return {\n          id,\n          partyId,\n          direction,\n          telephonySession: callItem,\n          telephonySessionId,\n          toName,\n          fromName,\n          from: {\n            ...from,\n            phoneNumber: fromNumber,\n          },\n          to: {\n            ...to,\n            phoneNumber: toNumber,\n          },\n          startTime,\n          sessionId,\n          webphoneSession: currentDeviceCallsMap[telephonySessionId],\n          telephonyStatus,\n          warmTransferInfo: transferCallMapping[telephonySessionId],\n          isRecording,\n        };\n      }, combinedCalls).filter((x) => !!x),\n    );\n    return this._normalizedCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.allCalls,\n    that._deps.conferenceCall?.isMerging,\n  ])\n  get calls() {\n    return filter((callItem) => {\n      // filtering out the conferece during merging\n      if (this._deps.conferenceCall?.isMerging) {\n        // @ts-expect-error\n        return !isConferenceSession(callItem.webphoneSession);\n      }\n      return true;\n    }, this.allCalls);\n  }\n\n  @computed((that: CallMonitor) => [that.calls, that.useTelephonySession])\n  get activeRingCalls() {\n    // @ts-expect-error\n    return filter((callItem) => {\n      if (this.useTelephonySession) {\n        return (\n          callItem.webphoneSession &&\n          callItem.telephonySession &&\n          // @ts-expect-error\n          isProceeding(callItem.telephonySession)\n        );\n      }\n      return callItem.webphoneSession && isRing(callItem.webphoneSession);\n    }, this.calls);\n  }\n\n  @computed((that: CallMonitor) => [that.calls, that.useTelephonySession])\n  get _activeOnHoldCalls() {\n    if (this.useTelephonySession) {\n      return filter(\n        (callItem) =>\n          // @ts-expect-error\n          callItem.webphoneSession &&\n          callItem.telephonySession &&\n          // @ts-expect-error\n          isHolding(callItem.telephonySession),\n        this.calls,\n      );\n    }\n    return filter(\n      (callItem) =>\n        // @ts-expect-error\n        callItem.webphoneSession && isOnHold(callItem.webphoneSession),\n      this.calls,\n    );\n  }\n\n  @computed((that: CallMonitor) => [that.calls, that.useTelephonySession])\n  get _activeCurrentCalls() {\n    // @ts-expect-error\n    return filter((callItem) => {\n      if (this.useTelephonySession) {\n        return (\n          callItem.webphoneSession &&\n          callItem.telephonySession &&\n          // @ts-expect-error\n          !isProceeding(callItem.telephonySession) &&\n          // @ts-expect-error\n          !isHolding(callItem.telephonySession)\n        );\n      }\n      return (\n        callItem.webphoneSession &&\n        !isOnHold(callItem.webphoneSession) &&\n        !isRing(callItem.webphoneSession)\n      );\n    }, this.calls);\n  }\n\n  @computed((that: CallMonitor) => [\n    that._activeOnHoldCalls,\n    that._activeCurrentCalls,\n  ])\n  get activeOnHoldCalls() {\n    if (this._activeOnHoldCalls.length && !this._activeCurrentCalls.length) {\n      return this._activeOnHoldCalls.slice(1);\n    }\n    return this._activeOnHoldCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that._activeCurrentCalls,\n    that._activeOnHoldCalls,\n  ])\n  get activeCurrentCalls() {\n    return !this._activeCurrentCalls.length && this._activeOnHoldCalls.length\n      ? this._activeOnHoldCalls.slice(0, 1)\n      : this._activeCurrentCalls;\n  }\n\n  @computed((that: CallMonitor) => [\n    that.calls,\n    that._deps.webphone?.lastEndedSessions,\n    that.useTelephonySession,\n    that._deps.activeCallControl?.lastEndedSessionIds,\n  ])\n  get otherDeviceCalls() {\n    return reduce(\n      ({ sessionsCache, res }, callItem) => {\n        if (callItem.webphoneSession) {\n          return {\n            sessionsCache,\n            res,\n          };\n        }\n\n        if (!sessionsCache || !sessionsCache.length) {\n          return {\n            sessionsCache,\n            res: [...res, callItem],\n          };\n        }\n        // TODO: refactor\n        // @ts-expect-error\n        let endCall: boolean | NormalizedSession = null;\n        if (this.useTelephonySession) {\n          endCall = isCurrentDeviceEndCall(sessionsCache as string[], callItem);\n        } else {\n          // @ts-expect-error\n          endCall = matchWephoneSessionWithAcitveCall(\n            sessionsCache as NormalizedSession[],\n            callItem,\n          );\n        }\n\n        return {\n          sessionsCache: filter(\n            (x) => x !== endCall,\n            sessionsCache as NormalizedSession[],\n          ),\n          res: endCall ? res : [...res, callItem],\n        };\n      },\n      {\n        sessionsCache: this.useTelephonySession\n          ? this._deps.activeCallControl?.lastEndedSessionIds\n          : this._deps.webphone?.lastEndedSessions,\n        res: [] as Call[],\n      },\n      this.calls,\n    ).res;\n  }\n\n  @computed((that: CallMonitor) => [that.normalizedCalls])\n  get uniqueNumbers() {\n    const output: string[] = [];\n    const numberMap: Record<string, boolean> = {};\n    function addIfNotExist(number: string) {\n      if (!numberMap[number]) {\n        output.push(number);\n        numberMap[number] = true;\n      }\n    }\n    forEach((callItem) => {\n      if (callItem.from && callItem.from.phoneNumber) {\n        addIfNotExist(callItem.from.phoneNumber);\n      }\n      if (callItem.to && callItem.to.phoneNumber) {\n        addIfNotExist(callItem.to.phoneNumber);\n      }\n    }, this.normalizedCalls);\n    return output;\n  }\n\n  @computed((that: CallMonitor) => [that.normalizedCalls])\n  get sessionIds() {\n    return map((callItem) => callItem.sessionId, this.normalizedCalls);\n  }\n\n  @computed((that: CallMonitor) => [that.otherDeviceCalls])\n  get ringoutRingCalls() {\n    return filter(\n      (callItem) => isRingingInboundCall(callItem),\n      this.otherDeviceCalls,\n    );\n  }\n\n  @computed((that: CallMonitor) => [that.otherDeviceCalls])\n  get ringoutCurrentCalls() {\n    return filter(\n      (callItem) =>\n        !isRingingInboundCall(callItem) && !isRingOutOnHold(callItem),\n      this.otherDeviceCalls,\n    );\n  }\n\n  @computed((that: CallMonitor) => [that.otherDeviceCalls])\n  get ringoutOnHoldCalls() {\n    return filter(\n      (callItem) => isRingOutOnHold(callItem),\n      this.otherDeviceCalls,\n    );\n  }\n}\n"],"mappings":"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"}