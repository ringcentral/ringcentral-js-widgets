{"version":3,"file":"callMonitorHelper.js","names":["_callDirections","_interopRequireDefault","require","e","__esModule","getSessionStartTime","session","webphoneStartTime","direction","callDirections","inbound","creationTime","startTime","matchWebphoneSessionWithActiveCall","sessions","callItem","undefined","matches","filter","_sipData","partyData","telephonySessionId","_session$partyData","sessionId","partyId","callId","id","toName","toLowerCase","indexOf","sipData","remoteUri","from","outbound","to","Math","abs","length","sort","x","y","gapX","gapY","isCurrentDeviceEndCall","normalizeTelephonySession","status","otherParties"],"sources":["modules/CallMonitor/callMonitorHelper.ts"],"sourcesContent":["import callDirections from '../../enums/callDirections';\nimport type { ActiveCallControlSessionData } from '../../interfaces/ActiveSession.interface';\nimport type { Call } from '../../interfaces/Call.interface';\nimport type { ActiveCall } from '../../interfaces/Presence.model';\nimport type { NormalizedSession } from '../../interfaces/Webphone.interface';\n\nfunction getSessionStartTime(session: NormalizedSession) {\n  let webphoneStartTime;\n  if (session.direction === callDirections.inbound) {\n    webphoneStartTime = session.creationTime;\n  } else {\n    webphoneStartTime = session.startTime || session.creationTime;\n  }\n  return webphoneStartTime;\n}\n\nexport function matchWebphoneSessionWithActiveCall(\n  sessions: NormalizedSession[],\n  callItem: ActiveCall | Call,\n) {\n  if (!sessions || !callItem) {\n    return undefined;\n  }\n  const matches = sessions.filter((session) => {\n    // Strategy 1: use `P-Rc-Api-Ids` header of a webRTC session to match with `telephonySessionId`\n    // and `partyId` of a call data from presence api.\n    // when caller calls him self, the sessionId are the same, so we need the `partyId` to identify the participants.\n    if (session.partyData && callItem.telephonySessionId) {\n      const { sessionId, partyId } = session.partyData;\n      if (sessionId !== callItem.telephonySessionId) {\n        return false;\n      }\n      if (partyId === callItem.partyId) {\n        return true;\n      }\n      // For switched call, partyId is not matched\n      if (session.callId === callItem.id) {\n        return true;\n      }\n      return false;\n    }\n\n    // Strategy 2: use `call-id` header of a webRTC session to match with\n    // `id` of a call data from presence api.\n    // This approach is unstable since the `id` of a call data from presence api can change before\n    // the call being accepted.\n    if (session.callId === callItem.id) {\n      return true;\n    }\n\n    if (session.direction !== callItem.direction) {\n      return false;\n    }\n\n    /**\n     * Strategy 3:\n     * Hack: for conference call, the `to` field is Conference,\n     * and the callItem's id won't change. According to `sip.js/src/session.js`\n     * the `InviteClientContext`'s id will always begin with callItem's id.\n     */\n    if (callItem.toName && callItem.toName.toLowerCase() === 'conference') {\n      // @ts-expect-error TS(2345): Argument of type 'string | undefined' is not assig... Remove this comment to see the full error message\n      return session.id.indexOf(callItem.id) === 0;\n    }\n\n    if (!(callItem as ActiveCall).sipData?.remoteUri) {\n      return false;\n    }\n\n    if (\n      session.direction === callDirections.inbound &&\n      // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n      (callItem as ActiveCall).sipData.remoteUri.indexOf(session.from) === -1\n    ) {\n      return false;\n    }\n\n    if (\n      session.direction === callDirections.outbound &&\n      // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n      (callItem as ActiveCall).sipData.remoteUri.indexOf(session.to) === -1\n    ) {\n      return false;\n    }\n\n    // 16000 is from experience in test.\n    // there is delay bettween active call created and webphone session created\n    // for example, the time delay is decided by when webphone get invite info\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    if (Math.abs(callItem.startTime - getSessionStartTime(session)) > 16000) {\n      return false;\n    }\n    return true;\n  });\n\n  if (matches.length > 1) {\n    // order by the time gap asc\n    matches.sort((x, y) => {\n      // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n      const gapX = Math.abs(callItem.startTime - getSessionStartTime(x));\n      // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n      const gapY = Math.abs(callItem.startTime - getSessionStartTime(y));\n      return gapX === gapY ? 0 : gapX - gapY;\n    });\n  }\n\n  return matches[0];\n}\n\nexport function isCurrentDeviceEndCall(sessions: string[], callItem: Call) {\n  // @ts-expect-error TS(2345): Argument of type 'string | undefined' is not assig... Remove this comment to see the full error message\n  return sessions.indexOf(callItem.telephonySessionId) !== -1;\n}\n\nexport function normalizeTelephonySession(\n  session: ActiveCallControlSessionData,\n) {\n  return {\n    status: session.status,\n    id: session.id,\n    direction: session.direction,\n    otherParties: session.otherParties,\n  };\n}\n"],"mappings":"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","ignoreList":[]}