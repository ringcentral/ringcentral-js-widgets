{"version":3,"sources":["modules/CallMonitor/callMonitorHelper.ts"],"names":["getSessionStartTime","session","webphoneStartTime","direction","callDirections","inbound","creationTime","startTime","matchWephoneSessionWithAcitveCall","sessions","callItem","undefined","matches","filter","partyData","telephonySessionId","sessionId","partyId","callId","id","toName","toLowerCase","indexOf","sipData","remoteUri","from","outbound","to","Math","abs","length","sort","x","y","gapX","gapY","isCurrentDeviceEndCall","mapTelephonyStatus","telephonySessionStatus","result","PartyStatusCode","setup","proceeding","telephonyStatus","ringing","hold","onHold","answered","callConnected","parked","parkedCall","noCall"],"mappings":"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","sourcesContent":["import { PartyStatusCode } from 'ringcentral-call-control/lib/Session';\n\nimport callDirections from '../../enums/callDirections';\nimport { telephonyStatus } from '../../enums/telephonyStatus';\n\nfunction getSessionStartTime(session) {\n  let webphoneStartTime;\n  if (session.direction === callDirections.inbound) {\n    webphoneStartTime = session.creationTime;\n  } else {\n    webphoneStartTime = session.startTime || session.creationTime;\n  }\n  return webphoneStartTime;\n}\n\nexport function matchWephoneSessionWithAcitveCall(sessions, callItem) {\n  if (!sessions || !callItem) {\n    return undefined;\n  }\n  const matches = sessions.filter((session) => {\n    // Strategy 1: use `P-Rc-Api-Ids` header of a webRTC session to match with `telephonySessionId`\n    // and `partyId` of a call data from presence api.\n    // when caller calls him self, the sessionId are the same, so we need the `partyId` to identify the participants.\n    if (session.partyData && callItem.telephonySessionId) {\n      const { sessionId, partyId } = session.partyData;\n      if (sessionId !== callItem.telephonySessionId) {\n        return false;\n      }\n      if (partyId === callItem.partyId) {\n        return true;\n      }\n      // For switched call, partyId is not matched\n      if (session.callId === callItem.id) {\n        return true;\n      }\n      return false;\n    }\n\n    // Strategy 2: use `call-id` header of a webRTC session to match with\n    // `id` of a call data from presence api.\n    // This approach is unstable since the `id` of a call data from presence api can change before\n    // the call being accepted.\n    if (session.callId === callItem.id) {\n      return true;\n    }\n\n    if (session.direction !== callItem.direction) {\n      return false;\n    }\n\n    /**\n     * Strategy 3:\n     * Hack: for conference call, the `to` field is Conference,\n     * and the callItem's id won't change. According to `sip.js/src/session.js`\n     * the `InviteClientContext`'s id will always begin with callItem's id.\n     */\n    if (callItem.toName && callItem.toName.toLowerCase() === 'conference') {\n      return session.id.indexOf(callItem.id) === 0;\n    }\n\n    if (!callItem.sipData.remoteUri || callItem.sipData.remoteUri === '') {\n      return false;\n    }\n\n    if (\n      session.direction === callDirections.inbound &&\n      callItem.sipData.remoteUri.indexOf(session.from) === -1\n    ) {\n      return false;\n    }\n\n    if (\n      session.direction === callDirections.outbound &&\n      callItem.sipData.remoteUri.indexOf(session.to) === -1\n    ) {\n      return false;\n    }\n\n    // 16000 is from experience in test.\n    // there is delay bettween active call created and webphone session created\n    // for example, the time delay is decided by when webphone get invite info\n    if (Math.abs(callItem.startTime - getSessionStartTime(session)) > 16000) {\n      return false;\n    }\n    return true;\n  });\n\n  if (matches.length > 1) {\n    // order by the time gap asc\n    matches.sort((x, y) => {\n      const gapX = Math.abs(callItem.startTime - getSessionStartTime(x));\n      const gapY = Math.abs(callItem.startTime - getSessionStartTime(y));\n      return gapX === gapY ? 0 : gapX - gapY;\n    });\n  }\n\n  return matches[0];\n}\n\nexport function isCurrentDeviceEndCall(sessions, callItem) {\n  return sessions.indexOf(callItem.telephonySessionId) !== -1;\n}\n\n// telephony session status match presence telephonyStatus\nexport function mapTelephonyStatus(telephonySessionStatus) {\n  let result = null;\n  switch (telephonySessionStatus) {\n    case PartyStatusCode.setup:\n    case PartyStatusCode.proceeding: {\n      result = telephonyStatus.ringing;\n      break;\n    }\n    case PartyStatusCode.hold: {\n      result = telephonyStatus.onHold;\n      break;\n    }\n    case PartyStatusCode.answered: {\n      result = telephonyStatus.callConnected;\n      break;\n    }\n    case PartyStatusCode.parked: {\n      result = telephonyStatus.parkedCall;\n      break;\n    }\n    default: {\n      result = telephonyStatus.noCall;\n    }\n  }\n  return result;\n}\n"],"file":"callMonitorHelper.js"}