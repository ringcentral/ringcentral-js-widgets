{"version":3,"sources":["modules/CallMonitor/index.ts"],"names":["CallMonitor","deps","dep","optional","call","conferenceCall","accountInfo","presence","activityMatcher","contactMatcher","tabManager","webphone","onRinging","onNewCall","onCallUpdated","onCallEnded","storage","activeCallControl","useTelephonySession","options","actionTypes","_call","_conferenceCall","_accountInfo","ensureExist","_presence","_contactMatcher","_activityMatcher","_tabManager","_webphone","_activeCallControl","_onNewCall","_onCallUpdated","_onCallEnded","_storage","_callMatchedKey","_onRinging","_onRingingFuncs","_reducer","registerReducer","key","reducer","_normalizedCalls","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","_lastProcessedNumbers","_lastProcessedCalls","_lastProcessedIds","_useTelephonySession","console","warn","pending","store","dispatch","type","init","initSuccess","reset","resetSuccess","active","newNumbers","match","queries","ignoreQueue","newSessions","calls","oldCalls","slice","length","toNumberEntities","cleanToNumberEntities","entities","sortByStartTime","oldCallIndex","item","sessionId","Array","isArray","forEach","func","oldCall","splice","telephonyStatus","from","phoneNumber","inboundCallConnectedTrack","outboundCallConnectedTrack","entity","index","toEntity","toMatch","id","entityId","toMatches","undefined","_removeMatched","_setMatchedData","toEntityId","subscribe","_onStateChange","log","matched","setData","callItemClickTrack","allCallsClickHoldTrack","allCallsClickHangupTrack","allCallsClickRejectTrack","callControlClickAddTrack","mergeControlClickHangupTrack","callControlClickMergeTrack","confirmMergeClickCloseTrack","confirmMergeClickMergeTrack","callsOnHoldClickAddTrack","callsOnHoldClickMergeTrack","callsOnHoldClickHangupTrack","callControlClickParticipantAreaClickTrack","push","state","status","moduleStatuses","getItem","RcModule","selector","normalizedCalls","dataMapping","callMatched","contactMapping","activityMapping","callItem","fromNumber","toNumber","to","fromMatches","toNumberEntity","activityMatches","normalizedCallsFromPresence","normalizedCallsFromTelephonySessions","countryCode","sessions","cachedSessions","callsFromPresence","cachedCalls","x","webphoneSession","i","combinedCalls","cachedCall","theSessions","l","r","startTime","currentDeviceCallsMap","telephonySessions","presenceCalls","currentRcCallSession","rcCallSessions","find","direction","party","telephonySessionId","_activeCallId","presenceCall","toName","name","fromName","partyId","telephonySession","code","filter","allCalls","isMerging","_activeOnHoldCalls","_activeCurrentCalls","lastEndedSessions","lastEndedSessionIds","callControlLastEndedSessions","sessionsCache","res","endCall","output","numberMap","addIfNotExist","number","otherDeviceCalls"],"mappings":"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","sourcesContent":["import {\n  difference,\n  filter,\n  find,\n  findIndex,\n  forEach,\n  map,\n  reduce,\n  sort,\n} from 'ramda';\n\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport {\n  hasRingingCalls,\n  isInbound,\n  isOnHold as isRingOutOnHold,\n  isRinging,\n  isRingingInboundCall,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport RcModule from '../../lib/RcModule';\nimport { selector } from '../../lib/selector';\nimport {\n  isForwardedToVoiceMail,\n  isHolding,\n  isOnSetupStage,\n  isRinging as isProceeding,\n} from '../ActiveCallControlV2/helpers';\nimport { normalizeTelephonySession } from '../CallMonitorV2/callMonitorHelper';\nimport {\n  isConferenceSession,\n  isOnHold,\n  isRing,\n  sortByLastActiveTimeDesc,\n} from '../Webphone/webphoneHelper';\nimport actionTypes from './actionTypes';\nimport {\n  isCurrentDeviceEndCall,\n  mapTelephonyStatus,\n  matchWephoneSessionWithAcitveCall,\n} from './callMonitorHelper';\nimport getCallMonitorReducer, {\n  getCallMatchedReducer,\n} from './getCallMonitorReducer';\n\n/**\n * @class\n * @description active calls monitor module\n */\n@Module({\n  deps: [\n    'AccountInfo',\n    'Storage',\n    'Presence',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'Call', optional: true },\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'CallMonitorOptions', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'ActiveCallControl', optional: true },\n  ],\n})\nexport default class CallMonitor extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Call} params.call - call module instance\n   * @param {ConferenceCall} params.conferenceCall - conference call module instance\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   * @param {Presence} params.presence - presence module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {Function} params.onRinging - function on ring\n   * @param {Function} params.onNewCall - function on new call\n   * @param {Function} params.onCallUpdated - function on call updated\n   * @param {Function} params.onCallEnded - function on call ended\n   */\n  constructor({\n    call,\n    conferenceCall,\n    accountInfo,\n    presence,\n    activityMatcher,\n    contactMatcher,\n    tabManager,\n    webphone,\n    onRinging,\n    onNewCall,\n    onCallUpdated,\n    onCallEnded,\n    storage,\n    activeCallControl,\n    // this feature requires to enable ActiveCallControlV2\n    useTelephonySession = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._call = call;\n    this._conferenceCall = conferenceCall;\n    this._accountInfo = ensureExist.call(this, accountInfo, 'accountInfo');\n    this._presence = ensureExist.call(this, presence, 'presence');\n    this._contactMatcher = contactMatcher;\n    this._activityMatcher = activityMatcher;\n    this._tabManager = tabManager;\n    this._webphone = webphone;\n    this._activeCallControl = activeCallControl;\n    this._onNewCall = onNewCall;\n    this._onCallUpdated = onCallUpdated;\n    this._onCallEnded = onCallEnded;\n    this._storage = ensureExist.call(this, storage, 'storage');\n    this._callMatchedKey = 'callMatched';\n    this._onRinging = onRinging;\n    // change _onRinging hook to array lsit\n    this._onRingingFuncs = [];\n\n    this._reducer = getCallMonitorReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._callMatchedKey,\n      reducer: getCallMatchedReducer(this.actionTypes),\n    });\n\n    this._normalizedCalls = null;\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => this._accountInfo.ready && this._presence.ready,\n      });\n    }\n\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: () => this.sessionIds,\n        readyCheckFn: () => this._presence.ready,\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n    this._useTelephonySession = useTelephonySession;\n    if (this._useTelephonySession && !this._activeCallControl) {\n      console.warn(\n        'Use telephonySession at CallMonitor module requires ActiveCallControlV2 module',\n      );\n      this._useTelephonySession = false;\n    }\n  }\n\n  async _onStateChange() {\n    if (\n      (!this._call || this._call.ready) &&\n      (!this._conferenceCall || this._conferenceCall.ready) &&\n      this._accountInfo.ready &&\n      this._presence.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._storage.ready &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      ((this._call && !this._call.ready) ||\n        (this._conferenceCall && !this._conferenceCall.ready) ||\n        !this._accountInfo.ready ||\n        !this._presence.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._storage.ready) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastProcessedCalls = null;\n      this._lastProcessedIds = null;\n      this._lastProcessedNumbers = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (this.ready) {\n      const uniqueNumbers = this.uniqueNumbers;\n      if (\n        this._lastProcessedNumbers !== uniqueNumbers &&\n        (!this._tabManager || this._tabManager.active)\n      ) {\n        const newNumbers = difference(\n          uniqueNumbers,\n          this._lastProcessedNumbers || [],\n        );\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.match({\n            queries: newNumbers,\n            ignoreQueue: true,\n          });\n        }\n      }\n      const sessionIds = this.sessionIds;\n      if (\n        this._lastProcessedIds !== sessionIds &&\n        (!this._tabManager || this._tabManager.active)\n      ) {\n        const newSessions = difference(\n          sessionIds,\n          this._lastProcessedIds || [],\n        );\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.match({\n            queries: newSessions,\n            ignoreQueue: true,\n          });\n        }\n      }\n\n      if (this._lastProcessedCalls !== this.calls) {\n        const oldCalls =\n          (this._lastProcessedCalls && this._lastProcessedCalls.slice()) || [];\n\n        this._lastProcessedCalls = this.calls;\n\n        // no ringing calls\n        if (\n          this._call &&\n          oldCalls.length !== 0 &&\n          this.calls.length === 0 &&\n          this._call.toNumberEntities &&\n          this._call.toNumberEntities.length !== 0\n        ) {\n          // console.log('no calls clean to number:');\n          this._call.cleanToNumberEntities();\n        }\n\n        let entities = this._call\n          ? sort(sortByStartTime, this._call.toNumberEntities)\n          : [];\n        // const matchedMap = {};\n        forEach((call) => {\n          const oldCallIndex = findIndex(\n            (item) => item.sessionId === call.sessionId,\n            oldCalls,\n          );\n          if (oldCallIndex === -1) {\n            if (typeof this._onNewCall === 'function') {\n              this._onNewCall(call);\n            }\n            // loop to execut the onRinging handlers\n            if (isRinging(call)) {\n              if (this._onRinging && typeof this._onRinging === 'function') {\n                this._onRinging(call);\n              }\n              if (\n                Array.isArray(this._onRingingFuncs) &&\n                this._onRingingFuncs.length\n              ) {\n                this._onRingingFuncs.forEach((func) => {\n                  if (func && typeof func === 'function') {\n                    func(call);\n                  }\n                });\n              }\n            }\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (\n              call.telephonyStatus !== oldCall.telephonyStatus ||\n              (oldCall.from && oldCall.from.phoneNumber) !==\n                (call.from && call.from.phoneNumber)\n            ) {\n              if (typeof this._onCallUpdated === 'function') {\n                this._onCallUpdated(call);\n              }\n              if (call.telephonyStatus === 'CallConnected') {\n                if (isInbound(call)) {\n                  this.store.dispatch({\n                    type: this.actionTypes.inboundCallConnectedTrack,\n                  });\n                } else {\n                  this.store.dispatch({\n                    type: this.actionTypes.outboundCallConnectedTrack,\n                  });\n                }\n              }\n            }\n          }\n          find((entity, index) => {\n            const toEntity = find(\n              (toMatch) => toMatch.id === entity.entityId,\n              call.toMatches,\n            );\n            if (toEntity !== undefined) {\n              entities = this._removeMatched(index, entities);\n              this._setMatchedData({\n                sessionId: call.sessionId,\n                toEntityId: toEntity.id,\n              });\n              return true;\n            }\n            return false;\n          }, entities);\n        }, this.calls);\n\n        forEach((call) => {\n          if (typeof this._onCallEnded === 'function') {\n            this._onCallEnded(call);\n          }\n        }, oldCalls);\n      }\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _removeMatched(index, entities) {\n    console.log('removeMatched:', index);\n    entities.splice(index, 1);\n    console.log('entities after splice:', entities);\n    return entities;\n  }\n\n  _setMatchedData(matched) {\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      ...matched,\n    });\n  }\n\n  // user action track funtions\n  callItemClickTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callItemClickTrack,\n    });\n  }\n\n  allCallsClickHoldTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.allCallsClickHoldTrack,\n    });\n  }\n\n  allCallsClickHangupTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.allCallsClickHangupTrack,\n    });\n  }\n\n  allCallsClickRejectTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.allCallsClickRejectTrack,\n    });\n  }\n\n  callControlClickAddTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callControlClickAddTrack,\n    });\n  }\n\n  mergeControlClickHangupTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.mergeControlClickHangupTrack,\n    });\n  }\n\n  callControlClickMergeTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callControlClickMergeTrack,\n    });\n  }\n\n  confirmMergeClickCloseTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.confirmMergeClickCloseTrack,\n    });\n  }\n\n  confirmMergeClickMergeTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.confirmMergeClickMergeTrack,\n    });\n  }\n\n  callsOnHoldClickAddTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callsOnHoldClickAddTrack,\n    });\n  }\n\n  callsOnHoldClickMergeTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callsOnHoldClickMergeTrack,\n    });\n  }\n\n  callsOnHoldClickHangupTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callsOnHoldClickHangupTrack,\n    });\n  }\n\n  callControlClickParticipantAreaTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callControlClickParticipantAreaClickTrack,\n    });\n  }\n\n  onRingings(func) {\n    this._onRingingFuncs.push(func);\n  }\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get callMatched() {\n    return this._storage.getItem(this._callMatchedKey);\n  }\n\n  get useTelephonySession() {\n    return this._useTelephonySession;\n  }\n\n  @selector\n  allCalls = [\n    () => this.normalizedCalls,\n    () => this._contactMatcher && this._contactMatcher.dataMapping,\n    () => this._activityMatcher && this._activityMatcher.dataMapping,\n    () => this.callMatched,\n    (\n      normalizedCalls,\n      contactMapping = {},\n      activityMapping = {},\n      callMatched,\n    ) => {\n      const calls = map((callItem) => {\n        const fromNumber = callItem.from && callItem.from.phoneNumber;\n        const toNumber = callItem.to && callItem.to.phoneNumber;\n        const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n        const toMatches = (toNumber && contactMapping[toNumber]) || [];\n        const toNumberEntity = callMatched[callItem.sessionId];\n        return {\n          ...callItem,\n          fromMatches,\n          toMatches,\n          activityMatches: activityMapping[callItem.sessionId] || [],\n          toNumberEntity,\n        };\n      }, normalizedCalls);\n      return calls;\n    },\n  ];\n\n  @selector\n  normalizedCalls = [\n    () => this.normalizedCallsFromPresence,\n    () => this.normalizedCallsFromTelephonySessions,\n    () => this.useTelephonySession,\n    (\n      normalizedCallsFromPresence,\n      normalizedCallsFromTelephonySessions,\n      useTelephonySession,\n    ) => {\n      if (useTelephonySession) {\n        return normalizedCallsFromTelephonySessions;\n      }\n      return normalizedCallsFromPresence;\n    },\n  ];\n\n  @selector\n  normalizedCallsFromPresence = [\n    () => this._presence.calls,\n    () => this._accountInfo.countryCode,\n    () => this._webphone && this._webphone.sessions,\n    () => this._webphone && this._webphone.cachedSessions,\n    (callsFromPresence, countryCode, sessions, cachedSessions) => {\n      // match cached calls\n      let cachedCalls = [];\n      if (this._normalizedCalls && cachedSessions && cachedSessions.length) {\n        cachedCalls = filter(\n          (x) =>\n            x.webphoneSession &&\n            find((i) => i.id === x.webphoneSession.id, cachedSessions),\n          this._normalizedCalls,\n        );\n      }\n\n      // combine\n      const combinedCalls = [...callsFromPresence]; // clone\n      forEach((cachedCall) => {\n        if (!find((x) => x.id === cachedCall.id, callsFromPresence)) {\n          combinedCalls.push(cachedCall);\n        }\n      }, cachedCalls);\n\n      // mapping and sort\n      let theSessions = sessions || [];\n      this._normalizedCalls = sort(\n        (l, r) =>\n          sortByLastActiveTimeDesc(l.webphoneSession, r.webphoneSession),\n        map((callItem) => {\n          // use account countryCode to normalize number due to API issues [RCINT-3419]\n          const fromNumber = normalizeNumber({\n            phoneNumber: callItem.from && callItem.from.phoneNumber,\n            countryCode,\n          });\n          const toNumber = normalizeNumber({\n            phoneNumber: callItem.to && callItem.to.phoneNumber,\n            countryCode,\n          });\n          const webphoneSession = matchWephoneSessionWithAcitveCall(\n            theSessions,\n            callItem,\n          );\n          theSessions = filter((x) => x !== webphoneSession, theSessions);\n          return {\n            ...callItem,\n            from: {\n              phoneNumber: fromNumber,\n            },\n            to: {\n              phoneNumber: toNumber,\n            },\n            startTime:\n              (webphoneSession && webphoneSession.startTime) ||\n              callItem.startTime,\n            webphoneSession,\n          };\n        }, combinedCalls),\n      );\n      return this._normalizedCalls;\n    },\n  ];\n\n  @selector\n  normalizedCallsFromTelephonySessions = [\n    () => this._activeCallControl?.sessions,\n    () => this._activeCallControl?.currentDeviceCallsMap,\n    () => this._accountInfo.countryCode,\n    () => this._activeCallControl?.cachedSessions,\n    () => this._presence.calls,\n    (\n      telephonySessions,\n      currentDeviceCallsMap,\n      countryCode,\n      cachedSessions,\n      presenceCalls,\n    ) => {\n      // TODO match cached calls when there are conference merging calls, refer to `normalizedCallsFromPresence` function\n      if (!telephonySessions) return [];\n      const combinedCalls = [...telephonySessions]; // clone\n\n      // mapping and sort\n      this._normalizedCalls = sort(\n        (l, r) =>\n          sortByLastActiveTimeDesc(l.webphoneSession, r.webphoneSession),\n        map((callItem) => {\n          const currentRcCallSession =\n            this._activeCallControl.rcCallSessions?.find(\n              (x) => x.id === callItem.id,\n            );\n          // sessionId arrives when telephony session event push and it's a required\n          // reference https://github.com/ringcentral/ringcentral-call-js/blob/master/src/Session.ts\n          if (\n            !currentRcCallSession ||\n            !currentRcCallSession.sessionId ||\n            isForwardedToVoiceMail(currentRcCallSession) ||\n            (isInbound(currentRcCallSession) &&\n              isOnSetupStage(currentRcCallSession))\n          ) {\n            return null;\n          }\n          const {\n            to,\n            from,\n            direction,\n            party,\n            telephonySessionId,\n            sessionId,\n            startTime,\n          } = currentRcCallSession;\n          let { _activeCallId: id } = currentRcCallSession;\n          // find id from presence call one time, due to telephony session event not push call id back\n          // with ringout call\n          if (!id) {\n            const presenceCall = presenceCalls.find(\n              (presenceCall) => presenceCall.telephonySessionId === callItem.id,\n            );\n            id = presenceCall?.id;\n          }\n          const fromNumber = normalizeNumber({\n            phoneNumber: from?.phoneNumber,\n            countryCode,\n          });\n          const toNumber = normalizeNumber({\n            phoneNumber: to?.phoneNumber,\n            countryCode,\n          });\n          const toName = to?.name;\n          const fromName = from?.name;\n          const partyId = party?.id;\n          const telephonySession =\n            normalizeTelephonySession(currentRcCallSession);\n          const telephonyStatus = mapTelephonyStatus(party?.status?.code);\n\n          // TODO: add sipData here\n          // const sipData = {};\n          return {\n            id,\n            partyId,\n            direction,\n            telephonySession,\n            telephonySessionId,\n            toName,\n            fromName,\n            from: {\n              phoneNumber: fromNumber,\n            },\n            to: {\n              phoneNumber: toNumber,\n            },\n            startTime,\n            sessionId,\n            webphoneSession: currentDeviceCallsMap[telephonySessionId],\n            telephonyStatus,\n          };\n        }, combinedCalls).filter((x) => !!x),\n      );\n      return this._normalizedCalls;\n    },\n  ];\n\n  @selector\n  calls = [\n    () => this.allCalls,\n    () => this._conferenceCall && this._conferenceCall.isMerging,\n    (calls, isMerging) =>\n      filter((callItem) => {\n        // filtering out the conferece during merging\n        if (isMerging) {\n          return !isConferenceSession(callItem.webphoneSession);\n        }\n        return true;\n      }, calls),\n  ];\n\n  @selector\n  activeRingCalls = [\n    () => this.calls,\n    () => this.useTelephonySession,\n    (calls, useTelephonySession) =>\n      filter((callItem) => {\n        if (useTelephonySession) {\n          return (\n            callItem.webphoneSession &&\n            callItem.telephonySession &&\n            isProceeding(callItem.telephonySession)\n          );\n        }\n        return callItem.webphoneSession && isRing(callItem.webphoneSession);\n      }, calls),\n  ];\n\n  @selector\n  _activeOnHoldCalls = [\n    () => this.calls,\n    () => this.useTelephonySession,\n    (calls, useTelephonySession) => {\n      if (useTelephonySession) {\n        return filter(\n          (callItem) =>\n            callItem.webphoneSession &&\n            callItem.telephonySession &&\n            isHolding(callItem.telephonySession),\n          calls,\n        );\n      }\n      return filter(\n        (callItem) =>\n          callItem.webphoneSession && isOnHold(callItem.webphoneSession),\n        calls,\n      );\n    },\n  ];\n\n  @selector\n  _activeCurrentCalls = [\n    () => this.calls,\n    () => this.useTelephonySession,\n    (calls, useTelephonySession) =>\n      filter((callItem) => {\n        if (useTelephonySession) {\n          return (\n            callItem.webphoneSession &&\n            callItem.telephonySession &&\n            !isProceeding(callItem.telephonySession) &&\n            !isHolding(callItem.telephonySession)\n          );\n        }\n        return (\n          callItem.webphoneSession &&\n          !isOnHold(callItem.webphoneSession) &&\n          !isRing(callItem.webphoneSession)\n        );\n      }, calls),\n  ];\n\n  @selector\n  activeOnHoldCalls = [\n    () => this._activeOnHoldCalls,\n    () => this._activeCurrentCalls,\n    (_activeOnHoldCalls, _activeCurrentCalls) => {\n      if (_activeOnHoldCalls.length && !_activeCurrentCalls.length) {\n        return _activeOnHoldCalls.slice(1);\n      }\n      return _activeOnHoldCalls;\n    },\n  ];\n\n  @selector\n  activeCurrentCalls = [\n    () => this._activeCurrentCalls,\n    () => this._activeOnHoldCalls,\n    (_activeCurrentCalls, _activeOnHoldCalls) =>\n      !_activeCurrentCalls.length && _activeOnHoldCalls.length\n        ? _activeOnHoldCalls.slice(0, 1)\n        : _activeCurrentCalls,\n  ];\n\n  @selector\n  otherDeviceCalls = [\n    () => this.calls,\n    () => this._webphone && this._webphone.lastEndedSessions,\n    () => this.useTelephonySession,\n    () => this._activeCallControl?.lastEndedSessionIds,\n    (\n      calls,\n      lastEndedSessions,\n      useTelephonySession,\n      callControlLastEndedSessions,\n    ) =>\n      reduce(\n        ({ sessionsCache, res }, callItem) => {\n          if (callItem.webphoneSession) {\n            return {\n              sessionsCache,\n              res,\n            };\n          }\n\n          if (!sessionsCache || !sessionsCache.length) {\n            return {\n              sessionsCache,\n              res: [...res, callItem],\n            };\n          }\n          let endCall = null;\n          if (useTelephonySession) {\n            endCall = isCurrentDeviceEndCall(sessionsCache, callItem);\n          } else {\n            endCall = matchWephoneSessionWithAcitveCall(\n              sessionsCache,\n              callItem,\n            );\n          }\n\n          return {\n            sessionsCache: filter((x) => x !== endCall, sessionsCache),\n            res: endCall ? res : [...res, callItem],\n          };\n        },\n        {\n          sessionsCache: useTelephonySession\n            ? callControlLastEndedSessions\n            : lastEndedSessions,\n          res: [],\n        },\n        calls,\n      ).res,\n  ];\n\n  @selector\n  uniqueNumbers = [\n    () => this.normalizedCalls,\n    (normalizedCalls) => {\n      const output = [];\n      const numberMap = {};\n      function addIfNotExist(number) {\n        if (!numberMap[number]) {\n          output.push(number);\n          numberMap[number] = true;\n        }\n      }\n      forEach((callItem) => {\n        if (callItem.from && callItem.from.phoneNumber) {\n          addIfNotExist(callItem.from.phoneNumber);\n        }\n        if (callItem.to && callItem.to.phoneNumber) {\n          addIfNotExist(callItem.to.phoneNumber);\n        }\n      }, normalizedCalls);\n      return output;\n    },\n  ];\n\n  @selector\n  sessionIds = [\n    () => this._presence.calls,\n    (calls) => map((callItem) => callItem.sessionId, calls),\n  ];\n\n  @selector\n  ringoutRingCalls = [\n    () => this.otherDeviceCalls,\n    (otherDeviceCalls) =>\n      filter((callItem) => isRingingInboundCall(callItem), otherDeviceCalls),\n  ];\n\n  @selector\n  ringoutCurrentCalls = [\n    () => this.otherDeviceCalls,\n    (otherDeviceCalls) =>\n      filter(\n        (callItem) =>\n          !isRingingInboundCall(callItem) && !isRingOutOnHold(callItem),\n        otherDeviceCalls,\n      ),\n  ];\n\n  @selector\n  ringoutOnHoldCalls = [\n    () => this.otherDeviceCalls,\n    (otherDeviceCalls) =>\n      filter((callItem) => isRingOutOnHold(callItem), otherDeviceCalls),\n  ];\n}\n"],"file":"index.js"}