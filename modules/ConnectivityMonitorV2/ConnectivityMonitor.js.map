{"version":3,"sources":["modules/ConnectivityMonitorV2/ConnectivityMonitor.ts"],"names":["DEFAULT_TIME_TO_RETRY","DEFAULT_HEART_BEAT_INTERVAL","errorMessageTypes","rateLimiterErrorMessage","rateLimitReached","availabilityErrorMessages","serviceLimited","defaultCheckConnectionFn","fetch","ConnectivityMonitor","name","deps","dep","optional","_timeToRetry","_deps","connectivityMonitorOptions","timeToRetry","_heartBeatInterval","heartBeatInterval","_checkConnectionFunc","checkConnectionFunc","_requestSuccessHandler","_requestErrorHandler","_retryTimeoutId","_lastEnvironmentCounter","_unbindHandlers","connectivity","setConnectSuccess","_retry","error","message","includes","response","setConnectFail","_networkErrorHandler","networkLoss","setNetworkLoss","pending","environment","ready","changeCounter","_bindHandlers","_shouldInit","_shouldRebindHandlers","client","service","on","events","requestSuccess","requestError","window","addEventListener","removeListener","removeEventListener","clearTimeout","t","_clearTimeout","setTimeout","_checkConnection","RcModuleV2","state","action","proxify"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\n\nimport { action, RcModuleV2, state } from '@ringcentral-integration/core';\nimport { ApiError } from '@ringcentral/sdk';\n\nimport { Module } from '../../lib/di';\nimport proxify from '../../lib/proxy/proxify';\nimport availabilityErrorMessages from '../AvailabilityMonitor/errorMessages';\nimport { errorMessages as rateLimiterErrorMessage } from '../RateLimiterV2';\nimport { Deps } from './ConnectivityMonitor.interface';\n\nexport const DEFAULT_TIME_TO_RETRY = 5 * 1000;\nexport const DEFAULT_HEART_BEAT_INTERVAL = 60 * 1000;\n\nconst errorMessageTypes = [\n  rateLimiterErrorMessage.rateLimitReached,\n  availabilityErrorMessages.serviceLimited,\n];\n\nasync function defaultCheckConnectionFn() {\n  return fetch('https://pubsub.pubnub.com/time/0');\n}\n\n@Module({\n  name: 'ConnectivityMonitor',\n  deps: [\n    'Client',\n    { dep: 'Environment', optional: true },\n    { dep: 'ConnectivityMonitorOptions', optional: true },\n  ],\n})\nexport class ConnectivityMonitor extends RcModuleV2<Deps> {\n  protected _timeToRetry =\n    this._deps.connectivityMonitorOptions?.timeToRetry ?? DEFAULT_TIME_TO_RETRY;\n\n  protected _heartBeatInterval =\n    this._deps.connectivityMonitorOptions?.heartBeatInterval ??\n    DEFAULT_HEART_BEAT_INTERVAL;\n\n  protected _checkConnectionFunc = async () => {\n    try {\n      const checkConnectionFunc =\n        this._deps.connectivityMonitorOptions?.checkConnectionFunc ??\n        defaultCheckConnectionFn;\n      await checkConnectionFunc();\n      this._requestSuccessHandler();\n    } catch (error) {\n      this._requestErrorHandler(error);\n    }\n  };\n\n  protected _retryTimeoutId: NodeJS.Timeout = null;\n\n  protected _lastEnvironmentCounter = 0;\n\n  private _unbindHandlers?: () => void = null;\n\n  protected _requestSuccessHandler = () => {\n    if (!this.connectivity) {\n      this.setConnectSuccess();\n    }\n    this._retry();\n  };\n\n  protected _requestErrorHandler = (error: ApiError) => {\n    if (error.message && errorMessageTypes.includes(error.message)) return;\n\n    if (!error.response) {\n      if (this.connectivity) {\n        this.setConnectFail();\n      }\n    }\n    this._retry();\n  };\n\n  protected _networkErrorHandler = () => {\n    if (!this.networkLoss) {\n      this.setNetworkLoss();\n    }\n    this._retry();\n  };\n\n  constructor(deps: Deps) {\n    super({\n      deps,\n    });\n  }\n\n  @state\n  connectivity = true;\n\n  @state\n  networkLoss = false;\n\n  @action\n  setNetworkLoss() {\n    this.connectivity = false;\n    this.networkLoss = true;\n  }\n\n  @action\n  setConnectSuccess() {\n    this.connectivity = true;\n    this.networkLoss = false;\n  }\n\n  @action\n  setConnectFail() {\n    this.connectivity = false;\n  }\n\n  _shouldInit() {\n    return !!(\n      this.pending &&\n      (!this._deps.environment || this._deps.environment.ready)\n    );\n  }\n\n  _shouldRebindHandlers() {\n    return !!(\n      this.ready &&\n      this._deps.environment?.ready &&\n      this._deps.environment.changeCounter !== this._lastEnvironmentCounter\n    );\n  }\n\n  onInit() {\n    this._bindHandlers();\n  }\n\n  onInitSuccess() {\n    this._retry();\n  }\n\n  onStateChange() {\n    if (!this._shouldInit() && this._shouldRebindHandlers()) {\n      this._lastEnvironmentCounter = this._deps.environment.changeCounter;\n      this._bindHandlers();\n    }\n  }\n\n  _bindHandlers() {\n    this._unbindHandlers?.();\n    const client = this._deps.client.service.client();\n    client.on(client.events.requestSuccess, this._requestSuccessHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    window?.addEventListener('offline', this._networkErrorHandler);\n    this._unbindHandlers = () => {\n      client.removeListener(\n        client.events.requestSuccess,\n        this._requestSuccessHandler,\n      );\n      client.removeListener(\n        client.events.requestError,\n        this._requestErrorHandler,\n      );\n      window?.removeEventListener('offline', this._networkErrorHandler);\n      this._unbindHandlers = null;\n    };\n  }\n\n  @proxify\n  async _checkConnection() {\n    try {\n      await this._checkConnectionFunc();\n    } catch (error) {\n      // catch error\n    }\n  }\n\n  _clearTimeout() {\n    if (this._retryTimeoutId) {\n      clearTimeout(this._retryTimeoutId);\n      this._retryTimeoutId = null;\n    }\n  }\n\n  _retry(t = this.connectivity ? this._heartBeatInterval : this._timeToRetry) {\n    this._clearTimeout();\n    this._retryTimeoutId = setTimeout(() => {\n      this._retryTimeoutId = null;\n      this._checkConnection();\n    }, t);\n  }\n}\n"],"file":"ConnectivityMonitor.js"}