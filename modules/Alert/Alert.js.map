{"version":3,"sources":["modules/Alert/Alert.ts"],"names":["Alert","deps","dep","optional","ttl","alertOptions","options","_ttl","_action","_autoDismiss","now","Date","ids","state","messages","filter","item","timestamp","map","id","length","dismiss","_reducer","actionTypes","action","message","payload","level","alertLevels","info","allowDuplicates","loading","backdrop","classes","onBackdropClick","uuid","v4","store","dispatch","type","alert","setTimeout","danger","warning","success","update","concat","dismissAll","specifiedAlertIds","messagesId","forEach","specifiedAlertId","find","push","moduleStatuses","ready","RcModule","proxify"],"mappings":"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","sourcesContent":["import { DOMAttributes } from 'react';\nimport * as uuid from 'uuid';\n\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport { Module } from '../../lib/di';\nimport proxify from '../../lib/proxy/proxify';\nimport RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport alertLevels, { AlertLevelType } from './alertLevels';\nimport getAlertReducer from './getAlertReducer';\n\nexport interface AlertModel {\n  message: string;\n  payload?: any;\n  ttl?: number;\n  allowDuplicates?: boolean;\n  /**\n   * show loading with new notification\n   */\n  loading?: boolean;\n  /**\n   * action template(right area) with new notification\n   */\n  action?: React.ReactNode;\n  /**\n   * backdrop with page, default is false\n   */\n  backdrop?: boolean;\n  /**\n   * classes for that alert\n   */\n  classes?: {\n    backdrop?: string;\n  };\n  /**\n   * emit event when backdrop to be click\n   */\n  onBackdropClick?: DOMAttributes<HTMLDivElement>['onClick'];\n}\n\nexport type AlertLevel = {\n  level?: AlertLevelType;\n};\n\n/**\n * @class\n * @description Alert messages managing module.\n */\n@Module({\n  deps: [{ dep: 'AlertOptions', optional: true }],\n})\nexport default class Alert extends RcModule<\n  Record<string, any>,\n  typeof actionTypes\n> {\n  // TODO: add state interface\n  private _ttl: number;\n  private _action: React.ReactNode;\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Number} params.ttl - Default time-to-live for alert messages.\n   * @param {React.ReactNode} params.action - action template(right area) with new notification\n   */\n  constructor({ ttl = 5000, alertOptions, ...options }) {\n    super({\n      alertOptions,\n      ...options,\n    });\n    this._reducer = getAlertReducer(this.actionTypes);\n    this._ttl = ttl;\n    this._action = alertOptions?.action;\n  }\n\n  get _actionTypes() {\n    return actionTypes;\n  }\n\n  _onStateChange() {\n    /* do nothing */\n  }\n\n  // this module has no dependency, and is always ready\n  // eslint-disable-next-line class-methods-use-this\n  get status() {\n    return moduleStatuses.ready;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get ready() {\n    return true;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  /**\n   * @function\n   * @description Scans the messages for expired ones and dismiss them.\n   */\n  _autoDismiss = () => {\n    const now = Date.now();\n    const ids = this.state.messages\n      .filter((item) => item.ttl > 0 && now - item.timestamp > item.ttl)\n      .map((item) => item.id);\n    if (ids.length) {\n      this.dismiss(ids);\n    }\n  };\n\n  /**\n   * @function\n   * @description Add alert message to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {alertLevels} options.level\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  @proxify\n  alert({\n    message,\n    payload,\n    level = alertLevels.info as AlertLevelType,\n    ttl = this._ttl,\n    allowDuplicates = true,\n    loading = false,\n    backdrop = false,\n    classes,\n    onBackdropClick,\n    action = this._action,\n  }: AlertModel & AlertLevel) {\n    const id = uuid.v4();\n    this.store.dispatch({\n      type: this.actionTypes.alert,\n      message,\n      payload,\n      level,\n      // when loading the ttl will be zero, make this never dismiss\n      ttl: loading ? 0 : ttl,\n      allowDuplicates,\n      backdrop,\n      classes,\n      onBackdropClick,\n      id,\n      timestamp: Date.now(),\n      loading,\n      action,\n    });\n    if (ttl > 0) {\n      setTimeout(this._autoDismiss, ttl + 10);\n    }\n    return id;\n  }\n\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"danger\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  danger(options: AlertModel) {\n    return this.alert({\n      ...options,\n      level: alertLevels.danger as AlertLevelType,\n    });\n  }\n\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"warning\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  warning(options: AlertModel) {\n    return this.alert({\n      ...options,\n      level: alertLevels.warning as AlertLevelType,\n    });\n  }\n\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"info\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  info(options: AlertModel) {\n    return this.alert({\n      ...options,\n      level: alertLevels.info as AlertLevelType,\n    });\n  }\n\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"success\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  success(options: AlertModel) {\n    return this.alert({\n      ...options,\n      level: alertLevels.success as AlertLevelType,\n    });\n  }\n\n  /**\n   * @function\n   * @description Update the message with given id.\n   * @param {Array<String>|String} id - The message id of you want to update.\n   * @param options - update options.\n   */\n  update(\n    id: string,\n    options: Partial<Pick<AlertModel, 'message' | 'loading' | 'action'>>,\n  ) {\n    this.store.dispatch({\n      type: this.actionTypes.update,\n      ...options,\n      id,\n    });\n  }\n\n  /**\n   * @function\n   * @description Dismiss the message from the state.\n   * @param {Array<String>|String} ids - The id, or array of ids to be dismissed.\n   */\n  @proxify\n  dismiss(ids: string | string[]) {\n    this.store.dispatch({\n      type: this.actionTypes.dismiss,\n      ids: [].concat(ids),\n    });\n  }\n\n  /**\n   * @function\n   * @description Dismiss all messages.\n   */\n  @proxify\n  dismissAll() {\n    this.store.dispatch({\n      type: this.actionTypes.dismissAll,\n    });\n  }\n\n  /**\n   * @function\n   * @description  Dismiss all other messages expect some specified message.\n   */\n  @proxify\n  dismissAllExpectSpecified({\n    specifiedAlertIds,\n  }: {\n    specifiedAlertIds: string[];\n  }) {\n    const messagesId: string[] = [];\n    specifiedAlertIds.forEach((specifiedAlertId) => {\n      const message = this.messages.find(\n        (item: string) => item === specifiedAlertId,\n      );\n      if (message) messagesId.push(message);\n    });\n    this.store.dispatch({\n      type: this.actionTypes.dismiss,\n      ids: messagesId,\n    });\n  }\n}\n"],"file":"Alert.js"}