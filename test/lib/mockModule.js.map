{"version":3,"sources":["test/lib/mockModule.ts"],"names":["mockModuleWithDeps","module","deps","Root","providers","state","status","RcModule","root","create","store","reducer","setStore","key","provide","replace","match","toLowerCase","mockModuleGenerator","options","props","Object","assign","storeKey","dispatch","getState","subscribe"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,MADgC,EAGhCC,IAHgC,EAIZ;AAAA;;AAAA,MAIdC,IAJc,WACnB,uBAAc;AACbC,IAAAA,SAAS,GAAGH,MAAH,4BAAcC,IAAd;AADI,GAAd,CADmB;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,0BAKL;AACX,eAAO,KAAKG,KAAL,CAAWC,MAAlB;AACD;AAPiB;;AAAA;AAAA,IAIDC,qBAJC;AASpB,MAAMC,IAAI,GAAGL,IAAI,CAACM,MAAL,EAAb;AACA,MAAMC,KAAK,GAAG,wBAAYF,IAAI,CAACG,OAAjB,CAAd;AACAH,EAAAA,IAAI,CAACI,QAAL,CAAcF,KAAd;AACA,MAAMG,GAAG,GAAGZ,MAAM,CAACa,OAAP,CAAeC,OAAf,CAAuB,KAAvB,EAA8B,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACC,WAAN,EAAX;AAAA,GAA9B,CAAZ;AACA,SAAOT,IAAI,CAACK,GAAD,CAAX;AACD,CAlBM;;;;AAoBA,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAOC,OAAP,EAAmBC,KAAnB;AAAA;;AAAA,SACjCC,MAAM,CAACC,MAAP,CACEH,OADF,wDAGKI,cAHL,EAGgB;AACVC,IAAAA,QADU,sBACC,CAAE,CADH;AAEVC,IAAAA,QAFU,sBAEC,CAAE,CAFH;AAGVC,IAAAA,SAHU,uBAGE,CAAE;AAHJ,GAHhB,mDAQkB,EARlB,oBAUEN,KAVF,CADiC;AAAA,CAA5B","sourcesContent":["import { createStore } from 'redux';\n\nimport { storeKey } from '@ringcentral-integration/core';\n\nimport { ModuleFactory } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\n\nexport const mockModuleWithDeps = <T extends new (...args: any) => any>(\n  module: { provide: string; useClass: T },\n  // TODO: deps type from di\n  deps: any[],\n): InstanceType<T> => {\n  @ModuleFactory({\n    providers: [module, ...deps],\n  })\n  class Root extends RcModule {\n    get status() {\n      return this.state.status;\n    }\n  }\n  const root = Root.create();\n  const store = createStore(root.reducer);\n  root.setStore(store);\n  const key = module.provide.replace(/^./g, (match) => match.toLowerCase());\n  return root[key];\n};\n\nexport const mockModuleGenerator = <T, P>(options: T, props?: P) =>\n  Object.assign(\n    options,\n    {\n      [storeKey]: {\n        dispatch() {},\n        getState() {},\n        subscribe() {},\n      },\n      parentModule: {},\n    },\n    props,\n  );\n"],"file":"mockModule.js"}