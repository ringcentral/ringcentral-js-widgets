{"version":3,"sources":["lib/contactHelper.ts"],"names":["AllContactSourceName","addPhoneToContact","contact","phone","type","existedPhone","phoneNumbers","find","number","phoneNumber","phoneType","push","replace","uniqueContactItems","input","map","result","item","itemId","id","NON_ALPHABET_RE","byName","a","b","name1","name","toLowerCase","name2","isNumber1","test","isNumber2","length","localeCompare","sortContactItemsByName","sort","POUND_SIGN","groupByFirstLetterOfName","groups","group","forEach","letter","toLocaleUpperCase","caption","contacts","isSearchHitContact","lowerSearch","includes","firstName","lastName","x","trim","filter","join","Array","isArray","some","email","emails","getFilterContacts","searchFilter","getSearchForPhoneNumbers","entityType","searchString","options","isContactHit","phoneTypes","extension","isMultipleSiteEnabled","currentSiteCode","siteCode","contactId","profileImageUrl","profileImage","uri","getMatchContactsByPhoneNumber","findPhoneNumber","found","matchedContact","isSameSite","extensionNumber","extensionFromContacts","RegExp","isAnExtension","isExtensionExist","getFindPhoneNumber"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAQO,IAAMA,oBAAoB,GAAG,KAA7B;;;AAEA,SAASC,iBAAT,CACLC,OADK,EAELC,KAFK,EAGLC,IAHK,EAIL;AACA,MAAI,yBAAQD,KAAR,CAAJ,EAAoB;AAClB;AACD;;AACD,MAAME,YAAY,GAAGH,OAAO,CAACI,YAAR,CAAqBC,IAArB,CACnB,UAACC,MAAD;AAAA,WAAYA,MAAM,IAAIA,MAAM,CAACC,WAAP,KAAuBN,KAA7C;AAAA,GADmB,CAArB;;AAGA,MAAIE,YAAJ,EAAkB;AAChBA,IAAAA,YAAY,CAACK,SAAb,GAAyBN,IAAzB;AACD,GAFD,MAEO;AACLF,IAAAA,OAAO,CAACI,YAAR,CAAqBK,IAArB,CAA0B;AACxBF,MAAAA,WAAW,EAAEN,KADW;AAExBO,MAAAA,SAAS,EAAEN,IAAI,CAACQ,OAAL,CAAa,OAAb,EAAsB,EAAtB;AAFa,KAA1B;AAID;AACF;;AAEM,SAASC,kBAAT,GAAoD;AAAA,MAAxBC,KAAwB,uEAAJ,EAAI;AACzD,MAAMC,GAA4B,GAAG,EAArC;AACA,SAAO,mBACL,UAACC,MAAD,EAASC,IAAT,EAAkB;AAChB,QAAMC,MAAM,aAAMD,IAAI,CAACb,IAAX,SAAkBa,IAAI,CAACE,EAAvB,CAAZ;;AACA,QAAI,CAACJ,GAAG,CAACG,MAAD,CAAR,EAAkB;AAChBH,MAAAA,GAAG,CAACG,MAAD,CAAH,GAAc,IAAd;AACAF,MAAAA,MAAM,CAACL,IAAP,CAAYM,IAAZ;AACD;;AACD,WAAOD,MAAP;AACD,GARI,EASL,EATK,EAULF,KAVK,CAAP;AAYD;;AAED,IAAMM,eAAe,GAAG,SAAxB;;AACA,SAASC,MAAT,CAAgBC,CAAhB,EAA6BC,CAA7B,EAA0C;AACxC,MAAMC,KAAK,GAAG,CAACF,CAAC,CAACG,IAAF,IAAU,EAAX,EAAeC,WAAf,GAA6Bd,OAA7B,CAAqC,QAArC,EAA+C,EAA/C,CAAd,CADwC,CAC0B;;AAClE,MAAMe,KAAK,GAAG,CAACJ,CAAC,CAACE,IAAF,IAAU,EAAX,EAAeC,WAAf,GAA6Bd,OAA7B,CAAqC,QAArC,EAA+C,EAA/C,CAAd,CAFwC,CAE0B;;AAClE,MAAMgB,SAAS,GAAG,SAASC,IAAT,CAAcL,KAAd,CAAlB;AACA,MAAMM,SAAS,GAAG,SAASD,IAAT,CAAcF,KAAd,CAAlB,CAJwC,CAKxC;;AACA,MAAIH,KAAK,CAACO,MAAN,IAAgB,CAAhB,IAAqBJ,KAAK,CAACI,MAAN,IAAgB,CAAzC,EAA4C;AAC1C,WAAO,CAACP,KAAK,CAACQ,aAAN,CAAoBL,KAApB,CAAR;AACD;;AACD,MAAIC,SAAS,IAAIE,SAAjB,EAA4B;AAC1B,WAAON,KAAK,CAACQ,aAAN,CAAoBL,KAApB,CAAP;AACD;;AACD,MAAIC,SAAS,IAAIE,SAAjB,EAA4B;AAC1B;AACA,WAAO,CAACN,KAAK,CAACQ,aAAN,CAAoBL,KAApB,CAAR;AACD;;AACD,MAAIP,eAAe,CAACS,IAAhB,CAAqBL,KAAK,CAAC,CAAD,CAA1B,KAAkC,CAACJ,eAAe,CAACS,IAAhB,CAAqBF,KAAK,CAAC,CAAD,CAA1B,CAAvC,EAAuE;AACrE,WAAO,CAAP;AACD;;AACD,MAAI,CAACP,eAAe,CAACS,IAAhB,CAAqBL,KAAK,CAAC,CAAD,CAA1B,CAAD,IAAmCJ,eAAe,CAACS,IAAhB,CAAqBF,KAAK,CAAC,CAAD,CAA1B,CAAvC,EAAuE;AACrE,WAAO,CAAC,CAAR;AACD;;AACD,SAAOH,KAAK,CAACQ,aAAN,CAAoBL,KAApB,CAAP;AACD;;AAEM,SAASM,sBAAT,GAAwD;AAAA,MAAxBnB,KAAwB,uEAAJ,EAAI;AAC7D,SAAOA,KAAK,CAACoB,IAAN,CAAWb,MAAX,CAAP;AACD;;AAED,IAAMc,UAAU,GAAG,GAAnB;;AACO,SAASC,wBAAT,GAA0D;AAAA,MAAxBtB,KAAwB,uEAAJ,EAAI;AAC/D,MAAMuB,MAAsB,GAAG,EAA/B;;AACA,MAAIvB,KAAK,IAAIA,KAAK,CAACiB,MAAnB,EAA2B;AACzB,QAAIO,KAAJ;AACAxB,IAAAA,KAAK,CAACyB,OAAN,CAAc,UAACrC,OAAD,EAAa;AACzB,UAAMuB,IAAI,GAAG,CAACvB,OAAO,CAACuB,IAAR,IAAgB,EAAjB,EAAqBb,OAArB,CAA6B,QAA7B,EAAuC,EAAvC,CAAb,CADyB,CACgC;;AACzD,UAAI4B,MAAM,GAAG,IAAb;;AACA,UAAIf,IAAI,CAACM,MAAL,IAAe,CAAf,IAAoBX,eAAe,CAACS,IAAhB,CAAqBJ,IAAI,CAAC,CAAD,CAAzB,CAAxB,EAAuD;AACrDe,QAAAA,MAAM,GAAGL,UAAT;AACD,OAFD,MAEO;AACLK,QAAAA,MAAM,GAAG,CAACf,IAAI,CAAC,CAAD,CAAJ,IAAW,EAAZ,EAAgBgB,iBAAhB,EAAT;AACD;;AACD,UAAI,CAACH,KAAD,IAAUA,KAAK,CAACI,OAAN,KAAkBF,MAAhC,EAAwC;AACtCF,QAAAA,KAAK,GAAG;AACNK,UAAAA,QAAQ,EAAE,EADJ;AAEND,UAAAA,OAAO,EAAEF,MAFH;AAGNrB,UAAAA,EAAE,EAAEqB;AAHE,SAAR;AAKAH,QAAAA,MAAM,CAAC1B,IAAP,CAAY2B,KAAZ;AACD;;AACDA,MAAAA,KAAK,CAACK,QAAN,CAAehC,IAAf,CAAoBT,OAApB;AACD,KAjBD;AAkBD;;AACD,SAAOmC,MAAP;AACD;;AAEM,SAASO,kBAAT,OAMK;AAAA,MALVC,WAKU,QALVA,WAKU;AAAA,MAJV3C,OAIU,QAJVA,OAIU;AACV,SACE;AACC,KAAC,CAACA,OAAO,CAACuB,IAAV,IAAkBvB,OAAO,CAACuB,IAAR,CAAaC,WAAb,GAA2BoB,QAA3B,CAAoCD,WAApC,CAAnB,IACA,CAAC3C,OAAO,CAAC6C,SAAT,EAAoB7C,OAAO,CAAC8C,QAA5B,EACGjC,GADH,CACO,UAACkC,CAAD;AAAA,aAAOA,CAAC,IAAIA,CAAC,CAACC,IAAF,EAAZ;AAAA,KADP,EAEGC,MAFH,CAEU,UAACF,CAAD;AAAA,aAAO,CAAC,CAACA,CAAT;AAAA,KAFV,EAGGG,IAHH,CAGQ,GAHR,EAIG1B,WAJH,GAKGoB,QALH,CAKYD,WALZ,CADA,IAQCQ,KAAK,CAACC,OAAN,CAAcpD,OAAO,CAACI,YAAtB,KACCJ,OAAO,CAACI,YAAR,CAAqBiD,IAArB,CACE,UAACN,CAAD;AAAA,aAAOA,CAAC,CAACxC,WAAF,IAAiBwC,CAAC,CAACxC,WAAF,CAAcqC,QAAd,CAAuBD,WAAvB,CAAxB;AAAA,KADF,CATF,IAaC,CAAC,CAAC3C,OAAO,CAACsD,KAAV,IAAmBtD,OAAO,CAACsD,KAAR,CAAc9B,WAAd,OAAgCmB,WAbpD,IAcCQ,KAAK,CAACC,OAAN,CAAcpD,OAAO,CAACuD,MAAtB,KACCvD,OAAO,CAACuD,MAAR,CAAe1C,GAAf,CAAmB,UAACkC,CAAD;AAAA,aAAOA,CAAC,IAAIA,CAAC,CAACvB,WAAF,EAAZ;AAAA,KAAnB,EAAgDoB,QAAhD,CAAyDD,WAAzD;AAjBJ;AAmBD;;AAEM,SAASa,iBAAT,CACLf,QADK,EAELgB,YAFK,EAGO;AACZ,MAAI,CAACA,YAAD,IAAiB,yBAAQA,YAAR,CAArB,EAA4C;AAC1C,WAAOhB,QAAP;AACD;;AACD,MAAME,WAAW,GAAGc,YAAY,CAACjC,WAAb,EAApB;AACA,SAAOiB,QAAQ,CAACQ,MAAT,CAAgB,UAACjD,OAAD;AAAA,WACrB0C,kBAAkB,CAAC;AAAEC,MAAAA,WAAW,EAAXA,WAAF;AAAe3C,MAAAA,OAAO,EAAPA;AAAf,KAAD,CADG;AAAA,GAAhB,CAAP;AAGD;;AAEM,SAAS0D,wBAAT,QAagB;AAAA,MAZrBjB,QAYqB,SAZrBA,QAYqB;AAAA,MAXrBkB,UAWqB,SAXrBA,UAWqB;AAAA,MAVrBC,YAUqB,SAVrBA,YAUqB;AAAA,MATrBC,OASqB,SATrBA,OASqB;;AACrB,MAAI,CAACD,YAAL,EAAmB;AACjB,WAAO,EAAP;AACD;;AACD,MAAMjB,WAAW,GAAGiB,YAAY,CAACpC,WAAb,EAApB;AACA,MAAMV,MAA0B,GAAG,EAAnC;AACA2B,EAAAA,QAAQ,CAACJ,OAAT,CAAiB,UAACrC,OAAD,EAAa;AAC5B,QAAI,CAACmD,KAAK,CAACC,OAAN,CAAcpD,OAAO,CAACI,YAAtB,CAAD,IAAwC,CAACJ,OAAO,CAACI,YAAR,CAAqByB,MAAlE,EAA0E;AACxE;AACD;;AACD,QAAMiC,YAAY,GAAGpB,kBAAkB,CAAC;AAAEC,MAAAA,WAAW,EAAXA,WAAF;AAAe3C,MAAAA,OAAO,EAAPA;AAAf,KAAD,CAAvC;AACAA,IAAAA,OAAO,CAACI,YAAR,CAAqBiC,OAArB,CAA6B,iBAAgC;AAAA,UAA7B7B,SAA6B,SAA7BA,SAA6B;AAAA,UAAlBD,WAAkB,SAAlBA,WAAkB;;AAC3D,UAAIuD,YAAY,IAAKvD,WAAW,IAAIA,WAAW,CAACqC,QAAZ,CAAqBD,WAArB,CAApC,EAAwE;AAAA;;AACtE,YACEnC,SAAS,KAAKuD,uBAAWC,SAAzB,KACAH,OADA,aACAA,OADA,uBACAA,OAAO,CAAEI,qBADT,CADF,EAGE;AAAA;;AACA;AACA1D,UAAAA,WAAW,GAAG,qCAAwB;AACpC2D,YAAAA,eAAe,uBAAEL,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEM,QAAX,iEAAuB,EADF;AAEpCH,YAAAA,SAAS,EAAEzD;AAFyB,WAAxB,CAAd;AAID;;AACDO,QAAAA,MAAM,CAACL,IAAP,CAAY;AACVQ,UAAAA,EAAE,YAAKjB,OAAO,CAACiB,EAAb,SAAkBV,WAAlB,CADQ;AAEV6D,UAAAA,SAAS,EAAEpE,OAAO,CAACiB,EAFT;AAGVM,UAAAA,IAAI,EAAEvB,OAAO,CAACuB,IAAR,cAAmBvB,OAAO,CAAC6C,SAA3B,cAAwC7C,OAAO,CAAC8C,QAAhD,CAHI;AAIV5C,UAAAA,IAAI,EAAEF,OAAO,CAACE,IAJJ;AAKVK,UAAAA,WAAW,EAAXA,WALU;AAMVC,UAAAA,SAAS,EAAEA,SAAS,CAACE,OAAV,CAAkB,OAAlB,EAA2B,EAA3B,CAND;AAOV2D,UAAAA,eAAe,2BAAErE,OAAO,CAACsE,YAAV,0DAAE,sBAAsBC,GAP7B;AAQVZ,UAAAA,UAAU,EAAVA;AARU,SAAZ;AAUD;AACF,KAvBD;AAwBD,GA7BD;AA8BA,SAAO7C,MAAP;AACD;;AAEM,SAAS0D,6BAAT,QAWY;AAAA,MAVjB/B,QAUiB,SAVjBA,QAUiB;AAAA,MATjBlC,WASiB,SATjBA,WASiB;AAAA,MARjBoD,UAQiB,SARjBA,UAQiB;AAAA,oCAPjBc,eAOiB;AAAA,MAPjBA,eAOiB,sCAPC,UAAC1D,IAAD;AAAA,WAChBA,IAAI,CAACR,WAAL,KAAqBA,WADL;AAAA,GAOD;AACjB,MAAMO,MAAsB,GAAG,EAA/B;AACA2B,EAAAA,QAAQ,CAACJ,OAAT,CAAiB,UAACrC,OAAD,EAAa;AAC5B,QAAM0E,KAAK,GACT1E,OAAO,CAACI,YAAR,IAAwBJ,OAAO,CAACI,YAAR,CAAqBC,IAArB,CAA0BoE,eAA1B,CAD1B;;AAEA,QAAI,CAACC,KAAL,EAAY;AACV;AACD;;AACD,QAAMC,cAAc,mCACf3E,OADe;AAElBI,MAAAA,YAAY,qBAAMJ,OAAO,CAACI,YAAd,CAFM;AAGlBuD,MAAAA,UAAU,EAAVA;AAHkB,MAApB;;AAKA7C,IAAAA,MAAM,CAACL,IAAP,CAAYkE,cAAZ;AACD,GAZD;AAaA,SAAO7D,MAAP;AACD;;AAED,IAAM8D,UAAU,GAAG,SAAbA,UAAa,QAQJ;AAAA,6BAPbT,QAOa;AAAA,MAPbA,QAOa,+BAPF,EAOE;AAAA,MANbU,eAMa,SANbA,eAMa;AAAA,MALbC,qBAKa,SALbA,qBAKa;;AACb;AACF;AACA;AACA;AACA;AACE,MACE,CAACX,QAAD,IACA,CAAC,WAAWxC,IAAX,CAAgBkD,eAAhB,CADD,IAECA,eAAe,CAAC,CAAD,CAAf,KAAuB,GAAvB,IAA8BA,eAAe,KAAK,GAHrD,EAIE;AACA,WAAO,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAO,IAAIE,MAAJ,YAAeZ,QAAf,eAA4BU,eAA5B,QAAgDlD,IAAhD,CACLmD,qBADK,CAAP;AAGD,CA9BD;;AAgCO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAC1E,MAAD,EAA6B;AACxD,SAAOA,MAAM,IAAIA,MAAM,CAACuB,MAAP,IAAiB,CAA3B,IAAgCvB,MAAM,CAAC,CAAD,CAAN,KAAc,GAArD;AACD,CAFM;AAIP;AACA;AACA;;;;;AACO,IAAM2E,gBAAgB,GAAG,SAAnBA,gBAAmB,QAiBjB;AAAA;;AAAA,MAhBbJ,eAgBa,SAhBbA,eAgBa;AAAA,MAfbC,qBAea,SAfbA,qBAea;AAAA,MAdbjB,OAca,SAdbA,OAca;;AACb,MAAIiB,qBAAqB,KAAKD,eAA9B,EAA+C;AAC7C,WAAO,IAAP;AACD;;AACD,MACEhB,OAAO,CAACI,qBAAR,IACAW,UAAU,CAAC;AACTT,IAAAA,QAAQ,wBAAEN,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEM,QAAX,mEAAuB,EADtB;AAETU,IAAAA,eAAe,EAAfA,eAFS;AAGTC,IAAAA,qBAAqB,EAArBA;AAHS,GAAD,CAFZ,EAOE;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAhCM;;;;AAkCA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,MAChC3E,WADgC,SAChCA,WADgC;AAAA,4BAEhCsD,OAFgC;AAAA,MAEhCA,OAFgC,8BAEtB,EAFsB;AAAA,SAS5B,UAAC9C,IAAD,EAA4C;AAChD,QAAIA,IAAI,CAACP,SAAL,KAAmBuD,uBAAWC,SAAlC,EAA6C;AAC3C,aACEgB,aAAa,CAACzE,WAAD,CAAb,IACA0E,gBAAgB,CAAC;AACfJ,QAAAA,eAAe,EAAEtE,WADF;AAEfuE,QAAAA,qBAAqB,EAAE/D,IAAI,CAACR,WAFb;AAGfsD,QAAAA,OAAO,EAAPA;AAHe,OAAD,CAFlB;AAQD;;AACD,WAAO9C,IAAI,CAACR,WAAL,KAAqBA,WAA5B;AACD,GArBiC;AAAA,CAA3B","sourcesContent":["import { reduce } from 'ramda';\nimport { formatSameSiteExtension } from '@ringcentral-integration/phone-number/lib/format';\nimport isBlank from './isBlank';\nimport { phoneTypes } from '../enums/phoneTypes';\nimport {\n  ContactGroup,\n  IContact,\n  TypedContact,\n  TypedPhoneNumber,\n} from '../interfaces/Contact.model';\n\nexport const AllContactSourceName = 'all';\n\nexport function addPhoneToContact(\n  contact: IContact,\n  phone: IContact['phoneNumber'],\n  type: IContact['type'],\n) {\n  if (isBlank(phone)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers.find(\n    (number) => number && number.phoneNumber === phone,\n  );\n  if (existedPhone) {\n    existedPhone.phoneType = type;\n  } else {\n    contact.phoneNumbers.push({\n      phoneNumber: phone,\n      phoneType: type.replace('Phone', ''),\n    });\n  }\n}\n\nexport function uniqueContactItems(input: IContact[] = []) {\n  const map: Record<string, boolean> = {};\n  return reduce(\n    (result, item) => {\n      const itemId = `${item.type}${item.id}`;\n      if (!map[itemId]) {\n        map[itemId] = true;\n        result.push(item);\n      }\n      return result;\n    },\n    [],\n    input,\n  ) as IContact[];\n}\n\nconst NON_ALPHABET_RE = /[^a-z]/i;\nfunction byName(a: IContact, b: IContact) {\n  const name1 = (a.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const name2 = (b.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const isNumber1 = /^[0-9]/.test(name1);\n  const isNumber2 = /^[0-9]/.test(name2);\n  // Empty string should be put at the end\n  if (name1.length <= 0 || name2.length <= 0) {\n    return -name1.localeCompare(name2);\n  }\n  if (isNumber1 && isNumber2) {\n    return name1.localeCompare(name2);\n  }\n  if (isNumber1 || isNumber2) {\n    // put number name at last\n    return -name1.localeCompare(name2);\n  }\n  if (NON_ALPHABET_RE.test(name1[0]) && !NON_ALPHABET_RE.test(name2[0])) {\n    return 1;\n  }\n  if (!NON_ALPHABET_RE.test(name1[0]) && NON_ALPHABET_RE.test(name2[0])) {\n    return -1;\n  }\n  return name1.localeCompare(name2);\n}\n\nexport function sortContactItemsByName(input: IContact[] = []) {\n  return input.sort(byName);\n}\n\nconst POUND_SIGN = '#';\nexport function groupByFirstLetterOfName(input: IContact[] = []) {\n  const groups: ContactGroup[] = [];\n  if (input && input.length) {\n    let group: ContactGroup;\n    input.forEach((contact) => {\n      const name = (contact.name || '').replace(/^\\s\\s*/, ''); // trim start\n      let letter = null;\n      if (name.length <= 0 || NON_ALPHABET_RE.test(name[0])) {\n        letter = POUND_SIGN;\n      } else {\n        letter = (name[0] || '').toLocaleUpperCase();\n      }\n      if (!group || group.caption !== letter) {\n        group = {\n          contacts: [],\n          caption: letter,\n          id: letter,\n        };\n        groups.push(group);\n      }\n      group.contacts.push(contact);\n    });\n  }\n  return groups;\n}\n\nexport function isSearchHitContact({\n  lowerSearch,\n  contact,\n}: {\n  lowerSearch: string;\n  contact: IContact;\n}): boolean {\n  return (\n    // search names\n    (!!contact.name && contact.name.toLowerCase().includes(lowerSearch)) ||\n    [contact.firstName, contact.lastName]\n      .map((x) => x && x.trim())\n      .filter((x) => !!x)\n      .join(' ')\n      .toLowerCase()\n      .includes(lowerSearch) ||\n    // search phones\n    (Array.isArray(contact.phoneNumbers) &&\n      contact.phoneNumbers.some(\n        (x) => x.phoneNumber && x.phoneNumber.includes(lowerSearch),\n      )) ||\n    // search emails\n    (!!contact.email && contact.email.toLowerCase() === lowerSearch) ||\n    (Array.isArray(contact.emails) &&\n      contact.emails.map((x) => x && x.toLowerCase()).includes(lowerSearch))\n  );\n}\n\nexport function getFilterContacts(\n  contacts: IContact[],\n  searchFilter: string,\n): IContact[] {\n  if (!searchFilter || isBlank(searchFilter)) {\n    return contacts;\n  }\n  const lowerSearch = searchFilter.toLowerCase();\n  return contacts.filter((contact) =>\n    isSearchHitContact({ lowerSearch, contact }),\n  );\n}\n\nexport function getSearchForPhoneNumbers({\n  contacts,\n  entityType,\n  searchString,\n  options,\n}: {\n  contacts: IContact[];\n  entityType: string;\n  searchString: string;\n  options?: {\n    isMultipleSiteEnabled?: boolean;\n    siteCode?: string;\n  };\n}): TypedPhoneNumber[] {\n  if (!searchString) {\n    return [];\n  }\n  const lowerSearch = searchString.toLowerCase();\n  const result: TypedPhoneNumber[] = [];\n  contacts.forEach((contact) => {\n    if (!Array.isArray(contact.phoneNumbers) || !contact.phoneNumbers.length) {\n      return;\n    }\n    const isContactHit = isSearchHitContact({ lowerSearch, contact });\n    contact.phoneNumbers.forEach(({ phoneType, phoneNumber }) => {\n      if (isContactHit || (phoneNumber && phoneNumber.includes(lowerSearch))) {\n        if (\n          phoneType === phoneTypes.extension &&\n          options?.isMultipleSiteEnabled\n        ) {\n          // Remove site code of same site\n          phoneNumber = formatSameSiteExtension({\n            currentSiteCode: options?.siteCode ?? '',\n            extension: phoneNumber,\n          });\n        }\n        result.push({\n          id: `${contact.id}${phoneNumber}`,\n          contactId: contact.id,\n          name: contact.name || `${contact.firstName} ${contact.lastName}`,\n          type: contact.type,\n          phoneNumber,\n          phoneType: phoneType.replace('Phone', ''),\n          profileImageUrl: contact.profileImage?.uri,\n          entityType,\n        });\n      }\n    });\n  });\n  return result;\n}\n\nexport function getMatchContactsByPhoneNumber({\n  contacts,\n  phoneNumber,\n  entityType,\n  findPhoneNumber = (item: IContact['phoneNumbers'][number]) =>\n    item.phoneNumber === phoneNumber,\n}: {\n  contacts: IContact[];\n  phoneNumber: string;\n  entityType: string;\n  findPhoneNumber?: (item: IContact['phoneNumbers'][number]) => boolean;\n}): TypedContact[] {\n  const result: TypedContact[] = [];\n  contacts.forEach((contact) => {\n    const found =\n      contact.phoneNumbers && contact.phoneNumbers.find(findPhoneNumber);\n    if (!found) {\n      return;\n    }\n    const matchedContact = {\n      ...contact,\n      phoneNumbers: [...contact.phoneNumbers],\n      entityType,\n    };\n    result.push(matchedContact);\n  });\n  return result;\n}\n\nconst isSameSite = ({\n  siteCode = '',\n  extensionNumber,\n  extensionFromContacts,\n}: {\n  siteCode?: string;\n  extensionNumber: string;\n  extensionFromContacts: string;\n}): boolean => {\n  /**\n   * [multiple site number match role]:\n   * Given an account which short extension starts with 0 in the same site, When short extension is equal to 0, it can match.\n   * Otherwise it cannot match.\n   */\n  if (\n    !siteCode ||\n    !/^[0-9]+$/.test(extensionNumber) || // to avoid special character in regular\n    (extensionNumber[0] === '0' && extensionNumber !== '0')\n  ) {\n    return false;\n  }\n\n  /**\n   * [multiple site only]\n   * The full extension number's length is fixed, no need to compute the frequency of 0.\n   * For example, 21022, 210022 would not both exist at the same time\n   */\n  return new RegExp(`^${siteCode}0*${extensionNumber}$`).test(\n    extensionFromContacts,\n  );\n};\n\nexport const isAnExtension = (number: string): boolean => {\n  return number && number.length <= 6 && number[0] !== '+';\n};\n\n/**\n * check whether an extension is in contacts\n */\nexport const isExtensionExist = ({\n  extensionNumber,\n  extensionFromContacts,\n  options,\n}: {\n  /**\n   * extensionNumber need to be checked\n   */\n  extensionNumber: string;\n  /**\n   * extensionNumber from contact\n   */\n  extensionFromContacts: string;\n  options?: {\n    isMultipleSiteEnabled?: boolean;\n    siteCode?: string;\n  };\n}): boolean => {\n  if (extensionFromContacts === extensionNumber) {\n    return true;\n  }\n  if (\n    options.isMultipleSiteEnabled &&\n    isSameSite({\n      siteCode: options?.siteCode ?? '',\n      extensionNumber,\n      extensionFromContacts,\n    })\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const getFindPhoneNumber = ({\n  phoneNumber,\n  options = {},\n}: {\n  phoneNumber: string;\n  options?: {\n    isMultipleSiteEnabled?: boolean;\n    siteCode?: string;\n  };\n}) => (item: IContact['phoneNumbers'][number]) => {\n  if (item.phoneType === phoneTypes.extension) {\n    return (\n      isAnExtension(phoneNumber) &&\n      isExtensionExist({\n        extensionNumber: phoneNumber,\n        extensionFromContacts: item.phoneNumber,\n        options,\n      })\n    );\n  }\n  return item.phoneNumber === phoneNumber;\n};\n"],"file":"contactHelper.js"}