{"version":3,"file":"contactHelper.js","names":["_format","require","_ramda","_phoneTypes","_isBlank","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","Symbol","iterator","isArray","length","e","n","AllContactSourceName","exports","addPhoneToContact","contact","phone","type","isBlank","existedPhone","phoneNumbers","find","number","phoneNumber","phoneType","replace","push","uniqueContactItems","input","arguments","undefined","map","reduce","result","item","itemId","concat","id","NON_ALPHABET_RE","byName","b","name1","toLowerCase","name2","isNumber1","isNumber2","localeCompare","sortContactItemsByName","sort","POUND_SIGN","groupByFirstLetterOfName","groups","group","forEach","letter","toLocaleUpperCase","caption","contacts","isSearchHitContact","_ref","lowerSearch","includes","firstName","lastName","x","trim","filter","join","some","email","emails","getFilterContacts","searchFilter","getSearchForPhoneNumbers","_ref2","entityType","searchString","options","isContactHit","_ref3","_contact$profileImage","phoneTypes","extension","isMultipleSiteEnabled","_options$siteCode","formatSameSiteExtension","currentSiteCode","siteCode","contactId","isCallQueueNumber","profileImageUrl","profileImage","uri","getMatchContactsByPhoneNumber","_ref4","_ref4$findPhoneNumber","findPhoneNumber","found","matchedContact","Object","assign","isSameSite","_ref5","_ref5$siteCode","extensionNumber","extensionFromContacts","RegExp","isAnExtension","maxExtensionLength","isExtensionExist","_ref6","_options$siteCode2","_ref6$options","getFindPhoneNumber","_ref7","shouldMatchExtension","_ref7$options"],"sources":["lib/contactHelper.ts"],"sourcesContent":["import { formatSameSiteExtension } from '@ringcentral-integration/phone-number/lib/format';\nimport { reduce } from 'ramda';\n\nimport { phoneTypes } from '../enums/phoneTypes';\nimport type {\n  ContactGroup,\n  IContact,\n  ContactPhoneNumber,\n  TypedContact,\n  TypedPhoneNumber,\n} from '../interfaces/Contact.model';\n\nimport { isBlank } from './isBlank';\n\nexport const AllContactSourceName = 'all';\n\nexport function addPhoneToContact(\n  contact: IContact,\n  phone: IContact['phoneNumber'],\n  type: IContact['type'],\n) {\n  if (isBlank(phone)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers!.find(\n    (number) => number && number.phoneNumber === phone,\n  );\n  /**\n   * otherFax => fax\n   * businessFax => fax\n   * businessPhone => business\n   * businessPhone2 => business\n   */\n  let phoneType: string;\n  if (/Fax/.test(type)) {\n    phoneType = 'fax';\n  } else {\n    phoneType = type.replace(/Phone2|Phone/, '');\n  }\n  if (existedPhone) {\n    existedPhone.phoneType = phoneType;\n  } else {\n    contact.phoneNumbers!.push({\n      phoneNumber: phone,\n      phoneType,\n    });\n  }\n}\n\nexport function uniqueContactItems(input: IContact[] = []) {\n  const map: Record<string, boolean> = {};\n  return reduce(\n    (result, item) => {\n      const itemId = `${item.type}${item.id}`;\n      if (!map[itemId]) {\n        map[itemId] = true;\n        result.push(item);\n      }\n      return result;\n    },\n    [] as IContact[],\n    input,\n  );\n}\n\nconst NON_ALPHABET_RE = /[^a-z]/i;\nfunction byName(a: IContact, b: IContact) {\n  const name1 = (a.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const name2 = (b.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const isNumber1 = /^[0-9]/.test(name1);\n  const isNumber2 = /^[0-9]/.test(name2);\n  // Empty string should be put at the end\n  if (name1.length <= 0 || name2.length <= 0) {\n    return -name1.localeCompare(name2);\n  }\n  if (isNumber1 && isNumber2) {\n    return name1.localeCompare(name2);\n  }\n  if (isNumber1 || isNumber2) {\n    // put number name at last\n    return -name1.localeCompare(name2);\n  }\n  if (NON_ALPHABET_RE.test(name1[0]) && !NON_ALPHABET_RE.test(name2[0])) {\n    return 1;\n  }\n  if (!NON_ALPHABET_RE.test(name1[0]) && NON_ALPHABET_RE.test(name2[0])) {\n    return -1;\n  }\n  return name1.localeCompare(name2);\n}\n\nexport function sortContactItemsByName(input: IContact[] = []) {\n  return input.sort(byName);\n}\n\nconst POUND_SIGN = '#';\nexport function groupByFirstLetterOfName(input: IContact[] = []) {\n  const groups: ContactGroup[] = [];\n  if (input && input.length) {\n    let group: ContactGroup;\n    input.forEach((contact) => {\n      const name = (contact.name || '').replace(/^\\s\\s*/, ''); // trim start\n      let letter = null;\n      if (name.length <= 0 || NON_ALPHABET_RE.test(name[0])) {\n        letter = POUND_SIGN;\n      } else {\n        letter = (name[0] || '').toLocaleUpperCase();\n      }\n      if (!group || group.caption !== letter) {\n        group = {\n          contacts: [],\n          caption: letter,\n          id: letter,\n        };\n        groups.push(group);\n      }\n      group.contacts.push(contact);\n    });\n  }\n  return groups;\n}\n\nexport function isSearchHitContact({\n  lowerSearch,\n  contact,\n}: {\n  lowerSearch: string;\n  contact: IContact;\n}): boolean {\n  return (\n    // search names\n    (!!contact.name && contact.name.toLowerCase().includes(lowerSearch)) ||\n    [contact.firstName, contact.lastName]\n      .map((x) => x && x.trim())\n      .filter((x) => !!x)\n      .join(' ')\n      .toLowerCase()\n      .includes(lowerSearch) ||\n    // search phones\n    (Array.isArray(contact.phoneNumbers) &&\n      contact.phoneNumbers.some(\n        (x) => x.phoneNumber && x.phoneNumber.includes(lowerSearch),\n      )) ||\n    // search emails\n    (!!contact.email && contact.email.toLowerCase() === lowerSearch) ||\n    (Array.isArray(contact.emails) &&\n      contact.emails.map((x) => x && x.toLowerCase()).includes(lowerSearch))\n  );\n}\n\nexport function getFilterContacts(\n  contacts: IContact[],\n  searchFilter: string,\n): IContact[] {\n  if (!searchFilter || isBlank(searchFilter)) {\n    return contacts;\n  }\n  const lowerSearch = searchFilter.toLowerCase();\n  return contacts.filter((contact) =>\n    isSearchHitContact({ lowerSearch, contact }),\n  );\n}\n\nexport function getSearchForPhoneNumbers({\n  contacts,\n  entityType,\n  searchString,\n  options,\n}: {\n  contacts: IContact[];\n  entityType: string;\n  searchString: string;\n  options?: {\n    isMultipleSiteEnabled?: boolean;\n    siteCode?: string;\n  };\n}): TypedPhoneNumber[] {\n  if (!searchString) {\n    return [];\n  }\n  const lowerSearch = searchString.toLowerCase();\n  const result: TypedPhoneNumber[] = [];\n  contacts.forEach((contact) => {\n    if (!Array.isArray(contact.phoneNumbers) || !contact.phoneNumbers.length) {\n      return;\n    }\n    const isContactHit = isSearchHitContact({ lowerSearch, contact });\n    contact.phoneNumbers.forEach(({ phoneType, phoneNumber }) => {\n      if (isContactHit || (phoneNumber && phoneNumber.includes(lowerSearch))) {\n        if (\n          phoneType === phoneTypes.extension &&\n          options?.isMultipleSiteEnabled\n        ) {\n          // Remove site code of same site\n          phoneNumber = formatSameSiteExtension({\n            currentSiteCode: options?.siteCode ?? '',\n            extension: phoneNumber,\n          });\n        }\n        result.push({\n          id: `${contact.id}${phoneNumber}`,\n          contactId: contact.id,\n          name: contact.name || `${contact.firstName} ${contact.lastName}`,\n          type: contact.type,\n          phoneNumber: phoneNumber!,\n          isCallQueueNumber: !!contact.isCallQueueNumber,\n          phoneType: phoneType!.replace('Phone', ''),\n          profileImageUrl: contact.profileImage?.uri,\n          entityType,\n        });\n      }\n    });\n  });\n  return result;\n}\n\nexport function getMatchContactsByPhoneNumber({\n  contacts,\n  phoneNumber,\n  entityType,\n  findPhoneNumber = (item: ContactPhoneNumber) =>\n    item.phoneNumber === phoneNumber,\n}: {\n  contacts: IContact[];\n  phoneNumber: string;\n  entityType: string;\n  findPhoneNumber?: (item: ContactPhoneNumber) => boolean;\n}): TypedContact[] {\n  const result: TypedContact[] = [];\n  contacts.forEach((contact) => {\n    const found =\n      contact.phoneNumbers && contact.phoneNumbers.find(findPhoneNumber);\n    if (!found) {\n      return;\n    }\n    const matchedContact = Object.assign({}, contact, {\n      phoneNumbers: [...(contact.phoneNumbers || [])],\n      entityType,\n    });\n    result.push(matchedContact);\n  });\n  return result;\n}\n\nconst isSameSite = ({\n  siteCode = '',\n  extensionNumber,\n  extensionFromContacts,\n}: {\n  siteCode?: string;\n  extensionNumber: string;\n  extensionFromContacts: string;\n}): boolean => {\n  /**\n   * [multiple site number match role]:\n   * Given an account which short extension starts with 0 in the same site, When short extension is equal to 0, it can match.\n   * Otherwise it cannot match.\n   */\n  if (\n    !siteCode ||\n    !/^[0-9]+$/.test(extensionNumber) || // to avoid special character in regular\n    (extensionNumber[0] === '0' && extensionNumber !== '0')\n  ) {\n    return false;\n  }\n\n  /**\n   * [multiple site only]\n   * The full extension number's length is fixed, no need to compute the frequency of 0.\n   * For example, 21022, 210022 would not both exist at the same time\n   */\n  return new RegExp(`^${siteCode}0*${extensionNumber}$`).test(\n    extensionFromContacts,\n  );\n};\n\nexport const isAnExtension = (\n  number: string,\n  maxExtensionLength = 6,\n): boolean => {\n  return number?.length <= maxExtensionLength && number[0] !== '+';\n};\n\n/**\n * check whether an extension is in contacts\n */\nexport const isExtensionExist = ({\n  extensionNumber,\n  extensionFromContacts,\n  options = {},\n}: {\n  /**\n   * extensionNumber need to be checked\n   */\n  extensionNumber: string;\n  /**\n   * extensionNumber from contact\n   */\n  extensionFromContacts: string;\n  options?: {\n    isMultipleSiteEnabled?: boolean;\n    siteCode?: string;\n    maxExtensionLength?: number;\n  };\n}): boolean => {\n  if (extensionFromContacts === extensionNumber) {\n    return true;\n  }\n  if (\n    options.isMultipleSiteEnabled &&\n    isSameSite({\n      siteCode: options?.siteCode ?? '',\n      extensionNumber,\n      extensionFromContacts,\n    })\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const getFindPhoneNumber =\n  ({\n    phoneNumber,\n    shouldMatchExtension,\n    options = {},\n  }: {\n    phoneNumber: string;\n    shouldMatchExtension: boolean;\n    options?: {\n      isMultipleSiteEnabled?: boolean;\n      siteCode?: string;\n      maxExtensionLength?: number;\n    };\n  }) =>\n  (item: ContactPhoneNumber) => {\n    if (item.phoneType === phoneTypes.extension && shouldMatchExtension) {\n      return isExtensionExist({\n        extensionNumber: phoneNumber,\n        extensionFromContacts: item.phoneNumber!,\n        options,\n      });\n    }\n    return item.phoneNumber === phoneNumber;\n  };\n"],"mappings":"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","ignoreList":[]}