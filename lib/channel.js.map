{"version":3,"sources":["lib/channel.ts"],"names":["Channel","type","_mux","_type","_make","actionType","handler","packet","Promise","resolve","chrome","runtime","sendMessage","promises","tabs","query","length","forEach","tab","push","id","all","onMessage","addListener","request","sender","sendResponse","action","then","retval","err","console","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKMA,O;AAKJ,mBAAYC,IAAZ,EAA0B;AAAA;;AAAA,SAJ1BC,IAI0B;AAAA,SAD1BC,KAC0B;AACxB;AACA,SAAKD,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAaF,IAAb;;AACA,SAAKG,KAAL;AACD;;;;2BAEMC,U,EAAoBC,O,EAAkB;AAC3C,WAAKJ,IAAL,CAAUG,UAAV,IAAwBC,OAAxB;AACA,aAAO,IAAP;AACD;;;yBAEIC,M,EAAgB;AAAA;;AACnB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,QAAAA,MAAM,CAACC,OAAP,CAAeC,WAAf;AAA6BX,UAAAA,IAAI,EAAE,KAAI,CAACE;AAAxC,WAAkDI,MAAlD,GAA4DE,OAA5D;AACD,OAFM,CAAP;AAGD;;;8BAESF,M,EAAgB;AAAA;;AACxB,UAAMM,QAAwB,GAAG,EAAjC;AACAH,MAAAA,MAAM,CAACI,IAAP,CAAYC,KAAZ,CAAkB,EAAlB,EAAsB,UAACD,IAAD,EAAU;AAC9B,YAAI,CAACA,IAAI,CAACE,MAAV,EAAkB;AAClBF,QAAAA,IAAI,CAACG,OAAL,CAAa,UAACC,GAAD,EAAS;AACpBL,UAAAA,QAAQ,CAACM,IAAT,CACE,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAa;AACvBC,YAAAA,MAAM,CAACI,IAAP,CAAYF,WAAZ,CACEM,GAAG,CAACE,EADN;AAEInB,cAAAA,IAAI,EAAE,MAAI,CAACE;AAFf,eAEyBI,MAFzB,GAGEE,OAHF;AAKD,WAND,CADF;AASD,SAVD;AAWD,OAbD;AAcA,aAAOD,OAAO,CAACa,GAAR,CAAYR,QAAZ,CAAP;AACD;;;4BAEO;AAAA;;AACNH,MAAAA,MAAM,CAACC,OAAP,CAAeW,SAAf,CAAyBC,WAAzB,CAAqC,UAACC,OAAD,EAAUC,MAAV,EAAkBC,YAAlB,EAAmC;AAAA,YAC9DzB,IAD8D,GAC7CuB,OAD6C,CAC9DvB,IAD8D;AAAA,YACxD0B,MADwD,GAC7CH,OAD6C,CACxDG,MADwD;;AAEtE,YAAI1B,IAAI,KAAK,MAAI,CAACE,KAAlB,EAAyB;AACvB,cAAMG,OAAO,GAAG,MAAI,CAACJ,IAAL,CAAUyB,MAAV,CAAhB;;AACA,cAAI,OAAOrB,OAAP,KAAmB,UAAvB,EAAmC;AACjCE,YAAAA,OAAO,CAACC,OAAR,CAAgBH,OAAO,CAACkB,OAAD,EAAUC,MAAV,CAAvB,EACGG,IADH,CACQ,UAACC,MAAD,EAAY;AAChBH,cAAAA,YAAY,CAACG,MAAD,CAAZ;AACD,aAHH,WAIS,UAACC,GAAD;AAAA,qBAASC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAT;AAAA,aAJT,EADiC,CAMjC;;AACA,mBAAO,IAAP;AACD;AACF;;AACD,eAAO,KAAP;AACD,OAfD;AAgBD","sourcesContent":["type Handler = (request: any, sender: any) => void;\n\ntype Packet = {\n  [s: string]: any;\n};\nclass Channel {\n  _mux: {\n    [k: string]: Handler;\n  };\n  _type: string;\n  constructor(type: string) {\n    // action -> handler\n    this._mux = {};\n    this._type = type;\n    this._make();\n  }\n\n  select(actionType: string, handler: Handler) {\n    this._mux[actionType] = handler;\n    return this;\n  }\n\n  send(packet: Packet) {\n    return new Promise((resolve) => {\n      chrome.runtime.sendMessage({ type: this._type, ...packet }, resolve);\n    });\n  }\n\n  broadcast(packet: Packet) {\n    const promises: Promise<any>[] = [];\n    chrome.tabs.query({}, (tabs) => {\n      if (!tabs.length) return;\n      tabs.forEach((tab) => {\n        promises.push(\n          new Promise((resolve) => {\n            chrome.tabs.sendMessage(\n              tab.id,\n              { type: this._type, ...packet },\n              resolve,\n            );\n          }),\n        );\n      });\n    });\n    return Promise.all(promises);\n  }\n\n  _make() {\n    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n      const { type, action } = request;\n      if (type === this._type) {\n        const handler = this._mux[action];\n        if (typeof handler === 'function') {\n          Promise.resolve(handler(request, sender))\n            .then((retval) => {\n              sendResponse(retval);\n            })\n            .catch((err) => console.error(err));\n          // Async\n          return true;\n        }\n      }\n      return false;\n    });\n  }\n}\n\nexport { Channel };\n"],"file":"channel.js"}