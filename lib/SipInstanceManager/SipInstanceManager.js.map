{"version":3,"sources":["lib/SipInstanceManager/SipInstanceManager.ts"],"names":["SipInstanceManager","prefix","_prefix","endpointId","allInstances","_getAllInActiveInstancesData","currentTime","Date","now","forEach","instance","inactiveAt","_removeInstanceData","id","inactiveInstance","filter","sort","inst1","inst2","uuid","v4","instanceId","instanceData","_saveInstanceData","keys","_getAllKeys","instances","key","rawData","localStorage","getItem","push","JSON","parse","setItem","stringify","removeItem","i","length","indexOf"],"mappings":"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","sourcesContent":["import * as uuid from 'uuid';\n\ninterface SipInactiveInstanceData {\n  id: string;\n  endpointId: string;\n  inactiveAt: number;\n}\n\nexport class SipInstanceManager {\n  protected _prefix: string;\n\n  constructor(prefix: string) {\n    this._prefix = prefix;\n  }\n\n  getInstanceId(endpointId: string): string {\n    const allInstances = this._getAllInActiveInstancesData();\n    const currentTime = Date.now();\n    // clean expired data;\n    allInstances.forEach((instance) => {\n      if (\n        instance.endpointId !== endpointId ||\n        currentTime - instance.inactiveAt >= 180000\n      ) {\n        // clean instance not in current endpoint id\n        // clean instance if inactive before 3 min\n        this._removeInstanceData(instance.id);\n      }\n    });\n    // find inactive instance that inactive in 3 min\n    const inactiveInstance = allInstances\n      .filter((instance) => {\n        return (\n          instance.endpointId === endpointId &&\n          currentTime - instance.inactiveAt < 180000\n        );\n      })\n      .sort((inst1, inst2) => inst2.inactiveAt - inst1.inactiveAt)[0];\n    // reuse inactive instance\n    if (inactiveInstance) {\n      // remove it from localStorage, so it can only be used in current tab\n      this._removeInstanceData(inactiveInstance.id);\n      return inactiveInstance.id;\n    }\n    return uuid.v4();\n  }\n\n  setInstanceInactive(instanceId: string, endpointId: string): void {\n    const instanceData: SipInactiveInstanceData = {\n      id: instanceId,\n      endpointId,\n      inactiveAt: Date.now(),\n    };\n    this._saveInstanceData(instanceData);\n  }\n\n  _getAllInActiveInstancesData() {\n    const keys = this._getAllKeys();\n    const instances: SipInactiveInstanceData[] = [];\n    keys.forEach((key) => {\n      const rawData = localStorage.getItem(key);\n      if (rawData) {\n        instances.push(JSON.parse(rawData) as SipInactiveInstanceData);\n      }\n    });\n    return instances;\n  }\n\n  _saveInstanceData(instanceData: SipInactiveInstanceData) {\n    localStorage.setItem(\n      `${this._prefix}-${instanceData.id}`,\n      JSON.stringify(instanceData),\n    );\n  }\n\n  _removeInstanceData(instanceId: string) {\n    localStorage.removeItem(`${this._prefix}-${instanceId}`);\n  }\n\n  _getAllKeys(): string[] {\n    const keys = [];\n    for (let i = 0; i < localStorage.length; i += 1) {\n      const key = localStorage.key(i);\n      if (key && key !== '' && key.indexOf(this._prefix) === 0) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  }\n}\n"],"file":"SipInstanceManager.js"}