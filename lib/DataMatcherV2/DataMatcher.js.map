{"version":3,"file":"DataMatcher.js","names":["_ramda","require","_core","_di","_proxify","_interopRequireDefault","_dec","_dec2","_class","_class2","_descriptor","obj","__esModule","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","value","length","err","Array","isArray","_createForOfIteratorHelper","o","allowArrayLike","it","F","s","n","e","_e2","f","normalCompletion","didErr","step","_e3","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","undefined","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","iter","len","arr2","_initializerDefineProperty","target","property","descriptor","context","defineProperty","enumerable","configurable","writable","initializer","_classCallCheck","instance","Constructor","_defineProperties","props","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","_typeof","String","input","hint","prim","toPrimitive","res","Number","_get","Reflect","get","bind","receiver","base","_superPropBase","desc","getOwnPropertyDescriptor","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","getPrototypeOf","_applyDecoratedDescriptor","decorators","keys","forEach","reverse","reduce","decorator","_initializerWarningHelper","Error","DEFAULT_TTL","DEFAULT_NO_MATCH_TTL","DataMatcher","Library","deps","dep","optional","computed","_ref","data","ready","_searchProviders","size","_RcModuleV","_super","storageKey","disableCache","_this","enableCache","_querySources","Map","_matchPromises","_matchQueues","_lastCleanUp","onReset","_getQueries","output","Set","readyCheckFn","getQueriesFn","query","add","insertMatchEntries","_ref2","_this2","queries","timestamp","Date","now","_this2$data$query","_data$query","_t","_cleanUp","_this3","_ttl","_shouldInit","searchProvidersReady","_shouldReset","addSearchProvider","_ref3","searchFn","concat","has","set","addQuerySource","_ref4","_triggerMatch","regeneratorRuntime","mark","_callee","_ref5","_ref5$ignoreCache","ignoreCache","_ref5$ignoreQueue","ignoreQueue","_args","wrap","_callee$","_context","prev","match","stop","triggerMatch","_match","_callee2","_ref6","_this4","_ref6$ignoreCache","_ref6$ignoreQueue","_callee2$","_context2","all","map","_matchSource","_fetchMatchResult2","_callee3","_ref7","provider","promise","_callee3$","_context3","sent","t0","_fetchMatchResult","_x2","_matchSource2","_callee5","_ref8","_this5","queuedItems","promises","matching","queue","newQueries","_callee5$","_context5","item","filter","_noMatchTtl","_callee4","_callee4$","_context4","_x3","_insertMatching","_callee6","_ref10","_callee6$","_context6","insertMatching","_x4","_this$dataMatcherOpti","_this$dataMatcherOpti2","dataMatcherOptions","ttl","_this$dataMatcherOpti3","_this$dataMatcherOpti4","noMatchTtl","_ref11","values","_this6","dataMap","queryResult","matchesList","_iterator","_step","_step$value","providerName","RcModuleV2","storage","state","action","proxify","exports"],"sources":["lib/DataMatcherV2/DataMatcher.ts"],"sourcesContent":["import { all, filter, forEach } from 'ramda';\n\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\n\nimport { Library } from '../di';\nimport proxify from '../proxy/proxify';\nimport type {\n  DataMatcherOptions,\n  Deps,\n  FetchMatchResultOptions,\n  InsertMatchEntriesOptions,\n  MatchData,\n  MatchOptions,\n  MatchPromises,\n  MatchQueue,\n  MatchSourceOptions,\n  QuerySourceOptions,\n  SearchProvider,\n  SearchProviderOptions,\n  TriggerMatchOptions,\n} from './DataMatcher.interface';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_NO_MATCH_TTL = 30 * 1000;\n\n@Library({\n  name: 'DataMatcher',\n  deps: [{ dep: 'Storage', optional: true }],\n})\nabstract class DataMatcher<T, D extends Deps = Deps> extends RcModuleV2<D> {\n  protected _querySources = new Map<\n    QuerySourceOptions['getQueriesFn'],\n    QuerySourceOptions['readyCheckFn']\n  >();\n\n  protected _searchProviders = new Map<\n    SearchProviderOptions<T>['name'],\n    SearchProvider<T>\n  >();\n\n  protected _matchPromises = new Map<string, MatchPromises<T>>();\n\n  protected _matchQueues = new Map<string, MatchQueue>();\n\n  protected _lastCleanUp = 0;\n\n  constructor(deps: Deps & D, storageKey: string, disableCache?: boolean) {\n    super({\n      deps,\n      enableCache: !(disableCache ?? false),\n      storageKey,\n    });\n  }\n\n  @storage\n  @state\n  data: MatchData<T> = {};\n\n  abstract get dataMatcherOptions(): DataMatcherOptions;\n\n  protected get _ttl() {\n    return this.dataMatcherOptions?.ttl ?? DEFAULT_TTL;\n  }\n\n  protected get _noMatchTtl() {\n    return this.dataMatcherOptions?.noMatchTtl ?? DEFAULT_NO_MATCH_TTL;\n  }\n\n  override onReset() {\n    this._lastCleanUp = 0;\n  }\n\n  _getQueries() {\n    const output = new Set<string>();\n    this._querySources.forEach((readyCheckFn, getQueriesFn) => {\n      if (readyCheckFn()) {\n        getQueriesFn().forEach((query) => {\n          output.add(query);\n        });\n      }\n    });\n    return [...output];\n  }\n\n  @action\n  insertMatchEntries({ name, queries, data }: InsertMatchEntriesOptions<T>) {\n    const timestamp = Date.now();\n    queries.forEach((query) => {\n      this.data[query] = this.data[query] ?? {};\n      this.data[query][name] = {\n        _t: timestamp, // for noMatchTtl check\n        data: data[query] ?? [],\n      };\n    });\n  }\n\n  @action\n  _cleanUp() {\n    // throttle clean up to only run once every 100ms\n    const now = Date.now();\n    if (now - this._lastCleanUp > 100) {\n      this._lastCleanUp = now;\n      Object.keys(this.data).forEach((query) => {\n        Object.keys(this.data[query]).forEach((name) => {\n          if (!this.data[query][name]._t) {\n            // mark for deletion\n            this.data[query][name]._t = now;\n          } else if (now - this.data[query][name]._t > this._ttl) {\n            // expired yet\n            // entry is removed\n            delete this.data[query][name];\n          }\n        });\n      });\n    }\n  }\n\n  override _shouldInit() {\n    return !!(super._shouldInit() && this.searchProvidersReady);\n  }\n\n  override _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this.searchProvidersReady)\n    );\n  }\n\n  get searchProvidersReady() {\n    return all(\n      ({ readyCheckFn }) => readyCheckFn(),\n      [...this._searchProviders.values()],\n    );\n  }\n\n  addSearchProvider({\n    name,\n    searchFn,\n    readyCheckFn,\n  }: SearchProviderOptions<T>) {\n    if (!name) {\n      throw new Error(`${this.constructor.name}: \"name\" is required.`);\n    }\n    if (this._searchProviders.has(name)) {\n      throw new Error(\n        `${this.constructor.name}: A provider named \"${name}\" already exists.`,\n      );\n    }\n    if (typeof searchFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"searchFn\" must be a function.`,\n      );\n    }\n    if (typeof readyCheckFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"readyCheckFn\" must be a function.`,\n      );\n    }\n    this._searchProviders.set(name, {\n      searchFn,\n      readyCheckFn,\n    });\n  }\n\n  addQuerySource({ getQueriesFn, readyCheckFn }: QuerySourceOptions) {\n    if (typeof getQueriesFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"getQueriesFn\" must be a function.`,\n      );\n    }\n    if (typeof readyCheckFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"readyCheckFn\" must be a function.`,\n      );\n    }\n    if (this._querySources.has(getQueriesFn)) {\n      throw new Error(\n        `${this.constructor.name}: this getQueryFn has already been added.`,\n      );\n    }\n    this._querySources.set(getQueriesFn, readyCheckFn);\n  }\n\n  @proxify\n  async triggerMatch({\n    ignoreCache = false,\n    ignoreQueue = false,\n  }: TriggerMatchOptions = {}) {\n    if (this.ready) {\n      this._cleanUp();\n      await this.match({\n        queries: this._getQueries(),\n        ignoreCache,\n        ignoreQueue,\n      });\n    }\n  }\n\n  @proxify\n  async match({\n    queries,\n    ignoreCache = false,\n    ignoreQueue = false,\n  }: MatchOptions) {\n    await Promise.all(\n      [...this._searchProviders.keys()].map((name) =>\n        this._matchSource({\n          name,\n          queries,\n          ignoreCache,\n          ignoreQueue,\n        }),\n      ),\n    );\n  }\n\n  async _fetchMatchResult({ name, queries }: FetchMatchResultOptions) {\n    try {\n      const provider = this._searchProviders.get(name);\n      if (!provider) {\n        throw new Error(\n          `${this.constructor.name}: provider named \"${name} does not exist`,\n        );\n      }\n      const promise = Promise.resolve(\n        provider.searchFn({\n          queries,\n        }),\n      );\n      this._matchPromises.set(name, {\n        promise,\n        queries,\n      });\n      const data = await promise;\n      this._matchPromises.delete(name);\n      this.insertMatchEntries({\n        name,\n        queries,\n        data,\n      });\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      this._matchPromises.delete(name);\n      throw error;\n    }\n  }\n\n  @proxify\n  async _matchSource({\n    name,\n    queries,\n    ignoreCache,\n    ignoreQueue,\n  }: MatchSourceOptions) {\n    const now = Date.now();\n    const data = this.data;\n    const queuedItems: Record<string, boolean> = {};\n    const promises: Promise<void | Record<string, T[]>>[] = [];\n\n    let matching: MatchPromises<T> | MatchQueue;\n    if (!ignoreQueue && this._matchPromises.has(name)) {\n      // @ts-ignore\n      matching = this._matchPromises.get(name);\n      promises.push(matching.promise);\n      matching.queries.forEach((item) => {\n        queuedItems[item] = true;\n      });\n    }\n\n    let queue: MatchQueue;\n    if (!ignoreQueue && this._matchQueues.has(name)) {\n      // @ts-ignore\n      queue = this._matchQueues.get(name);\n      promises.push(queue.promise);\n      queue.queries.forEach((item) => {\n        queuedItems[item] = true;\n      });\n    }\n\n    const newQueries = ignoreCache\n      ? queries\n      : filter(\n          (query) =>\n            !queuedItems[query] &&\n            (!data[query] ||\n              !data[query][name] ||\n              now - data[query][name]._t > this._noMatchTtl),\n          queries,\n        );\n\n    if (newQueries.length) {\n      if (ignoreQueue) {\n        promises.push(\n          this._fetchMatchResult({\n            name,\n            queries: newQueries,\n          }),\n        );\n        // @ts-ignore\n      } else if (!matching) {\n        matching = {\n          promise: this._fetchMatchResult({\n            name,\n            queries: newQueries,\n          }),\n          queries: newQueries,\n        };\n        promises.push(matching.promise);\n        // @ts-ignore\n      } else if (!queue) {\n        const promise = (async () => {\n          await matching.promise;\n          const promise = this._fetchMatchResult({\n            name,\n            // @ts-ignore\n            queries: queue.queries,\n          });\n          this._matchQueues.delete(name);\n          await promise;\n        })();\n        queue = {\n          queries: newQueries,\n          promise,\n        };\n        queue;\n        this._matchQueues.set(name, queue);\n        promises.push(queue.promise);\n      } else {\n        queue.queries = queue.queries.concat(newQueries);\n      }\n    }\n    await Promise.all(promises);\n  }\n\n  /**\n   * insert matching result directly\n   */\n  @proxify\n  async insertMatching({ name, data, queries }: InsertMatchEntriesOptions<T>) {\n    this.insertMatchEntries({\n      data,\n      queries,\n      name,\n    });\n  }\n\n  @computed(({ data, ready, _searchProviders }: DataMatcher<T>) => [\n    data,\n    ready,\n    _searchProviders.size,\n  ])\n  get dataMapping() {\n    if (!this.ready || !this._searchProviders.size) return {};\n    const dataMap: Record<string, T[]> = {};\n    forEach((query) => {\n      const queryResult = this.data[query];\n      if (!queryResult) {\n        return;\n      }\n      let matchesList: T[] = [];\n      for (const [providerName] of this._searchProviders) {\n        if (\n          queryResult[providerName] &&\n          queryResult[providerName].data.length > 0\n        ) {\n          matchesList = matchesList.concat(queryResult[providerName].data);\n        }\n      }\n      if (matchesList.length > 0) {\n        dataMap[query] = matchesList;\n      }\n    }, Object.keys(this.data));\n    return dataMap;\n  }\n}\n\nexport { DataMatcher };\n"],"mappings":"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"}