{"version":3,"sources":["lib/DataMatcherV2/DataMatcher.ts"],"names":["DEFAULT_TTL","DEFAULT_NO_MATCH_TTL","DataMatcher","name","deps","dep","optional","data","ready","_searchProviders","size","storageKey","disableCache","enableCache","_querySources","Map","_matchPromises","_matchQueues","_lastCleanUp","output","Set","forEach","readyCheckFn","getQueriesFn","query","add","queries","timestamp","Date","now","_t","Object","keys","_ttl","searchProvidersReady","searchFn","Error","constructor","has","set","ignoreCache","ignoreQueue","_cleanUp","match","_getQueries","Promise","all","map","_matchSource","provider","get","promise","resolve","insertMatchEntries","queuedItems","promises","matching","push","item","queue","newQueries","_noMatchTtl","length","_fetchMatchResult","concat","dataMatcherOptions","ttl","noMatchTtl","values","dataMap","queryResult","matchesList","providerName","RcModuleV2","storage","state","action","proxify"],"mappings":"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","sourcesContent":["import { all, filter, forEach } from 'ramda';\n\nimport {\n  action,\n  computed,\n  RcModuleV2,\n  state,\n  storage,\n} from '@ringcentral-integration/core';\n\nimport { Library } from '../di';\nimport proxify from '../proxy/proxify';\nimport {\n  DataMatcherOptions,\n  Deps,\n  FetchMatchResultOptions,\n  InsertMatchEntriesOptions,\n  MatchData,\n  MatchOptions,\n  MatchPromises,\n  MatchQueue,\n  MatchSourceOptions,\n  QuerySourceOptions,\n  SearchProvider,\n  SearchProviderOptions,\n  TriggerMatchOptions,\n} from './DataMatcher.interfaces';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_NO_MATCH_TTL = 30 * 1000;\n\n@Library({\n  name: 'DataMatcher',\n  deps: [{ dep: 'Storage', optional: true }],\n})\nabstract class DataMatcher<T, D = {}> extends RcModuleV2<Deps & D> {\n  protected _querySources = new Map<\n    QuerySourceOptions['getQueriesFn'],\n    QuerySourceOptions['readyCheckFn']\n  >();\n\n  protected _searchProviders = new Map<\n    SearchProviderOptions<T>['name'],\n    SearchProvider<T>\n  >();\n\n  protected _matchPromises = new Map<string, MatchPromises<T>>();\n\n  protected _matchQueues = new Map<string, MatchQueue>();\n\n  protected _lastCleanUp = 0;\n\n  constructor(deps: Deps & D, storageKey: string, disableCache?: boolean) {\n    super({\n      deps,\n      enableCache: !(disableCache ?? false),\n      storageKey,\n    });\n  }\n\n  @storage\n  @state\n  data: MatchData<T> = {};\n\n  abstract get dataMatcherOptions(): DataMatcherOptions;\n\n  protected get _ttl() {\n    return this.dataMatcherOptions?.ttl ?? DEFAULT_TTL;\n  }\n\n  protected get _noMatchTtl() {\n    return this.dataMatcherOptions?.noMatchTtl ?? DEFAULT_NO_MATCH_TTL;\n  }\n\n  onReset() {\n    this._lastCleanUp = 0;\n  }\n\n  _getQueries() {\n    const output = new Set<string>();\n    this._querySources.forEach((readyCheckFn, getQueriesFn) => {\n      if (readyCheckFn()) {\n        getQueriesFn().forEach((query) => {\n          output.add(query);\n        });\n      }\n    });\n    return [...output];\n  }\n\n  @action\n  insertMatchEntries({ name, queries, data }: InsertMatchEntriesOptions<T>) {\n    const timestamp = Date.now();\n    queries.forEach((query) => {\n      this.data[query] = this.data[query] ?? {};\n      this.data[query][name] = {\n        _t: timestamp, // for noMatchTtl check\n        data: data[query] ?? [],\n      };\n    });\n  }\n\n  @action\n  _cleanUp() {\n    // throttle clean up to only run once every 100ms\n    const now = Date.now();\n    if (now - this._lastCleanUp > 100) {\n      this._lastCleanUp = now;\n      Object.keys(this.data).forEach((query) => {\n        Object.keys(this.data[query]).forEach((name) => {\n          if (!this.data[query][name]._t) {\n            // mark for deletion\n            this.data[query][name]._t = now;\n          } else if (now - this.data[query][name]._t > this._ttl) {\n            // expired yet\n            // entry is removed\n            delete this.data[query][name];\n          }\n        });\n      });\n    }\n  }\n\n  _shouldInit() {\n    return !!(super._shouldInit() && this.searchProvidersReady);\n  }\n\n  _shouldReset() {\n    return !!(\n      super._shouldReset() ||\n      (this.ready && !this.searchProvidersReady)\n    );\n  }\n\n  get searchProvidersReady() {\n    return all(\n      ({ readyCheckFn }) => readyCheckFn(),\n      [...this._searchProviders.values()],\n    );\n  }\n\n  addSearchProvider({\n    name,\n    searchFn,\n    readyCheckFn,\n  }: SearchProviderOptions<T>) {\n    if (!name) {\n      throw new Error(`${this.constructor.name}: \"name\" is required.`);\n    }\n    if (this._searchProviders.has(name)) {\n      throw new Error(\n        `${this.constructor.name}: A provider named \"${name}\" already exists.`,\n      );\n    }\n    if (typeof searchFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"searchFn\" must be a function.`,\n      );\n    }\n    if (typeof readyCheckFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"readyCheckFn\" must be a function.`,\n      );\n    }\n    this._searchProviders.set(name, {\n      searchFn,\n      readyCheckFn,\n    });\n  }\n\n  addQuerySource({ getQueriesFn, readyCheckFn }: QuerySourceOptions) {\n    if (typeof getQueriesFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"getQueriesFn\" must be a function.`,\n      );\n    }\n    if (typeof readyCheckFn !== 'function') {\n      throw new Error(\n        `${this.constructor.name}: \"readyCheckFn\" must be a function.`,\n      );\n    }\n    if (this._querySources.has(getQueriesFn)) {\n      throw new Error(\n        `${this.constructor.name}: this getQueryFn has already been added.`,\n      );\n    }\n    this._querySources.set(getQueriesFn, readyCheckFn);\n  }\n\n  @proxify\n  async triggerMatch({\n    ignoreCache = false,\n    ignoreQueue = false,\n  }: TriggerMatchOptions = {}) {\n    if (this.ready) {\n      this._cleanUp();\n      await this.match({\n        queries: this._getQueries(),\n        ignoreCache,\n        ignoreQueue,\n      });\n    }\n  }\n\n  @proxify\n  async match({\n    queries,\n    ignoreCache = false,\n    ignoreQueue = false,\n  }: MatchOptions) {\n    await Promise.all(\n      [...this._searchProviders.keys()].map((name) =>\n        this._matchSource({\n          name,\n          queries,\n          ignoreCache,\n          ignoreQueue,\n        }),\n      ),\n    );\n  }\n\n  async _fetchMatchResult({ name, queries }: FetchMatchResultOptions) {\n    try {\n      const provider = this._searchProviders.get(name);\n      if (!provider) {\n        throw new Error(\n          `${this.constructor.name}: provider named \"${name} does not exist`,\n        );\n      }\n      const promise = Promise.resolve(\n        provider.searchFn({\n          queries,\n        }),\n      );\n      this._matchPromises.set(name, {\n        promise,\n        queries,\n      });\n      const data = await promise;\n      this._matchPromises.delete(name);\n      this.insertMatchEntries({\n        name,\n        queries,\n        data,\n      });\n    } catch (error) {\n      this._matchPromises.delete(name);\n      throw error;\n    }\n  }\n\n  @proxify\n  async _matchSource({\n    name,\n    queries,\n    ignoreCache,\n    ignoreQueue,\n  }: MatchSourceOptions) {\n    const now = Date.now();\n    const data = this.data;\n    const queuedItems: Record<string, boolean> = {};\n    const promises: Promise<void | Record<string, T[]>>[] = [];\n\n    let matching: MatchPromises<T> | MatchQueue;\n    if (!ignoreQueue && this._matchPromises.has(name)) {\n      matching = this._matchPromises.get(name);\n      promises.push(matching.promise);\n      matching.queries.forEach((item) => {\n        queuedItems[item] = true;\n      });\n    }\n\n    let queue: MatchQueue;\n    if (!ignoreQueue && this._matchQueues.has(name)) {\n      queue = this._matchQueues.get(name);\n      promises.push(queue.promise);\n      queue.queries.forEach((item) => {\n        queuedItems[item] = true;\n      });\n    }\n\n    const newQueries = ignoreCache\n      ? queries\n      : filter(\n          (query) =>\n            !queuedItems[query] &&\n            (!data[query] ||\n              !data[query][name] ||\n              now - data[query][name]._t > this._noMatchTtl),\n          queries,\n        );\n\n    if (newQueries.length) {\n      if (ignoreQueue) {\n        promises.push(\n          this._fetchMatchResult({\n            name,\n            queries: newQueries,\n          }),\n        );\n      } else if (!matching) {\n        matching = {\n          promise: this._fetchMatchResult({\n            name,\n            queries: newQueries,\n          }),\n          queries: newQueries,\n        };\n        promises.push(matching.promise);\n      } else if (!queue) {\n        const promise = (async () => {\n          await matching.promise;\n          const promise = this._fetchMatchResult({\n            name,\n            queries: queue.queries,\n          });\n          this._matchQueues.delete(name);\n          await promise;\n        })();\n        queue = {\n          queries: newQueries,\n          promise,\n        };\n        queue;\n        this._matchQueues.set(name, queue);\n        promises.push(queue.promise);\n      } else {\n        queue.queries = queue.queries.concat(newQueries);\n      }\n    }\n    await Promise.all(promises);\n  }\n\n  /**\n   * insert matching result directly\n   */\n  @proxify\n  async insertMatching({ name, data, queries }: InsertMatchEntriesOptions<T>) {\n    this.insertMatchEntries({\n      data,\n      queries,\n      name,\n    });\n  }\n\n  @computed(({ data, ready, _searchProviders }: DataMatcher<T>) => [\n    data,\n    ready,\n    _searchProviders.size,\n  ])\n  get dataMapping() {\n    if (!this.ready || !this._searchProviders.size) return {};\n    const dataMap: Record<string, T[]> = {};\n    forEach((query) => {\n      const queryResult = this.data[query];\n      if (!queryResult) {\n        return;\n      }\n      let matchesList: T[] = [];\n      for (const [providerName] of this._searchProviders) {\n        if (\n          queryResult[providerName] &&\n          queryResult[providerName].data.length > 0\n        ) {\n          matchesList = matchesList.concat(queryResult[providerName].data);\n        }\n      }\n      if (matchesList.length > 0) {\n        dataMap[query] = matchesList;\n      }\n    }, Object.keys(this.data));\n    return dataMap;\n  }\n}\n\nexport { DataMatcher };\n"],"file":"DataMatcher.js"}