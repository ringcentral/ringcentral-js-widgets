{"version":3,"file":"DataMatcher.interface.js","names":[],"sources":["lib/DataMatcherV2/DataMatcher.interface.ts"],"sourcesContent":["import type { Storage } from '../../modules/Storage';\n\nexport interface Deps {\n  storage?: Storage;\n}\n\nexport interface DataMatcherOptions {\n  ttl?: number;\n  noMatchTtl?: number;\n  disableCache?: boolean;\n}\n\nexport type MatchData<T> = Record<\n  string,\n  Record<string, { data: T[]; _t: number }>\n>;\n\nexport interface QuerySourceOptions {\n  /**\n   * Get some queries for matching\n   */\n  getQueriesFn: () => Queries;\n  /**\n   * Match readiness check\n   */\n  readyCheckFn: () => boolean;\n}\n\nexport interface SearchProvider<T> {\n  /**\n   * Provide search method\n   */\n  searchFn: (\n    ...args: any\n  ) => Promise<Record<string, T[]>> | Record<string, T[]>;\n  /**\n   * Search source readiness check\n   */\n  readyCheckFn: () => boolean;\n}\n\ntype Queries = string[];\n\nexport interface SearchProviderOptions<T> extends SearchProvider<T> {\n  /**\n   * search provider name\n   */\n  name: string;\n}\n\nexport interface TriggerMatchOptions {\n  ignoreCache?: boolean;\n  ignoreQueue?: boolean;\n}\n\nexport interface MatchOptions {\n  queries: Queries;\n  ignoreCache?: boolean;\n  ignoreQueue?: boolean;\n}\n\nexport interface FetchMatchResultOptions {\n  name: string;\n  queries: Queries;\n}\n\nexport interface MatchSourceOptions {\n  name: string;\n  queries: Queries;\n  ignoreCache: boolean;\n  ignoreQueue: boolean;\n}\n\nexport interface InsertMatchEntriesOptions<T> {\n  name: string;\n  queries: Queries;\n  data: Record<string, T[]>;\n}\n\nexport interface MatchQueue {\n  queries: Queries;\n  promise: Promise<void>;\n}\n\nexport interface MatchPromises<T> {\n  promise: Promise<Record<string, T[]>>;\n  queries: Queries;\n}\n"],"mappings":"","ignoreList":[]}