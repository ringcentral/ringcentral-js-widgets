{"version":3,"file":"injector.js","names":["_redux","require","_core","_container","_interopRequireDefault","_provider2","_registry","_error","_is_type","_utils","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","value","length","err","Array","isArray","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_createForOfIteratorHelper","o","allowArrayLike","it","F","s","n","e","_e2","f","normalCompletion","didErr","step","_e3","minLen","_arrayLikeToArray","toString","slice","name","from","test","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","REDUCER_LITERAL","PROXY_REDUCER_LITERAL","STATE_FUNC_LITERAL","PROXY_STATE_FUNC_LITERAL","Injector","targetClass","parentInjector","moduleRegistry","Registry","providerRegistry","container","Container","universalProviders","Map","resolveModuleProvider","provider","pending","assert","localHas","token","ExistingProvider","has","CircularDependencyError","useExisting","add","get","set","localGet","DIError","concat","ValueProvider","FactoryProvider","deps","map","dep","isObject","optional","dependencies","resolveDependencies","factoryProvider","func","setInstance","ClassProvider","klass","resolveInheritedDependencies","Klass","resolveModuleFactoryProvider","_iterator","_step","_step$value","dependentModuleProvider","resolveModuleProviderForChildren","dependentProvider","dependentInstance","getInstance","spread","assign","camelize","injector","providerToken","providerInstance","bootstrap","_bootstrap","RootClass","providersMetadata","resolveInheritedModuleFactory","_iterator2","_step2","isValueProvider","provide","useValue","isStaticClassProvider","useClass","isExistingProvider","isFactoryProvider","useFactory","_iterator3","values","_step3","moduleProviders","_iterator4","entries","_step4","_step4$value","moduleProvider","reducers","proxyReducers","rootClassInstance","_loop","_Object$keys","module","addModule","RcModuleV2","parentModule","identifierKey","reducer","proxyReducer","_reducer","state","_proxyReducer","proxyState","combineReducers","lastAction","action","_usm","usmAction","setParent","reset","clear","exports","Set"],"sources":["lib/di/injector.ts"],"sourcesContent":["// @ts-nocheck\nimport { combineReducers } from 'redux';\n\nimport {\n  identifierKey,\n  RcModuleV2,\n  usmAction,\n} from '@ringcentral-integration/core';\n\nimport Container from './container';\nimport {\n  ClassProvider,\n  ExistingProvider,\n  FactoryProvider,\n  ValueProvider,\n} from './provider';\nimport Registry from './registry/registry';\nimport { CircularDependencyError, DIError } from './utils/error';\nimport {\n  isExistingProvider,\n  isFactoryProvider,\n  isObject,\n  isStaticClassProvider,\n  isValueProvider,\n} from './utils/is_type';\nimport { assert, camelize } from './utils/utils';\n\nconst REDUCER_LITERAL = '_reducer';\nconst PROXY_REDUCER_LITERAL = '_proxyReducer';\nconst STATE_FUNC_LITERAL = '_getState';\nconst PROXY_STATE_FUNC_LITERAL = '_getProxyState';\n\n/**\n * Injector is used for injecting providers to modules.\n * Hierarchical provider injection is supported.\n */\nexport class Injector {\n  static pending = new Set();\n\n  constructor() {\n    this.targetClass = null;\n    this.parentInjector = null;\n    this.moduleRegistry = Registry.moduleRegistry;\n    this.providerRegistry = Registry.providerRegistry;\n    this.container = new Container();\n    this.universalProviders = new Map();\n  }\n\n  /**\n   * Resolve module providers recursively.\n   * May search for providers in parent injector.\n   * @param {Provider} provider\n   * @param {Set} pending - process record\n   */\n  resolveModuleProvider(provider, pending = Injector.pending) {\n    const { container } = this;\n    assert(provider, 'Expected valid provider', provider);\n\n    // Provider has already been resolved\n    if (container.localHas(provider.token)) return;\n\n    // useExisting provider needs to resolve existing providers instead of itself\n    if (provider instanceof ExistingProvider) {\n      if (pending.has(provider)) {\n        throw CircularDependencyError(pending, provider.token);\n      }\n      if (this.universalProviders.has(provider.useExisting)) {\n        pending.add(provider);\n        this.resolveModuleProvider(\n          this.universalProviders.get(provider.useExisting),\n        );\n        pending.delete(provider);\n      }\n      if (container.localHas(provider.useExisting)) {\n        container.set(provider.token, container.localGet(provider.useExisting));\n      } else {\n        throw DIError(\n          `ExistingProvider [${provider.useExisting}] is not found`,\n        );\n      }\n      return;\n    }\n\n    // If provider exists in ancestor injectors,\n    // then it should create a reference to that provider locally.\n    if (container.has(provider.token)) {\n      container.set(provider.token, container.get(provider.token));\n      return;\n    }\n    if (!this.universalProviders.has(provider.token)) {\n      if (this.parentInjector) {\n        this.parentInjector.resolveModuleProvider(provider);\n      }\n    }\n    if (provider instanceof ValueProvider) {\n      container.set(provider.token, provider);\n    } else if (provider instanceof FactoryProvider) {\n      pending.add(provider.token);\n      // eslint-disable-next-line\n      const deps = provider.deps.map((dep) =>\n        isObject(dep) ? dep : { dep, optional: false },\n      );\n      const dependencies = this.resolveDependencies(deps, pending);\n      const factoryProvider = provider.func.call(null, dependencies);\n      provider.setInstance(factoryProvider);\n      container.set(provider.token, provider);\n      pending.delete(provider.token);\n    } else if (provider instanceof ClassProvider) {\n      if (this.moduleRegistry.has(provider.klass)) {\n        const deps =\n          Registry.resolveInheritedDependencies(provider.klass) || [];\n        const Klass = provider.klass;\n        pending.add(provider.token);\n        const dependencies = this.resolveDependencies(deps, pending);\n        const instance = new Klass(dependencies);\n        provider.setInstance(instance);\n        container.set(provider.token, provider);\n        pending.delete(provider.token);\n      } else if (\n        provider instanceof ClassProvider &&\n        this.providerRegistry.has(provider.klass)\n      ) {\n        // Depends on moduleFactory provider\n        this.resolveModuleFactoryProvider(provider);\n      } else {\n        throw DIError(\n          `Provider [${provider.token}] can not be resolved, module is not found`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Resolve module dependencies recursively.\n   * If module is not optional and can not be resolved, then DIError will be thrown\n   * @param {Array} deps - module dependencies\n   * @param {Set} pending - process record\n   */\n  resolveDependencies(deps, pending) {\n    const dependencies = {};\n    for (const { dep, optional } of deps) {\n      if (pending.has(dep)) {\n        throw CircularDependencyError(pending, dep);\n      }\n      if (!this.container.has(dep)) {\n        if (this.universalProviders.has(dep)) {\n          const dependentModuleProvider = this.universalProviders.get(dep);\n          this.resolveModuleProvider(dependentModuleProvider);\n        } else if (this.parentInjector) {\n          // Dependent module provider can not be found locally,\n          // try to resolve provider in ancestor injectors.\n          this.parentInjector.resolveModuleProviderForChildren(dep);\n        }\n      }\n      // If the dependency is optional but Provider is found, then try to inject the dependency.\n      // Otherwise, if provider is not found, then just ignore.\n      // If the dependency is not optional and Provider is found, then try to inject the dependency.\n      // Otherwise, if the Provider is not found, then an Error should be thrown.\n      if (!optional || this.container.has(dep)) {\n        const dependentProvider = this.container.get(dep);\n        const dependentInstance = dependentProvider.getInstance();\n\n        // Value dependency and use spread, in this case, value object needs to be spreaded\n        if (dependentProvider instanceof ValueProvider) {\n          if (dependentProvider.spread) {\n            Object.assign(dependencies, dependentInstance.value);\n          } else {\n            dependencies[camelize(dep)] = dependentInstance.value;\n          }\n        } else if (\n          dependentProvider instanceof FactoryProvider &&\n          dependentProvider.spread\n        ) {\n          Object.assign(dependencies, dependentInstance);\n        } else {\n          dependencies[camelize(dep)] = dependentProvider.getInstance();\n        }\n      } else if (!optional) {\n        throw DIError(`Dependency Module [${dep}] can not be resolved`);\n      }\n    }\n    // Injector instance will be injected into each module\n    dependencies.injector = this;\n    return dependencies;\n  }\n\n  /**\n   * Resolve a module provider needed by its child providers.\n   * It's a wrapper function only for child injectors.\n   * @param {String} providerToken\n   */\n  resolveModuleProviderForChildren(providerToken) {\n    if (this.universalProviders.has(providerToken)) {\n      this.resolveModuleProvider(this.universalProviders.get(providerToken));\n    } else if (this.parentInjector) {\n      this.parentInjector.resolveModuleProviderForChildren(providerToken);\n    }\n  }\n\n  /**\n   * Used for resolving ModuleFactory provider specifically.\n   * @param {Provider} providerInstance\n   */\n  resolveModuleFactoryProvider(providerInstance) {\n    if (!this.container.has(providerInstance.token)) {\n      Injector.pending.add(providerInstance.token);\n      // Prevent referencing to itself\n      if (providerInstance.klass === this.targetClass) {\n        throw CircularDependencyError(Injector.pending, this.targetClass.name);\n      }\n      const instance = Injector.bootstrap(providerInstance.klass, this);\n      providerInstance.setInstance(instance);\n      this.container.set(providerInstance.token, providerInstance);\n      Injector.pending.delete(providerInstance.token);\n    }\n  }\n\n  /**\n   * A static wrapper function for supporting hierarchical bootstrap.\n   * @param {Class} RootClas\n   * @param {Injector} parentInjector\n   */\n  static bootstrap(RootClass, parentInjector = null) {\n    const injector = new Injector();\n    if (parentInjector) injector.setParent(parentInjector);\n    return injector._bootstrap(RootClass);\n  }\n\n  /**\n   * To bootstrap module factory and resolve all providers.\n   * @param {Class} RootClass\n   */\n  _bootstrap(RootClass) {\n    this.targetClass = RootClass;\n    // TODO: how to cache root class?\n    if (this.container.localHas(RootClass.name)) {\n      return this.container.localGet(RootClass.name).getInstance();\n    }\n\n    // Implement inheritance for ModuleFactory\n    const providersMetadata = Registry.resolveInheritedModuleFactory(RootClass);\n\n    // Iterate through all provider metadata\n    // Discard providers in parent class overwritten by children\n    const { universalProviders } = this;\n    for (const provider of providersMetadata) {\n      if (isValueProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ValueProvider(\n            provider.provide,\n            provider.useValue,\n            provider.spread,\n            provider.private,\n          ),\n        );\n      } else if (isStaticClassProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ClassProvider(\n            provider.provide,\n            provider.useClass,\n            provider.deps,\n            provider.private,\n          ),\n        );\n      } else if (isExistingProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ExistingProvider(\n            provider.provide,\n            provider.useExisting,\n            provider.private,\n          ),\n        );\n      } else if (isFactoryProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          // eslint-disable-next-line\n          new FactoryProvider(\n            provider.provide,\n            provider.useFactory,\n            provider.deps,\n            provider.spread,\n            provider.private,\n          ),\n        );\n      } else {\n        throw DIError('Expected valid provider', provider);\n      }\n    }\n\n    // Resolve dependencies and create instances of provides\n    const { container } = this;\n    for (const provider of this.universalProviders.values()) {\n      if (!container.has(provider.provide)) {\n        // Provider is a module factory\n        if (\n          provider instanceof ClassProvider &&\n          this.providerRegistry.has(provider.klass)\n        ) {\n          this.resolveModuleFactoryProvider(provider);\n        } else {\n          this.resolveModuleProvider(provider);\n        }\n      }\n    }\n\n    const moduleProviders = {};\n    for (const [token, moduleProvider] of container.entries()) {\n      if (!moduleProvider.private) {\n        const instance = moduleProvider.getInstance();\n        if (moduleProvider instanceof ValueProvider) {\n          moduleProviders[camelize(token)] = instance.value;\n        } else {\n          moduleProviders[camelize(token)] = instance;\n        }\n      }\n    }\n\n    // Instantiate root module\n    const reducers = {};\n    const proxyReducers = {};\n    const rootClassInstance = new RootClass(moduleProviders);\n\n    // Register all module providers to root instance\n    for (const name of Object.keys(moduleProviders)) {\n      const module = moduleProviders[name];\n      if (rootClassInstance.addModule) {\n        rootClassInstance.addModule(name, module);\n        if (module instanceof RcModuleV2) {\n          module.parentModule = rootClassInstance;\n          module[identifierKey] = name;\n        }\n      }\n      if (!(rootClassInstance instanceof RcModuleV2)) {\n        if (module.reducer) {\n          reducers[name] = module.reducer;\n        }\n\n        if (module.proxyReducer) {\n          proxyReducers[name] = module.proxyReducer;\n        }\n\n        // Additional module configurations\n        if (module._reducer) {\n          Object.defineProperty(module, STATE_FUNC_LITERAL, {\n            value: () => rootClassInstance.state[name],\n          });\n        }\n        if (module._proxyReducer) {\n          Object.defineProperty(module, PROXY_STATE_FUNC_LITERAL, {\n            value: () => rootClassInstance.proxyState[name],\n          });\n        }\n      }\n    }\n    if (!(rootClassInstance instanceof RcModuleV2)) {\n      Object.defineProperty(rootClassInstance, REDUCER_LITERAL, {\n        value: combineReducers({\n          ...reducers,\n          // eslint-disable-next-line\n          lastAction: (state = null, action) =>\n            action._usm === usmAction ? {} : action,\n        }),\n      });\n      if (rootClassInstance._proxyReducer) {\n        Object.defineProperty(rootClassInstance, PROXY_REDUCER_LITERAL, {\n          value: combineReducers({\n            ...proxyReducers,\n          }),\n        });\n      }\n    }\n    return rootClassInstance;\n  }\n\n  /**\n   * Get specific provider by injector.\n   * Will search for providers from parentInjector.\n   * @param {String} token\n   */\n  get(token) {\n    const provider = this.container.get(token);\n    const instance = provider.getInstance();\n    if (provider instanceof ValueProvider) {\n      return instance.value;\n    }\n    return instance;\n  }\n\n  /**\n   * Set parent injector and parent container.\n   * Construct a tree-like structure for hierarchical injector.\n   * @param {Injector} parentInjector\n   */\n  setParent(parentInjector) {\n    if (parentInjector) {\n      this.container.setParent(parentInjector.container);\n      this.parentInjector = parentInjector;\n    }\n  }\n\n  // TODO: support hierachical reset\n  static reset() {\n    this.pending.clear();\n    Registry.moduleRegistry.reset();\n    Registry.providerRegistry.reset();\n  }\n}\n"],"mappings":"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"}