{"version":3,"file":"injector.js","names":["_core","require","_redux","_container","_interopRequireDefault","_provider2","_registry","_error","_is_type","_utils","e","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_slicedToArray","r","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","l","t","n","i","u","a","f","call","next","Object","done","push","value","length","Array","isArray","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_createForOfIteratorHelper","_n","F","s","_arrayLikeToArray","toString","slice","name","from","test","_classCallCheck","_defineProperties","key","_createClass","_toPrimitive","toPrimitive","String","Number","REDUCER_LITERAL","PROXY_REDUCER_LITERAL","STATE_FUNC_LITERAL","PROXY_STATE_FUNC_LITERAL","Injector","targetClass","parentInjector","moduleRegistry","Registry","providerRegistry","container","Container","universalProviders","Map","resolveModuleProvider","provider","pending","undefined","assert","localHas","token","ExistingProvider","has","CircularDependencyError","useExisting","add","get","set","localGet","DIError","concat","ValueProvider","FactoryProvider","deps","map","dep","isObject","optional","dependencies","resolveDependencies","factoryProvider","func","setInstance","ClassProvider","klass","resolveInheritedDependencies","Klass","instance","resolveModuleFactoryProvider","_iterator","_step","_step$value","dependentModuleProvider","resolveModuleProviderForChildren","dependentProvider","dependentInstance","getInstance","spread","assign","camelize","err","injector","providerToken","providerInstance","bootstrap","_bootstrap","RootClass","providersMetadata","resolveInheritedModuleFactory","_iterator2","_step2","isValueProvider","provide","useValue","isStaticClassProvider","useClass","isExistingProvider","isFactoryProvider","useFactory","_iterator3","values","_step3","moduleProviders","_iterator4","entries","_step4","_step4$value","moduleProvider","reducers","proxyReducers","rootClassInstance","_loop","_Object$keys","_i","module","addModule","RcModuleV2","parentModule","identifierKey","reducer","proxyReducer","_reducer","state","_proxyReducer","proxyState","combineReducers","lastAction","action","_usm","usmAction","setParent","reset","clear","exports","Set"],"sources":["lib/di/injector.ts"],"sourcesContent":["// @ts-nocheck\nimport {\n  identifierKey,\n  RcModuleV2,\n  usmAction,\n} from '@ringcentral-integration/core';\nimport { combineReducers } from 'redux';\n\nimport Container from './container';\nimport {\n  ClassProvider,\n  ExistingProvider,\n  FactoryProvider,\n  ValueProvider,\n} from './provider';\nimport Registry from './registry/registry';\nimport { CircularDependencyError, DIError } from './utils/error';\nimport {\n  isExistingProvider,\n  isFactoryProvider,\n  isObject,\n  isStaticClassProvider,\n  isValueProvider,\n} from './utils/is_type';\nimport { assert, camelize } from './utils/utils';\n\nconst REDUCER_LITERAL = '_reducer';\nconst PROXY_REDUCER_LITERAL = '_proxyReducer';\nconst STATE_FUNC_LITERAL = '_getState';\nconst PROXY_STATE_FUNC_LITERAL = '_getProxyState';\n\n/**\n * Injector is used for injecting providers to modules.\n * Hierarchical provider injection is supported.\n */\nexport class Injector {\n  static pending = new Set();\n\n  constructor() {\n    this.targetClass = null;\n    this.parentInjector = null;\n    this.moduleRegistry = Registry.moduleRegistry;\n    this.providerRegistry = Registry.providerRegistry;\n    this.container = new Container();\n    this.universalProviders = new Map();\n  }\n\n  /**\n   * Resolve module providers recursively.\n   * May search for providers in parent injector.\n   * @param {Provider} provider\n   * @param {Set} pending - process record\n   */\n  resolveModuleProvider(provider, pending = Injector.pending) {\n    const { container } = this;\n    assert(provider, 'Expected valid provider', provider);\n\n    // Provider has already been resolved\n    if (container.localHas(provider.token)) return;\n\n    // useExisting provider needs to resolve existing providers instead of itself\n    if (provider instanceof ExistingProvider) {\n      if (pending.has(provider)) {\n        throw CircularDependencyError(pending, provider.token);\n      }\n      if (this.universalProviders.has(provider.useExisting)) {\n        pending.add(provider);\n        this.resolveModuleProvider(\n          this.universalProviders.get(provider.useExisting),\n        );\n        pending.delete(provider);\n      }\n      if (container.localHas(provider.useExisting)) {\n        container.set(provider.token, container.localGet(provider.useExisting));\n      } else {\n        throw DIError(\n          `ExistingProvider [${provider.useExisting}] is not found`,\n        );\n      }\n      return;\n    }\n\n    // If provider exists in ancestor injectors,\n    // then it should create a reference to that provider locally.\n    if (container.has(provider.token)) {\n      container.set(provider.token, container.get(provider.token));\n      return;\n    }\n    if (!this.universalProviders.has(provider.token)) {\n      if (this.parentInjector) {\n        this.parentInjector.resolveModuleProvider(provider);\n      }\n    }\n    if (provider instanceof ValueProvider) {\n      container.set(provider.token, provider);\n    } else if (provider instanceof FactoryProvider) {\n      pending.add(provider.token);\n      // eslint-disable-next-line\n      const deps = provider.deps.map((dep) =>\n        isObject(dep) ? dep : { dep, optional: false },\n      );\n      const dependencies = this.resolveDependencies(deps, pending);\n      const factoryProvider = provider.func.call(null, dependencies);\n      provider.setInstance(factoryProvider);\n      container.set(provider.token, provider);\n      pending.delete(provider.token);\n    } else if (provider instanceof ClassProvider) {\n      if (this.moduleRegistry.has(provider.klass)) {\n        const deps =\n          Registry.resolveInheritedDependencies(provider.klass) || [];\n        const Klass = provider.klass;\n        pending.add(provider.token);\n        const dependencies = this.resolveDependencies(deps, pending);\n        const instance = new Klass(dependencies);\n        provider.setInstance(instance);\n        container.set(provider.token, provider);\n        pending.delete(provider.token);\n      } else if (\n        provider instanceof ClassProvider &&\n        this.providerRegistry.has(provider.klass)\n      ) {\n        // Depends on moduleFactory provider\n        this.resolveModuleFactoryProvider(provider);\n      } else {\n        throw DIError(\n          `Provider [${provider.token}] can not be resolved, module is not found`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Resolve module dependencies recursively.\n   * If module is not optional and can not be resolved, then DIError will be thrown\n   * @param {Array} deps - module dependencies\n   * @param {Set} pending - process record\n   */\n  resolveDependencies(deps, pending) {\n    const dependencies = {};\n    for (const { dep, optional } of deps) {\n      if (pending.has(dep)) {\n        throw CircularDependencyError(pending, dep);\n      }\n      if (!this.container.has(dep)) {\n        if (this.universalProviders.has(dep)) {\n          const dependentModuleProvider = this.universalProviders.get(dep);\n          this.resolveModuleProvider(dependentModuleProvider);\n        } else if (this.parentInjector) {\n          // Dependent module provider can not be found locally,\n          // try to resolve provider in ancestor injectors.\n          this.parentInjector.resolveModuleProviderForChildren(dep);\n        }\n      }\n      // If the dependency is optional but Provider is found, then try to inject the dependency.\n      // Otherwise, if provider is not found, then just ignore.\n      // If the dependency is not optional and Provider is found, then try to inject the dependency.\n      // Otherwise, if the Provider is not found, then an Error should be thrown.\n      if (!optional || this.container.has(dep)) {\n        const dependentProvider = this.container.get(dep);\n        const dependentInstance = dependentProvider.getInstance();\n\n        // Value dependency and use spread, in this case, value object needs to be spreaded\n        if (dependentProvider instanceof ValueProvider) {\n          if (dependentProvider.spread) {\n            Object.assign(dependencies, dependentInstance.value);\n          } else {\n            dependencies[camelize(dep)] = dependentInstance.value;\n          }\n        } else if (\n          dependentProvider instanceof FactoryProvider &&\n          dependentProvider.spread\n        ) {\n          Object.assign(dependencies, dependentInstance);\n        } else {\n          dependencies[camelize(dep)] = dependentProvider.getInstance();\n        }\n      } else if (!optional) {\n        throw DIError(`Dependency Module [${dep}] can not be resolved`);\n      }\n    }\n    // Injector instance will be injected into each module\n    dependencies.injector = this;\n    return dependencies;\n  }\n\n  /**\n   * Resolve a module provider needed by its child providers.\n   * It's a wrapper function only for child injectors.\n   * @param {String} providerToken\n   */\n  resolveModuleProviderForChildren(providerToken) {\n    if (this.universalProviders.has(providerToken)) {\n      this.resolveModuleProvider(this.universalProviders.get(providerToken));\n    } else if (this.parentInjector) {\n      this.parentInjector.resolveModuleProviderForChildren(providerToken);\n    }\n  }\n\n  /**\n   * Used for resolving ModuleFactory provider specifically.\n   * @param {Provider} providerInstance\n   */\n  resolveModuleFactoryProvider(providerInstance) {\n    if (!this.container.has(providerInstance.token)) {\n      Injector.pending.add(providerInstance.token);\n      // Prevent referencing to itself\n      if (providerInstance.klass === this.targetClass) {\n        throw CircularDependencyError(Injector.pending, this.targetClass.name);\n      }\n      const instance = Injector.bootstrap(providerInstance.klass, this);\n      providerInstance.setInstance(instance);\n      this.container.set(providerInstance.token, providerInstance);\n      Injector.pending.delete(providerInstance.token);\n    }\n  }\n\n  /**\n   * A static wrapper function for supporting hierarchical bootstrap.\n   * @param {Class} RootClas\n   * @param {Injector} parentInjector\n   */\n  static bootstrap(RootClass, parentInjector = null) {\n    const injector = new Injector();\n    if (parentInjector) injector.setParent(parentInjector);\n    return injector._bootstrap(RootClass);\n  }\n\n  /**\n   * To bootstrap module factory and resolve all providers.\n   * @param {Class} RootClass\n   */\n  _bootstrap(RootClass) {\n    this.targetClass = RootClass;\n    // TODO: how to cache root class?\n    if (this.container.localHas(RootClass.name)) {\n      return this.container.localGet(RootClass.name).getInstance();\n    }\n\n    // Implement inheritance for ModuleFactory\n    const providersMetadata = Registry.resolveInheritedModuleFactory(RootClass);\n\n    // Iterate through all provider metadata\n    // Discard providers in parent class overwritten by children\n    const { universalProviders } = this;\n    for (const provider of providersMetadata) {\n      if (isValueProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ValueProvider(\n            provider.provide,\n            provider.useValue,\n            provider.spread,\n            provider.private,\n          ),\n        );\n      } else if (isStaticClassProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ClassProvider(\n            provider.provide,\n            provider.useClass,\n            provider.deps,\n            provider.private,\n          ),\n        );\n      } else if (isExistingProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ExistingProvider(\n            provider.provide,\n            provider.useExisting,\n            provider.private,\n          ),\n        );\n      } else if (isFactoryProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          // eslint-disable-next-line\n          new FactoryProvider(\n            provider.provide,\n            provider.useFactory,\n            provider.deps,\n            provider.spread,\n            provider.private,\n          ),\n        );\n      } else {\n        throw DIError('Expected valid provider', provider);\n      }\n    }\n\n    // Resolve dependencies and create instances of provides\n    const { container } = this;\n    for (const provider of this.universalProviders.values()) {\n      if (!container.has(provider.provide)) {\n        // Provider is a module factory\n        if (\n          provider instanceof ClassProvider &&\n          this.providerRegistry.has(provider.klass)\n        ) {\n          this.resolveModuleFactoryProvider(provider);\n        } else {\n          this.resolveModuleProvider(provider);\n        }\n      }\n    }\n\n    const moduleProviders = {};\n    for (const [token, moduleProvider] of container.entries()) {\n      if (!moduleProvider.private) {\n        const instance = moduleProvider.getInstance();\n        if (moduleProvider instanceof ValueProvider) {\n          moduleProviders[camelize(token)] = instance.value;\n        } else {\n          moduleProviders[camelize(token)] = instance;\n        }\n      }\n    }\n\n    // Instantiate root module\n    const reducers = {};\n    const proxyReducers = {};\n    const rootClassInstance = new RootClass(moduleProviders);\n\n    // Register all module providers to root instance\n    for (const name of Object.keys(moduleProviders)) {\n      const module = moduleProviders[name];\n      if (rootClassInstance.addModule) {\n        rootClassInstance.addModule(name, module);\n        if (module instanceof RcModuleV2) {\n          module.parentModule = rootClassInstance;\n          module[identifierKey] = name;\n        }\n      }\n      if (!(rootClassInstance instanceof RcModuleV2)) {\n        if (module.reducer) {\n          reducers[name] = module.reducer;\n        }\n\n        if (module.proxyReducer) {\n          proxyReducers[name] = module.proxyReducer;\n        }\n\n        // Additional module configurations\n        if (module._reducer) {\n          Object.defineProperty(module, STATE_FUNC_LITERAL, {\n            value: () => rootClassInstance.state[name],\n          });\n        }\n        if (module._proxyReducer) {\n          Object.defineProperty(module, PROXY_STATE_FUNC_LITERAL, {\n            value: () => rootClassInstance.proxyState[name],\n          });\n        }\n      }\n    }\n    if (!(rootClassInstance instanceof RcModuleV2)) {\n      Object.defineProperty(rootClassInstance, REDUCER_LITERAL, {\n        value: combineReducers({\n          ...reducers,\n          // eslint-disable-next-line\n          lastAction: (state = null, action) =>\n            action._usm === usmAction ? {} : action,\n        }),\n      });\n      if (rootClassInstance._proxyReducer) {\n        Object.defineProperty(rootClassInstance, PROXY_REDUCER_LITERAL, {\n          value: combineReducers({\n            ...proxyReducers,\n          }),\n        });\n      }\n    }\n    return rootClassInstance;\n  }\n\n  /**\n   * Get specific provider by injector.\n   * Will search for providers from parentInjector.\n   * @param {String} token\n   */\n  get(token) {\n    const provider = this.container.get(token);\n    const instance = provider.getInstance();\n    if (provider instanceof ValueProvider) {\n      return instance.value;\n    }\n    return instance;\n  }\n\n  /**\n   * Set parent injector and parent container.\n   * Construct a tree-like structure for hierarchical injector.\n   * @param {Injector} parentInjector\n   */\n  setParent(parentInjector) {\n    if (parentInjector) {\n      this.container.setParent(parentInjector.container);\n      this.parentInjector = parentInjector;\n    }\n  }\n\n  // TODO: support hierachical reset\n  static reset() {\n    this.pending.clear();\n    Registry.moduleRegistry.reset();\n    Registry.providerRegistry.reset();\n  }\n}\n"],"mappings":"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","ignoreList":[]}