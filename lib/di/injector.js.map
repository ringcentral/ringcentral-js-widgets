{"version":3,"sources":["lib/di/injector.ts"],"names":["REDUCER_LITERAL","PROXY_REDUCER_LITERAL","STATE_FUNC_LITERAL","PROXY_STATE_FUNC_LITERAL","Injector","targetClass","parentInjector","moduleRegistry","Registry","providerRegistry","container","Container","universalProviders","Map","provider","pending","localHas","token","ExistingProvider","has","useExisting","add","resolveModuleProvider","get","set","localGet","ValueProvider","FactoryProvider","deps","map","dep","optional","dependencies","resolveDependencies","factoryProvider","func","call","setInstance","ClassProvider","klass","resolveInheritedDependencies","Klass","instance","resolveModuleFactoryProvider","dependentModuleProvider","resolveModuleProviderForChildren","dependentProvider","dependentInstance","getInstance","spread","Object","assign","value","injector","providerToken","providerInstance","name","bootstrap","RootClass","providersMetadata","resolveInheritedModuleFactory","provide","useValue","useClass","useFactory","values","moduleProviders","entries","moduleProvider","reducers","proxyReducers","rootClassInstance","module","addModule","RcModuleV2","parentModule","identifierKey","reducer","proxyReducer","_reducer","defineProperty","state","_proxyReducer","proxyState","keys","lastAction","action","_usm","usmAction","setParent","_bootstrap","clear","reset","Set"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n\nimport {\n  identifierKey,\n  RcModuleV2,\n  usmAction,\n} from '@ringcentral-integration/core';\n\nimport Container from './container';\nimport {\n  ClassProvider,\n  ExistingProvider,\n  FactoryProvider,\n  ValueProvider,\n} from './provider';\nimport Registry from './registry/registry';\nimport { CircularDependencyError, DIError } from './utils/error';\nimport {\n  isExistingProvider,\n  isFactoryProvider,\n  isObject,\n  isStaticClassProvider,\n  isValueProvider,\n} from './utils/is_type';\nimport { assert, camelize } from './utils/utils';\n\nconst REDUCER_LITERAL = '_reducer';\nconst PROXY_REDUCER_LITERAL = '_proxyReducer';\nconst STATE_FUNC_LITERAL = '_getState';\nconst PROXY_STATE_FUNC_LITERAL = '_getProxyState';\n\n/**\n * Injector is used for injecting providers to modules.\n * Hierarchical provider injection is supported.\n */\nexport class Injector {\n  static pending = new Set();\n\n  constructor() {\n    this.targetClass = null;\n    this.parentInjector = null;\n    this.moduleRegistry = Registry.moduleRegistry;\n    this.providerRegistry = Registry.providerRegistry;\n    this.container = new Container();\n    this.universalProviders = new Map();\n  }\n\n  /**\n   * Resolve module providers recursively.\n   * May search for providers in parent injector.\n   * @param {Provider} provider\n   * @param {Set} pending - process record\n   */\n  resolveModuleProvider(provider, pending = Injector.pending) {\n    const { container } = this;\n    assert(provider, 'Expected valid provider', provider);\n\n    // Provider has already been resolved\n    if (container.localHas(provider.token)) return;\n\n    // useExisting provider needs to resolve existing providers instead of itself\n    if (provider instanceof ExistingProvider) {\n      if (pending.has(provider)) {\n        throw CircularDependencyError(pending, provider.token);\n      }\n      if (this.universalProviders.has(provider.useExisting)) {\n        pending.add(provider);\n        this.resolveModuleProvider(\n          this.universalProviders.get(provider.useExisting),\n        );\n        pending.delete(provider);\n      }\n      if (container.localHas(provider.useExisting)) {\n        container.set(provider.token, container.localGet(provider.useExisting));\n      } else {\n        throw DIError(\n          `ExistingProvider [${provider.useExisting}] is not found`,\n        );\n      }\n      return;\n    }\n\n    // If provider exists in ancestor injectors,\n    // then it should create a reference to that provider locally.\n    if (container.has(provider.token)) {\n      container.set(provider.token, container.get(provider.token));\n      return;\n    }\n    if (!this.universalProviders.has(provider.token)) {\n      if (this.parentInjector) {\n        this.parentInjector.resolveModuleProvider(provider);\n      }\n    }\n    if (provider instanceof ValueProvider) {\n      container.set(provider.token, provider);\n    } else if (provider instanceof FactoryProvider) {\n      pending.add(provider.token);\n      // eslint-disable-next-line\n      const deps = provider.deps.map((dep) =>\n        isObject(dep) ? dep : { dep, optional: false },\n      );\n      const dependencies = this.resolveDependencies(deps, pending);\n      const factoryProvider = provider.func.call(null, dependencies);\n      provider.setInstance(factoryProvider);\n      container.set(provider.token, provider);\n      pending.delete(provider.token);\n    } else if (provider instanceof ClassProvider) {\n      if (this.moduleRegistry.has(provider.klass)) {\n        const deps =\n          Registry.resolveInheritedDependencies(provider.klass) || [];\n        const Klass = provider.klass;\n        pending.add(provider.token);\n        const dependencies = this.resolveDependencies(deps, pending);\n        const instance = new Klass(dependencies);\n        provider.setInstance(instance);\n        container.set(provider.token, provider);\n        pending.delete(provider.token);\n      } else if (\n        provider instanceof ClassProvider &&\n        this.providerRegistry.has(provider.klass)\n      ) {\n        // Depends on moduleFactory provider\n        this.resolveModuleFactoryProvider(provider);\n      } else {\n        throw DIError(\n          `Provider [${provider.token}] can not be resolved, module is not found`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Resolve module dependencies recursively.\n   * If module is not optional and can not be resolved, then DIError will be thrown\n   * @param {Array} deps - module dependencies\n   * @param {Set} pending - process record\n   */\n  resolveDependencies(deps, pending) {\n    const dependencies = {};\n    for (const { dep, optional } of deps) {\n      if (pending.has(dep)) {\n        throw CircularDependencyError(pending, dep);\n      }\n      if (!this.container.has(dep)) {\n        if (this.universalProviders.has(dep)) {\n          const dependentModuleProvider = this.universalProviders.get(dep);\n          this.resolveModuleProvider(dependentModuleProvider);\n        } else if (this.parentInjector) {\n          // Dependent module provider can not be found locally,\n          // try to resolve provider in ancestor injectors.\n          this.parentInjector.resolveModuleProviderForChildren(dep);\n        }\n      }\n      // If the dependency is optional but Provider is found, then try to inject the dependency.\n      // Otherwise, if provider is not found, then just ignore.\n      // If the dependency is not optional and Provider is found, then try to inject the dependency.\n      // Otherwise, if the Provider is not found, then an Error should be thrown.\n      if (!optional || this.container.has(dep)) {\n        const dependentProvider = this.container.get(dep);\n        const dependentInstance = dependentProvider.getInstance();\n\n        // Value dependency and use spread, in this case, value object needs to be spreaded\n        if (dependentProvider instanceof ValueProvider) {\n          if (dependentProvider.spread) {\n            Object.assign(dependencies, dependentInstance.value);\n          } else {\n            dependencies[camelize(dep)] = dependentInstance.value;\n          }\n        } else if (\n          dependentProvider instanceof FactoryProvider &&\n          dependentProvider.spread\n        ) {\n          Object.assign(dependencies, dependentInstance);\n        } else {\n          dependencies[camelize(dep)] = dependentProvider.getInstance();\n        }\n      } else if (!optional) {\n        throw DIError(`Dependency Module [${dep}] can not be resolved`);\n      }\n    }\n    // Injector instance will be injected into each module\n    dependencies.injector = this;\n    return dependencies;\n  }\n\n  /**\n   * Resolve a module provider needed by its child providers.\n   * It's a wrapper function only for child injectors.\n   * @param {String} providerToken\n   */\n  resolveModuleProviderForChildren(providerToken) {\n    if (this.universalProviders.has(providerToken)) {\n      this.resolveModuleProvider(this.universalProviders.get(providerToken));\n    } else if (this.parentInjector) {\n      this.parentInjector.resolveModuleProviderForChildren(providerToken);\n    }\n  }\n\n  /**\n   * Used for resolving ModuleFactory provider specifically.\n   * @param {Provider} providerInstance\n   */\n  resolveModuleFactoryProvider(providerInstance) {\n    if (!this.container.has(providerInstance.token)) {\n      Injector.pending.add(providerInstance.token);\n      // Prevent referencing to itself\n      if (providerInstance.klass === this.targetClass) {\n        throw CircularDependencyError(Injector.pending, this.targetClass.name);\n      }\n      const instance = Injector.bootstrap(providerInstance.klass, this);\n      providerInstance.setInstance(instance);\n      this.container.set(providerInstance.token, providerInstance);\n      Injector.pending.delete(providerInstance.token);\n    }\n  }\n\n  /**\n   * A static wrapper function for supporting hierarchical bootstrap.\n   * @param {Class} RootClas\n   * @param {Injector} parentInjector\n   */\n  static bootstrap(RootClass, parentInjector = null) {\n    const injector = new Injector();\n    if (parentInjector) injector.setParent(parentInjector);\n    return injector._bootstrap(RootClass);\n  }\n\n  /**\n   * To bootstrap module factory and resolve all providers.\n   * @param {Class} RootClass\n   */\n  _bootstrap(RootClass) {\n    this.targetClass = RootClass;\n    // TODO: how to cache root class?\n    if (this.container.localHas(RootClass.name)) {\n      return this.container.localGet(RootClass.name).getInstance();\n    }\n\n    // Implement inheritance for ModuleFactory\n    const providersMetadata = Registry.resolveInheritedModuleFactory(RootClass);\n\n    // Iterate through all provider metadata\n    // Discard providers in parent class overwritten by children\n    const { universalProviders } = this;\n    for (const provider of providersMetadata) {\n      if (isValueProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ValueProvider(\n            provider.provide,\n            provider.useValue,\n            provider.spread,\n            provider.private,\n          ),\n        );\n      } else if (isStaticClassProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ClassProvider(\n            provider.provide,\n            provider.useClass,\n            provider.deps,\n            provider.private,\n          ),\n        );\n      } else if (isExistingProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ExistingProvider(\n            provider.provide,\n            provider.useExisting,\n            provider.private,\n          ),\n        );\n      } else if (isFactoryProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          // eslint-disable-next-line\n          new FactoryProvider(\n            provider.provide,\n            provider.useFactory,\n            provider.deps,\n            provider.spread,\n            provider.private,\n          ),\n        );\n      } else {\n        throw DIError('Expected valid provider', provider);\n      }\n    }\n\n    // Resolve dependencies and create instances of provides\n    const { container } = this;\n    for (const provider of this.universalProviders.values()) {\n      if (!container.has(provider.provide)) {\n        // Provider is a module factory\n        if (\n          provider instanceof ClassProvider &&\n          this.providerRegistry.has(provider.klass)\n        ) {\n          this.resolveModuleFactoryProvider(provider);\n        } else {\n          this.resolveModuleProvider(provider);\n        }\n      }\n    }\n\n    const moduleProviders = {};\n    for (const [token, moduleProvider] of container.entries()) {\n      if (!moduleProvider.private) {\n        const instance = moduleProvider.getInstance();\n        if (moduleProvider instanceof ValueProvider) {\n          moduleProviders[camelize(token)] = instance.value;\n        } else {\n          moduleProviders[camelize(token)] = instance;\n        }\n      }\n    }\n\n    // Instantiate root module\n    const reducers = {};\n    const proxyReducers = {};\n    const rootClassInstance = new RootClass(moduleProviders);\n\n    // Register all module providers to root instance\n    for (const name of Object.keys(moduleProviders)) {\n      const module = moduleProviders[name];\n      if (rootClassInstance.addModule) {\n        rootClassInstance.addModule(name, module);\n        if (module instanceof RcModuleV2) {\n          module.parentModule = rootClassInstance;\n          module[identifierKey] = name;\n        }\n      }\n      if (!(rootClassInstance instanceof RcModuleV2)) {\n        if (module.reducer) {\n          reducers[name] = module.reducer;\n        }\n\n        if (module.proxyReducer) {\n          proxyReducers[name] = module.proxyReducer;\n        }\n\n        // Additional module configurations\n        if (module._reducer) {\n          Object.defineProperty(module, STATE_FUNC_LITERAL, {\n            value: () => rootClassInstance.state[name],\n          });\n        }\n        if (module._proxyReducer) {\n          Object.defineProperty(module, PROXY_STATE_FUNC_LITERAL, {\n            value: () => rootClassInstance.proxyState[name],\n          });\n        }\n      }\n    }\n    if (!(rootClassInstance instanceof RcModuleV2)) {\n      Object.defineProperty(rootClassInstance, REDUCER_LITERAL, {\n        value: combineReducers({\n          ...reducers,\n          // eslint-disable-next-line\n          lastAction: (state = null, action) =>\n            action._usm === usmAction ? {} : action,\n        }),\n      });\n      if (rootClassInstance._proxyReducer) {\n        Object.defineProperty(rootClassInstance, PROXY_REDUCER_LITERAL, {\n          value: combineReducers({\n            ...proxyReducers,\n          }),\n        });\n      }\n    }\n    return rootClassInstance;\n  }\n\n  /**\n   * Get specific provider by injector.\n   * Will search for providers from parentInjector.\n   * @param {String} token\n   */\n  get(token) {\n    const provider = this.container.get(token);\n    const instance = provider.getInstance();\n    if (provider instanceof ValueProvider) {\n      return instance.value;\n    }\n    return instance;\n  }\n\n  /**\n   * Set parent injector and parent container.\n   * Construct a tree-like structure for hierarchical injector.\n   * @param {Injector} parentInjector\n   */\n  setParent(parentInjector) {\n    if (parentInjector) {\n      this.container.setParent(parentInjector.container);\n      this.parentInjector = parentInjector;\n    }\n  }\n\n  // TODO: support hierachical reset\n  static reset() {\n    this.pending.clear();\n    Registry.moduleRegistry.reset();\n    Registry.providerRegistry.reset();\n  }\n}\n"],"file":"injector.js"}