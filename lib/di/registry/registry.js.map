{"version":3,"file":"registry.js","names":["_is_type","require","_utils","_module_registry","_interopRequireDefault","_provider_registry","e","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","r","t","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","a","u","call","next","_arrayLikeToArray","toString","slice","name","from","test","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_classCallCheck","_defineProperties","key","_createClass","i","_toPrimitive","toPrimitive","String","Number","Registry","registerModule","klass","metadata","assert","isFunction","isObject","deps","concat","JSON","stringify","moduleRegistry","set","registerModuleFactory","providers","providerRegistry","resolveInheritedModuleFactory","currentClass","parentClass","getParentClass","has","resolved","get","moduleProviderMetadata","hasProviders","providerMetadata","mergeProviders","resolve","resolveInheritedDependencies","moduleMetadata","hasDeps","mergeDependencies","_formatClassProvider","formatted","provide","useClass","baseProvider","parentProvider","merged","Map","_iterator","_step","pp","err","_iterator2","_step2","p","useValue","merge","values","baseDeps","parentDeps","_iterator3","_step3","parent","dep","optional","_iterator4","_step4","base","exports","ModuleRegistry","ProviderRegistry"],"sources":["lib/di/registry/registry.ts"],"sourcesContent":["// @ts-nocheck\nimport { isArray, isFunction, isObject } from '../utils/is_type';\nimport { assert, getParentClass } from '../utils/utils';\n\nimport ModuleRegistry from './module_registry';\nimport ProviderRegistry from './provider_registry';\n\nexport default class Registry {\n  static moduleRegistry = new ModuleRegistry();\n  static providerRegistry = new ProviderRegistry();\n\n  static registerModule(klass, metadata) {\n    assert(isFunction(klass), 'Expected module to be a Class');\n    if (metadata) {\n      assert(\n        isObject(metadata),\n        'Expected parameter of @Module() to be an Object',\n      );\n      if (metadata.deps) {\n        assert(\n          isArray(metadata.deps),\n          `Expected deps to be an Array: [${klass.name}]\n          ${JSON.stringify(metadata)}`,\n        );\n      }\n    }\n    if (!metadata || Object.keys(metadata).length <= 0) {\n      metadata = null;\n    }\n    this.moduleRegistry.set(klass, metadata);\n  }\n\n  static registerModuleFactory(klass, metadata) {\n    assert(klass && isFunction(klass), 'Expected moduleFactory to be a Class');\n\n    if (metadata) {\n      assert(\n        isObject(metadata),\n        'Expected parameter of @ModuleFactory() to be an Object',\n      );\n      if (metadata.providers && !isArray(metadata.providers)) {\n        assert(\n          isArray(metadata.providers),\n          'Expected providers in @ModuleFactory() to be an Array',\n        );\n      }\n    } else {\n      metadata = null;\n    }\n    // TODO: validate module providers\n    // useValue should be object or number or string, etc.\n    // spread can only be used if useValue is an object.\n    // Not to check it for now, maybe cause performance issue\n    this.providerRegistry.set(klass, metadata);\n  }\n\n  /**\n   * Process the inheritance relationship of ModuleFactory.\n   * Support some inheritance options such as overwrite, merge, etc.\n   * ModuleFactory can only inherit from ModuleFactory.\n   * @param {Class} currentClass\n   */\n  static resolveInheritedModuleFactory(currentClass) {\n    const parentClass = getParentClass(currentClass);\n    if (!this.providerRegistry.has(currentClass)) return [];\n    if (this.providerRegistry.resolved(currentClass)) {\n      return this.providerRegistry.get(currentClass).providers;\n    }\n    const moduleProviderMetadata = this.providerRegistry.get(currentClass);\n    const hasProviders =\n      moduleProviderMetadata && isArray(moduleProviderMetadata.providers);\n    const providerMetadata = this.mergeProviders(\n      hasProviders ? moduleProviderMetadata.providers : [],\n      this.resolveInheritedModuleFactory(parentClass),\n    );\n    this.providerRegistry.resolve(currentClass, {\n      ...moduleProviderMetadata,\n      providers: providerMetadata,\n    });\n    return providerMetadata;\n  }\n\n  /**\n   * Process the inheritance relationship of Module and Library.\n   * Module can inherit from Module and Library.\n   * @param {Class} currentClass\n   * @return {Array} deps - resolved deps\n   */\n  static resolveInheritedDependencies(currentClass) {\n    const parentClass = getParentClass(currentClass);\n    if (!this.moduleRegistry.has(currentClass)) return [];\n    if (this.moduleRegistry.resolved(currentClass)) {\n      return this.moduleRegistry.get(currentClass).deps;\n    }\n    const moduleMetadata = this.moduleRegistry.get(currentClass);\n    const hasDeps = moduleMetadata && isArray(moduleMetadata.deps);\n    const deps = this.mergeDependencies(\n      hasDeps ? moduleMetadata.deps : [],\n      this.resolveInheritedDependencies(parentClass),\n    );\n    // Update parent class metadata\n    this.moduleRegistry.resolve(currentClass, { ...moduleMetadata, deps });\n    return deps;\n  }\n\n  /**\n   * A helper function for formating class provider metadata.\n   * @param {Object|Function} providerMetadata\n   */\n  static _formatClassProvider(providerMetadata) {\n    let formatted = {};\n    if (isFunction(providerMetadata)) {\n      formatted = {\n        provide: providerMetadata.name,\n        useClass: providerMetadata,\n      };\n    } else if (isFunction(providerMetadata.provide)) {\n      formatted = {\n        provide: providerMetadata.provide.name,\n        useClass: providerMetadata.provide,\n      };\n    }\n    return { ...providerMetadata, ...formatted };\n  }\n\n  /**\n   * A helper function for merging child and parent providers.\n   * @param {Object|Function} baseProvider\n   * @param {Object|Function} parentProvider\n   */\n  static mergeProviders(baseProvider, parentProvider) {\n    const merged = new Map();\n    for (let pp of parentProvider) {\n      pp = this._formatClassProvider(pp);\n      merged.set(pp.provide, pp);\n    }\n\n    // Merge child providers into parent providers\n    // Only support object shallow merge\n    for (let p of baseProvider) {\n      // useValue and don't overwrite parent values\n      const pp = merged.get(p.provide);\n      if (pp && p.useValue && p.merge) {\n        assert(\n          pp.useValue,\n          `Expected parent provider of [${p.provide}] to be a value provider`,\n        );\n        assert(\n          isObject(pp.useValue),\n          `Expected parent provider of [${p.provide}] to be an Object`,\n        );\n        p.useValue = { ...pp.useValue, ...p.useValue };\n        merged.set(p.provide, { ...pp, ...p });\n      } else {\n        // useClass, useExisting, useFactory will always overwrite parent provider\n        p = this._formatClassProvider(p);\n        merged.set(p.provide, { ...pp, ...p });\n      }\n    }\n    return Array.from(merged.values());\n  }\n\n  /**\n   * A helper function for merging child and parent module dependencies.\n   * @param {Array} baseDeps\n   * @param {Array} parentDeps\n   */\n  static mergeDependencies(baseDeps, parentDeps) {\n    const merged = new Map();\n    // Deps preprocess\n    for (const parent of parentDeps) {\n      if (!isObject(parent)) {\n        merged.set(parent, { dep: parent, optional: false });\n      } else {\n        merged.set(parent.dep, parent);\n      }\n    }\n\n    for (let base of baseDeps) {\n      if (!isObject(base)) {\n        base = { dep: base, optional: false };\n      }\n      if (merged.has(base.dep)) {\n        merged.set(base.dep, {\n          dep: base.dep,\n          optional: base.optional && merged.get(base.dep).optional,\n        });\n      } else {\n        merged.set(base.dep, base);\n      }\n    }\n\n    return Array.from(merged.values());\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAEA,IAAAE,gBAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,kBAAA,GAAAD,sBAAA,CAAAH,OAAA;AAAmD,SAAAG,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,gBAAAA,CAAA;AAAA,SAAAE,QAAAC,CAAA,sCAAAD,OAAA,wBAAAE,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAF,CAAA,kBAAAA,CAAA,gBAAAA,CAAA,WAAAA,CAAA,yBAAAC,MAAA,IAAAD,CAAA,CAAAG,WAAA,KAAAF,MAAA,IAAAD,CAAA,KAAAC,MAAA,CAAAG,SAAA,qBAAAJ,CAAA,KAAAD,OAAA,CAAAC,CAAA;AAAA,SAAAK,2BAAAC,CAAA,EAAAT,CAAA,QAAAU,CAAA,yBAAAN,MAAA,IAAAK,CAAA,CAAAL,MAAA,CAAAC,QAAA,KAAAI,CAAA,qBAAAC,CAAA,QAAAC,KAAA,CAAAC,OAAA,CAAAH,CAAA,MAAAC,CAAA,GAAAG,2BAAA,CAAAJ,CAAA,MAAAT,CAAA,IAAAS,CAAA,uBAAAA,CAAA,CAAAK,MAAA,IAAAJ,CAAA,KAAAD,CAAA,GAAAC,CAAA,OAAAK,EAAA,MAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,WAAAH,EAAA,IAAAN,CAAA,CAAAK,MAAA,KAAAK,IAAA,WAAAA,IAAA,MAAAC,KAAA,EAAAX,CAAA,CAAAM,EAAA,UAAAf,CAAA,WAAAA,EAAAS,CAAA,UAAAA,CAAA,KAAAY,CAAA,EAAAL,CAAA,gBAAAM,SAAA,iJAAAnB,CAAA,EAAAoB,CAAA,OAAAC,CAAA,gBAAAP,CAAA,WAAAA,EAAA,IAAAP,CAAA,GAAAA,CAAA,CAAAe,IAAA,CAAAhB,CAAA,MAAAS,CAAA,WAAAA,EAAA,QAAAT,CAAA,GAAAC,CAAA,CAAAgB,IAAA,WAAAH,CAAA,GAAAd,CAAA,CAAAU,IAAA,EAAAV,CAAA,KAAAT,CAAA,WAAAA,EAAAS,CAAA,IAAAe,CAAA,OAAArB,CAAA,GAAAM,CAAA,KAAAY,CAAA,WAAAA,EAAA,UAAAE,CAAA,YAAAb,CAAA,cAAAA,CAAA,8BAAAc,CAAA,QAAArB,CAAA;AAAA,SAAAU,4BAAAJ,CAAA,EAAAc,CAAA,QAAAd,CAAA,2BAAAA,CAAA,SAAAkB,iBAAA,CAAAlB,CAAA,EAAAc,CAAA,OAAAb,CAAA,MAAAkB,QAAA,CAAAH,IAAA,CAAAhB,CAAA,EAAAoB,KAAA,6BAAAnB,CAAA,IAAAD,CAAA,CAAAH,WAAA,KAAAI,CAAA,GAAAD,CAAA,CAAAH,WAAA,CAAAwB,IAAA,aAAApB,CAAA,cAAAA,CAAA,GAAAC,KAAA,CAAAoB,IAAA,CAAAtB,CAAA,oBAAAC,CAAA,+CAAAsB,IAAA,CAAAtB,CAAA,IAAAiB,iBAAA,CAAAlB,CAAA,EAAAc,CAAA;AAAA,SAAAI,kBAAAlB,CAAA,EAAAc,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAAd,CAAA,CAAAK,MAAA,MAAAS,CAAA,GAAAd,CAAA,CAAAK,MAAA,YAAAd,CAAA,MAAAkB,CAAA,GAAAP,KAAA,CAAAY,CAAA,GAAAvB,CAAA,GAAAuB,CAAA,EAAAvB,CAAA,MAAAkB,CAAA,CAAAlB,CAAA,IAAAS,CAAA,CAAAT,CAAA,YAAAkB,CAAA;AAAA,SAAAe,QAAAjC,CAAA,EAAAS,CAAA,QAAAC,CAAA,GAAAwB,MAAA,CAAAC,IAAA,CAAAnC,CAAA,OAAAkC,MAAA,CAAAE,qBAAA,QAAAjC,CAAA,GAAA+B,MAAA,CAAAE,qBAAA,CAAApC,CAAA,GAAAS,CAAA,KAAAN,CAAA,GAAAA,CAAA,CAAAkC,MAAA,WAAA5B,CAAA,WAAAyB,MAAA,CAAAI,wBAAA,CAAAtC,CAAA,EAAAS,CAAA,EAAA8B,UAAA,OAAA7B,CAAA,CAAA8B,IAAA,CAAAC,KAAA,CAAA/B,CAAA,EAAAP,CAAA,YAAAO,CAAA;AAAA,SAAAgC,cAAA1C,CAAA,aAAAS,CAAA,MAAAA,CAAA,GAAAkC,SAAA,CAAA7B,MAAA,EAAAL,CAAA,UAAAC,CAAA,WAAAiC,SAAA,CAAAlC,CAAA,IAAAkC,SAAA,CAAAlC,CAAA,QAAAA,CAAA,OAAAwB,OAAA,CAAAC,MAAA,CAAAxB,CAAA,OAAAkC,OAAA,WAAAnC,CAAA,IAAAoC,eAAA,CAAA7C,CAAA,EAAAS,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAyB,MAAA,CAAAY,yBAAA,GAAAZ,MAAA,CAAAa,gBAAA,CAAA/C,CAAA,EAAAkC,MAAA,CAAAY,yBAAA,CAAApC,CAAA,KAAAuB,OAAA,CAAAC,MAAA,CAAAxB,CAAA,GAAAkC,OAAA,WAAAnC,CAAA,IAAAyB,MAAA,CAAAc,cAAA,CAAAhD,CAAA,EAAAS,CAAA,EAAAyB,MAAA,CAAAI,wBAAA,CAAA5B,CAAA,EAAAD,CAAA,iBAAAT,CAAA;AAAA,SAAA6C,gBAAA7C,CAAA,EAAAS,CAAA,EAAAC,CAAA,YAAAD,CAAA,GAAAwC,cAAA,CAAAxC,CAAA,MAAAT,CAAA,GAAAkC,MAAA,CAAAc,cAAA,CAAAhD,CAAA,EAAAS,CAAA,IAAAW,KAAA,EAAAV,CAAA,EAAA6B,UAAA,MAAAW,YAAA,MAAAC,QAAA,UAAAnD,CAAA,CAAAS,CAAA,IAAAC,CAAA,EAAAV,CAAA;AAAA,SAAAoD,gBAAA7B,CAAA,EAAAL,CAAA,UAAAK,CAAA,YAAAL,CAAA,aAAAI,SAAA;AAAA,SAAA+B,kBAAArD,CAAA,EAAAS,CAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAD,CAAA,CAAAK,MAAA,EAAAJ,CAAA,UAAAP,CAAA,GAAAM,CAAA,CAAAC,CAAA,GAAAP,CAAA,CAAAoC,UAAA,GAAApC,CAAA,CAAAoC,UAAA,QAAApC,CAAA,CAAA+C,YAAA,kBAAA/C,CAAA,KAAAA,CAAA,CAAAgD,QAAA,QAAAjB,MAAA,CAAAc,cAAA,CAAAhD,CAAA,EAAAiD,cAAA,CAAA9C,CAAA,CAAAmD,GAAA,GAAAnD,CAAA;AAAA,SAAAoD,aAAAvD,CAAA,EAAAS,CAAA,EAAAC,CAAA,WAAAD,CAAA,IAAA4C,iBAAA,CAAArD,CAAA,CAAAO,SAAA,EAAAE,CAAA,GAAAC,CAAA,IAAA2C,iBAAA,CAAArD,CAAA,EAAAU,CAAA,GAAAwB,MAAA,CAAAc,cAAA,CAAAhD,CAAA,iBAAAmD,QAAA,SAAAnD,CAAA;AAAA,SAAAiD,eAAAvC,CAAA,QAAA8C,CAAA,GAAAC,YAAA,CAAA/C,CAAA,gCAAAR,OAAA,CAAAsD,CAAA,IAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAC,aAAA/C,CAAA,EAAAD,CAAA,oBAAAP,OAAA,CAAAQ,CAAA,MAAAA,CAAA,SAAAA,CAAA,MAAAV,CAAA,GAAAU,CAAA,CAAAN,MAAA,CAAAsD,WAAA,kBAAA1D,CAAA,QAAAwD,CAAA,GAAAxD,CAAA,CAAAyB,IAAA,CAAAf,CAAA,EAAAD,CAAA,gCAAAP,OAAA,CAAAsD,CAAA,UAAAA,CAAA,YAAAlC,SAAA,yEAAAb,CAAA,GAAAkD,MAAA,GAAAC,MAAA,EAAAlD,CAAA,KALnD;AAAA,IAOqBmD,QAAQ;EAAA,SAAAA,SAAA;IAAAT,eAAA,OAAAS,QAAA;EAAA;EAAAN,YAAA,CAAAM,QAAA;IAAAP,GAAA;IAAAlC,KAAA,WAAA0C,eAILC,KAAK,EAAEC,QAAQ,EAAE;MACrC,IAAAC,aAAM,EAAC,IAAAC,mBAAU,EAACH,KAAK,CAAC,EAAE,+BAA+B,CAAC;MAC1D,IAAIC,QAAQ,EAAE;QACZ,IAAAC,aAAM,EACJ,IAAAE,iBAAQ,EAACH,QAAQ,CAAC,EAClB,iDACF,CAAC;QACD,IAAIA,QAAQ,CAACI,IAAI,EAAE;UACjB,IAAAH,aAAM,EACJ,IAAArD,gBAAO,EAACoD,QAAQ,CAACI,IAAI,CAAC,oCAAAC,MAAA,CACYN,KAAK,CAACjC,IAAI,mBAAAuC,MAAA,CAC1CC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAC5B,CAAC;QACH;MACF;MACA,IAAI,CAACA,QAAQ,IAAI9B,MAAM,CAACC,IAAI,CAAC6B,QAAQ,CAAC,CAAClD,MAAM,IAAI,CAAC,EAAE;QAClDkD,QAAQ,GAAG,IAAI;MACjB;MACA,IAAI,CAACQ,cAAc,CAACC,GAAG,CAACV,KAAK,EAAEC,QAAQ,CAAC;IAC1C;EAAC;IAAAV,GAAA;IAAAlC,KAAA,WAAAsD,sBAE4BX,KAAK,EAAEC,QAAQ,EAAE;MAC5C,IAAAC,aAAM,EAACF,KAAK,IAAI,IAAAG,mBAAU,EAACH,KAAK,CAAC,EAAE,sCAAsC,CAAC;MAE1E,IAAIC,QAAQ,EAAE;QACZ,IAAAC,aAAM,EACJ,IAAAE,iBAAQ,EAACH,QAAQ,CAAC,EAClB,wDACF,CAAC;QACD,IAAIA,QAAQ,CAACW,SAAS,IAAI,CAAC,IAAA/D,gBAAO,EAACoD,QAAQ,CAACW,SAAS,CAAC,EAAE;UACtD,IAAAV,aAAM,EACJ,IAAArD,gBAAO,EAACoD,QAAQ,CAACW,SAAS,CAAC,EAC3B,uDACF,CAAC;QACH;MACF,CAAC,MAAM;QACLX,QAAQ,GAAG,IAAI;MACjB;MACA;MACA;MACA;MACA;MACA,IAAI,CAACY,gBAAgB,CAACH,GAAG,CAACV,KAAK,EAAEC,QAAQ,CAAC;IAC5C;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAV,GAAA;IAAAlC,KAAA,WAAAyD,8BAMqCC,YAAY,EAAE;MACjD,IAAMC,WAAW,GAAG,IAAAC,qBAAc,EAACF,YAAY,CAAC;MAChD,IAAI,CAAC,IAAI,CAACF,gBAAgB,CAACK,GAAG,CAACH,YAAY,CAAC,EAAE,OAAO,EAAE;MACvD,IAAI,IAAI,CAACF,gBAAgB,CAACM,QAAQ,CAACJ,YAAY,CAAC,EAAE;QAChD,OAAO,IAAI,CAACF,gBAAgB,CAACO,GAAG,CAACL,YAAY,CAAC,CAACH,SAAS;MAC1D;MACA,IAAMS,sBAAsB,GAAG,IAAI,CAACR,gBAAgB,CAACO,GAAG,CAACL,YAAY,CAAC;MACtE,IAAMO,YAAY,GAChBD,sBAAsB,IAAI,IAAAxE,gBAAO,EAACwE,sBAAsB,CAACT,SAAS,CAAC;MACrE,IAAMW,gBAAgB,GAAG,IAAI,CAACC,cAAc,CAC1CF,YAAY,GAAGD,sBAAsB,CAACT,SAAS,GAAG,EAAE,EACpD,IAAI,CAACE,6BAA6B,CAACE,WAAW,CAChD,CAAC;MACD,IAAI,CAACH,gBAAgB,CAACY,OAAO,CAACV,YAAY,EAAApC,aAAA,CAAAA,aAAA,KACrC0C,sBAAsB;QACzBT,SAAS,EAAEW;MAAgB,EAC5B,CAAC;MACF,OAAOA,gBAAgB;IACzB;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAhC,GAAA;IAAAlC,KAAA,WAAAqE,6BAMoCX,YAAY,EAAE;MAChD,IAAMC,WAAW,GAAG,IAAAC,qBAAc,EAACF,YAAY,CAAC;MAChD,IAAI,CAAC,IAAI,CAACN,cAAc,CAACS,GAAG,CAACH,YAAY,CAAC,EAAE,OAAO,EAAE;MACrD,IAAI,IAAI,CAACN,cAAc,CAACU,QAAQ,CAACJ,YAAY,CAAC,EAAE;QAC9C,OAAO,IAAI,CAACN,cAAc,CAACW,GAAG,CAACL,YAAY,CAAC,CAACV,IAAI;MACnD;MACA,IAAMsB,cAAc,GAAG,IAAI,CAAClB,cAAc,CAACW,GAAG,CAACL,YAAY,CAAC;MAC5D,IAAMa,OAAO,GAAGD,cAAc,IAAI,IAAA9E,gBAAO,EAAC8E,cAAc,CAACtB,IAAI,CAAC;MAC9D,IAAMA,IAAI,GAAG,IAAI,CAACwB,iBAAiB,CACjCD,OAAO,GAAGD,cAAc,CAACtB,IAAI,GAAG,EAAE,EAClC,IAAI,CAACqB,4BAA4B,CAACV,WAAW,CAC/C,CAAC;MACD;MACA,IAAI,CAACP,cAAc,CAACgB,OAAO,CAACV,YAAY,EAAApC,aAAA,CAAAA,aAAA,KAAOgD,cAAc;QAAEtB,IAAI,EAAJA;MAAI,EAAE,CAAC;MACtE,OAAOA,IAAI;IACb;IAEA;AACF;AACA;AACA;EAHE;IAAAd,GAAA;IAAAlC,KAAA,WAAAyE,qBAI4BP,gBAAgB,EAAE;MAC5C,IAAIQ,SAAS,GAAG,CAAC,CAAC;MAClB,IAAI,IAAA5B,mBAAU,EAACoB,gBAAgB,CAAC,EAAE;QAChCQ,SAAS,GAAG;UACVC,OAAO,EAAET,gBAAgB,CAACxD,IAAI;UAC9BkE,QAAQ,EAAEV;QACZ,CAAC;MACH,CAAC,MAAM,IAAI,IAAApB,mBAAU,EAACoB,gBAAgB,CAACS,OAAO,CAAC,EAAE;QAC/CD,SAAS,GAAG;UACVC,OAAO,EAAET,gBAAgB,CAACS,OAAO,CAACjE,IAAI;UACtCkE,QAAQ,EAAEV,gBAAgB,CAACS;QAC7B,CAAC;MACH;MACA,OAAArD,aAAA,CAAAA,aAAA,KAAY4C,gBAAgB,GAAKQ,SAAS;IAC5C;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAxC,GAAA;IAAAlC,KAAA,WAAAmE,eAKsBU,YAAY,EAAEC,cAAc,EAAE;MAClD,IAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;MAAC,IAAAC,SAAA,GAAA7F,0BAAA,CACV0F,cAAc;QAAAI,KAAA;MAAA;QAA7B,KAAAD,SAAA,CAAApF,CAAA,MAAAqF,KAAA,GAAAD,SAAA,CAAAnF,CAAA,IAAAC,IAAA,GAA+B;UAAA,IAAtBoF,EAAE,GAAAD,KAAA,CAAAlF,KAAA;UACTmF,EAAE,GAAG,IAAI,CAACV,oBAAoB,CAACU,EAAE,CAAC;UAClCJ,MAAM,CAAC1B,GAAG,CAAC8B,EAAE,CAACR,OAAO,EAAEQ,EAAE,CAAC;QAC5B;;QAEA;QACA;MAAA,SAAAC,GAAA;QAAAH,SAAA,CAAArG,CAAA,CAAAwG,GAAA;MAAA;QAAAH,SAAA,CAAAhF,CAAA;MAAA;MAAA,IAAAoF,UAAA,GAAAjG,0BAAA,CACcyF,YAAY;QAAAS,MAAA;MAAA;QAA1B,KAAAD,UAAA,CAAAxF,CAAA,MAAAyF,MAAA,GAAAD,UAAA,CAAAvF,CAAA,IAAAC,IAAA,GAA4B;UAAA,IAAnBwF,CAAC,GAAAD,MAAA,CAAAtF,KAAA;UACR;UACA,IAAMmF,GAAE,GAAGJ,MAAM,CAAChB,GAAG,CAACwB,CAAC,CAACZ,OAAO,CAAC;UAChC,IAAIQ,GAAE,IAAII,CAAC,CAACC,QAAQ,IAAID,CAAC,CAACE,KAAK,EAAE;YAC/B,IAAA5C,aAAM,EACJsC,GAAE,CAACK,QAAQ,kCAAAvC,MAAA,CACqBsC,CAAC,CAACZ,OAAO,6BAC3C,CAAC;YACD,IAAA9B,aAAM,EACJ,IAAAE,iBAAQ,EAACoC,GAAE,CAACK,QAAQ,CAAC,kCAAAvC,MAAA,CACWsC,CAAC,CAACZ,OAAO,sBAC3C,CAAC;YACDY,CAAC,CAACC,QAAQ,GAAAlE,aAAA,CAAAA,aAAA,KAAQ6D,GAAE,CAACK,QAAQ,GAAKD,CAAC,CAACC,QAAQ,CAAE;YAC9CT,MAAM,CAAC1B,GAAG,CAACkC,CAAC,CAACZ,OAAO,EAAArD,aAAA,CAAAA,aAAA,KAAO6D,GAAE,GAAKI,CAAC,CAAE,CAAC;UACxC,CAAC,MAAM;YACL;YACAA,CAAC,GAAG,IAAI,CAACd,oBAAoB,CAACc,CAAC,CAAC;YAChCR,MAAM,CAAC1B,GAAG,CAACkC,CAAC,CAACZ,OAAO,EAAArD,aAAA,CAAAA,aAAA,KAAO6D,GAAE,GAAKI,CAAC,CAAE,CAAC;UACxC;QACF;MAAC,SAAAH,GAAA;QAAAC,UAAA,CAAAzG,CAAA,CAAAwG,GAAA;MAAA;QAAAC,UAAA,CAAApF,CAAA;MAAA;MACD,OAAOV,KAAK,CAACoB,IAAI,CAACoE,MAAM,CAACW,MAAM,CAAC,CAAC,CAAC;IACpC;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAxD,GAAA;IAAAlC,KAAA,WAAAwE,kBAKyBmB,QAAQ,EAAEC,UAAU,EAAE;MAC7C,IAAMb,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;MACxB;MAAA,IAAAa,UAAA,GAAAzG,0BAAA,CACqBwG,UAAU;QAAAE,MAAA;MAAA;QAA/B,KAAAD,UAAA,CAAAhG,CAAA,MAAAiG,MAAA,GAAAD,UAAA,CAAA/F,CAAA,IAAAC,IAAA,GAAiC;UAAA,IAAtBgG,MAAM,GAAAD,MAAA,CAAA9F,KAAA;UACf,IAAI,CAAC,IAAA+C,iBAAQ,EAACgD,MAAM,CAAC,EAAE;YACrBhB,MAAM,CAAC1B,GAAG,CAAC0C,MAAM,EAAE;cAAEC,GAAG,EAAED,MAAM;cAAEE,QAAQ,EAAE;YAAM,CAAC,CAAC;UACtD,CAAC,MAAM;YACLlB,MAAM,CAAC1B,GAAG,CAAC0C,MAAM,CAACC,GAAG,EAAED,MAAM,CAAC;UAChC;QACF;MAAC,SAAAX,GAAA;QAAAS,UAAA,CAAAjH,CAAA,CAAAwG,GAAA;MAAA;QAAAS,UAAA,CAAA5F,CAAA;MAAA;MAAA,IAAAiG,UAAA,GAAA9G,0BAAA,CAEgBuG,QAAQ;QAAAQ,MAAA;MAAA;QAAzB,KAAAD,UAAA,CAAArG,CAAA,MAAAsG,MAAA,GAAAD,UAAA,CAAApG,CAAA,IAAAC,IAAA,GAA2B;UAAA,IAAlBqG,IAAI,GAAAD,MAAA,CAAAnG,KAAA;UACX,IAAI,CAAC,IAAA+C,iBAAQ,EAACqD,IAAI,CAAC,EAAE;YACnBA,IAAI,GAAG;cAAEJ,GAAG,EAAEI,IAAI;cAAEH,QAAQ,EAAE;YAAM,CAAC;UACvC;UACA,IAAIlB,MAAM,CAAClB,GAAG,CAACuC,IAAI,CAACJ,GAAG,CAAC,EAAE;YACxBjB,MAAM,CAAC1B,GAAG,CAAC+C,IAAI,CAACJ,GAAG,EAAE;cACnBA,GAAG,EAAEI,IAAI,CAACJ,GAAG;cACbC,QAAQ,EAAEG,IAAI,CAACH,QAAQ,IAAIlB,MAAM,CAAChB,GAAG,CAACqC,IAAI,CAACJ,GAAG,CAAC,CAACC;YAClD,CAAC,CAAC;UACJ,CAAC,MAAM;YACLlB,MAAM,CAAC1B,GAAG,CAAC+C,IAAI,CAACJ,GAAG,EAAEI,IAAI,CAAC;UAC5B;QACF;MAAC,SAAAhB,GAAA;QAAAc,UAAA,CAAAtH,CAAA,CAAAwG,GAAA;MAAA;QAAAc,UAAA,CAAAjG,CAAA;MAAA;MAED,OAAOV,KAAK,CAACoB,IAAI,CAACoE,MAAM,CAACW,MAAM,CAAC,CAAC,CAAC;IACpC;EAAC;EAAA,OAAAjD,QAAA;AAAA;AAAA4D,OAAA,cAAA5D,QAAA;AA1LkBA,QAAQ,CACpBW,cAAc,GAAG,IAAIkD,2BAAc,CAAC,CAAC;AADzB7D,QAAQ,CAEpBe,gBAAgB,GAAG,IAAI+C,6BAAgB,CAAC,CAAC","ignoreList":[]}