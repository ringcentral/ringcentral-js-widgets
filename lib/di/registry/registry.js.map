{"version":3,"file":"registry.js","names":["_is_type","require","_utils","_module_registry","_interopRequireDefault","_provider_registry","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","toString","slice","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","Registry","registerModule","klass","metadata","assert","isFunction","isObject","deps","concat","JSON","stringify","moduleRegistry","set","registerModuleFactory","providers","providerRegistry","resolveInheritedModuleFactory","currentClass","parentClass","getParentClass","has","resolved","get","moduleProviderMetadata","hasProviders","providerMetadata","mergeProviders","resolve","resolveInheritedDependencies","moduleMetadata","hasDeps","mergeDependencies","_formatClassProvider","formatted","provide","useClass","baseProvider","parentProvider","merged","Map","_iterator","_step","pp","_iterator2","_step2","p","useValue","merge","values","baseDeps","parentDeps","_iterator3","_step3","parent","dep","optional","_iterator4","_step4","base","exports","ModuleRegistry","ProviderRegistry"],"sources":["lib/di/registry/registry.ts"],"sourcesContent":["// @ts-nocheck\nimport { isArray, isFunction, isObject } from '../utils/is_type';\nimport { assert, getParentClass } from '../utils/utils';\nimport ModuleRegistry from './module_registry';\nimport ProviderRegistry from './provider_registry';\n\nexport default class Registry {\n  static moduleRegistry = new ModuleRegistry();\n  static providerRegistry = new ProviderRegistry();\n\n  static registerModule(klass, metadata) {\n    assert(isFunction(klass), 'Expected module to be a Class');\n    if (metadata) {\n      assert(\n        isObject(metadata),\n        'Expected parameter of @Module() to be an Object',\n      );\n      if (metadata.deps) {\n        assert(\n          isArray(metadata.deps),\n          `Expected deps to be an Array: [${klass.name}]\n          ${JSON.stringify(metadata)}`,\n        );\n      }\n    }\n    if (!metadata || Object.keys(metadata).length <= 0) {\n      metadata = null;\n    }\n    this.moduleRegistry.set(klass, metadata);\n  }\n\n  static registerModuleFactory(klass, metadata) {\n    assert(klass && isFunction(klass), 'Expected moduleFactory to be a Class');\n\n    if (metadata) {\n      assert(\n        isObject(metadata),\n        'Expected parameter of @ModuleFactory() to be an Object',\n      );\n      if (metadata.providers && !isArray(metadata.providers)) {\n        assert(\n          isArray(metadata.providers),\n          'Expected providers in @ModuleFactory() to be an Array',\n        );\n      }\n    } else {\n      metadata = null;\n    }\n    // TODO: validate module providers\n    // useValue should be object or number or string, etc.\n    // spread can only be used if useValue is an object.\n    // Not to check it for now, maybe cause performance issue\n    this.providerRegistry.set(klass, metadata);\n  }\n\n  /**\n   * Process the inheritance relationship of ModuleFactory.\n   * Support some inheritance options such as overwrite, merge, etc.\n   * ModuleFactory can only inherit from ModuleFactory.\n   * @param {Class} currentClass\n   */\n  static resolveInheritedModuleFactory(currentClass) {\n    const parentClass = getParentClass(currentClass);\n    if (!this.providerRegistry.has(currentClass)) return [];\n    if (this.providerRegistry.resolved(currentClass)) {\n      return this.providerRegistry.get(currentClass).providers;\n    }\n    const moduleProviderMetadata = this.providerRegistry.get(currentClass);\n    const hasProviders =\n      moduleProviderMetadata && isArray(moduleProviderMetadata.providers);\n    const providerMetadata = this.mergeProviders(\n      hasProviders ? moduleProviderMetadata.providers : [],\n      this.resolveInheritedModuleFactory(parentClass),\n    );\n    this.providerRegistry.resolve(currentClass, {\n      ...moduleProviderMetadata,\n      providers: providerMetadata,\n    });\n    return providerMetadata;\n  }\n\n  /**\n   * Process the inheritance relationship of Module and Library.\n   * Module can inherit from Module and Library.\n   * @param {Class} currentClass\n   * @return {Array} deps - resolved deps\n   */\n  static resolveInheritedDependencies(currentClass) {\n    const parentClass = getParentClass(currentClass);\n    if (!this.moduleRegistry.has(currentClass)) return [];\n    if (this.moduleRegistry.resolved(currentClass)) {\n      return this.moduleRegistry.get(currentClass).deps;\n    }\n    const moduleMetadata = this.moduleRegistry.get(currentClass);\n    const hasDeps = moduleMetadata && isArray(moduleMetadata.deps);\n    const deps = this.mergeDependencies(\n      hasDeps ? moduleMetadata.deps : [],\n      this.resolveInheritedDependencies(parentClass),\n    );\n    // Update parent class metadata\n    this.moduleRegistry.resolve(currentClass, { ...moduleMetadata, deps });\n    return deps;\n  }\n\n  /**\n   * A helper function for formating class provider metadata.\n   * @param {Object|Function} providerMetadata\n   */\n  static _formatClassProvider(providerMetadata) {\n    let formatted = {};\n    if (isFunction(providerMetadata)) {\n      formatted = {\n        provide: providerMetadata.name,\n        useClass: providerMetadata,\n      };\n    } else if (isFunction(providerMetadata.provide)) {\n      formatted = {\n        provide: providerMetadata.provide.name,\n        useClass: providerMetadata.provide,\n      };\n    }\n    return { ...providerMetadata, ...formatted };\n  }\n\n  /**\n   * A helper function for merging child and parent providers.\n   * @param {Object|Function} baseProvider\n   * @param {Object|Function} parentProvider\n   */\n  static mergeProviders(baseProvider, parentProvider) {\n    const merged = new Map();\n    for (let pp of parentProvider) {\n      pp = this._formatClassProvider(pp);\n      merged.set(pp.provide, pp);\n    }\n\n    // Merge child providers into parent providers\n    // Only support object shallow merge\n    for (let p of baseProvider) {\n      // useValue and don't overwrite parent values\n      const pp = merged.get(p.provide);\n      if (pp && p.useValue && p.merge) {\n        assert(\n          pp.useValue,\n          `Expected parent provider of [${p.provide}] to be a value provider`,\n        );\n        assert(\n          isObject(pp.useValue),\n          `Expected parent provider of [${p.provide}] to be an Object`,\n        );\n        p.useValue = { ...pp.useValue, ...p.useValue };\n        merged.set(p.provide, { ...pp, ...p });\n      } else {\n        // useClass, useExisting, useFactory will always overwrite parent provider\n        p = this._formatClassProvider(p);\n        merged.set(p.provide, { ...pp, ...p });\n      }\n    }\n    return Array.from(merged.values());\n  }\n\n  /**\n   * A helper function for merging child and parent module dependencies.\n   * @param {Array} baseDeps\n   * @param {Array} parentDeps\n   */\n  static mergeDependencies(baseDeps, parentDeps) {\n    const merged = new Map();\n    // Deps preprocess\n    for (const parent of parentDeps) {\n      if (!isObject(parent)) {\n        merged.set(parent, { dep: parent, optional: false });\n      } else {\n        merged.set(parent.dep, parent);\n      }\n    }\n\n    for (let base of baseDeps) {\n      if (!isObject(base)) {\n        base = { dep: base, optional: false };\n      }\n      if (merged.has(base.dep)) {\n        merged.set(base.dep, {\n          dep: base.dep,\n          optional: base.optional && merged.get(base.dep).optional,\n        });\n      } else {\n        merged.set(base.dep, base);\n      }\n    }\n\n    return Array.from(merged.values());\n  }\n}\n"],"mappings":"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"}