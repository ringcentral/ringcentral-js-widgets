{"version":3,"sources":["lib/di/registry/module_registry.ts"],"names":["ModuleRegistry","_map","Map","moduleRef","has","name","get","metadata","resolved","set","entries","keys","clear"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAEA;AACA;AACA;IACqBA,c;AACnB,4BAAc;AAAA;;AACZ;AACA,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACD;;;;wBAEGC,S,EAAW;AACb,UAAI,CAAC,KAAKF,IAAL,CAAUG,GAAV,CAAcD,SAAd,CAAL,EAA+B;AAC7B,cAAM,kDAA+BA,SAAS,CAACE,IAAzC,yBAAN;AACD;;AACD,aAAO,KAAKJ,IAAL,CAAUK,GAAV,CAAcH,SAAd,EAAyBI,QAAhC;AACD;;;6BAEQJ,S,EAAW;AAClB,aAAO,KAAKF,IAAL,CAAUK,GAAV,CAAcH,SAAd,EAAyBK,QAAhC;AACD;;;wBAEGL,S,EAAWI,Q,EAAU;AACvB,UAAI,KAAKN,IAAL,CAAUG,GAAV,CAAcD,SAAd,CAAJ,EAA8B;AAC5B,cAAM,wDAAqCA,SAAS,CAACE,IAA/C,YAAN;AACD;;AACD,aAAO,KAAKJ,IAAL,CAAUQ,GAAV,CAAcN,SAAd,EAAyB;AAAEI,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,QAAQ,EAAE;AAAtB,OAAzB,CAAP;AACD;;;4BAEOL,S,EAAWI,Q,EAAU;AAC3B,UAAI,CAAC,KAAKN,IAAL,CAAUG,GAAV,CAAcD,SAAd,CAAL,EAA+B;AAC7B,cAAM,8DAC+BA,SAD/B,4BAAN;AAGD;;AACD,WAAKF,IAAL,CAAUQ,GAAV,CAAcN,SAAd,EAAyB;AACvBI,QAAAA,QAAQ,EAARA,QADuB;AAEvBC,QAAAA,QAAQ,EAAE;AAFa,OAAzB;AAID;;;wBAEGL,S,EAAW;AACb,aAAO,KAAKF,IAAL,CAAUG,GAAV,CAAcD,SAAd,CAAP;AACD;;;8BAES;AACR,aAAO,KAAKF,IAAL,CAAUS,OAAV,EAAP;AACD;;;2BAEM;AACL,aAAO,KAAKT,IAAL,CAAUU,IAAV,EAAP;AACD;;;4BAEO;AACN,WAAKV,IAAL,CAAUW,KAAV;AACD","sourcesContent":["import { DIError } from '../utils/error';\n\n/**\n * Module registry is used to store module metadata.\n */\nexport default class ModuleRegistry {\n  constructor() {\n    // class reference -> metadata\n    this._map = new Map();\n  }\n\n  get(moduleRef) {\n    if (!this._map.has(moduleRef)) {\n      throw DIError(`Cannot find module [${moduleRef.name}] in ModuleRegistry`);\n    }\n    return this._map.get(moduleRef).metadata;\n  }\n\n  resolved(moduleRef) {\n    return this._map.get(moduleRef).resolved;\n  }\n\n  set(moduleRef, metadata) {\n    if (this._map.has(moduleRef)) {\n      throw DIError(`Can only register module [${moduleRef.name}] once`);\n    }\n    return this._map.set(moduleRef, { metadata, resolved: false });\n  }\n\n  resolve(moduleRef, metadata) {\n    if (!this._map.has(moduleRef)) {\n      throw DIError(\n        `Cannot resolve module metadata [${moduleRef}]: module is not found`,\n      );\n    }\n    this._map.set(moduleRef, {\n      metadata,\n      resolved: true,\n    });\n  }\n\n  has(moduleRef) {\n    return this._map.has(moduleRef);\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  reset() {\n    this._map.clear();\n  }\n}\n"],"file":"module_registry.js"}