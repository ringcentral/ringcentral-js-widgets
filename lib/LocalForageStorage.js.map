{"version":3,"sources":["lib/LocalForageStorage.ts"],"names":["LocalForageStorage","storageKey","_storageKey","_storageSyncKey","_ready","_id","_localforage","_tabSyncHandler","Error","uuid","v4","localStorage","window","localforage","config","name","createInstance","event","key","substring","length","JSON","parse","newValue","setter","id","getItem","value","emit","addEventListener","MemoryStorage","syncKey","setItem","stringify","timestamp","Date","now","keys","ready","output","getLocalStorageKeys","promises","map","then","data","Promise","all","originalData","undefined","_updateStorageSyncData","error","console","removeItem","removeEventListener","driver","WEBSQL","INDEXEDDB","LOCALSTORAGE","EventEmitter"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport localforage from 'localforage';\nimport * as uuid from 'uuid';\n\nimport {\n  AsyncStorage,\n  StorageItem,\n} from '../interfaces/GenericStorage.interface';\nimport { MemoryStorage } from './MemoryStorage';\n\nexport class LocalForageStorage extends EventEmitter implements AsyncStorage {\n  private _storageKey: string;\n  private _storageSyncKey: string;\n  private _ready: boolean;\n  private _id: string;\n  private _localforage: LocalForage | MemoryStorage<any>;\n  private _tabSyncHandler: (this: Window, ev: StorageEvent) => any;\n\n  constructor({ storageKey }: { storageKey: string }) {\n    super();\n    if (!storageKey) {\n      throw Error('LocalforageStorage must be created with a storage key');\n    }\n    this._storageKey = storageKey;\n    this._storageSyncKey = `${storageKey}-sync`;\n    this._ready = false;\n    this._id = uuid.v4();\n    if (typeof localStorage !== 'undefined' && typeof window !== 'undefined') {\n      localforage.config({ name: this._storageKey });\n      this._localforage = localforage.createInstance({\n        name: this._storageKey,\n      });\n      this._tabSyncHandler = async (event) => {\n        if (\n          event.key !== null &&\n          typeof event.key !== 'undefined' &&\n          event.key.substring(0, this._storageSyncKey.length) ===\n            this._storageSyncKey\n        ) {\n          try {\n            const { setter } = JSON.parse(event.newValue);\n            if (!setter || setter === this.id) {\n              return;\n            }\n            const key = event.key.substring(this._storageSyncKey.length + 1);\n            const value = await this.getItem(key);\n            this.emit('storage', {\n              key,\n              value,\n            });\n          } catch (e) {\n            /* ignore error */\n          }\n        }\n      };\n      window.addEventListener('storage', this._tabSyncHandler);\n    } else {\n      this._localforage = new MemoryStorage();\n    }\n  }\n\n  _updateStorageSyncData(key: string) {\n    if (typeof localStorage !== 'undefined') {\n      const syncKey = `${this._storageSyncKey}-${key}`;\n      localStorage.setItem(\n        syncKey,\n        JSON.stringify({\n          timestamp: Date.now(),\n          setter: this.id,\n        }),\n      );\n    }\n  }\n\n  async getLocalStorageKeys() {\n    const keys = await this._localforage.keys();\n    return keys;\n  }\n\n  async getData() {\n    await this.ready();\n    const output: Record<string, StorageItem['value']> = {};\n    const keys = await this.getLocalStorageKeys();\n    const promises = keys.map((key) =>\n      this.getItem(key).then((data) => {\n        output[key] = data;\n      }),\n    );\n    await Promise.all(promises);\n    return output;\n  }\n\n  async getItem(key: string) {\n    // TODO: fix MemoryStorage set value with `string`;\n    const originalData: StorageItem = await this._localforage.getItem(key);\n    try {\n      const { value } = originalData;\n      return value;\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  async setItem(key: string, value: StorageItem['value']) {\n    // TODO: fix MemoryStorage get value with `string`;\n    await this._localforage.setItem<StorageItem>(key, {\n      value,\n      setter: this.id,\n    });\n    try {\n      this._updateStorageSyncData(key);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async removeItem(key: string) {\n    await this._localforage.removeItem(key);\n  }\n\n  destroy() {\n    if (this._tabSyncHandler) {\n      window.removeEventListener('storage', this._tabSyncHandler);\n    }\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  async ready(): Promise<void | boolean> {\n    if (this._ready) {\n      return;\n    }\n    if (typeof this._localforage.ready === 'function') {\n      await this._localforage.ready();\n    }\n    this._ready = true;\n  }\n\n  get driver() {\n    if (this._localforage instanceof MemoryStorage) {\n      return 'MEMORYSTORAGE';\n    }\n    switch (this._localforage.driver()) {\n      case localforage.WEBSQL:\n        return 'WEBSQL';\n      case localforage.INDEXEDDB:\n        return 'INDEXEDDB';\n      case localforage.LOCALSTORAGE:\n        return 'LOCALSTORAGE';\n      default:\n        return null;\n    }\n  }\n}\n"],"file":"LocalForageStorage.js"}