{"version":3,"sources":["lib/phoneTypeHelper.ts"],"names":["phoneTypeOrder","Object","freeze","phoneTypes","extension","direct","contact","mobile","business","home","fax","other","phone","unknown","company","phoneTypeOrderMap","reduce","acc","item","idx","filterByPhoneTypes","ObjectMap","hasValue","phoneType","sortByPhoneTypes","a","b","supportedUsageTypePhoneTypeMap","ContactNumber","MobileNumber","DirectNumber","SUPPORTED_USAGE_TYPES","keys","isSupportedPhoneNumber","type","includes","usageType","convertUsageTypeToPhoneType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;AAEA;;AAGO,IAAMA,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,CAC1CC,uBAAWC,SAD+B,EAE1CD,uBAAWE,MAF+B,EAG1CF,uBAAWG,OAH+B,EAI1CH,uBAAWI,MAJ+B,EAK1CJ,uBAAWK,QAL+B,EAM1CL,uBAAWM,IAN+B,EAO1CN,uBAAWO,GAP+B,EAQ1CP,uBAAWQ,KAR+B,EAU1C;AACAR,uBAAWS,KAX+B,EAY1CT,uBAAWU,OAZ+B,EAa1CV,uBAAWW,OAb+B,CAAd,CAAvB;;AAgBA,IAAMC,iBAAiB,GAAGd,MAAM,CAACC,MAAP,CAC/B,qBAAsBc,aAAtB,EACE,UAACC,GAAD,EAAMC,IAAN,EAAYC,GAAZ,EAAoB;AAClBF,EAAAA,GAAG,CAACC,IAAD,CAAH,GAAYC,GAAZ;AACA,SAAOF,GAAP;AACD,CAJH,EAKE,EALF,EAMEjB,cANF,CAD+B,CAA1B;;AAWA,IAAMoB,kBAAkB,GAAG,mBAAyB,UAACF,IAAD;AAAA,SACzDG,qBAAUC,QAAV,CAAmBnB,sBAAnB,EAA+Be,IAAI,CAACK,SAApC,CADyD;AAAA,CAAzB,CAA3B;;AAIA,IAAMC,gBAAgB,GAAG,iBAC9B,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUX,iBAAiB,CAACU,CAAC,CAACF,SAAH,CAAjB,GAAiCR,iBAAiB,CAACW,CAAC,CAACH,SAAH,CAA5D;AAAA,CAD8B,CAAzB;;AAIP,IAAMI,8BAEL,GAAG;AACFC,EAAAA,aAAa,EAAEzB,uBAAWG,OADxB;AAEFuB,EAAAA,YAAY,EAAE1B,uBAAWI,MAFvB;AAGFuB,EAAAA,YAAY,EAAE3B,uBAAWE;AAHvB,CAFJ;AAQA,IAAM0B,qBAAqB,GAAG9B,MAAM,CAAC+B,IAAP,CAAYL,8BAAZ,CAA9B,C,CAEA;;AACO,IAAMM,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACrB,KAAD;AAAA,SACpCA,KAAK,CAACsB,IAAN,IACC,CAACtB,KAAK,CAACsB,IAAP,IAAeH,qBAAqB,CAACI,QAAtB,CAA+BvB,KAAK,CAACwB,SAArC,CAFoB;AAAA,CAA/B;;;;AAIA,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CACzCD,SADyC;AAAA,SAEtCT,8BAA8B,CAACS,SAAD,CAA9B,IAA6CjC,uBAAWE,MAFlB;AAAA,CAApC","sourcesContent":["import { addIndex, filter, reduce, sort } from 'ramda';\n\nimport { PhoneNumberResource } from '@rc-ex/core/definitions';\nimport { ObjectMap } from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport { phoneTypes } from '../enums/phoneTypes';\nimport { PhoneNumberModel } from '../interfaces/PhoneNumber.model';\n\nexport const phoneTypeOrder = Object.freeze([\n  phoneTypes.extension,\n  phoneTypes.direct,\n  phoneTypes.contact,\n  phoneTypes.mobile,\n  phoneTypes.business,\n  phoneTypes.home,\n  phoneTypes.fax,\n  phoneTypes.other,\n\n  // not in particular order\n  phoneTypes.phone,\n  phoneTypes.unknown,\n  phoneTypes.company,\n]);\n\nexport const phoneTypeOrderMap = Object.freeze(\n  addIndex<string, any>(reduce)(\n    (acc, item, idx) => {\n      acc[item] = idx;\n      return acc;\n    },\n    {},\n    phoneTypeOrder,\n  ),\n);\n\nexport const filterByPhoneTypes = filter<PhoneNumberModel>((item) =>\n  ObjectMap.hasValue(phoneTypes, item.phoneType),\n);\n\nexport const sortByPhoneTypes = sort<PhoneNumberModel>(\n  (a, b) => phoneTypeOrderMap[a.phoneType] - phoneTypeOrderMap[b.phoneType],\n);\n\nconst supportedUsageTypePhoneTypeMap: Partial<\n  Record<PhoneNumberResource['usageType'], string>\n> = {\n  ContactNumber: phoneTypes.contact,\n  MobileNumber: phoneTypes.mobile,\n  DirectNumber: phoneTypes.direct,\n};\n\nconst SUPPORTED_USAGE_TYPES = Object.keys(supportedUsageTypePhoneTypeMap);\n\n// Support all direct number + Mobile and Contact Number\nexport const isSupportedPhoneNumber = (phone: PhoneNumberResource) =>\n  phone.type ||\n  (!phone.type && SUPPORTED_USAGE_TYPES.includes(phone.usageType));\n\nexport const convertUsageTypeToPhoneType = (\n  usageType: PhoneNumberResource['usageType'],\n) => supportedUsageTypePhoneTypeMap[usageType] || phoneTypes.direct;\n"],"file":"phoneTypeHelper.js"}