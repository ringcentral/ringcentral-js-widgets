{"version":3,"file":"TransportInteractionBase.interface.js","names":[],"sources":["lib/TransportInteractionBase/TransportInteractionBase.interface.ts"],"sourcesContent":["export interface transportEvents {\n  [P: string]: Function;\n}\n\nexport interface TransportData<T = any> {\n  requestId: string;\n  data: T;\n}\n\nexport interface TransportEvent<T = any> {\n  key: string;\n  /**\n   * Make the data need promise with TransportResponseData type,\n   * to make the method must be return with response\n   */\n  func: (\n    data: TransportData<T>,\n  ) => Promise<TransportResponseData> | TransportResponseData;\n}\n\nexport interface TransportPushEvent<T = any> {\n  key: string;\n  /**\n   * Make the data need promise with TransportResponseData type,\n   * to make the method must be return with response\n   */\n  func: (data: TransportData<T>) => any;\n}\n\nexport interface FetchOption<T = any> {\n  requestId: string;\n  fetchFunc: () => Promise<T> | T;\n}\n\nexport interface TransportRequestData {\n  payload: { requestType: string; data?: any; service?: any };\n}\n\nexport interface TransportResponseData {\n  requestId: string;\n  result?: any;\n  error?: string | Error;\n}\n\n// TODO: import Transport Instance type\nexport interface Transport {\n  request(payload: TransportRequestData): Promise<undefined>;\n  response(responseData: TransportResponseData): TransportResponseData;\n  addListeners: any;\n  send(payload: TransportRequestData): any;\n}\n"],"mappings":"","ignoreList":[]}