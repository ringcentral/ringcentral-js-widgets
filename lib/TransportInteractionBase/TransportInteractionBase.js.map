{"version":3,"file":"TransportInteractionBase.js","names":["TransportInteractionBase","_classCallCheck","_transportEvents","_transport","_createClass","key","value","registerTransportEvent","_ref","func","Error","registerTransportEvents","events","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","err","e","f","_fetchAndResponse2","_asyncToGenerator","regeneratorRuntime","mark","_callee","_ref2","requestId","fetchFunc","emitData","wrap","_callee$","_context","prev","next","result","error","sent","t0","console","log","response","abrupt","stop","_fetchAndResponse","_x","apply","arguments","get","exports"],"sources":["lib/TransportInteractionBase/TransportInteractionBase.ts"],"sourcesContent":["import type {\n  FetchOption,\n  Transport,\n  TransportEvent,\n  transportEvents,\n  TransportResponseData,\n} from './TransportInteractionBase.interface';\n\nexport default class TransportInteractionBase {\n  _transportEvents: transportEvents = {};\n  // @ts-expect-error TS(2564): Property '_transport' has no initializer and is no... Remove this comment to see the full error message\n  _transport: Transport;\n\n  registerTransportEvent({ key, func }: TransportEvent) {\n    if (this._transportEvents[key]) {\n      throw new Error('transport event has already registered');\n    }\n    this._transportEvents[key] = func;\n  }\n\n  registerTransportEvents(events: TransportEvent[]) {\n    for (const { key, func } of events) {\n      this.registerTransportEvent({ key, func });\n    }\n  }\n\n  async _fetchAndResponse({\n    requestId,\n    fetchFunc,\n  }: FetchOption): Promise<TransportResponseData> {\n    if (!fetchFunc || typeof fetchFunc !== 'function') {\n      // throw new Error('Parameter `fetchFunc` is invalid!');\n    }\n\n    const emitData: TransportResponseData = {\n      requestId,\n      result: null,\n      // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | Er... Remove this comment to see the full error message\n      error: null,\n    };\n\n    try {\n      emitData.result = await fetchFunc();\n    } catch (error: any /** TODO: confirm with instanceof */) {\n      console.log(error);\n      emitData.error = error;\n    }\n\n    this._transport.response(emitData);\n\n    return emitData;\n  }\n\n  get transportEvents() {\n    return this._transportEvents;\n  }\n}\n"],"mappings":"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","ignoreList":[]}