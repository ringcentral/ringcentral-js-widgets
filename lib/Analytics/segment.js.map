{"version":3,"sources":["lib/Analytics/segment.ts"],"names":["init","window","analytics","initialize","console","log","invoked","error","methods","factory","method","args","Array","prototype","slice","call","arguments","unshift","push","i","length","key","load","options","script","document","createElement","type","async","src","first","getElementsByTagName","parentNode","insertBefore","_loadOptions","SNIPPET_VERSION"],"mappings":"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","sourcesContent":["export default function init() {\n  if (typeof window === 'undefined') {\n    return [];\n  }\n  // Create a queue, but don't obliterate an existing one!\n  window.analytics = window.analytics || [];\n  const { analytics } = window;\n  // If the real analytics.js is already on the page return.\n  if (analytics.initialize) {\n    if (window.console && console.log) {\n      console.log('Segment initialized!');\n    }\n    return;\n  }\n\n  // If the snippet was invoked already show an error.\n  if (analytics.invoked) {\n    if (window.console && console.error) {\n      console.error('Segment snippet included twice.');\n    }\n    return;\n  }\n\n  // Invoked flag, to make sure the snippet\n  // is never invoked twice.\n  analytics.invoked = true;\n\n  // A list of the methods in Analytics.js to stub.\n  analytics.methods = [\n    'trackSubmit',\n    'trackClick',\n    'trackLink',\n    'trackForm',\n    'pageview',\n    'identify',\n    'reset',\n    'group',\n    'track',\n    'ready',\n    'alias',\n    'debug',\n    'page',\n    'once',\n    'off',\n    'on',\n    'addSourceMiddleware',\n    'addIntegrationMiddleware',\n    'setAnonymousId',\n    'addDestinationMiddleware',\n  ];\n\n  // Define a factory to create stubs. These are placeholders\n  // for methods in Analytics.js so that you never have to wait\n  // for it to load to actually record data. The `method` is\n  // stored as the first argument, so we can replay the data.\n  analytics.factory = function (method) {\n    return function () {\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(method);\n      analytics.push(args);\n      return analytics;\n    };\n  };\n\n  // For each of our methods, generate a queueing stub.\n  for (let i = 0; i < analytics.methods.length; i++) {\n    const key = analytics.methods[i];\n    analytics[key] = analytics.factory(key);\n  }\n\n  // Define a method to load Analytics.js from our CDN,\n  // and that will be sure to only ever load it once.\n  analytics.load = function (key, options) {\n    // Create an async script element based on your key.\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.src = `https://cdn.segment.com/analytics.js/v1/${key}/analytics.min.js`;\n\n    // Insert our script next to the first script element.\n    const first = document.getElementsByTagName('meta')[0];\n    if (first && first.parentNode) {\n      first.parentNode.insertBefore(script, first);\n    }\n\n    analytics._loadOptions = options;\n  };\n\n  // Add a version to keep track of what's in the wild.\n  analytics.SNIPPET_VERSION = '4.1.0';\n\n  return analytics;\n}\n"],"file":"segment.js"}