{"version":3,"file":"index.js","names":["invalidCharsRegExp","plusRegex","extensionDelimiter","attachParsedCountryInfo","result","countryCode","asYouType","AsYouType","parseNumber","phoneNumber","country","phone","parsedCountry","parsedNumber","input","countryCallingCode","getCallingCode","processServiceNumber","tokens","length","isServiceNumber","isValid","processInternational","hasPlus","extension","processLocalNumber","maxExtensionLength","undefined","isExtension","parse","extractControls","extendedControls","cleanInput","cleanNumber","hasInvalidChars","test","startWithPlus","withoutPlus","replace","startWithStar","split"],"sources":["lib/parse/index.ts"],"sourcesContent":["import {\n  parseNumber,\n  CountryCode,\n  AsYouType,\n  ParsedNumber,\n} from 'libphonenumber-js';\nimport cleanNumber from '../cleanNumber';\nimport extractControls from '../extractControls';\nimport { ParseResult, ParseParam, ProcessParam } from './parse.interface';\n\nconst invalidCharsRegExp = /[^\\d*+#\\-(). ]/;\nconst plusRegex = /\\+/g;\nconst extensionDelimiter = /[*#]/g;\n\n/**\n * helper function to attach parsed country and phone number with libphonenumber\n */\nfunction attachParsedCountryInfo(\n  result: ParseResult,\n  countryCode?: CountryCode,\n) {\n  const asYouType = new AsYouType(countryCode);\n  const { country = null, phone = null } = parseNumber(\n    result.phoneNumber!,\n    countryCode,\n  ) as ParsedNumber;\n  result.parsedCountry = country;\n  result.parsedNumber = phone || asYouType.input(result.phoneNumber!);\n  result.countryCallingCode = asYouType.getCallingCode();\n}\n\nfunction processServiceNumber({ result, tokens }: ProcessParam): ParseResult {\n  if (tokens[1] && tokens[1].length) {\n    result.isServiceNumber = true;\n    result.phoneNumber = `*${tokens[1]}`;\n    result.isValid = true;\n  }\n  return result;\n}\n\n/**\n * process the tokens as an E164 formatted number\n */\nfunction processInternational({ result, tokens, countryCode }: ProcessParam) {\n  if (tokens[0] && tokens[0].length) {\n    result.hasPlus = true;\n    result.phoneNumber = `+${tokens[0]}`;\n    // use libphonenumber to parse country code in the number\n    attachParsedCountryInfo(result, countryCode);\n    if (tokens[1] && tokens[1].length) {\n      result.extension = tokens[1];\n    }\n    result.isValid = true;\n  }\n  return result;\n}\n\n/**\n * process the tokens as local numbers including extensions\n */\nfunction processLocalNumber({\n  result,\n  tokens,\n  countryCode,\n  maxExtensionLength,\n}: ProcessParam): ParseResult {\n  if (tokens[0] && tokens[0].length) {\n    // not extension\n    if (\n      maxExtensionLength !== undefined &&\n      tokens[0].length > maxExtensionLength\n    ) {\n      result.phoneNumber = tokens[0];\n      attachParsedCountryInfo(result, countryCode);\n      if (tokens[1] && tokens[1].length) {\n        result.extension = tokens[1];\n      }\n    } else {\n      result.isExtension = true;\n      result.phoneNumber = tokens[0];\n    }\n    result.isValid = true;\n    return result;\n  }\n  return result;\n}\n/**\n * parse the input phone number\n */\nexport default function parse({\n  input,\n  countryCode = 'US',\n  maxExtensionLength = 6,\n}: ParseParam): ParseResult {\n  const { phoneNumber, extendedControls } = extractControls(input);\n  const cleanInput = cleanNumber(phoneNumber);\n  const result: ParseResult = {\n    input,\n    parsedCountry: null,\n    parsedNumber: null,\n    isValid: false,\n    hasInvalidChars: invalidCharsRegExp.test(input),\n    isExtension: false,\n    isServiceNumber: false,\n    hasPlus: false,\n    phoneNumber: null,\n    extension: null,\n    extendedControls,\n  };\n\n  const startWithPlus = cleanInput[0] === '+';\n  const withoutPlus = cleanInput.replace(plusRegex, '');\n  const startWithStar = withoutPlus[0] === '*';\n\n  // cleanInput = '+*xxxx'; // is invalid\n  if (startWithPlus && startWithStar) {\n    return result;\n  }\n  const tokens = withoutPlus.split(extensionDelimiter);\n\n  // cleanInput = '*xxxx'; // service number\n  if (startWithStar) {\n    return processServiceNumber({ result, tokens });\n  }\n\n  // cleanInput = '+xxx'; // should contain country code\n  if (startWithPlus) {\n    return processInternational({ result, tokens, countryCode });\n  }\n\n  // cleanNumber = 'xxxxx'; // is local number\n  return processLocalNumber({\n    result,\n    tokens,\n    countryCode,\n    maxExtensionLength,\n  });\n}\n"],"mappings":"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"}