{"version":3,"file":"multipartHttpRequest.js","names":["_utils","require","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","_typeof","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","sourceKeys","asyncGeneratorStep","gen","resolve","reject","_next","_throw","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","err","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","Array","from","test","len","arr2","_i","iterator","_s","_e","_x","_r","_arr","_n","_d","next","isArray","MULTIPART_MIXED","multipartHttpRequest","platform","checkAllFilesNameNotHaveASCII","files","values","some","file","File","isASCII","getFormData","_ref","fields","formData","FormData","entries","_ref2","_ref3","append","Blob","JSON","stringify","type","_ref4","_ref5","item","concat","sendRequest","_ref7","regeneratorRuntime","mark","_callee","method","url","_ref6","_multipartResult$","query","_ref6$headers","headers","rest","contentType","result","hasNonASCII","uTF8FormData","response","multipartResult","responseData","wrap","_callee$","_context","prev","t0","sent","abrupt","t1","MultiPartUTF8FormData","getData","json","_client","toMultipart","stop","_x2","_x3","_x4","get","options","post","put","patch","_delete"],"sources":["lib/multipartHttpRequest.ts"],"sourcesContent":["import {\n  isASCII,\n  MultiPartUTF8FormData,\n  MultiPartUTF8FormDataOptions,\n} from '@ringcentral-integration/utils';\nimport Platform from '@ringcentral/sdk/lib/platform/Platform';\n\nconst MULTIPART_MIXED = 'multipart/mixed';\n\ntype MultipartHttpRequestOptions = {\n  method?: string;\n  query?: Record<\n    string,\n    string | number | boolean | ReadonlyArray<string | number | boolean>\n  >;\n  headers?: Record<string, string>;\n  userAgent?: string;\n  skipAuthCheck?: boolean;\n  skipDiscoveryCheck?: boolean;\n  handleRateLimit?: boolean | number;\n  retry?: boolean;\n} & MultiPartUTF8FormDataOptions;\n\n/**\n * create a http with multipart/form-data, let you can send multiple easily\n *\n * and handle `ASCII` encoding issue in multipart/form-data with `filename*=`\n */\nexport function multipartHttpRequest(platform: Platform) {\n  function checkAllFilesNameNotHaveASCII(\n    files: Record<string, File | Blob | File[] | Blob[]> | undefined,\n  ) {\n    return Object.values(files || {}).some((value) => {\n      if (Array.isArray(value)) {\n        return value.some(\n          (file) => file instanceof File && !isASCII(file.name),\n        );\n      }\n      return value instanceof File && !isASCII(value.name);\n    });\n  }\n\n  function getFormData({ fields, files }: MultiPartUTF8FormDataOptions) {\n    const formData = new FormData();\n\n    Object.entries(fields || {}).forEach(([key, value]) => {\n      formData.append(\n        key,\n        new Blob([JSON.stringify(value)], {\n          type: 'application/json',\n        }),\n      );\n    });\n\n    Object.entries(files || {}).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        value.forEach((item, i) => {\n          formData.append(\n            key,\n            item,\n            item instanceof File ? item.name : `blob-${i}`,\n          );\n        });\n      } else {\n        formData.append(\n          key,\n          value,\n          value instanceof File ? value.name : `blob`,\n        );\n      }\n    });\n    return formData;\n  }\n\n  const sendRequest = async (\n    method: 'get' | 'post' | 'put' | 'patch' | 'delete',\n    url: string,\n    {\n      fields,\n      files,\n      query,\n      headers = {},\n      ...rest\n    }: MultipartHttpRequestOptions,\n  ) => {\n    const { contentType } = headers;\n\n    let result: Response;\n\n    switch (method) {\n      case 'get':\n      case 'delete':\n        {\n          result = await platform[method](url, query, {\n            ...rest,\n            headers: {\n              ...headers,\n              'Content-Type': contentType || MULTIPART_MIXED,\n            },\n          });\n        }\n        break;\n      default:\n        {\n          const hasNonASCII = checkAllFilesNameNotHaveASCII(files);\n\n          if (hasNonASCII) {\n            const uTF8FormData =\n              (fields || files) &&\n              (await new MultiPartUTF8FormData({ fields, files }).getData(\n                contentType,\n              ));\n\n            result = await platform[method](\n              url,\n              uTF8FormData?.formData,\n              query,\n              {\n                ...rest,\n                headers: {\n                  ...headers,\n                  'Content-Type': uTF8FormData?.contentType || MULTIPART_MIXED,\n                },\n              },\n            );\n          } else {\n            // when not be ASCII, use platform API directly\n            const formData = getFormData({ fields, files });\n            const response = await platform[method](url, formData, query, rest);\n\n            return response.json();\n          }\n        }\n        break;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const multipartResult = await (platform as any)._client.toMultipart(result);\n    const responseData = await multipartResult?.[0]?.json();\n\n    return responseData;\n  };\n\n  return {\n    get: (url: string, options: Omit<MultipartHttpRequestOptions, 'body'>) =>\n      sendRequest('get', url, options),\n    post: (url: string, options: MultipartHttpRequestOptions) =>\n      sendRequest('post', url, options),\n    put: (url: string, options: MultipartHttpRequestOptions) =>\n      sendRequest('put', url, options),\n    patch: (url: string, options: MultipartHttpRequestOptions) =>\n      sendRequest('patch', url, options),\n    delete: (url: string, options: Omit<MultipartHttpRequestOptions, 'body'>) =>\n      sendRequest('delete', url, options),\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAIwC,SAAAC,QAAAC,MAAA,EAAAC,cAAA,QAAAC,IAAA,GAAAC,MAAA,CAAAD,IAAA,CAAAF,MAAA,OAAAG,MAAA,CAAAC,qBAAA,QAAAC,OAAA,GAAAF,MAAA,CAAAC,qBAAA,CAAAJ,MAAA,GAAAC,cAAA,KAAAI,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAAJ,MAAA,CAAAK,wBAAA,CAAAR,MAAA,EAAAO,GAAA,EAAAE,UAAA,OAAAP,IAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,IAAA,EAAAG,OAAA,YAAAH,IAAA;AAAA,SAAAU,cAAAC,MAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA,UAAAG,MAAA,WAAAF,SAAA,CAAAD,CAAA,IAAAC,SAAA,CAAAD,CAAA,QAAAA,CAAA,OAAAf,OAAA,CAAAI,MAAA,CAAAc,MAAA,OAAAC,OAAA,WAAAC,GAAA,IAAAC,eAAA,CAAAP,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA,SAAAhB,MAAA,CAAAkB,yBAAA,GAAAlB,MAAA,CAAAmB,gBAAA,CAAAT,MAAA,EAAAV,MAAA,CAAAkB,yBAAA,CAAAJ,MAAA,KAAAlB,OAAA,CAAAI,MAAA,CAAAc,MAAA,GAAAC,OAAA,WAAAC,GAAA,IAAAhB,MAAA,CAAAoB,cAAA,CAAAV,MAAA,EAAAM,GAAA,EAAAhB,MAAA,CAAAK,wBAAA,CAAAS,MAAA,EAAAE,GAAA,iBAAAN,MAAA;AAAA,SAAAO,gBAAAI,GAAA,EAAAL,GAAA,EAAAM,KAAA,IAAAN,GAAA,GAAAO,cAAA,CAAAP,GAAA,OAAAA,GAAA,IAAAK,GAAA,IAAArB,MAAA,CAAAoB,cAAA,CAAAC,GAAA,EAAAL,GAAA,IAAAM,KAAA,EAAAA,KAAA,EAAAhB,UAAA,QAAAkB,YAAA,QAAAC,QAAA,oBAAAJ,GAAA,CAAAL,GAAA,IAAAM,KAAA,WAAAD,GAAA;AAAA,SAAAE,eAAAG,GAAA,QAAAV,GAAA,GAAAW,YAAA,CAAAD,GAAA,oBAAAE,OAAA,CAAAZ,GAAA,iBAAAA,GAAA,GAAAa,MAAA,CAAAb,GAAA;AAAA,SAAAW,aAAAG,KAAA,EAAAC,IAAA,QAAAH,OAAA,CAAAE,KAAA,kBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAAG,MAAA,CAAAC,WAAA,OAAAF,IAAA,KAAAG,SAAA,QAAAC,GAAA,GAAAJ,IAAA,CAAAK,IAAA,CAAAP,KAAA,EAAAC,IAAA,oBAAAH,OAAA,CAAAQ,GAAA,uBAAAA,GAAA,YAAAE,SAAA,4DAAAP,IAAA,gBAAAF,MAAA,GAAAU,MAAA,EAAAT,KAAA;AAAA,SAAAU,yBAAA1B,MAAA,EAAA2B,QAAA,QAAA3B,MAAA,yBAAAJ,MAAA,GAAAgC,6BAAA,CAAA5B,MAAA,EAAA2B,QAAA,OAAAzB,GAAA,EAAAL,CAAA,MAAAX,MAAA,CAAAC,qBAAA,QAAA0C,gBAAA,GAAA3C,MAAA,CAAAC,qBAAA,CAAAa,MAAA,QAAAH,CAAA,MAAAA,CAAA,GAAAgC,gBAAA,CAAA9B,MAAA,EAAAF,CAAA,MAAAK,GAAA,GAAA2B,gBAAA,CAAAhC,CAAA,OAAA8B,QAAA,CAAAG,OAAA,CAAA5B,GAAA,uBAAAhB,MAAA,CAAA6C,SAAA,CAAAC,oBAAA,CAAAT,IAAA,CAAAvB,MAAA,EAAAE,GAAA,aAAAN,MAAA,CAAAM,GAAA,IAAAF,MAAA,CAAAE,GAAA,cAAAN,MAAA;AAAA,SAAAgC,8BAAA5B,MAAA,EAAA2B,QAAA,QAAA3B,MAAA,yBAAAJ,MAAA,WAAAqC,UAAA,GAAA/C,MAAA,CAAAD,IAAA,CAAAe,MAAA,OAAAE,GAAA,EAAAL,CAAA,OAAAA,CAAA,MAAAA,CAAA,GAAAoC,UAAA,CAAAlC,MAAA,EAAAF,CAAA,MAAAK,GAAA,GAAA+B,UAAA,CAAApC,CAAA,OAAA8B,QAAA,CAAAG,OAAA,CAAA5B,GAAA,kBAAAN,MAAA,CAAAM,GAAA,IAAAF,MAAA,CAAAE,GAAA,YAAAN,MAAA;AAAA,SAAAsC,mBAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,EAAArC,GAAA,EAAAU,GAAA,cAAA4B,IAAA,GAAAL,GAAA,CAAAjC,GAAA,EAAAU,GAAA,OAAAJ,KAAA,GAAAgC,IAAA,CAAAhC,KAAA,WAAAiC,KAAA,IAAAJ,MAAA,CAAAI,KAAA,iBAAAD,IAAA,CAAAE,IAAA,IAAAN,OAAA,CAAA5B,KAAA,YAAAmC,OAAA,CAAAP,OAAA,CAAA5B,KAAA,EAAAoC,IAAA,CAAAN,KAAA,EAAAC,MAAA;AAAA,SAAAM,kBAAAC,EAAA,6BAAAC,IAAA,SAAAC,IAAA,GAAAlD,SAAA,aAAA6C,OAAA,WAAAP,OAAA,EAAAC,MAAA,QAAAF,GAAA,GAAAW,EAAA,CAAApD,KAAA,CAAAqD,IAAA,EAAAC,IAAA,YAAAV,MAAA9B,KAAA,IAAA0B,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,UAAA/B,KAAA,cAAA+B,OAAAU,GAAA,IAAAf,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,WAAAU,GAAA,KAAAX,KAAA,CAAAjB,SAAA;AAAA,SAAA6B,eAAAC,GAAA,EAAAtD,CAAA,WAAAuD,eAAA,CAAAD,GAAA,KAAAE,qBAAA,CAAAF,GAAA,EAAAtD,CAAA,KAAAyD,2BAAA,CAAAH,GAAA,EAAAtD,CAAA,KAAA0D,gBAAA;AAAA,SAAAA,iBAAA,cAAA/B,SAAA;AAAA,SAAA8B,4BAAAE,CAAA,EAAAC,MAAA,SAAAD,CAAA,qBAAAA,CAAA,sBAAAE,iBAAA,CAAAF,CAAA,EAAAC,MAAA,OAAAE,CAAA,GAAAzE,MAAA,CAAA6C,SAAA,CAAA6B,QAAA,CAAArC,IAAA,CAAAiC,CAAA,EAAAK,KAAA,aAAAF,CAAA,iBAAAH,CAAA,CAAAM,WAAA,EAAAH,CAAA,GAAAH,CAAA,CAAAM,WAAA,CAAAC,IAAA,MAAAJ,CAAA,cAAAA,CAAA,mBAAAK,KAAA,CAAAC,IAAA,CAAAT,CAAA,OAAAG,CAAA,+DAAAO,IAAA,CAAAP,CAAA,UAAAD,iBAAA,CAAAF,CAAA,EAAAC,MAAA;AAAA,SAAAC,kBAAAP,GAAA,EAAAgB,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAhB,GAAA,CAAApD,MAAA,EAAAoE,GAAA,GAAAhB,GAAA,CAAApD,MAAA,WAAAF,CAAA,MAAAuE,IAAA,OAAAJ,KAAA,CAAAG,GAAA,GAAAtE,CAAA,GAAAsE,GAAA,EAAAtE,CAAA,MAAAuE,IAAA,CAAAvE,CAAA,IAAAsD,GAAA,CAAAtD,CAAA,YAAAuE,IAAA;AAAA,SAAAf,sBAAAF,GAAA,EAAAtD,CAAA,QAAAwE,EAAA,WAAAlB,GAAA,gCAAAhC,MAAA,IAAAgC,GAAA,CAAAhC,MAAA,CAAAmD,QAAA,KAAAnB,GAAA,4BAAAkB,EAAA,QAAAE,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,IAAA,OAAAC,EAAA,OAAAC,EAAA,iBAAAJ,EAAA,IAAAJ,EAAA,GAAAA,EAAA,CAAA9C,IAAA,CAAA4B,GAAA,GAAA2B,IAAA,QAAAjF,CAAA,QAAAX,MAAA,CAAAmF,EAAA,MAAAA,EAAA,UAAAO,EAAA,uBAAAA,EAAA,IAAAL,EAAA,GAAAE,EAAA,CAAAlD,IAAA,CAAA8C,EAAA,GAAA3B,IAAA,MAAAiC,IAAA,CAAAlF,IAAA,CAAA8E,EAAA,CAAA/D,KAAA,GAAAmE,IAAA,CAAA5E,MAAA,KAAAF,CAAA,GAAA+E,EAAA,sBAAA3B,GAAA,IAAA4B,EAAA,OAAAL,EAAA,GAAAvB,GAAA,yBAAA2B,EAAA,YAAAP,EAAA,eAAAK,EAAA,GAAAL,EAAA,cAAAnF,MAAA,CAAAwF,EAAA,MAAAA,EAAA,2BAAAG,EAAA,QAAAL,EAAA,aAAAG,IAAA;AAAA,SAAAvB,gBAAAD,GAAA,QAAAa,KAAA,CAAAe,OAAA,CAAA5B,GAAA,UAAAA,GAAA;AAGxC,IAAM6B,eAAe,GAAG,iBAAiB;AAgBzC;AACA;AACA;AACA;AACA;AACO,SAASC,oBAAoBA,CAACC,QAAkB,EAAE;EACvD,SAASC,6BAA6BA,CACpCC,KAAgE,EAChE;IACA,OAAOlG,MAAM,CAACmG,MAAM,CAACD,KAAK,IAAI,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,UAAC9E,KAAK,EAAK;MAChD,IAAIwD,KAAK,CAACe,OAAO,CAACvE,KAAK,CAAC,EAAE;QACxB,OAAOA,KAAK,CAAC8E,IAAI,CACf,UAACC,IAAI;UAAA,OAAKA,IAAI,YAAYC,IAAI,IAAI,CAAC,IAAAC,cAAO,EAACF,IAAI,CAACxB,IAAI,CAAC;QAAA,CACvD,CAAC;MACH;MACA,OAAOvD,KAAK,YAAYgF,IAAI,IAAI,CAAC,IAAAC,cAAO,EAACjF,KAAK,CAACuD,IAAI,CAAC;IACtD,CAAC,CAAC;EACJ;EAEA,SAAS2B,WAAWA,CAAAC,IAAA,EAAkD;IAAA,IAA/CC,MAAM,GAAAD,IAAA,CAANC,MAAM;MAAER,KAAK,GAAAO,IAAA,CAALP,KAAK;IAClC,IAAMS,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAE/B5G,MAAM,CAAC6G,OAAO,CAACH,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC3F,OAAO,CAAC,UAAA+F,KAAA,EAAkB;MAAA,IAAAC,KAAA,GAAA/C,cAAA,CAAA8C,KAAA;QAAhB9F,GAAG,GAAA+F,KAAA;QAAEzF,KAAK,GAAAyF,KAAA;MAC/CJ,QAAQ,CAACK,MAAM,CACbhG,GAAG,EACH,IAAIiG,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAAC7F,KAAK,CAAC,CAAC,EAAE;QAChC8F,IAAI,EAAE;MACR,CAAC,CACH,CAAC;IACH,CAAC,CAAC;IAEFpH,MAAM,CAAC6G,OAAO,CAACX,KAAK,IAAI,CAAC,CAAC,CAAC,CAACnF,OAAO,CAAC,UAAAsG,KAAA,EAAkB;MAAA,IAAAC,KAAA,GAAAtD,cAAA,CAAAqD,KAAA;QAAhBrG,GAAG,GAAAsG,KAAA;QAAEhG,KAAK,GAAAgG,KAAA;MAC9C,IAAIxC,KAAK,CAACe,OAAO,CAACvE,KAAK,CAAC,EAAE;QACxBA,KAAK,CAACP,OAAO,CAAC,UAACwG,IAAI,EAAE5G,CAAC,EAAK;UACzBgG,QAAQ,CAACK,MAAM,CACbhG,GAAG,EACHuG,IAAI,EACJA,IAAI,YAAYjB,IAAI,GAAGiB,IAAI,CAAC1C,IAAI,WAAA2C,MAAA,CAAW7G,CAAC,CAC9C,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,MAAM;QACLgG,QAAQ,CAACK,MAAM,CACbhG,GAAG,EACHM,KAAK,EACLA,KAAK,YAAYgF,IAAI,GAAGhF,KAAK,CAACuD,IAAI,SACpC,CAAC;MACH;IACF,CAAC,CAAC;IACF,OAAO8B,QAAQ;EACjB;EAEA,IAAMc,WAAW;IAAA,IAAAC,KAAA,GAAA/D,iBAAA,eAAAgE,kBAAA,CAAAC,IAAA,CAAG,SAAAC,QAClBC,MAAmD,EACnDC,GAAW,EAAAC,KAAA;MAAA,IAAAC,iBAAA;MAAA,IAAAvB,MAAA,EAAAR,KAAA,EAAAgC,KAAA,EAAAC,aAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,WAAA,EAAAC,MAAA,EAAAC,WAAA,EAAAC,YAAA,EAAA9B,QAAA,EAAA+B,QAAA,EAAAC,eAAA,EAAAC,YAAA;MAAA,OAAAjB,kBAAA,CAAAkB,IAAA,UAAAC,SAAAC,QAAA;QAAA;UAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAnD,IAAA;YAAA;cAETc,MAAM,GAAAsB,KAAA,CAANtB,MAAM,EACNR,KAAK,GAAA8B,KAAA,CAAL9B,KAAK,EACLgC,KAAK,GAAAF,KAAA,CAALE,KAAK,EAAAC,aAAA,GAAAH,KAAA,CACLI,OAAO,EAAPA,OAAO,GAAAD,aAAA,cAAG,CAAC,CAAC,GAAAA,aAAA,EACTE,IAAI,GAAA7F,wBAAA,CAAAwF,KAAA;cAGDM,WAAW,GAAKF,OAAO,CAAvBE,WAAW;cAAAS,QAAA,CAAAE,EAAA,GAIXnB,MAAM;cAAAiB,QAAA,CAAAnD,IAAA,GAAAmD,QAAA,CAAAE,EAAA,KACP,KAAK,OAAAF,QAAA,CAAAE,EAAA,KACL,QAAQ;cAAA;YAAA;cAAAF,QAAA,CAAAnD,IAAA;cAAA,OAEMI,QAAQ,CAAC8B,MAAM,CAAC,CAACC,GAAG,EAAEG,KAAK,EAAAzH,aAAA,CAAAA,aAAA,KACrC4H,IAAI;gBACPD,OAAO,EAAA3H,aAAA,CAAAA,aAAA,KACF2H,OAAO;kBACV,cAAc,EAAEE,WAAW,IAAIxC;gBAAe;cAC/C,EACF,CAAC;YAAA;cANFyC,MAAM,GAAAQ,QAAA,CAAAG,IAAA;cAAA,OAAAH,QAAA,CAAAI,MAAA;YAAA;cAWAX,WAAW,GAAGvC,6BAA6B,CAACC,KAAK,CAAC;cAAA,KAEpDsC,WAAW;gBAAAO,QAAA,CAAAnD,IAAA;gBAAA;cAAA;cAAAmD,QAAA,CAAAK,EAAA,GAEV1C,MAAM,IAAIR,KAAK;cAAA,KAAA6C,QAAA,CAAAK,EAAA;gBAAAL,QAAA,CAAAnD,IAAA;gBAAA;cAAA;cAAAmD,QAAA,CAAAnD,IAAA;cAAA,OACT,IAAIyD,4BAAqB,CAAC;gBAAE3C,MAAM,EAANA,MAAM;gBAAER,KAAK,EAALA;cAAM,CAAC,CAAC,CAACoD,OAAO,CACzDhB,WACF,CAAC;YAAA;cAAAS,QAAA,CAAAK,EAAA,GAAAL,QAAA,CAAAG,IAAA;YAAA;cAJGT,YAAY,GAAAM,QAAA,CAAAK,EAAA;cAAAL,QAAA,CAAAnD,IAAA;cAAA,OAMHI,QAAQ,CAAC8B,MAAM,CAAC,CAC7BC,GAAG,EACHU,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE9B,QAAQ,EACtBuB,KAAK,EAAAzH,aAAA,CAAAA,aAAA,KAEA4H,IAAI;gBACPD,OAAO,EAAA3H,aAAA,CAAAA,aAAA,KACF2H,OAAO;kBACV,cAAc,EAAE,CAAAK,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEH,WAAW,KAAIxC;gBAAe;cAC7D,EAEL,CAAC;YAAA;cAXDyC,MAAM,GAAAQ,QAAA,CAAAG,IAAA;cAAAH,QAAA,CAAAnD,IAAA;cAAA;YAAA;cAaN;cACMe,QAAQ,GAAGH,WAAW,CAAC;gBAAEE,MAAM,EAANA,MAAM;gBAAER,KAAK,EAALA;cAAM,CAAC,CAAC;cAAA6C,QAAA,CAAAnD,IAAA;cAAA,OACxBI,QAAQ,CAAC8B,MAAM,CAAC,CAACC,GAAG,EAAEpB,QAAQ,EAAEuB,KAAK,EAAEG,IAAI,CAAC;YAAA;cAA7DK,QAAQ,GAAAK,QAAA,CAAAG,IAAA;cAAA,OAAAH,QAAA,CAAAI,MAAA,WAEPT,QAAQ,CAACa,IAAI,CAAC,CAAC;YAAA;cAAA,OAAAR,QAAA,CAAAI,MAAA;YAAA;cAAAJ,QAAA,CAAAnD,IAAA;cAAA,OAOCI,QAAQ,CAASwD,OAAO,CAACC,WAAW,CAAClB,MAAM,CAAC;YAAA;cAArEI,eAAe,GAAAI,QAAA,CAAAG,IAAA;cAAAH,QAAA,CAAAnD,IAAA;cAAA,OACM+C,eAAe,aAAfA,eAAe,wBAAAV,iBAAA,GAAfU,eAAe,CAAG,CAAC,CAAC,cAAAV,iBAAA,uBAApBA,iBAAA,CAAsBsB,IAAI,CAAC,CAAC;YAAA;cAAjDX,YAAY,GAAAG,QAAA,CAAAG,IAAA;cAAA,OAAAH,QAAA,CAAAI,MAAA,WAEXP,YAAY;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAW,IAAA;UAAA;QAAA;MAAA,GAAA7B,OAAA;IAAA,CACpB;IAAA,gBAnEKJ,WAAWA,CAAAkC,GAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAAnC,KAAA,CAAAlH,KAAA,OAAAI,SAAA;IAAA;EAAA,GAmEhB;EAED,OAAO;IACLkJ,GAAG,EAAE,SAAAA,IAAC/B,GAAW,EAAEgC,OAAkD;MAAA,OACnEtC,WAAW,CAAC,KAAK,EAAEM,GAAG,EAAEgC,OAAO,CAAC;IAAA;IAClCC,IAAI,EAAE,SAAAA,KAACjC,GAAW,EAAEgC,OAAoC;MAAA,OACtDtC,WAAW,CAAC,MAAM,EAAEM,GAAG,EAAEgC,OAAO,CAAC;IAAA;IACnCE,GAAG,EAAE,SAAAA,IAAClC,GAAW,EAAEgC,OAAoC;MAAA,OACrDtC,WAAW,CAAC,KAAK,EAAEM,GAAG,EAAEgC,OAAO,CAAC;IAAA;IAClCG,KAAK,EAAE,SAAAA,MAACnC,GAAW,EAAEgC,OAAoC;MAAA,OACvDtC,WAAW,CAAC,OAAO,EAAEM,GAAG,EAAEgC,OAAO,CAAC;IAAA;IACpC,UAAQ,SAAAI,QAACpC,GAAW,EAAEgC,OAAkD;MAAA,OACtEtC,WAAW,CAAC,QAAQ,EAAEM,GAAG,EAAEgC,OAAO,CAAC;IAAA;EACvC,CAAC;AACH"}