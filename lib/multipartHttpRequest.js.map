{"version":3,"file":"multipartHttpRequest.js","names":["_utils","require","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","_typeof","Symbol","toPrimitive","call","TypeError","String","Number","_objectWithoutProperties","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","hasOwnProperty","asyncGeneratorStep","a","c","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_arrayLikeToArray","toString","slice","constructor","name","Array","from","test","l","iterator","f","next","isArray","MULTIPART_MIXED","multipartHttpRequest","platform","checkAllFilesNameNotHaveASCII","files","values","some","file","File","isASCII","getFormData","_ref","fields","formData","FormData","entries","_ref2","_ref3","key","append","Blob","JSON","stringify","type","_ref4","_ref5","item","concat","sendRequest","_ref7","regeneratorRuntime","mark","_callee","method","url","_ref6","_multipartResult$","query","_ref6$headers","headers","rest","contentType","result","hasNonASCII","uTF8FormData","response","multipartResult","responseData","wrap","_callee$","_context","prev","t0","sent","abrupt","t1","MultiPartUTF8FormData","getData","json","_client","toMultipart","stop","_x","_x2","_x3","get","options","post","put","patch","_delete"],"sources":["lib/multipartHttpRequest.ts"],"sourcesContent":["import {\n  isASCII,\n  MultiPartUTF8FormData,\n  MultiPartUTF8FormDataOptions,\n} from '@ringcentral-integration/utils';\nimport Platform from '@ringcentral/sdk/lib/platform/Platform';\n\nconst MULTIPART_MIXED = 'multipart/mixed';\n\ntype MultipartHttpRequestOptions = {\n  method?: string;\n  query?: Record<\n    string,\n    string | number | boolean | ReadonlyArray<string | number | boolean>\n  >;\n  headers?: Record<string, string>;\n  userAgent?: string;\n  skipAuthCheck?: boolean;\n  skipDiscoveryCheck?: boolean;\n  handleRateLimit?: boolean | number;\n  retry?: boolean;\n} & MultiPartUTF8FormDataOptions;\n\n/**\n * create a http with multipart/form-data, let you can send multiple easily\n *\n * and handle `ASCII` encoding issue in multipart/form-data with `filename*=`\n */\nexport function multipartHttpRequest(platform: Platform) {\n  function checkAllFilesNameNotHaveASCII(\n    files: Record<string, File | Blob | File[] | Blob[]> | undefined,\n  ) {\n    return Object.values(files || {}).some((value) => {\n      if (Array.isArray(value)) {\n        return value.some(\n          (file) => file instanceof File && !isASCII(file.name),\n        );\n      }\n      return value instanceof File && !isASCII(value.name);\n    });\n  }\n\n  function getFormData({ fields, files }: MultiPartUTF8FormDataOptions) {\n    const formData = new FormData();\n\n    Object.entries(fields || {}).forEach(([key, value]) => {\n      formData.append(\n        key,\n        new Blob([JSON.stringify(value)], {\n          type: 'application/json',\n        }),\n      );\n    });\n\n    Object.entries(files || {}).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        value.forEach((item, i) => {\n          formData.append(\n            key,\n            item,\n            item instanceof File ? item.name : `blob-${i}`,\n          );\n        });\n      } else {\n        formData.append(\n          key,\n          value,\n          value instanceof File ? value.name : `blob`,\n        );\n      }\n    });\n    return formData;\n  }\n\n  const sendRequest = async (\n    method: 'get' | 'post' | 'put' | 'patch' | 'delete',\n    url: string,\n    {\n      fields,\n      files,\n      query,\n      headers = {},\n      ...rest\n    }: MultipartHttpRequestOptions,\n  ) => {\n    const { contentType } = headers;\n\n    let result: Response;\n\n    switch (method) {\n      case 'get':\n      case 'delete':\n        {\n          result = await platform[method](url, query, {\n            ...rest,\n            headers: {\n              ...headers,\n              'Content-Type': contentType || MULTIPART_MIXED,\n            },\n          });\n        }\n        break;\n      default:\n        {\n          const hasNonASCII = checkAllFilesNameNotHaveASCII(files);\n\n          if (hasNonASCII) {\n            const uTF8FormData =\n              (fields || files) &&\n              (await new MultiPartUTF8FormData({ fields, files }).getData(\n                contentType,\n              ));\n\n            result = await platform[method](\n              url,\n              uTF8FormData?.formData,\n              query,\n              {\n                ...rest,\n                headers: {\n                  ...headers,\n                  'Content-Type': uTF8FormData?.contentType || MULTIPART_MIXED,\n                },\n              },\n            );\n          } else {\n            // when not be ASCII, use platform API directly\n            const formData = getFormData({ fields, files });\n            const response = await platform[method](url, formData, query, rest);\n\n            return response.json();\n          }\n        }\n        break;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const multipartResult = await (platform as any)._client.toMultipart(result);\n    const responseData = await multipartResult?.[0]?.json();\n\n    return responseData;\n  };\n\n  return {\n    get: (url: string, options: Omit<MultipartHttpRequestOptions, 'body'>) =>\n      sendRequest('get', url, options),\n    post: (url: string, options: MultipartHttpRequestOptions) =>\n      sendRequest('post', url, options),\n    put: (url: string, options: MultipartHttpRequestOptions) =>\n      sendRequest('put', url, options),\n    patch: (url: string, options: MultipartHttpRequestOptions) =>\n      sendRequest('patch', url, options),\n    delete: (url: string, options: Omit<MultipartHttpRequestOptions, 'body'>) =>\n      sendRequest('delete', url, options),\n  };\n}\n"],"mappings":"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","ignoreList":[]}