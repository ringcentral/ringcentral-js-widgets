{"version":3,"file":"index.js","names":["_libphonenumberJs","require","_ramda","_parse2","_interopRequireDefault","e","__esModule","find7DigitNumbers","input","countryCode","output","regex","match","exec","_parse","parse","isValid","phoneNumber","hasPlus","length","push","country","startsAt","index","endsAt","byStartsAt","a","b","detect","_ref","_ref$countryCode","_ref$areaCode","areaCode","map","item","number","nationalNumber","ext","findNumbers","v2","sevenDigits","ref","slice","forEach","find","entry","sort"],"sources":["lib/detect/index.js"],"sourcesContent":["import { findNumbers } from 'libphonenumber-js';\nimport { forEach, find, map } from 'ramda';\nimport parse from '../parse';\n\nfunction find7DigitNumbers(input, countryCode) {\n  const output = [];\n  const regex = /(?:^|[^\\d\\w#/])((?:\\d[-\\s]{0,1}){7,12}(?=[^\\d]|$))/g;\n\n  let match;\n  do {\n    match = regex.exec(input);\n    if (match) {\n      const { isValid, phoneNumber, hasPlus } = parse({\n        input: match[0],\n        countryCode,\n      });\n      if (isValid && !hasPlus && phoneNumber.length === 7) {\n        output.push({\n          country: countryCode,\n          phoneNumber,\n          startsAt: match.index,\n          endsAt: match.index + match[0].length,\n        });\n      }\n    }\n  } while (match);\n  return output;\n}\n\nfunction byStartsAt(a, b) {\n  return a.startsAt - b.startsAt;\n}\n\nexport default function detect({ input, countryCode = 'US', areaCode = '' }) {\n  const output = map(\n    (item) => ({\n      phoneNumber: item.number.number,\n      country: item.number.country,\n      nationalNumber: item.number.nationalNumber,\n      ext: item.number.ext,\n      startsAt: item.startsAt,\n      endsAt: item.endsAt,\n    }),\n    findNumbers(input, countryCode, {\n      v2: true,\n    }),\n  );\n  if (countryCode === 'CA' && areaCode.length === 3) {\n    const sevenDigits = find7DigitNumbers(input, countryCode);\n    if (sevenDigits.length) {\n      // keep a reference of the original output to search in\n      const ref = output.slice();\n      forEach((item) => {\n        if (\n          !find(\n            (entry) =>\n              entry.startsAt <= item.startsAt && entry.endsAt >= item.startsAt,\n            ref,\n          )\n        ) {\n          output.push(item);\n        }\n      }, sevenDigits);\n    }\n  }\n  return output.sort(byStartsAt);\n}\n"],"mappings":"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","ignoreList":[]}