{"version":3,"file":"index.js","names":["find7DigitNumbers","input","countryCode","output","regex","match","exec","parse","isValid","phoneNumber","hasPlus","length","push","country","startsAt","index","endsAt","byStartsAt","a","b","detect","areaCode","map","item","number","nationalNumber","ext","findNumbers","v2","sevenDigits","ref","slice","forEach","find","entry","sort"],"sources":["lib/detect/index.js"],"sourcesContent":["import { findNumbers } from 'libphonenumber-js';\nimport { forEach, find, map } from 'ramda';\nimport parse from '../parse';\n\nfunction find7DigitNumbers(input, countryCode) {\n  const output = [];\n  const regex = /(?:^|[^\\d\\w#/])((?:\\d[-\\s]{0,1}){7,12}(?=[^\\d]|$))/g;\n\n  let match;\n  do {\n    match = regex.exec(input);\n    if (match) {\n      const { isValid, phoneNumber, hasPlus } = parse({\n        input: match[0],\n        countryCode,\n      });\n      if (isValid && !hasPlus && phoneNumber.length === 7) {\n        output.push({\n          country: countryCode,\n          phoneNumber,\n          startsAt: match.index,\n          endsAt: match.index + match[0].length,\n        });\n      }\n    }\n  } while (match);\n  return output;\n}\n\nfunction byStartsAt(a, b) {\n  return a.startsAt - b.startsAt;\n}\n\nexport default function detect({ input, countryCode = 'US', areaCode = '' }) {\n  const output = map(\n    (item) => ({\n      phoneNumber: item.number.number,\n      country: item.number.country,\n      nationalNumber: item.number.nationalNumber,\n      ext: item.number.ext,\n      startsAt: item.startsAt,\n      endsAt: item.endsAt,\n    }),\n    findNumbers(input, countryCode, {\n      v2: true,\n    }),\n  );\n  if (countryCode === 'CA' && areaCode.length === 3) {\n    const sevenDigits = find7DigitNumbers(input, countryCode);\n    if (sevenDigits.length) {\n      // keep a reference of the original output to search in\n      const ref = output.slice();\n      forEach((item) => {\n        if (\n          !find(\n            (entry) =>\n              entry.startsAt <= item.startsAt && entry.endsAt >= item.startsAt,\n            ref,\n          )\n        ) {\n          output.push(item);\n        }\n      }, sevenDigits);\n    }\n  }\n  return output.sort(byStartsAt);\n}\n"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,SAASA,iBAAT,CAA2BC,KAA3B,EAAkCC,WAAlC,EAA+C;EAC7C,IAAMC,MAAM,GAAG,EAAf;EACA,IAAMC,KAAK,GAAG,qDAAd;EAEA,IAAIC,KAAJ;;EACA,GAAG;IACDA,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWL,KAAX,CAAR;;IACA,IAAII,KAAJ,EAAW;MAAA,aACiC,IAAAE,kBAAA,EAAM;QAC9CN,KAAK,EAAEI,KAAK,CAAC,CAAD,CADkC;QAE9CH,WAAW,EAAXA;MAF8C,CAAN,CADjC;MAAA,IACDM,OADC,UACDA,OADC;MAAA,IACQC,WADR,UACQA,WADR;MAAA,IACqBC,OADrB,UACqBA,OADrB;;MAKT,IAAIF,OAAO,IAAI,CAACE,OAAZ,IAAuBD,WAAW,CAACE,MAAZ,KAAuB,CAAlD,EAAqD;QACnDR,MAAM,CAACS,IAAP,CAAY;UACVC,OAAO,EAAEX,WADC;UAEVO,WAAW,EAAXA,WAFU;UAGVK,QAAQ,EAAET,KAAK,CAACU,KAHN;UAIVC,MAAM,EAAEX,KAAK,CAACU,KAAN,GAAcV,KAAK,CAAC,CAAD,CAAL,CAASM;QAJrB,CAAZ;MAMD;IACF;EACF,CAhBD,QAgBSN,KAhBT;;EAiBA,OAAOF,MAAP;AACD;;AAED,SAASc,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;EACxB,OAAOD,CAAC,CAACJ,QAAF,GAAaK,CAAC,CAACL,QAAtB;AACD;;AAEc,SAASM,MAAT,OAA8D;EAAA,IAA5CnB,KAA4C,QAA5CA,KAA4C;EAAA,4BAArCC,WAAqC;EAAA,IAArCA,WAAqC,iCAAvB,IAAuB;EAAA,yBAAjBmB,QAAiB;EAAA,IAAjBA,QAAiB,8BAAN,EAAM;EAC3E,IAAMlB,MAAM,GAAG,IAAAmB,UAAA,EACb,UAACC,IAAD;IAAA,OAAW;MACTd,WAAW,EAAEc,IAAI,CAACC,MAAL,CAAYA,MADhB;MAETX,OAAO,EAAEU,IAAI,CAACC,MAAL,CAAYX,OAFZ;MAGTY,cAAc,EAAEF,IAAI,CAACC,MAAL,CAAYC,cAHnB;MAITC,GAAG,EAAEH,IAAI,CAACC,MAAL,CAAYE,GAJR;MAKTZ,QAAQ,EAAES,IAAI,CAACT,QALN;MAMTE,MAAM,EAAEO,IAAI,CAACP;IANJ,CAAX;EAAA,CADa,EASb,IAAAW,6BAAA,EAAY1B,KAAZ,EAAmBC,WAAnB,EAAgC;IAC9B0B,EAAE,EAAE;EAD0B,CAAhC,CATa,CAAf;;EAaA,IAAI1B,WAAW,KAAK,IAAhB,IAAwBmB,QAAQ,CAACV,MAAT,KAAoB,CAAhD,EAAmD;IACjD,IAAMkB,WAAW,GAAG7B,iBAAiB,CAACC,KAAD,EAAQC,WAAR,CAArC;;IACA,IAAI2B,WAAW,CAAClB,MAAhB,EAAwB;MACtB;MACA,IAAMmB,GAAG,GAAG3B,MAAM,CAAC4B,KAAP,EAAZ;MACA,IAAAC,cAAA,EAAQ,UAACT,IAAD,EAAU;QAChB,IACE,CAAC,IAAAU,WAAA,EACC,UAACC,KAAD;UAAA,OACEA,KAAK,CAACpB,QAAN,IAAkBS,IAAI,CAACT,QAAvB,IAAmCoB,KAAK,CAAClB,MAAN,IAAgBO,IAAI,CAACT,QAD1D;QAAA,CADD,EAGCgB,GAHD,CADH,EAME;UACA3B,MAAM,CAACS,IAAP,CAAYW,IAAZ;QACD;MACF,CAVD,EAUGM,WAVH;IAWD;EACF;;EACD,OAAO1B,MAAM,CAACgC,IAAP,CAAYlB,UAAZ,CAAP;AACD"}