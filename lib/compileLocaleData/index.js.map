{"version":3,"sources":["lib/compileLocaleData/index.js"],"names":["findLocaleFiles","folderPath","isLocaleFile","fs","readdirSync","compileData","sourceLocale","translationLocales","data","file","locale","replace","indexOf","rawContent","readFileSync","path","resolve","files","compileLocaleData","sourceFolder","dirname"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEO,SAASA,eAAT,CAAyBC,UAAzB,EAAqC;AAC1C,SAAO,mBAAOC,wBAAP,EAAqBC,oBAAGC,WAAH,CAAeH,UAAf,CAArB,CAAP;AACD;;AAEM,SAASI,WAAT,OAAuE;AAAA,MAAhDJ,UAAgD,QAAhDA,UAAgD;AAAA,MAApCK,YAAoC,QAApCA,YAAoC;AAAA,MAAtBC,kBAAsB,QAAtBA,kBAAsB;AAC5E,SAAO,mBACL,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACd,QAAMC,MAAM,GAAG,8BAAaD,IAAI,CAACE,OAAL,CAAa,kBAAb,EAAiC,EAAjC,CAAb,CAAf;;AACA,QAAID,MAAM,KAAKJ,YAAX,IAA2BC,kBAAkB,CAACK,OAAnB,CAA2BF,MAA3B,IAAqC,CAAC,CAArE,EAAwE;AACtE,UAAMG,UAAU,GAAGV,oBAAGW,YAAH,CACjBC,iBAAKC,OAAL,CAAaf,UAAb,EAAyBQ,IAAzB,CADiB,EAEjB,MAFiB,CAAnB;;AAIAD,MAAAA,IAAI,CAACS,KAAL,CAAWP,MAAX;AACED,QAAAA,IAAI,EAAJA,IADF;AAEEC,QAAAA,MAAM,EAANA,MAFF;AAGEG,QAAAA,UAAU,EAAVA;AAHF,SAIK,iCAAgBA,UAAhB,CAJL;AAMD;;AACD,WAAOL,IAAP;AACD,GAhBI,EAiBL;AACEO,IAAAA,IAAI,EAAEd,UADR;AAEEgB,IAAAA,KAAK,EAAE;AAFT,GAjBK,EAqBLjB,eAAe,CAACC,UAAD,CArBV,CAAP;AAuBD;;AAEc,SAASiB,iBAAT,QAIZ;AAAA,MAHDC,YAGC,SAHDA,YAGC;AAAA,MAFDb,YAEC,SAFDA,YAEC;AAAA,MADDC,kBACC,SADDA,kBACC;AACD,SAAO,mBACL,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACd,QAAMR,UAAU,GAAGc,iBAAKC,OAAL,CAAaD,iBAAKK,OAAL,CAAaX,IAAb,CAAb,CAAnB;;AACAD,IAAAA,IAAI,CAACP,UAAD,CAAJ,GAAmBI,WAAW,CAAC;AAC7BJ,MAAAA,UAAU,EAAVA,UAD6B;AAE7BK,MAAAA,YAAY,EAAZA,YAF6B;AAG7BC,MAAAA,kBAAkB,EAAlBA;AAH6B,KAAD,CAA9B;AAKA,WAAOC,IAAP;AACD,GATI,EAUL,EAVK,EAWL,iCAAgBW,YAAhB,CAXK,CAAP;AAaD","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { filter, reduce } from 'ramda';\nimport formatLocale from '@ringcentral-integration/i18n/lib/formatLocale';\nimport isLocaleFile from '../isLocaleFile';\nimport findLoaderFiles from '../findLoaderFiles';\nimport parseLocaleFile from '../parseLocaleFile';\n\nexport function findLocaleFiles(folderPath) {\n  return filter(isLocaleFile, fs.readdirSync(folderPath));\n}\n\nexport function compileData({ folderPath, sourceLocale, translationLocales }) {\n  return reduce(\n    (data, file) => {\n      const locale = formatLocale(file.replace(/\\.(js|ts|json)$/i, ''));\n      if (locale === sourceLocale || translationLocales.indexOf(locale) > -1) {\n        const rawContent = fs.readFileSync(\n          path.resolve(folderPath, file),\n          'utf8',\n        );\n        data.files[locale] = {\n          file,\n          locale,\n          rawContent,\n          ...parseLocaleFile(rawContent),\n        };\n      }\n      return data;\n    },\n    {\n      path: folderPath,\n      files: {},\n    },\n    findLocaleFiles(folderPath),\n  );\n}\n\nexport default function compileLocaleData({\n  sourceFolder,\n  sourceLocale,\n  translationLocales,\n}) {\n  return reduce(\n    (data, file) => {\n      const folderPath = path.resolve(path.dirname(file));\n      data[folderPath] = compileData({\n        folderPath,\n        sourceLocale,\n        translationLocales,\n      });\n      return data;\n    },\n    {},\n    findLoaderFiles(sourceFolder),\n  );\n}\n"],"file":"index.js"}