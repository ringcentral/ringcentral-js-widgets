{"version":3,"sources":["lib/DataFetcher/getDataFetcherReducer.ts"],"names":["createGetDataReducer","cleanOnReset","types","state","type","data","hasPermission","fetchSuccess","initSuccess","resetSuccess","createGetTimestampReducer","timestamp","getRetryCountReducer","init","reset","retry","getDataFetcherReducer","reducers","status","retryCount"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;AAEO,SAASA,oBAAT,CAA8BC,YAA9B,EAA4C;AACjD,SAAO,UAACC,KAAD;AAAA,WACL,YAAwD;AAAA,UAAvDC,KAAuD,uEAA/C,IAA+C;;AAAA;AAAA,UAAvCC,IAAuC,QAAvCA,IAAuC;AAAA,UAAjCC,IAAiC,QAAjCA,IAAiC;AAAA,oCAA3BC,aAA2B;AAAA,UAA3BA,aAA2B,mCAAX,IAAW;;AACtD,cAAQF,IAAR;AACE,aAAKF,KAAK,CAACK,YAAX;AACE,iBAAOF,IAAP;;AACF,aAAKH,KAAK,CAACM,WAAX;AACE,cAAIF,aAAJ,EAAmB;AACjB,mBAAOH,KAAP;AACD;;AACD,iBAAO,IAAP;;AACF,aAAKD,KAAK,CAACO,YAAX;AACE,cAAIR,YAAJ,EAAkB;AAChB,mBAAO,IAAP;AACD;;AACD,iBAAOE,KAAP;;AACF;AACE,iBAAOA,KAAP;AAdJ;AAgBD,KAlBI;AAAA,GAAP;AAmBD;;AAEM,SAASO,yBAAT,CAAmCT,YAAnC,EAAiD;AACtD,SAAO,UAACC,KAAD;AAAA,WACL,YAAuC;AAAA,UAAtCC,KAAsC,uEAA9B,IAA8B;;AAAA;AAAA,UAAtBC,IAAsB,SAAtBA,IAAsB;AAAA,UAAhBO,SAAgB,SAAhBA,SAAgB;;AACrC,cAAQP,IAAR;AACE,aAAKF,KAAK,CAACK,YAAX;AACE,iBAAOI,SAAS,IAAIR,KAApB;;AACF,aAAKD,KAAK,CAACO,YAAX;AACE,cAAIR,YAAJ,EAAkB;AAChB,mBAAO,IAAP;AACD;;AACD,iBAAOE,KAAP;;AACF;AACE,iBAAOA,KAAP;AATJ;AAWD,KAbI;AAAA,GAAP;AAcD;;AAEM,SAASS,oBAAT,CAA8BV,KAA9B,EAAqC;AAC1C,SAAO,YAAyB;AAAA,QAAxBC,KAAwB,uEAAhB,CAAgB;;AAAA;AAAA,QAAXC,IAAW,SAAXA,IAAW;;AAC9B,YAAQA,IAAR;AACE,WAAKF,KAAK,CAACW,IAAX;AACA,WAAKX,KAAK,CAACM,WAAX;AACA,WAAKN,KAAK,CAACY,KAAX;AACA,WAAKZ,KAAK,CAACO,YAAX;AACE,eAAO,CAAP;;AACF,WAAKP,KAAK,CAACa,KAAX;AACE,eAAOZ,KAAK,GAAG,CAAf;;AACF;AACE,eAAOA,KAAP;AATJ;AAWD,GAZD;AAaD;;AAEM,SAASa,qBAAT,CAA+Bd,KAA/B,EAAqD;AAAA,MAAfe,QAAe,uEAAJ,EAAI;AAC1D,SAAO,4DACFA,QADE;AAELC,IAAAA,MAAM,EAAE,wCAAuBhB,KAAvB,CAFH;AAGLiB,IAAAA,UAAU,EAAEP,oBAAoB,CAACV,KAAD;AAH3B,KAAP;AAKD","sourcesContent":["import { combineReducers } from 'redux';\n\nimport getModuleStatusReducer from '../getModuleStatusReducer';\n\nexport function createGetDataReducer(cleanOnReset) {\n  return (types) =>\n    (state = null, { type, data, hasPermission = true }) => {\n      switch (type) {\n        case types.fetchSuccess:\n          return data;\n        case types.initSuccess:\n          if (hasPermission) {\n            return state;\n          }\n          return null;\n        case types.resetSuccess:\n          if (cleanOnReset) {\n            return null;\n          }\n          return state;\n        default:\n          return state;\n      }\n    };\n}\n\nexport function createGetTimestampReducer(cleanOnReset) {\n  return (types) =>\n    (state = null, { type, timestamp }) => {\n      switch (type) {\n        case types.fetchSuccess:\n          return timestamp || state;\n        case types.resetSuccess:\n          if (cleanOnReset) {\n            return null;\n          }\n          return state;\n        default:\n          return state;\n      }\n    };\n}\n\nexport function getRetryCountReducer(types) {\n  return (state = 0, { type }) => {\n    switch (type) {\n      case types.init:\n      case types.initSuccess:\n      case types.reset:\n      case types.resetSuccess:\n        return 0;\n      case types.retry:\n        return state + 1;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getDataFetcherReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    retryCount: getRetryCountReducer(types),\n  });\n}\n"],"file":"getDataFetcherReducer.js"}