{"version":3,"sources":["lib/NamedStorage.ts"],"names":["MemoryStorage","data","key","NamedStorage","storageKey","Error","_storageKey","_id","uuid","v4","localStorage","window","_storageHandler","event","JSON","parse","newValue","setter","id","trigger","e","_localStorage","addEventListener","getItem","setItem","stringify","removeEventListener","Subscribable"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,a;;;;;;;8BACM;AACR,aAAO,KAAKC,IAAZ;AACD;;;4BAEOC,G,EAAKD,I,EAAM;AACjB,WAAKA,IAAL,GAAYA,IAAZ;AACD;;;;;;IAGkBE,Y;;;;;AACnB,8BAA4B;AAAA;;AAAA,QAAdC,UAAc,QAAdA,UAAc;;AAAA;;AAC1B;;AACA,QAAI,CAACA,UAAL,EAAiB;AACf,YAAMC,KAAK,CAAC,qDAAD,CAAX;AACD;;AACD,UAAKC,WAAL,GAAmBF,UAAnB;AACA,UAAKG,GAAL,GAAWC,IAAI,CAACC,EAAL,EAAX;;AACA,QAAI,OAAOC,YAAP,KAAwB,WAAxB,IAAuC,OAAOC,MAAP,KAAkB,WAA7D,EAA0E;AACxE,YAAKC,eAAL,GAAuB,UAACC,KAAD,EAAW;AAChC,YAAIA,KAAK,CAACX,GAAN,KAAc,MAAKI,WAAvB,EAAoC;AAClC,cAAI;AAAA,8BACuBQ,IAAI,CAACC,KAAL,CAAWF,KAAK,CAACG,QAAjB,CADvB;AAAA,gBACMC,MADN,eACMA,MADN;AAAA,gBACchB,IADd,eACcA,IADd;;AAEF,gBAAIgB,MAAM,IAAIA,MAAM,KAAK,MAAKC,EAA9B,EAAkC;AAChC,oBAAKC,OAAL,CAAalB,IAAb;AACD;AACF,WALD,CAKE,OAAOmB,CAAP,EAAU;AACV;AACD;AACF;AACF,OAXD;;AAYA,YAAKC,aAAL,GAAqBX,YAArB;AACAC,MAAAA,MAAM,CAACW,gBAAP,CAAwB,SAAxB,EAAmC,MAAKV,eAAxC;AACD,KAfD,MAeO;AACL,YAAKS,aAAL,GAAqB,IAAIrB,aAAJ,EAArB;AACD;;AAxByB;AAyB3B;;;;8BAES;AACR,UAAI;AAAA,2BACec,IAAI,CAACC,KAAL,CAAW,KAAKM,aAAL,CAAmBE,OAAnB,CAA2B,KAAKjB,WAAhC,CAAX,CADf;AAAA,YACML,IADN,gBACMA,IADN;;AAEF,eAAOA,IAAI,IAAI,EAAf;AACD,OAHD,CAGE,OAAOmB,CAAP,EAAU;AACV;AACA,eAAO,EAAP;AACD;AACF;;;4BAEOnB,I,EAAM;AACZ,WAAKoB,aAAL,CAAmBG,OAAnB,CACE,KAAKlB,WADP,EAEEQ,IAAI,CAACW,SAAL,CAAe;AACbR,QAAAA,MAAM,EAAE,KAAKC,EADA;AAEbjB,QAAAA,IAAI,EAAJA;AAFa,OAAf,CAFF;AAOD;;;8BAES;AACR,UAAI,KAAKW,eAAT,EAA0B;AACxBD,QAAAA,MAAM,CAACe,mBAAP,CAA2B,SAA3B,EAAsC,KAAKd,eAA3C;AACD;AACF;;;wBAEQ;AACP,aAAO,KAAKL,GAAZ;AACD;;;;EAxDuCoB,yB","sourcesContent":["import * as uuid from 'uuid';\n\nimport Subscribable from './Subscribable';\n\nclass MemoryStorage {\n  getItem() {\n    return this.data;\n  }\n\n  setItem(key, data) {\n    this.data = data;\n  }\n}\n\nexport default class NamedStorage extends Subscribable {\n  constructor({ storageKey }) {\n    super();\n    if (!storageKey) {\n      throw Error('NameLocalStorage must be created with a storage key');\n    }\n    this._storageKey = storageKey;\n    this._id = uuid.v4();\n    if (typeof localStorage !== 'undefined' && typeof window !== 'undefined') {\n      this._storageHandler = (event) => {\n        if (event.key === this._storageKey) {\n          try {\n            const { setter, data } = JSON.parse(event.newValue);\n            if (setter && setter !== this.id) {\n              this.trigger(data);\n            }\n          } catch (e) {\n            /* ignore error */\n          }\n        }\n      };\n      this._localStorage = localStorage;\n      window.addEventListener('storage', this._storageHandler);\n    } else {\n      this._localStorage = new MemoryStorage();\n    }\n  }\n\n  getData() {\n    try {\n      const { data } = JSON.parse(this._localStorage.getItem(this._storageKey));\n      return data || {};\n    } catch (e) {\n      /* ignore error */\n      return {};\n    }\n  }\n\n  setData(data) {\n    this._localStorage.setItem(\n      this._storageKey,\n      JSON.stringify({\n        setter: this.id,\n        data,\n      }),\n    );\n  }\n\n  destroy() {\n    if (this._storageHandler) {\n      window.removeEventListener('storage', this._storageHandler);\n    }\n  }\n\n  get id() {\n    return this._id;\n  }\n}\n"],"file":"NamedStorage.js"}