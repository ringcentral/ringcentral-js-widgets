{"version":3,"sources":["lib/ChromeTransport/ServerTransport.js"],"names":["ServerTransport","options","name","_ports","Set","_requests","Map","_activeTabIds","_getActiveTabIds","chrome","tabs","onActivated","addListener","runtime","onConnect","port","add","onMessage","type","requestId","payload","_events","request","set","emit","onDisconnect","result","error","get","Error","message","postMessage","response","push","sender","tab","id","Promise","resolve","query","active","Array","isArray","acc","console","log","TransportBase"],"mappings":"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","sourcesContent":["import { forEach, reduce } from 'ramda';\nimport TransportBase from '../TransportBase';\n\n/* global chrome */\n\nexport default class ServerTransport extends TransportBase {\n  constructor(options) {\n    super({\n      ...options,\n      name: 'ChromeTransport',\n    });\n    this._ports = new Set();\n    this._requests = new Map();\n\n    // Keep active tabs up to date\n    this._activeTabIds = null;\n    this._getActiveTabIds();\n    chrome.tabs.onActivated.addListener(() => this._getActiveTabIds());\n    chrome.runtime.onConnect.addListener((port) => {\n      if (port.name === 'transport') {\n        this._ports.add(port);\n        port.onMessage.addListener(({ type, requestId, payload }) => {\n          if (type === this._events.request && requestId && payload) {\n            this._requests.set(requestId, port);\n            this.emit(this._events.request, {\n              requestId,\n              payload,\n            });\n          }\n        });\n        port.onDisconnect.addListener(() => {\n          this._ports.delete(port);\n        });\n      }\n    });\n  }\n\n  response({ requestId, result, error }) {\n    const port = this._requests.get(requestId);\n    if (port) {\n      this._requests.delete(requestId);\n      if (error instanceof Error) {\n        error = error.message;\n      }\n      port.postMessage({\n        type: this._events.response,\n        requestId,\n        result,\n        error,\n      });\n    }\n  }\n\n  push({ payload }) {\n    const message = { type: this._events.push, payload };\n    // Since postMessage is really expensive,\n    // we only send messages to those ports on active tabs.\n    forEach((port) => {\n      if (\n        port.sender &&\n        port.sender.tab &&\n        // send to all instances if app failed to query active tabs\n        (!this._activeTabIds || this._activeTabIds[port.sender.tab.id])\n      ) {\n        port.postMessage(message);\n      }\n    }, this._ports);\n  }\n\n  _getActiveTabIds() {\n    return new Promise((resolve) => {\n      try {\n        chrome.tabs.query({ active: true }, (tabs) => {\n          this._activeTabIds = Array.isArray(tabs)\n            ? // convert tabs array into tabs id truth mapping\n              reduce(\n                (acc, tab) => {\n                  if (tab.id) {\n                    acc[tab.id] = true;\n                  }\n                  return acc;\n                },\n                {},\n                tabs,\n              )\n            : null;\n          resolve(!!this._activeTabIds);\n        });\n      } catch (error) {\n        this._activeTabIds = null;\n        console.log(error);\n        resolve(false);\n      }\n    });\n  }\n}\n"],"file":"ServerTransport.js"}