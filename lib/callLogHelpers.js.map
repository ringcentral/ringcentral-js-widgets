{"version":3,"sources":["lib/callLogHelpers.ts"],"names":["isInbound","call","direction","callDirections","inbound","isOutbound","outbound","isRinging","telephonyStatus","telephonyStatuses","ringing","isRingingInboundCall","callResultsToMissedMap","ObjectMap","fromObject","result","key","value","callResults","item","missed","hangUp","busy","voicemail","rejected","Object","keys","isMissed","hasRingingCalls","calls","find","isEnded","noCall","terminationType","terminationTypes","hasEndedCalls","isOnHold","onHold","isIntermediateCall","intermediate","isSelfCall","to","from","phoneNumber","sortBySessionId","a","b","sessionId","sortByStartTime","startTime","normalizeStartTime","valueOf","normalizeFromTo","areTwoLegs","Math","abs","parseInt","action","callActions","phoneCall","ringOutWeb","ringOutPC","ringOutMobile","extensionNumber","removeInboundRingOutLegs","output","outbounds","filter","forEach","outboundIndex","findIndex","splice","outboundLeg","inboundLeg","push","concat","removeDuplicateIntermediateCalls","resultCalls","indexMap","isIntermediate","index","length","removeDuplicateSelfCalls","isSelf","getPhoneNumber","getPhoneNumberMatches","toMatches","fromMatches","isOutboundCall","isInboundCall","matches"],"mappings":"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","sourcesContent":["import { find, isEmpty, reduce } from 'ramda';\nimport moment from 'moment';\nimport {\n  isValidNumber,\n  isSameLocalNumber,\n} from '@ringcentral-integration/phone-number';\nimport { ObjectMap } from '@ringcentral-integration/core/lib/ObjectMap';\nimport callActions from '../enums/callActions';\nimport callDirections from '../enums/callDirections';\nimport callResults, { CallResultsKey } from '../enums/callResults';\nimport telephonyStatuses from '../enums/telephonyStatus';\nimport terminationTypes from '../enums/terminationTypes';\nimport { ActiveCall } from '../interfaces/Presence.model';\nimport { Call } from '../interfaces/Call.interface';\n// import i18n from './i18n';\n\n/* call direction helpers */\nexport function isInbound(call: { direction?: string } = {}) {\n  return call.direction === callDirections.inbound;\n}\n\nexport function isOutbound(call: { direction?: string } = {}) {\n  return call.direction === callDirections.outbound;\n}\n\n/* status helpers */\nexport function isRinging(call: Call = {}) {\n  return call.telephonyStatus === telephonyStatuses.ringing;\n}\nexport function isRingingInboundCall(call: Call) {\n  return isRinging(call) && isInbound(call);\n}\n\nconst callResultsToMissedMap = ObjectMap.fromObject(\n  reduce<string, Record<string, boolean>>(\n    (result, key) => {\n      const value = callResults[key as CallResultsKey];\n      result[value] = !!find((item) => item === value, [\n        callResults.missed,\n        callResults.hangUp,\n        // callResults.HangUp,\n        callResults.busy,\n        callResults.voicemail,\n        callResults.rejected,\n      ]);\n      return result;\n    },\n    {},\n    Object.keys(callResults),\n  ),\n);\n\nexport function isMissed(call: ActiveCall = {}) {\n  return !!callResultsToMissedMap[call.result];\n}\n\nexport function hasRingingCalls(calls: Call[] = []) {\n  return !!calls.find(isRinging);\n}\n\nexport function isEnded(call: ActiveCall = {}) {\n  return (\n    call.telephonyStatus === telephonyStatuses.noCall &&\n    call.terminationType === terminationTypes.final\n  );\n}\n\nexport function hasEndedCalls(calls: ActiveCall[]) {\n  return !!calls.find(isEnded);\n}\n\nexport function isOnHold(call: ActiveCall = {}) {\n  return call.telephonyStatus === telephonyStatuses.onHold;\n}\n\nexport function isIntermediateCall(call: ActiveCall = {}) {\n  return call.terminationType === terminationTypes.intermediate;\n}\n\nexport function isSelfCall(call: ActiveCall = {}) {\n  if (call.to && call.from) {\n    return call.to.phoneNumber === call.from.phoneNumber;\n  }\n  return false;\n}\n\n/* sort functions */\n\nexport function sortBySessionId(\n  a: { sessionId: string },\n  b: { sessionId: string },\n) {\n  if (a.sessionId === b.sessionId) return 0;\n  return a.sessionId > b.sessionId ? 1 : -1;\n}\n\n// TODO: fix `ActiveCall` startTime optional type\nexport function sortByStartTime(\n  a: { startTime?: number | string },\n  b: { startTime?: number | string },\n) {\n  if (a.startTime === b.startTime) return 0;\n  return a.startTime > b.startTime ? -1 : 1;\n}\n\nexport function normalizeStartTime<T extends { startTime?: number | string }>(\n  item: T,\n) {\n  const result: T = {\n    ...item,\n  };\n  if (item.startTime) {\n    // Fix: Safari doesn't support timezone offset\n    // `startTime` might switch between `2019-10-18T08:18:47.972+0000`\n    // and `2019-10-18T08:18:47.972Z`\n    result.startTime = moment(item.startTime).valueOf();\n  }\n  return result;\n}\n\nexport function normalizeFromTo(call: ActiveCall) {\n  return {\n    ...call,\n    from:\n      typeof call.from === 'object' ? call.from : { phoneNumber: call.from },\n    to: typeof call.to === 'object' ? call.to : { phoneNumber: call.to },\n  };\n}\n\n/* ringout leg helpers */\nexport function areTwoLegs(inbound: ActiveCall, outbound: ActiveCall) {\n  if (isInbound(inbound) && isOutbound(outbound)) {\n    switch (\n      Math.abs(\n        parseInt(inbound.sessionId, 10) - parseInt(outbound.sessionId, 10),\n      )\n    ) {\n      case 1000:\n      case 2000:\n      case 3000:\n      case 4000: {\n        // presence\n        if (\n          inbound.from &&\n          inbound.to &&\n          outbound.from &&\n          outbound.to &&\n          isSameLocalNumber(\n            inbound.from.phoneNumber,\n            outbound.to.phoneNumber,\n          ) &&\n          isSameLocalNumber(inbound.to.phoneNumber, outbound.from.phoneNumber)\n        ) {\n          return true;\n        }\n        // call-log\n        if (\n          inbound.from &&\n          inbound.to &&\n          outbound.from &&\n          outbound.to &&\n          inbound.action === callActions.phoneCall &&\n          (outbound.action === callActions.ringOutWeb ||\n            outbound.action === callActions.ringOutPC ||\n            outbound.action === callActions.ringOutMobile) &&\n          (inbound.from.phoneNumber === outbound.from.phoneNumber ||\n            inbound.from.extensionNumber === outbound.from.extensionNumber) &&\n          inbound.to.phoneNumber === outbound.to.phoneNumber\n        ) {\n          return true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n  }\n  return false;\n}\n\nexport function removeInboundRingOutLegs(calls: ActiveCall[]) {\n  const output: ActiveCall[] = [];\n  const outbounds = calls.filter(isOutbound);\n  calls.filter(isInbound).forEach((inbound) => {\n    const outboundIndex = outbounds.findIndex((call) =>\n      areTwoLegs(inbound, call),\n    );\n    if (outboundIndex > -1) {\n      const outbound = outbounds.splice(outboundIndex, 1)[0];\n\n      if (inbound.action && outbound.action) {\n        // from call-log\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n          from: {\n            ...inbound.from,\n          },\n          to: {\n            ...inbound.to,\n          },\n          result: inbound.result,\n        };\n        output.push(call);\n      } else {\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n        };\n        // Handle inboundLeg.from is '+19072028624', but outboundLeg.to is '9072028624'\n        // https://jira.ringcentral.com/browse/RCINT-3127\n        if (\n          isValidNumber(inbound.from && inbound.from.phoneNumber) &&\n          isSameLocalNumber(\n            inbound.from.phoneNumber,\n            outbound.to && outbound.to.phoneNumber,\n          )\n        ) {\n          call.to = {\n            ...outbound.to,\n            phoneNumber: inbound.from.phoneNumber,\n          };\n          outbound.to.phoneNumber = inbound.from.phoneNumber;\n        }\n        if (isOnHold(inbound)) {\n          call.telephonyStatus = telephonyStatuses.onHold;\n        }\n        output.push(call);\n      }\n\n      // output.push(outbound);\n    } else {\n      output.push(inbound);\n    }\n  });\n  return output.concat(outbounds);\n}\n\nexport function removeDuplicateIntermediateCalls(calls: ActiveCall[]) {\n  const resultCalls: ActiveCall[] = [];\n  const indexMap: Record<\n    string,\n    {\n      isIntermediate: boolean;\n      index: number;\n    }\n  > = {};\n  calls.forEach((call) => {\n    const isIntermediate = isIntermediateCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionId] = {\n        index: resultCalls.length,\n        isIntermediate,\n      };\n      resultCalls.push(call);\n    } else if (!isIntermediate) {\n      indexMap[call.sessionId].isIntermediate = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n\n// there are two active calls with same sessionId when user call self.\nexport function removeDuplicateSelfCalls(calls: ActiveCall[]) {\n  const resultCalls: ActiveCall[] = [];\n  const indexMap: Record<\n    string,\n    {\n      index: number;\n      isSelf: boolean;\n    }\n  > = {};\n  calls.forEach((call) => {\n    const isSelf = isSelfCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionId] = {\n        index: resultCalls.length,\n        isSelf,\n      };\n      resultCalls.push(call);\n    } else if (!isSelf) {\n      indexMap[call.sessionId].isSelf = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n\nexport function getPhoneNumber(call: Call = {}) {\n  if (isEmpty(call)) {\n    return null;\n  }\n  const { to = {}, from = {} } = call;\n  if (isOutbound(call)) {\n    return to.phoneNumber || to.extensionNumber;\n  }\n  return from.phoneNumber || from.extensionNumber;\n}\n\n// Get phone number and matches.\nexport function getPhoneNumberMatches(call: Call = {}) {\n  const {\n    to = {},\n    from = {},\n    // sessionId,\n    toMatches,\n    fromMatches,\n  } = call;\n  if (isEmpty(call)) {\n    return {};\n  }\n  const isOutboundCall = isOutbound(call);\n  const isInboundCall = isInbound(call);\n  let phoneNumber = null;\n  let matches = null;\n  if (isOutboundCall) {\n    phoneNumber = to.phoneNumber || to.extensionNumber;\n    matches = toMatches;\n  } else if (isInboundCall) {\n    phoneNumber = from.phoneNumber || from.extensionNumber;\n    matches = fromMatches;\n  }\n  // if (!phoneNumber || !matches) {\n  //   console.warn(`Call sessionId: ${sessionId} is abnormal data.`);\n  // }\n  return {\n    phoneNumber,\n    matches,\n  };\n}\n"],"file":"callLogHelpers.js"}