{"version":3,"file":"fromSubscribe.js","names":["_rxjs","require","_usmRedux","fromSubscribe","target","destroy","obs$","Observable","observer","subscribe","next","pipe","share","finalize","exports"],"sources":["lib/rxjs/fromSubscribe.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { finalize, Observable, share } from 'rxjs';\n\nimport { subscribe } from '../usm-redux';\n\n/**\n * `subscribe` redux state change notifications to `Observable` flow\n *\n * that method for you can check event when any redux dispatch triggered.\n *\n * @example\n * ```ts\n * fromSubscribe(this)\n *   .pipe(\n *     tap((e) => {\n *       console.log(e); // trigger when any state change\n *     }),\n *   )\n *   .subscribe();\n * ```\n *\n * same as `subscribe`, but not support `awaitPromise` option, if you need wait one by one, can use `concatMap` to control flow by yourself.\n */\nexport const fromSubscribe = (target: any) => {\n  let destroy: () => void;\n\n  const obs$ = new Observable<void>((observer) => {\n    destroy = subscribe(target, () => observer.next());\n  });\n\n  return obs$.pipe(\n    share(),\n    finalize(() => destroy()),\n  );\n};\n"],"mappings":";;;;;;AACA,IAAAA,KAAA,GAAAC,OAAA;AAEA,IAAAC,SAAA,GAAAD,OAAA;AAHA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAME,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,MAAW,EAAK;EAC5C,IAAIC,OAAmB;EAEvB,IAAMC,IAAI,GAAG,IAAIC,gBAAU,CAAO,UAACC,QAAQ,EAAK;IAC9CH,OAAO,GAAG,IAAAI,mBAAS,EAACL,MAAM,EAAE;MAAA,OAAMI,QAAQ,CAACE,IAAI,CAAC,CAAC;IAAA,EAAC;EACpD,CAAC,CAAC;EAEF,OAAOJ,IAAI,CAACK,IAAI,CACd,IAAAC,WAAK,EAAC,CAAC,EACP,IAAAC,cAAQ,EAAC;IAAA,OAAMR,OAAO,CAAC,CAAC;EAAA,EAC1B,CAAC;AACH,CAAC;AAACS,OAAA,CAAAX,aAAA,GAAAA,aAAA","ignoreList":[]}