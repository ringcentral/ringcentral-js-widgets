{"version":3,"file":"index.js","names":["writeData","localizationFolder","data","ext","fs","ensureDirSync","forEach","locale","fileName","path","resolve","writeFileSync","JSON","stringify","Object","keys","exportLocale","sourceFolder","defaultConfig","sourceLocale","supportedLocales","translationLocales","exportType","fillEmptyWithSource","json","writeFile","Error","localeData","compileLocaleData","generateJsonData","generateXlfData"],"sources":["lib/exportLocale/index.js"],"sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { forEach } from 'ramda';\nimport compileLocaleData from '../compileLocaleData';\nimport defaultConfig from '../defaultConfig';\nimport { generateXlfData, generateJsonData } from '../generateData';\n\nexport function writeData({ localizationFolder, data, ext }) {\n  fs.ensureDirSync(localizationFolder);\n  forEach((locale) => {\n    const fileName = path.resolve(localizationFolder, `${locale}.${ext}`);\n    fs.writeFileSync(\n      fileName,\n      ext === 'json' ? JSON.stringify(data[locale], null, 2) : data[locale],\n    );\n  }, Object.keys(data));\n}\n\nexport default function exportLocale({\n  sourceFolder = defaultConfig.sourceFolder,\n  localizationFolder = defaultConfig.localizationFolder,\n  sourceLocale = defaultConfig.sourceLocale,\n  supportedLocales,\n  translationLocales = supportedLocales,\n  exportType = 'diff',\n  fillEmptyWithSource = true,\n  json = false,\n  writeFile = true,\n} = {}) {\n  if (!supportedLocales) {\n    throw new Error('options.supportedLocales is missing');\n  }\n  const localeData = compileLocaleData({\n    sourceFolder,\n    sourceLocale,\n    translationLocales,\n  });\n  const data = json\n    ? generateJsonData({\n        localeData,\n        sourceFolder,\n        sourceLocale,\n        translationLocales,\n      })\n    : generateXlfData({\n        localeData,\n        sourceFolder,\n        sourceLocale,\n        translationLocales,\n        exportType,\n        fillEmptyWithSource,\n      });\n  if (writeFile) {\n    return writeData({\n      data,\n      localizationFolder,\n      ext: json ? 'json' : 'xlf',\n    });\n  }\n  return data;\n}\n"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,SAASA,SAAT,OAAsD;EAAA,IAAjCC,kBAAiC,QAAjCA,kBAAiC;EAAA,IAAbC,IAAa,QAAbA,IAAa;EAAA,IAAPC,GAAO,QAAPA,GAAO;;EAC3DC,mBAAA,CAAGC,aAAH,CAAiBJ,kBAAjB;;EACA,IAAAK,cAAA,EAAQ,UAACC,MAAD,EAAY;IAClB,IAAMC,QAAQ,GAAGC,gBAAA,CAAKC,OAAL,CAAaT,kBAAb,YAAoCM,MAApC,cAA8CJ,GAA9C,EAAjB;;IACAC,mBAAA,CAAGO,aAAH,CACEH,QADF,EAEEL,GAAG,KAAK,MAAR,GAAiBS,IAAI,CAACC,SAAL,CAAeX,IAAI,CAACK,MAAD,CAAnB,EAA6B,IAA7B,EAAmC,CAAnC,CAAjB,GAAyDL,IAAI,CAACK,MAAD,CAF/D;EAID,CAND,EAMGO,MAAM,CAACC,IAAP,CAAYb,IAAZ,CANH;AAOD;;AAEc,SAASc,YAAT,GAUP;EAAA,gFAAJ,EAAI;EAAA,+BATNC,YASM;EAAA,IATNA,YASM,mCATSC,yBAAA,CAAcD,YASvB;EAAA,kCARNhB,kBAQM;EAAA,IARNA,kBAQM,sCAReiB,yBAAA,CAAcjB,kBAQ7B;EAAA,+BAPNkB,YAOM;EAAA,IAPNA,YAOM,mCAPSD,yBAAA,CAAcC,YAOvB;EAAA,IANNC,gBAMM,SANNA,gBAMM;EAAA,kCALNC,kBAKM;EAAA,IALNA,kBAKM,sCALeD,gBAKf;EAAA,6BAJNE,UAIM;EAAA,IAJNA,UAIM,iCAJO,MAIP;EAAA,kCAHNC,mBAGM;EAAA,IAHNA,mBAGM,sCAHgB,IAGhB;EAAA,uBAFNC,IAEM;EAAA,IAFNA,IAEM,2BAFC,KAED;EAAA,4BADNC,SACM;EAAA,IADNA,SACM,gCADM,IACN;;EACN,IAAI,CAACL,gBAAL,EAAuB;IACrB,MAAM,IAAIM,KAAJ,CAAU,qCAAV,CAAN;EACD;;EACD,IAAMC,UAAU,GAAG,IAAAC,6BAAA,EAAkB;IACnCX,YAAY,EAAZA,YADmC;IAEnCE,YAAY,EAAZA,YAFmC;IAGnCE,kBAAkB,EAAlBA;EAHmC,CAAlB,CAAnB;EAKA,IAAMnB,IAAI,GAAGsB,IAAI,GACb,IAAAK,8BAAA,EAAiB;IACfF,UAAU,EAAVA,UADe;IAEfV,YAAY,EAAZA,YAFe;IAGfE,YAAY,EAAZA,YAHe;IAIfE,kBAAkB,EAAlBA;EAJe,CAAjB,CADa,GAOb,IAAAS,6BAAA,EAAgB;IACdH,UAAU,EAAVA,UADc;IAEdV,YAAY,EAAZA,YAFc;IAGdE,YAAY,EAAZA,YAHc;IAIdE,kBAAkB,EAAlBA,kBAJc;IAKdC,UAAU,EAAVA,UALc;IAMdC,mBAAmB,EAAnBA;EANc,CAAhB,CAPJ;;EAeA,IAAIE,SAAJ,EAAe;IACb,OAAOzB,SAAS,CAAC;MACfE,IAAI,EAAJA,IADe;MAEfD,kBAAkB,EAAlBA,kBAFe;MAGfE,GAAG,EAAEqB,IAAI,GAAG,MAAH,GAAY;IAHN,CAAD,CAAhB;EAKD;;EACD,OAAOtB,IAAP;AACD"}