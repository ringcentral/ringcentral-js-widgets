{"version":3,"file":"index.js","names":["_fsExtra","_interopRequireDefault","require","_path","_ramda","_compileLocaleData","_defaultConfig","_generateData","e","__esModule","writeData","_ref","localizationFolder","data","ext","fs","ensureDirSync","forEach","locale","fileName","path","resolve","concat","writeFileSync","JSON","stringify","Object","keys","exportLocale","_ref2","arguments","length","undefined","_ref2$sourceFolder","sourceFolder","defaultConfig","_ref2$localizationFol","_ref2$sourceLocale","sourceLocale","supportedLocales","_ref2$translationLoca","translationLocales","_ref2$exportType","exportType","_ref2$fillEmptyWithSo","fillEmptyWithSource","_ref2$json","json","process","argv","includes","_ref2$writeFile","writeFile","Error","localeData","compileLocaleData","generateJsonData","generateXlfData"],"sources":["lib/exportLocale/index.js"],"sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { forEach } from 'ramda';\n\nimport compileLocaleData from '../compileLocaleData';\nimport defaultConfig from '../defaultConfig';\nimport { generateJsonData, generateXlfData } from '../generateData';\n\nexport function writeData({ localizationFolder, data, ext }) {\n  fs.ensureDirSync(localizationFolder);\n  forEach((locale) => {\n    const fileName = path.resolve(localizationFolder, `${locale}.${ext}`);\n    fs.writeFileSync(\n      fileName,\n      ext === 'json' ? JSON.stringify(data[locale], null, 2) : data[locale],\n    );\n  }, Object.keys(data));\n}\n\n/**\n * Exports the locale data based on the provided options.\n *\n * by default, it will export the data in `xlf` format.\n *\n * if the --json flag is provided, it will export the data in `json` format.\n *\n * @param {Object} options - The options for exporting the locale data.\n * @param {string} [options.sourceFolder] - The source folder path.\n * @param {string} [options.localizationFolder] - The localization folder path.\n * @param {string} [options.sourceLocale] - The source locale.\n * @param {*} options.supportedLocales - The supported locales.\n * @param {*} [options.translationLocales] - The translation locales.\n * @param {string} [options.exportType='diff'] - The export type.\n * @param {boolean} [options.fillEmptyWithSource=true] - Whether to fill empty translations with the source text.\n * @param {boolean} [options.json] - Whether to export the data in JSON format.\n * @param {boolean} [options.writeFile=true] - Whether to write the data to a file.\n * @returns {Promise<string|Object>} - The exported data or a promise that resolves with the exported data.\n * @throws {Error} - If options.supportedLocales is missing.\n */\nexport default function exportLocale({\n  sourceFolder = defaultConfig.sourceFolder,\n  localizationFolder = defaultConfig.localizationFolder,\n  sourceLocale = defaultConfig.sourceLocale,\n  supportedLocales,\n  translationLocales = supportedLocales,\n  exportType = 'diff',\n  fillEmptyWithSource = true,\n  json = process.argv.includes('--json'),\n  writeFile = true,\n} = {}) {\n  if (!supportedLocales) {\n    throw new Error('options.supportedLocales is missing');\n  }\n  const localeData = compileLocaleData({\n    sourceFolder,\n    sourceLocale,\n    translationLocales,\n  });\n  const data = json\n    ? generateJsonData({\n        localeData,\n        sourceFolder,\n        sourceLocale,\n        translationLocales,\n      })\n    : generateXlfData({\n        localeData,\n        sourceFolder,\n        sourceLocale,\n        translationLocales,\n        exportType,\n        fillEmptyWithSource,\n      });\n  if (writeFile) {\n    return writeData({\n      data,\n      localizationFolder,\n      ext: json ? 'json' : 'xlf',\n    });\n  }\n  return data;\n}\n"],"mappings":"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","ignoreList":[]}