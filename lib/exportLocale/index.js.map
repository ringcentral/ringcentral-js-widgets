{"version":3,"sources":["lib/exportLocale/index.js"],"names":["writeData","localizationFolder","data","ext","fs","ensureDirSync","locale","fileName","path","resolve","writeFileSync","JSON","stringify","Object","keys","exportLocale","sourceFolder","defaultConfig","sourceLocale","supportedLocales","translationLocales","exportType","fillEmptyWithSource","json","writeFile","Error","localeData"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,SAASA,SAAT,OAAsD;AAAA,MAAjCC,kBAAiC,QAAjCA,kBAAiC;AAAA,MAAbC,IAAa,QAAbA,IAAa;AAAA,MAAPC,GAAO,QAAPA,GAAO;;AAC3DC,sBAAGC,aAAH,CAAiBJ,kBAAjB;;AACA,sBAAQ,UAACK,MAAD,EAAY;AAClB,QAAMC,QAAQ,GAAGC,iBAAKC,OAAL,CAAaR,kBAAb,YAAoCK,MAApC,cAA8CH,GAA9C,EAAjB;;AACAC,wBAAGM,aAAH,CACEH,QADF,EAEEJ,GAAG,KAAK,MAAR,GAAiBQ,IAAI,CAACC,SAAL,CAAeV,IAAI,CAACI,MAAD,CAAnB,EAA6B,IAA7B,EAAmC,CAAnC,CAAjB,GAAyDJ,IAAI,CAACI,MAAD,CAF/D;AAID,GAND,EAMGO,MAAM,CAACC,IAAP,CAAYZ,IAAZ,CANH;AAOD;;AAEc,SAASa,YAAT,GAUP;AAAA,kFAAJ,EAAI;AAAA,iCATNC,YASM;AAAA,MATNA,YASM,mCATSC,0BAAcD,YASvB;AAAA,oCARNf,kBAQM;AAAA,MARNA,kBAQM,sCARegB,0BAAchB,kBAQ7B;AAAA,iCAPNiB,YAOM;AAAA,MAPNA,YAOM,mCAPSD,0BAAcC,YAOvB;AAAA,MANNC,gBAMM,SANNA,gBAMM;AAAA,oCALNC,kBAKM;AAAA,MALNA,kBAKM,sCALeD,gBAKf;AAAA,+BAJNE,UAIM;AAAA,MAJNA,UAIM,iCAJO,MAIP;AAAA,oCAHNC,mBAGM;AAAA,MAHNA,mBAGM,sCAHgB,IAGhB;AAAA,yBAFNC,IAEM;AAAA,MAFNA,IAEM,2BAFC,KAED;AAAA,8BADNC,SACM;AAAA,MADNA,SACM,gCADM,IACN;;AACN,MAAI,CAACL,gBAAL,EAAuB;AACrB,UAAM,IAAIM,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,MAAMC,UAAU,GAAG,mCAAkB;AACnCV,IAAAA,YAAY,EAAZA,YADmC;AAEnCE,IAAAA,YAAY,EAAZA,YAFmC;AAGnCE,IAAAA,kBAAkB,EAAlBA;AAHmC,GAAlB,CAAnB;AAKA,MAAMlB,IAAI,GAAGqB,IAAI,GACb,oCAAiB;AACfG,IAAAA,UAAU,EAAVA,UADe;AAEfV,IAAAA,YAAY,EAAZA,YAFe;AAGfE,IAAAA,YAAY,EAAZA,YAHe;AAIfE,IAAAA,kBAAkB,EAAlBA;AAJe,GAAjB,CADa,GAOb,mCAAgB;AACdM,IAAAA,UAAU,EAAVA,UADc;AAEdV,IAAAA,YAAY,EAAZA,YAFc;AAGdE,IAAAA,YAAY,EAAZA,YAHc;AAIdE,IAAAA,kBAAkB,EAAlBA,kBAJc;AAKdC,IAAAA,UAAU,EAAVA,UALc;AAMdC,IAAAA,mBAAmB,EAAnBA;AANc,GAAhB,CAPJ;;AAeA,MAAIE,SAAJ,EAAe;AACb,WAAOxB,SAAS,CAAC;AACfE,MAAAA,IAAI,EAAJA,IADe;AAEfD,MAAAA,kBAAkB,EAAlBA,kBAFe;AAGfE,MAAAA,GAAG,EAAEoB,IAAI,GAAG,MAAH,GAAY;AAHN,KAAD,CAAhB;AAKD;;AACD,SAAOrB,IAAP;AACD","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { forEach } from 'ramda';\nimport compileLocaleData from '../compileLocaleData';\nimport defaultConfig from '../defaultConfig';\nimport { generateXlfData, generateJsonData } from '../generateData';\n\nexport function writeData({ localizationFolder, data, ext }) {\n  fs.ensureDirSync(localizationFolder);\n  forEach((locale) => {\n    const fileName = path.resolve(localizationFolder, `${locale}.${ext}`);\n    fs.writeFileSync(\n      fileName,\n      ext === 'json' ? JSON.stringify(data[locale], null, 2) : data[locale],\n    );\n  }, Object.keys(data));\n}\n\nexport default function exportLocale({\n  sourceFolder = defaultConfig.sourceFolder,\n  localizationFolder = defaultConfig.localizationFolder,\n  sourceLocale = defaultConfig.sourceLocale,\n  supportedLocales,\n  translationLocales = supportedLocales,\n  exportType = 'diff',\n  fillEmptyWithSource = true,\n  json = false,\n  writeFile = true,\n} = {}) {\n  if (!supportedLocales) {\n    throw new Error('options.supportedLocales is missing');\n  }\n  const localeData = compileLocaleData({\n    sourceFolder,\n    sourceLocale,\n    translationLocales,\n  });\n  const data = json\n    ? generateJsonData({\n        localeData,\n        sourceFolder,\n        sourceLocale,\n        translationLocales,\n      })\n    : generateXlfData({\n        localeData,\n        sourceFolder,\n        sourceLocale,\n        translationLocales,\n        exportType,\n        fillEmptyWithSource,\n      });\n  if (writeFile) {\n    return writeData({\n      data,\n      localizationFolder,\n      ext: json ? 'json' : 'xlf',\n    });\n  }\n  return data;\n}\n"],"file":"index.js"}