{"version":3,"file":"index.js","names":["formatTypes","local","international","e164","formatSameSiteExtension","currentSiteCode","extension","indexOf","regex","RegExp","replace","format","phoneNumber","countryCode","areaCode","siteCode","type","removeExtension","isMultipleSiteEnabled","extensionDelimeter","maxExtensionLength","parse","input","number","parsedCountry","parsedNumber","isExtension","isServiceNumber","isValid","hasPlus","countryCallingCode","isUSCA","finalType","getCountryCallingCode","formattedNumber","length","formatNumber"],"sources":["lib/format/index.js"],"sourcesContent":["import { formatNumber, getCountryCallingCode } from 'libphonenumber-js';\nimport parse from '../parse';\n\nconst formatTypes = {\n  local: 'local',\n  international: 'international',\n  e164: 'e164',\n};\n\nexport { formatTypes };\n\n/**\n * Given current account is enabled the multiple site, when number is the same with current account\n * then the number needs to be formatted.\n */\nexport const formatSameSiteExtension = ({\n  /**\n   * current user's site code\n   */\n  currentSiteCode = '',\n  /**\n   * extension number need to be format\n   */\n  extension = '',\n}) => {\n  if (\n    currentSiteCode === '' ||\n    !extension ||\n    extension.indexOf(currentSiteCode) !== 0\n  ) {\n    return extension;\n  }\n  const regex = new RegExp(`${currentSiteCode}0*`);\n  return extension.replace(regex, '') || '0';\n};\n\nexport default function format({\n  phoneNumber,\n  countryCode = 'US',\n  areaCode = '',\n  siteCode = '',\n  type = formatTypes.local,\n  removeExtension = false,\n  isMultipleSiteEnabled = false,\n  extensionDelimeter = ' * ',\n  maxExtensionLength = 6,\n}) {\n  const {\n    phoneNumber: number,\n    extension,\n    parsedCountry,\n    parsedNumber,\n    isExtension,\n    isServiceNumber,\n    isValid,\n    hasPlus,\n    countryCallingCode,\n  } = parse({ input: phoneNumber, countryCode, maxExtensionLength });\n\n  if (!isValid) {\n    return '';\n  }\n  if (isServiceNumber) {\n    return number;\n  }\n  if (isExtension) {\n    if (!isMultipleSiteEnabled) {\n      return number;\n    }\n    return formatSameSiteExtension({\n      currentSiteCode: siteCode,\n      extension: number,\n    });\n  }\n  const isUSCA = countryCode === 'CA' || countryCode === 'US';\n  let finalType;\n  if (type === formatTypes.e164) {\n    finalType = 'E.164';\n  } else if (type === formatTypes.international) {\n    finalType = 'International';\n  } else {\n    finalType =\n      // ignore US/CA difference\n      (isUSCA && (parsedCountry === 'US' || parsedCountry === 'CA')) ||\n      parsedCountry === countryCode ||\n      countryCallingCode === getCountryCallingCode(countryCode)\n        ? 'National'\n        : 'International';\n  }\n\n  let formattedNumber;\n  if (\n    !hasPlus &&\n    isUSCA &&\n    areaCode &&\n    areaCode !== '' &&\n    number.length === 7\n  ) {\n    formattedNumber = formatNumber(\n      `${areaCode}${number}`,\n      parsedCountry || countryCode,\n      finalType,\n    );\n  } else if (parsedNumber) {\n    formattedNumber = formatNumber(\n      parsedNumber,\n      parsedCountry || countryCode,\n      finalType,\n    );\n  } else if (!hasPlus) {\n    formattedNumber = formatNumber(number, countryCode, finalType);\n  } else {\n    formattedNumber = number;\n  }\n  return extension && !removeExtension\n    ? `${formattedNumber}${extensionDelimeter}${extension}`\n    : formattedNumber;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,WAAW,GAAG;EAClBC,KAAK,EAAE,OADW;EAElBC,aAAa,EAAE,eAFG;EAGlBC,IAAI,EAAE;AAHY,CAApB;;;AAQA;AACA;AACA;AACA;AACO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,OASjC;EAAA,gCALJC,eAKI;EAAA,IALJA,eAKI,qCALc,EAKd;EAAA,0BADJC,SACI;EAAA,IADJA,SACI,+BADQ,EACR;;EACJ,IACED,eAAe,KAAK,EAApB,IACA,CAACC,SADD,IAEAA,SAAS,CAACC,OAAV,CAAkBF,eAAlB,MAAuC,CAHzC,EAIE;IACA,OAAOC,SAAP;EACD;;EACD,IAAME,KAAK,GAAG,IAAIC,MAAJ,WAAcJ,eAAd,QAAd;EACA,OAAOC,SAAS,CAACI,OAAV,CAAkBF,KAAlB,EAAyB,EAAzB,KAAgC,GAAvC;AACD,CAnBM;;;;AAqBQ,SAASG,MAAT,QAUZ;EAAA,IATDC,WASC,SATDA,WASC;EAAA,8BARDC,WAQC;EAAA,IARDA,WAQC,kCARa,IAQb;EAAA,2BAPDC,QAOC;EAAA,IAPDA,QAOC,+BAPU,EAOV;EAAA,2BANDC,QAMC;EAAA,IANDA,QAMC,+BANU,EAMV;EAAA,uBALDC,IAKC;EAAA,IALDA,IAKC,2BALMhB,WAAW,CAACC,KAKlB;EAAA,kCAJDgB,eAIC;EAAA,IAJDA,eAIC,sCAJiB,KAIjB;EAAA,kCAHDC,qBAGC;EAAA,IAHDA,qBAGC,sCAHuB,KAGvB;EAAA,kCAFDC,kBAEC;EAAA,IAFDA,kBAEC,sCAFoB,KAEpB;EAAA,kCADDC,kBACC;EAAA,IADDA,kBACC,sCADoB,CACpB;;EAAA,aAWG,IAAAC,kBAAA,EAAM;IAAEC,KAAK,EAAEV,WAAT;IAAsBC,WAAW,EAAXA,WAAtB;IAAmCO,kBAAkB,EAAlBA;EAAnC,CAAN,CAXH;EAAA,IAEcG,MAFd,UAECX,WAFD;EAAA,IAGCN,SAHD,UAGCA,SAHD;EAAA,IAICkB,aAJD,UAICA,aAJD;EAAA,IAKCC,YALD,UAKCA,YALD;EAAA,IAMCC,WAND,UAMCA,WAND;EAAA,IAOCC,eAPD,UAOCA,eAPD;EAAA,IAQCC,OARD,UAQCA,OARD;EAAA,IASCC,OATD,UASCA,OATD;EAAA,IAUCC,kBAVD,UAUCA,kBAVD;;EAaD,IAAI,CAACF,OAAL,EAAc;IACZ,OAAO,EAAP;EACD;;EACD,IAAID,eAAJ,EAAqB;IACnB,OAAOJ,MAAP;EACD;;EACD,IAAIG,WAAJ,EAAiB;IACf,IAAI,CAACR,qBAAL,EAA4B;MAC1B,OAAOK,MAAP;IACD;;IACD,OAAOnB,uBAAuB,CAAC;MAC7BC,eAAe,EAAEU,QADY;MAE7BT,SAAS,EAAEiB;IAFkB,CAAD,CAA9B;EAID;;EACD,IAAMQ,MAAM,GAAGlB,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,IAAvD;EACA,IAAImB,SAAJ;;EACA,IAAIhB,IAAI,KAAKhB,WAAW,CAACG,IAAzB,EAA+B;IAC7B6B,SAAS,GAAG,OAAZ;EACD,CAFD,MAEO,IAAIhB,IAAI,KAAKhB,WAAW,CAACE,aAAzB,EAAwC;IAC7C8B,SAAS,GAAG,eAAZ;EACD,CAFM,MAEA;IACLA,SAAS,GACP;IACCD,MAAM,KAAKP,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,IAAjD,CAAP,IACAA,aAAa,KAAKX,WADlB,IAEAiB,kBAAkB,KAAK,IAAAG,uCAAA,EAAsBpB,WAAtB,CAFvB,GAGI,UAHJ,GAII,eANN;EAOD;;EAED,IAAIqB,eAAJ;;EACA,IACE,CAACL,OAAD,IACAE,MADA,IAEAjB,QAFA,IAGAA,QAAQ,KAAK,EAHb,IAIAS,MAAM,CAACY,MAAP,KAAkB,CALpB,EAME;IACAD,eAAe,GAAG,IAAAE,8BAAA,YACbtB,QADa,SACFS,MADE,GAEhBC,aAAa,IAAIX,WAFD,EAGhBmB,SAHgB,CAAlB;EAKD,CAZD,MAYO,IAAIP,YAAJ,EAAkB;IACvBS,eAAe,GAAG,IAAAE,8BAAA,EAChBX,YADgB,EAEhBD,aAAa,IAAIX,WAFD,EAGhBmB,SAHgB,CAAlB;EAKD,CANM,MAMA,IAAI,CAACH,OAAL,EAAc;IACnBK,eAAe,GAAG,IAAAE,8BAAA,EAAab,MAAb,EAAqBV,WAArB,EAAkCmB,SAAlC,CAAlB;EACD,CAFM,MAEA;IACLE,eAAe,GAAGX,MAAlB;EACD;;EACD,OAAOjB,SAAS,IAAI,CAACW,eAAd,aACAiB,eADA,SACkBf,kBADlB,SACuCb,SADvC,IAEH4B,eAFJ;AAGD"}