{"version":3,"file":"index.js","names":["_libphonenumberJs","require","_parse2","_interopRequireDefault","e","__esModule","formatTypes","local","international","e164","exports","formatSameSiteExtension","_ref","_ref$currentSiteCode","currentSiteCode","_ref$extension","extension","indexOf","regex","RegExp","concat","replace","ISOCode_US","ISOCode_CA","ISOCode_PR","isUSOrCAOrPR","countryCode","includes","format","_ref2","phoneNumber","_ref2$countryCode","_ref2$areaCode","areaCode","_ref2$siteCode","siteCode","_ref2$type","type","_ref2$removeExtension","removeExtension","_ref2$isMultipleSiteE","isMultipleSiteEnabled","_ref2$extensionDelimi","extensionDelimiter","_ref2$maxExtensionLen","maxExtensionLength","_ref2$isEDPEnabled","isEDPEnabled","_parse","parse","input","number","parsedCountry","parsedNumber","isExtension","isServiceNumber","isValid","hasPlus","countryCallingCode","finalType","getCountryCallingCode","formattedNumber","length","formatNumber"],"sources":["lib/format/index.ts"],"sourcesContent":["import { formatNumber, getCountryCallingCode } from 'libphonenumber-js';\nimport type {\n  CountryCode,\n  NumberFormat,\n  NationalNumber,\n} from 'libphonenumber-js';\n\nimport parse from '../parse';\nimport type { ParseResult } from '../parse/parse.interface';\n\nconst formatTypes = {\n  local: 'local',\n  international: 'international',\n  e164: 'e164',\n};\n\nexport { formatTypes };\n\n/**\n * Given current account is enabled the multiple site, when number is the same with current account\n * then the number needs to be formatted.\n */\nexport const formatSameSiteExtension = ({\n  /**\n   * current user's site code\n   */\n  currentSiteCode = '',\n  /**\n   * extension number need to be format\n   */\n  extension = '',\n}) => {\n  if (\n    currentSiteCode === '' ||\n    !extension ||\n    extension.indexOf(currentSiteCode) !== 0\n  ) {\n    return extension;\n  }\n  const regex = new RegExp(`${currentSiteCode}0*`);\n  return extension.replace(regex, '') || '0';\n};\n\nconst ISOCode_US = 'US';\nconst ISOCode_CA = 'CA';\nconst ISOCode_PR = 'PR';\n\n// US/CA/PR should be in the same phone area\nexport const isUSOrCAOrPR = (countryCode: CountryCode) =>\n  [ISOCode_US, ISOCode_CA, ISOCode_PR].includes(countryCode);\n\ntype PhoneNumberFormatType = {\n  phoneNumber: string;\n  countryCode?: CountryCode;\n  areaCode?: string;\n  siteCode?: string;\n  type?: (typeof formatTypes)[keyof typeof formatTypes];\n  removeExtension?: boolean;\n  isMultipleSiteEnabled?: boolean;\n  extensionDelimiter?: string;\n  maxExtensionLength?: number;\n  isEDPEnabled?: boolean;\n};\nexport default function format({\n  phoneNumber,\n  countryCode = 'US',\n  areaCode = '',\n  siteCode = '',\n  type = formatTypes.local,\n  removeExtension = false,\n  isMultipleSiteEnabled = false,\n  extensionDelimiter = ' * ',\n  maxExtensionLength = 6,\n  isEDPEnabled = false,\n}: PhoneNumberFormatType) {\n  const {\n    phoneNumber: number,\n    extension,\n    parsedCountry,\n    parsedNumber,\n    isExtension,\n    isServiceNumber,\n    isValid,\n    hasPlus,\n    countryCallingCode,\n  }: ParseResult = parse({\n    input: phoneNumber,\n    countryCode,\n    maxExtensionLength,\n  });\n\n  if (!isValid) {\n    return '';\n  }\n  if (isServiceNumber) {\n    return number;\n  }\n  if (isExtension) {\n    if (!isMultipleSiteEnabled) {\n      return number;\n    }\n    return formatSameSiteExtension({\n      currentSiteCode: siteCode,\n      extension: number as string,\n    });\n  }\n\n  let finalType: NumberFormat;\n  if (type === formatTypes.e164) {\n    finalType = 'E.164';\n  } else if (type === formatTypes.international) {\n    finalType = 'International';\n  } else {\n    finalType =\n      // parsedCountry is the country of phoneNumber country, countryCode is the country of caller\n      (isUSOrCAOrPR(countryCode) &&\n        isUSOrCAOrPR(parsedCountry as CountryCode)) ||\n      parsedCountry === countryCode ||\n      countryCallingCode === getCountryCallingCode(countryCode)\n        ? 'National'\n        : 'International';\n  }\n\n  let formattedNumber;\n  if (\n    !hasPlus &&\n    // for projects don't support EDP, only US/PR/CA will append areaCode for 7-digits number, details in RCINT-26493\n    isUSOrCAOrPR(countryCode) &&\n    !isEDPEnabled &&\n    areaCode &&\n    areaCode !== '' &&\n    number?.length === 7\n  ) {\n    formattedNumber = formatNumber(\n      `${areaCode}${number}` as NationalNumber,\n      (parsedCountry || countryCode) as CountryCode,\n      finalType,\n    );\n  } else if (parsedNumber) {\n    formattedNumber = formatNumber(\n      parsedNumber as NationalNumber,\n      (parsedCountry || countryCode) as CountryCode,\n      finalType,\n    );\n  } else if (!hasPlus) {\n    formattedNumber = formatNumber(\n      number as NationalNumber,\n      countryCode,\n      finalType,\n    );\n  } else {\n    formattedNumber = number;\n  }\n  return extension && !removeExtension\n    ? `${formattedNumber}${extensionDelimiter}${extension}`\n    : formattedNumber;\n}\n"],"mappings":"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","ignoreList":[]}