{"version":3,"sources":["lib/format/index.js"],"names":["formatTypes","local","international","e164","formatSameSiteExtension","currentSiteCode","extension","indexOf","regex","RegExp","replace","format","phoneNumber","countryCode","areaCode","siteCode","type","removeExtension","isMultipleSiteEnabled","extensionDelimeter","input","number","parsedCountry","parsedNumber","isExtension","isServiceNumber","isValid","hasPlus","isUSCA","finalType","formattedNumber","length"],"mappings":"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","sourcesContent":["import { formatNumber } from 'libphonenumber-js';\nimport parse from '../parse';\n\nconst formatTypes = {\n  local: 'local',\n  international: 'international',\n  e164: 'e164',\n};\n\nexport { formatTypes };\n\n/**\n * Given current account is enabled the multiple site, when number is the same with current account\n * then the number needs to be formatted.\n */\nexport const formatSameSiteExtension = ({\n  /**\n   * current user's site code\n   */\n  currentSiteCode = '',\n  /**\n   * extension number need to be format\n   */\n  extension = '',\n}) => {\n  if (\n    currentSiteCode === '' ||\n    !extension ||\n    extension.indexOf(currentSiteCode) !== 0\n  ) {\n    return extension;\n  }\n  const regex = new RegExp(`${currentSiteCode}0*`);\n  return extension.replace(regex, '') || '0';\n};\n\nexport default function format({\n  phoneNumber,\n  countryCode = 'US',\n  areaCode = '',\n  siteCode = '',\n  type = formatTypes.local,\n  removeExtension = false,\n  isMultipleSiteEnabled = false,\n  extensionDelimeter = ' * ',\n}) {\n  const {\n    phoneNumber: number,\n    extension,\n    parsedCountry,\n    parsedNumber,\n    isExtension,\n    isServiceNumber,\n    isValid,\n    hasPlus,\n  } = parse({ input: phoneNumber, countryCode });\n\n  if (!isValid) {\n    return '';\n  }\n  if (isServiceNumber) {\n    return number;\n  }\n  if (isExtension) {\n    if (!isMultipleSiteEnabled) {\n      return number;\n    }\n    return formatSameSiteExtension({\n      currentSiteCode: siteCode,\n      extension: number,\n    });\n  }\n  const isUSCA = countryCode === 'CA' || countryCode === 'US';\n  let finalType;\n  if (type === formatTypes.e164) {\n    finalType = 'E.164';\n  } else if (type === formatTypes.international) {\n    finalType = 'International';\n  } else {\n    finalType =\n      // assume local\n      !parsedCountry ||\n      // ignore US/CA difference\n      (isUSCA && (parsedCountry === 'US' || parsedCountry === 'CA')) ||\n      parsedCountry === countryCode\n        ? 'National'\n        : 'International';\n  }\n\n  let formattedNumber;\n  if (\n    !hasPlus &&\n    isUSCA &&\n    areaCode &&\n    areaCode !== '' &&\n    number.length === 7\n  ) {\n    formattedNumber = formatNumber(\n      `${areaCode}${number}`,\n      parsedCountry || countryCode,\n      finalType,\n    );\n  } else if (parsedNumber) {\n    formattedNumber = formatNumber(\n      parsedNumber,\n      parsedCountry || countryCode,\n      finalType,\n    );\n  } else if (!hasPlus) {\n    formattedNumber = formatNumber(number, countryCode, finalType);\n  } else {\n    formattedNumber = number;\n  }\n  return extension && !removeExtension\n    ? `${formattedNumber}${extensionDelimeter}${extension}`\n    : formattedNumber;\n}\n"],"file":"index.js"}