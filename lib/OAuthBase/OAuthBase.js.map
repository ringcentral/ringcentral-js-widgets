{"version":3,"sources":["lib/OAuthBase/OAuthBase.ts"],"names":["DEFAULT_UI_OPTIONS","OAuthBase","deps","dep","optional","_redirectUri","Error","val","oAuthReady","callbackUri","refresh","query","_refreshWithCallbackQuery","_loginWithCallbackQuery","console","error","message","authMessages","accessDenied","internalError","_deps","alert","danger","payload","code","access_token","auth","login","accessToken","expiresIn","expires_in","endpointId","endpoint_id","redirectUri","tokenType","token_type","scope","tokenUri","token_uri","discoveryUri","discovery_uri","refreshImplicitToken","oAuthOptions","uiOptions","getLoginUrl","brandId","brand","id","state","authState","display","localeId","locale","currentLocale","_uiOptions","implicit","isImplicit","force","prompt","btoa","Date","now","url","resolve","window","location","href","RcModuleV2","action","required","proxify"],"mappings":"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","sourcesContent":["import url from 'url';\n\nimport { Module } from '@ringcentral-integration/commons/lib/di';\nimport proxify from '@ringcentral-integration/commons/lib/proxy/proxify';\nimport required from '@ringcentral-integration/commons/lib/required';\nimport authMessages from '@ringcentral-integration/commons/modules/Auth/authMessages';\nimport { action, RcModuleV2, state } from '@ringcentral-integration/core';\n\nimport parseCallbackUri from '../parseCallbackUri';\nimport { Deps } from './OAuthBase.interface';\n\nconst DEFAULT_UI_OPTIONS = ['hide_remember_me', 'hide_tos'];\n\ntype RefreshWithCallbackQueryParams = {\n  access_token?: string;\n  token_type?: string;\n  expires_in?: number;\n  endpoint_id?: string;\n  code?: string;\n  scope?: string;\n  token_uri?: string;\n  discovery_uri?: string;\n};\n\n@Module({\n  deps: [\n    'Auth',\n    'Alert',\n    'Locale',\n    'Brand',\n    { dep: 'TabManager', optional: true },\n    { dep: 'OAuthOptions', optional: true },\n  ],\n})\nexport class OAuthBase<T extends Deps = Deps> extends RcModuleV2<T> {\n  constructor(deps: T) {\n    super({\n      deps,\n    });\n\n    if (!this._redirectUri) {\n      throw new Error('redirectUri is required');\n    }\n  }\n\n  @state\n  oAuthReady: boolean = false;\n\n  @action\n  setOAuthReady(val: boolean) {\n    this.oAuthReady = val;\n  }\n\n  @required\n  get name(): string {\n    /* require implementation in descendent */\n    return null;\n  }\n\n  @proxify\n  protected async _handleCallbackUri(callbackUri: string, refresh = false) {\n    try {\n      const query = parseCallbackUri(callbackUri);\n      if (refresh) {\n        await this._refreshWithCallbackQuery(query);\n      } else {\n        await this._loginWithCallbackQuery(query);\n      }\n    } catch (error: any) {\n      console.error('oauth error: ', error);\n      let message;\n      // Error handling standard in callback uri\n      // https://openid.net/specs/openid-connect-core-1_0.html#AuthError\n      // Error handling standard in api response\n      // https://tools.ietf.org/html/rfc6749#section-4.1.2\n      switch (error.message) {\n        case 'invalid_request':\n        case 'unauthorized_client':\n        case 'access_denied':\n        case 'unsupported_response_type':\n        case 'invalid_scope':\n        case 'interaction_required':\n        case 'login_required':\n          message = authMessages.accessDenied;\n          break;\n        case 'server_error':\n        case 'temporarily_unavailable':\n        default:\n          message = authMessages.internalError;\n          break;\n      }\n      this._deps.alert.danger({\n        message,\n        payload: error,\n      });\n    }\n  }\n\n  protected async _loginWithCallbackQuery(\n    query: RefreshWithCallbackQueryParams,\n  ) {\n    if (!(query.code || query.access_token)) {\n      return;\n    }\n    await this._deps.auth.login({\n      code: query.code,\n      accessToken: query.access_token,\n      expiresIn: query.expires_in,\n      endpointId: query.endpoint_id,\n      redirectUri: this.redirectUri,\n      tokenType: query.token_type,\n      scope: query.scope,\n      tokenUri: query.token_uri,\n      discoveryUri: query.discovery_uri,\n    });\n  }\n\n  protected async _refreshWithCallbackQuery(\n    query: RefreshWithCallbackQueryParams,\n  ) {\n    if (!query.access_token) {\n      return;\n    }\n    await this._deps.auth.refreshImplicitToken({\n      tokenType: query.token_type,\n      accessToken: query.access_token,\n      expiresIn: query.expires_in,\n      endpointId: query.endpoint_id,\n    });\n  }\n\n  protected get _redirectUri() {\n    return this._deps.oAuthOptions?.redirectUri;\n  }\n\n  protected get _uiOptions() {\n    return this._deps.oAuthOptions?.uiOptions || DEFAULT_UI_OPTIONS;\n  }\n\n  @required\n  async destroyOAuth() {}\n\n  @required\n  async openOAuthPage() {}\n\n  get oAuthUri() {\n    return this._deps.auth.getLoginUrl({\n      redirectUri: this.redirectUri,\n      brandId: this._deps.brand.id,\n      state: this.authState,\n      display: 'page',\n      localeId: this._deps.locale.currentLocale,\n      uiOptions: this._uiOptions,\n      implicit: this._deps.auth.isImplicit,\n      force: true,\n    });\n  }\n\n  get implicitRefreshOAuthUri() {\n    return this._deps.auth.getLoginUrl({\n      redirectUri: this.redirectUri,\n      brandId: this._deps.brand.id,\n      state: this.authState,\n      display: 'page',\n      prompt: 'none',\n      implicit: this._deps.auth.isImplicit,\n    });\n  }\n\n  get authState() {\n    return btoa(`${Date.now()}`);\n  }\n\n  get redirectUri() {\n    return url.resolve(window.location.href, this._redirectUri);\n  }\n}\n"],"file":"OAuthBase.js"}