{"version":3,"sources":["lib/parseCallbackUri.ts"],"names":["parseCallbackUri","callbackUri","url","parse","query","error","Error","key","Object","prototype","hasOwnProperty","call","code"],"mappings":";;;;;;;;;AAAA;;;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,gBAAT,CAA0BC,WAA1B,EAAuC;AAAA,mBAClCC,gBAAIC,KAAJ,CAAUF,WAAV,EAAuB,IAAvB,CADkC;AAAA,MAC5CG,KAD4C,cAC5CA,KAD4C;;AAEpD,MAAIA,KAAK,CAACC,KAAV,EAAiB;AACf,QAAMA,KAAK,GAAG,IAAIC,KAAJ,CAAUF,KAAK,CAACC,KAAhB,CAAd;;AACA,SAAK,IAAME,GAAX,IAAkBH,KAAlB,EAAyB;AACvB,UAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,KAArC,EAA4CG,GAA5C,CAAJ,EAAsD;AACpDF,QAAAA,KAAK,CAACE,GAAD,CAAL,GAAaH,KAAK,CAACG,GAAD,CAAlB;AACD;AACF;;AACD,UAAMF,KAAN;AACD;;AACD,SAAOD,KAAK,CAACQ,IAAb;AACD","sourcesContent":["import url from 'url';\n\n/**\n * @function\n * @param {String} callbackUri\n * @return {String} code\n */\nexport default function parseCallbackUri(callbackUri) {\n  const { query } = url.parse(callbackUri, true);\n  if (query.error) {\n    const error = new Error(query.error);\n    for (const key in query) {\n      if (Object.prototype.hasOwnProperty.call(query, key)) {\n        error[key] = query[key];\n      }\n    }\n    throw error;\n  }\n  return query.code;\n}\n"],"file":"parseCallbackUri.js"}