{"version":3,"sources":["lib/validateNumbers.ts"],"names":["numberParser","phoneNumbers","countryCode","areaCode","normalizedNumbers","map","phoneNumber","numberFormat","allowRegionSettings","errors","input","push","type","result","length","validateNumbers","formattedResult","forEach","error","parsedResult"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,SAASA,YAAT,OAQG;AAAA,MAPDC,YAOC,QAPDA,YAOC;AAAA,MANDC,WAMC,QANDA,WAMC;AAAA,MALDC,QAKC,QALDA,QAKC;AACD,MAAMC,iBAAiB,GAAGH,YAAY,CAACI,GAAb,CAAiB,UAACC,WAAD;AAAA,WACzC,sCAAgB;AAAEA,MAAAA,WAAW,EAAXA,WAAF;AAAeJ,MAAAA,WAAW,EAAXA,WAAf;AAA4BC,MAAAA,QAAQ,EAARA;AAA5B,KAAhB,CADyC;AAAA,GAAjB,CAA1B;AAGA,SAAOC,iBAAP;AACD;;AAED,SAASG,YAAT,QAUG;AAAA,MATDN,YASC,SATDA,YASC;AAAA,MARDC,WAQC,SARDA,WAQC;AAAA,MAPDC,QAOC,SAPDA,QAOC;AAAA,MANDK,mBAMC,SANDA,mBAMC;AACD,MAAMC,MAA+C,GAAG,EAAxD;AACAR,EAAAA,YAAY,CAACI,GAAb,CAAiB,UAACC,WAAD,EAAiB;AAChC,QAAI,CAAC,kCAAc;AAAEI,MAAAA,KAAK,EAAEJ,WAAT;AAAsBJ,MAAAA,WAAW,EAAXA;AAAtB,KAAd,CAAL,EAAyD;AACvDO,MAAAA,MAAM,CAACE,IAAP,CAAY;AAAEL,QAAAA,WAAW,EAAXA,WAAF;AAAeM,QAAAA,IAAI,EAAE;AAArB,OAAZ;AACA,aAAO,IAAP;AACD;;AACD,QACEJ,mBAAmB,IACnB,kCAAc;AACZE,MAAAA,KAAK,EAAEJ,WADK;AAEZH,MAAAA,QAAQ,EAARA,QAFY;AAGZD,MAAAA,WAAW,EAAXA;AAHY,KAAd,CAFF,EAOE;AACAO,MAAAA,MAAM,CAACE,IAAP,CAAY;AAAEL,QAAAA,WAAW,EAAXA,WAAF;AAAeM,QAAAA,IAAI,EAAE;AAArB,OAAZ;AACD;;AACD,WAAO,IAAP;AACD,GAhBD;AAiBA,SAAO;AACLC,IAAAA,MAAM,EAAEJ,MAAM,CAACK,MAAP,KAAkB,CADrB;AAELL,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID;;AAEM,SAASM,eAAT,QAUJ;AAAA,MATDd,YASC,SATDA,YASC;AAAA,MARDC,WAQC,SARDA,WAQC;AAAA,MAPDC,QAOC,SAPDA,QAOC;AAAA,MANDK,mBAMC,SANDA,mBAMC;AACD,MAAMQ,eAAe,GAAGT,YAAY,CAAC;AACnCN,IAAAA,YAAY,EAAZA,YADmC;AAEnCC,IAAAA,WAAW,EAAXA,WAFmC;AAGnCC,IAAAA,QAAQ,EAARA,QAHmC;AAInCK,IAAAA,mBAAmB,EAAnBA;AAJmC,GAAD,CAApC;;AAMA,MAAI,CAACQ,eAAe,CAACH,MAArB,EAA6B;AAC3BG,IAAAA,eAAe,CAACP,MAAhB,CAAuBQ,OAAvB,CAA+B,UAACC,KAAD,EAAW;AACxC,YAAMA,KAAN;AACD,KAFD;AAGA,WAAOF,eAAP;AACD;;AACD,MAAMG,YAAY,GAAGnB,YAAY,CAAC;AAChCC,IAAAA,YAAY,EAAZA,YADgC;AAEhCC,IAAAA,WAAW,EAAXA,WAFgC;AAGhCC,IAAAA,QAAQ,EAARA;AAHgC,GAAD,CAAjC;AAKA,SAAOgB,YAAP;AACD","sourcesContent":["import { hasNoAreaCode } from './hasNoAreaCode';\nimport { isValidNumber } from './isValidNumber';\nimport { normalizeNumber } from './normalizeNumber';\n\nfunction numberParser({\n  phoneNumbers,\n  countryCode,\n  areaCode,\n}: {\n  phoneNumbers: string[];\n  countryCode: string;\n  areaCode: string;\n}) {\n  const normalizedNumbers = phoneNumbers.map((phoneNumber) =>\n    normalizeNumber({ phoneNumber, countryCode, areaCode }),\n  );\n  return normalizedNumbers;\n}\n\nfunction numberFormat({\n  phoneNumbers,\n  countryCode,\n  areaCode,\n  allowRegionSettings,\n}: {\n  phoneNumbers: string[];\n  countryCode: string;\n  areaCode: string;\n  allowRegionSettings: boolean;\n}) {\n  const errors: { phoneNumber: string; type: string }[] = [];\n  phoneNumbers.map((phoneNumber) => {\n    if (!isValidNumber({ input: phoneNumber, countryCode })) {\n      errors.push({ phoneNumber, type: 'noToNumber' });\n      return null;\n    }\n    if (\n      allowRegionSettings &&\n      hasNoAreaCode({\n        input: phoneNumber,\n        areaCode,\n        countryCode,\n      })\n    ) {\n      errors.push({ phoneNumber, type: 'noAreaCode' });\n    }\n    return null;\n  });\n  return {\n    result: errors.length === 0,\n    errors,\n  };\n}\n\nexport function validateNumbers({\n  phoneNumbers,\n  countryCode,\n  areaCode,\n  allowRegionSettings,\n}: {\n  phoneNumbers: string[];\n  countryCode: string;\n  areaCode: string;\n  allowRegionSettings: boolean;\n}) {\n  const formattedResult = numberFormat({\n    phoneNumbers,\n    countryCode,\n    areaCode,\n    allowRegionSettings,\n  });\n  if (!formattedResult.result) {\n    formattedResult.errors.forEach((error) => {\n      throw error;\n    });\n    return formattedResult;\n  }\n  const parsedResult = numberParser({\n    phoneNumbers,\n    countryCode,\n    areaCode,\n  });\n  return parsedResult;\n}\n"],"file":"validateNumbers.js"}