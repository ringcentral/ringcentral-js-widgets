{"version":3,"file":"validateNumbers.js","names":["_hasNoAreaCode","require","_isValidNumber","_normalizeNumber","numberParser","_ref","phoneNumbers","countryCode","areaCode","normalizedNumbers","map","phoneNumber","normalizeNumber","numberFormat","_ref2","allowRegionSettings","errors","forEach","isValidNumber","input","push","type","hasNoAreaCode","result","length","validateNumbers","_ref3","formattedResult","error","parsedResult"],"sources":["lib/validateNumbers.ts"],"sourcesContent":["import type { CountryCode } from '@ringcentral-integration/phone-number';\n\nimport { hasNoAreaCode } from './hasNoAreaCode';\nimport { isValidNumber } from './isValidNumber';\nimport { normalizeNumber } from './normalizeNumber';\n\nfunction numberParser({\n  phoneNumbers,\n  countryCode,\n  areaCode,\n}: {\n  phoneNumbers: string[];\n  countryCode: string;\n  areaCode: string;\n}) {\n  const normalizedNumbers = phoneNumbers.map((phoneNumber) =>\n    normalizeNumber({ phoneNumber, countryCode, areaCode }),\n  );\n  return normalizedNumbers;\n}\n\nfunction numberFormat({\n  phoneNumbers,\n  countryCode,\n  areaCode,\n  allowRegionSettings,\n}: {\n  phoneNumbers: string[];\n  countryCode: CountryCode;\n  areaCode: string;\n  allowRegionSettings: boolean;\n}) {\n  const errors: { phoneNumber: string; type: string }[] = [];\n  phoneNumbers.forEach((phoneNumber) => {\n    if (!isValidNumber({ input: phoneNumber, countryCode })) {\n      errors.push({ phoneNumber, type: 'noToNumber' });\n      return;\n    }\n    if (\n      allowRegionSettings &&\n      hasNoAreaCode({\n        input: phoneNumber,\n        areaCode,\n        countryCode,\n      })\n    ) {\n      errors.push({ phoneNumber, type: 'noAreaCode' });\n    }\n  });\n  return {\n    result: errors.length === 0,\n    errors,\n  };\n}\n\ntype ValidateNumbersParams = {\n  phoneNumbers: string[];\n  countryCode: CountryCode;\n  areaCode: string;\n  allowRegionSettings: boolean;\n};\n\nexport function validateNumbers({\n  phoneNumbers,\n  countryCode,\n  areaCode,\n  allowRegionSettings,\n}: ValidateNumbersParams) {\n  const formattedResult = numberFormat({\n    phoneNumbers,\n    countryCode,\n    areaCode,\n    allowRegionSettings,\n  });\n  if (!formattedResult.result) {\n    const error = formattedResult.errors[0];\n    throw error;\n  }\n  const parsedResult = numberParser({\n    phoneNumbers,\n    countryCode,\n    areaCode,\n  });\n  return parsedResult;\n}\n"],"mappings":";;;;;;;;;AAEA,IAAAA,cAAA,GAAAC,OAAA;AACA,IAAAC,cAAA,GAAAD,OAAA;AACA,IAAAE,gBAAA,GAAAF,OAAA;AAEA,SAASG,YAAYA,CAAAC,IAAA,EAQlB;EAAA,IAPDC,YAAY,GAAAD,IAAA,CAAZC,YAAY;IACZC,WAAW,GAAAF,IAAA,CAAXE,WAAW;IACXC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EAMR,IAAMC,iBAAiB,GAAGH,YAAY,CAACI,GAAG,CAAC,UAACC,WAAW;IAAA,OACrD,IAAAC,gCAAe,EAAC;MAAED,WAAW,EAAXA,WAAW;MAAEJ,WAAW,EAAXA,WAAW;MAAEC,QAAQ,EAARA;IAAS,CAAC,CAAC;EAAA,CACzD,CAAC;EACD,OAAOC,iBAAiB;AAC1B;AAEA,SAASI,YAAYA,CAAAC,KAAA,EAUlB;EAAA,IATDR,YAAY,GAAAQ,KAAA,CAAZR,YAAY;IACZC,WAAW,GAAAO,KAAA,CAAXP,WAAW;IACXC,QAAQ,GAAAM,KAAA,CAARN,QAAQ;IACRO,mBAAmB,GAAAD,KAAA,CAAnBC,mBAAmB;EAOnB,IAAMC,MAA+C,GAAG,EAAE;EAC1DV,YAAY,CAACW,OAAO,CAAC,UAACN,WAAW,EAAK;IACpC,IAAI,CAAC,IAAAO,4BAAa,EAAC;MAAEC,KAAK,EAAER,WAAW;MAAEJ,WAAW,EAAXA;IAAY,CAAC,CAAC,EAAE;MACvDS,MAAM,CAACI,IAAI,CAAC;QAAET,WAAW,EAAXA,WAAW;QAAEU,IAAI,EAAE;MAAa,CAAC,CAAC;MAChD;IACF;IACA,IACEN,mBAAmB,IACnB,IAAAO,4BAAa,EAAC;MACZH,KAAK,EAAER,WAAW;MAClBH,QAAQ,EAARA,QAAQ;MACRD,WAAW,EAAXA;IACF,CAAC,CAAC,EACF;MACAS,MAAM,CAACI,IAAI,CAAC;QAAET,WAAW,EAAXA,WAAW;QAAEU,IAAI,EAAE;MAAa,CAAC,CAAC;IAClD;EACF,CAAC,CAAC;EACF,OAAO;IACLE,MAAM,EAAEP,MAAM,CAACQ,MAAM,KAAK,CAAC;IAC3BR,MAAM,EAANA;EACF,CAAC;AACH;AASO,SAASS,eAAeA,CAAAC,KAAA,EAKL;EAAA,IAJxBpB,YAAY,GAAAoB,KAAA,CAAZpB,YAAY;IACZC,WAAW,GAAAmB,KAAA,CAAXnB,WAAW;IACXC,QAAQ,GAAAkB,KAAA,CAARlB,QAAQ;IACRO,mBAAmB,GAAAW,KAAA,CAAnBX,mBAAmB;EAEnB,IAAMY,eAAe,GAAGd,YAAY,CAAC;IACnCP,YAAY,EAAZA,YAAY;IACZC,WAAW,EAAXA,WAAW;IACXC,QAAQ,EAARA,QAAQ;IACRO,mBAAmB,EAAnBA;EACF,CAAC,CAAC;EACF,IAAI,CAACY,eAAe,CAACJ,MAAM,EAAE;IAC3B,IAAMK,KAAK,GAAGD,eAAe,CAACX,MAAM,CAAC,CAAC,CAAC;IACvC,MAAMY,KAAK;EACb;EACA,IAAMC,YAAY,GAAGzB,YAAY,CAAC;IAChCE,YAAY,EAAZA,YAAY;IACZC,WAAW,EAAXA,WAAW;IACXC,QAAQ,EAARA;EACF,CAAC,CAAC;EACF,OAAOqB,YAAY;AACrB","ignoreList":[]}