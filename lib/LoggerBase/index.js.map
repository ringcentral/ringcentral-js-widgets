{"version":3,"sources":["lib/LoggerBase/index.ts"],"names":["defaultIdentityFunction","item","id","convertListToMap","loggingList","mapping","forEach","LoggerBase","deps","dep","optional","name","actionTypes","ObjectMap","prefixKeys","keys","baseActionTypes","getReducer","getDefaultReducer","identityFunction","logFunction","readyCheckFunction","options","_name","ensureExist","call","_identityFunction","_logFunction","_readyCheckFunction","_reducer","_logPromises","Map","store","subscribe","_onStateChange","pending","ready","_shouldInit","dispatch","type","init","_onInit","initSuccess","_shouldReset","reset","_onReset","resetSuccess","Error","constructor","has","get","log","promise","set","logSuccess","logError","error","_log","state","status","RcModule","proxify","selector"],"mappings":"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","sourcesContent":["import { ObjectMap } from '@ringcentral-integration/core/lib/ObjectMap';\n\nimport { Library } from '../di';\nimport ensureExist from '../ensureExist';\nimport proxify from '../proxy/proxify';\nimport RcModule from '../RcModule';\nimport { selector } from '../selector';\nimport { baseActionTypes } from './baseActionTypes';\nimport getDefaultReducer from './getDefaultReducer';\n\n/**\n * @function defaultIdentityFunction\n * @description Identity function returns a deterministic id value for each item.\n * @param {Object} item\n * @return {String}\n */\nexport function defaultIdentityFunction(item) {\n  return item.id;\n}\n\n/**\n * @function\n * @description Convert array of { name, id } objects into a map.\n * @param {[{ name: String, id: String }]} loggingList\n * @return {{ [ids]: { [names]: true } }}\n */\nexport function convertListToMap(loggingList) {\n  const mapping = {};\n  loggingList.forEach((id) => {\n    mapping[id] = true;\n  });\n  return mapping;\n}\n\n/**\n * @class\n * @description Base class implementation for loggers.\n */\n@Library({\n  deps: [{ dep: 'LoggerBaseOptions', optional: true }],\n})\nexport default class LoggerBase extends RcModule {\n  /**\n   * @constructor\n   * @param {String} params.name - name of the class\n   * @param {Object} params.actionTypes\n   * @param {Function} params.getReducer\n   * @param {Function} params.identityFunction - function that can derive an unique\n   *    id from items.\n   */\n  constructor({\n    name,\n    actionTypes = ObjectMap.prefixKeys(\n      [...ObjectMap.keys(baseActionTypes)],\n      name,\n    ),\n    getReducer = getDefaultReducer,\n    identityFunction = defaultIdentityFunction,\n    logFunction,\n    readyCheckFunction,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._name = ensureExist.call(this, name, 'name');\n    this._identityFunction = ensureExist.call(\n      this,\n      identityFunction,\n      'identityFunction',\n    );\n    this._logFunction = ensureExist.call(this, logFunction, 'logFunction');\n    this._readyCheckFunction = ensureExist.call(\n      this,\n      readyCheckFunction,\n      'readyCheckFunction',\n    );\n\n    this._reducer = getReducer(this.actionTypes);\n\n    this._logPromises = new Map();\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _shouldInit() {\n    return this.pending && this._readyCheckFunction();\n  }\n\n  _shouldReset() {\n    return this.ready && !this._readyCheckFunction();\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (typeof this._onInit === 'function') {\n        await this._onInit();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      if (typeof this._onReset === 'function') {\n        await this._onReset();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  @proxify\n  async _log({ item, ...options } = {}) {\n    if (!this.ready) {\n      throw new Error(`${this.constructor.name}._log: module is not ready.`);\n    }\n    if (!item) {\n      throw new Error(\n        `${this.constructor.name}._log: options.item is undefined.`,\n      );\n    }\n\n    const id = this._identityFunction(item);\n    // wait for the previous log action to finish\n    if (this._logPromises.has(id)) {\n      await this._logPromises.get(id);\n    }\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.log,\n        id,\n      });\n      const promise = this._logFunction({ item, ...options });\n      this._logPromises.set(id, promise);\n      await promise;\n      this._logPromises.delete(id);\n      this.store.dispatch({\n        type: this.actionTypes.logSuccess,\n        id,\n      });\n    } catch (error) {\n      this._logPromises.delete(id);\n      this.store.dispatch({\n        type: this.actionTypes.logError,\n        error,\n        id,\n      });\n      throw error;\n    }\n  }\n\n  @proxify\n  async log({ item, ...options }) {\n    if (!this.ready) {\n      throw new Error(`${this.constructor.name}.log: module is not ready.`);\n    }\n    if (!item) {\n      throw new Error(\n        `${this.constructor.name}.log: options.item is undefined.`,\n      );\n    }\n    await this._log({ item, ...options });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get loggingList() {\n    return this.state.loggingList;\n  }\n\n  @selector\n  loggingMap = [() => this.loggingList, convertListToMap];\n}\n"],"file":"index.js"}