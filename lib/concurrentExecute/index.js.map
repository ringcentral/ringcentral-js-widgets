{"version":3,"file":"index.js","names":["_utils","require","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","concurrentExecute","_x","_x2","_concurrentExecute","regeneratorRuntime","mark","_callee2","promiseFnThunks","concurrency","options","delay","totalThunk","finalResults","_args2","wrap","_callee2$","_context2","prev","next","abrupt","process","env","NODE_ENV","Error","polling","_callee","promiseFnThunksBatch","result","_callee$","_context","splice","all","map","promiseFnThunk","sent","concat","stop"],"sources":["lib/concurrentExecute/index.ts"],"sourcesContent":["import { polling } from '@ringcentral-integration/utils';\n\nexport type ConcurrentExecuteOptions = {\n  /**\n   * delay between each thunk `Promise.all` execution\n   */\n  delay?: number;\n  // TODO: implement that for export result with fail item after Promise.allSettled\n  /**\n   * onFinalize callback\n   */\n  //  onFinalize\n};\n\n// type all<T extends readonly unknown[] | []>(values: T): ;\n/**\n * Provide you to control the concurrency and delay of your `Promise.all` execution.\n * @param options Specify your own delay function and custom promise instance\n *\n * @example\n * ```\n * const result = await concurrentExecute(\n *   [\n *     () => Promise.resolve('123' as const),\n *     () => Promise.resolve(1),\n *     () => Promise.resolve('456'),\n *     () => Promise.resolve(2),\n *     () => Promise.resolve('789'),\n *   ],\n *   2, // in that example that will split into 3 `Promise.all` executions, run each thunk one by one\n *   {\n *      delay: 100, // that will be delay 100ms between each thunk `Promise.all` execution\n *   }\n * );\n *\n * console.log(a); // [ '123', 1, '456', 2, '789' ]\n * ```\n */\nexport default async function concurrentExecute<\n  T extends (() => unknown)[] | [],\n>(\n  /**\n   * A set of thunk functions of Promise\n   */\n  promiseFnThunks: T,\n  /**\n   * concurrency Concurrent granularity\n   */\n  concurrency: number,\n  /**\n   * custom options\n   */\n  options: ConcurrentExecuteOptions = {},\n): Promise<{\n  [P in keyof T]: Awaited<T[P] extends () => infer R ? R : any>;\n}> {\n  const { delay } = options;\n\n  if (!Array.isArray(promiseFnThunks) || promiseFnThunks.length <= 0) {\n    return [] as any;\n  }\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    typeof promiseFnThunks[0] !== 'function'\n  ) {\n    throw new Error('concurrentExecute needs promise thunk');\n  }\n\n  let totalThunk = promiseFnThunks.length;\n\n  let finalResults: any = [];\n\n  await polling(async () => {\n    const promiseFnThunksBatch = promiseFnThunks.splice(0, concurrency);\n\n    // TODO: should switch to Promise.allSettled\n    // TODO: if any one error, should still keep all the results and output error items\n    const result = await Promise.all(\n      promiseFnThunksBatch.map((promiseFnThunk) => promiseFnThunk()),\n    );\n\n    finalResults = [...finalResults, ...result];\n\n    totalThunk -= result.length;\n\n    // when all thunks are executed, leave polling\n    return totalThunk <= 0;\n  }, delay);\n\n  return finalResults;\n}\n"],"mappings":"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"}