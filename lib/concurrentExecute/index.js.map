{"version":3,"file":"index.js","names":["_utils","require","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","Symbol","iterator","isArray","length","e","n","asyncGeneratorStep","o","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","concurrentExecute","_x","_x2","_concurrentExecute","regeneratorRuntime","mark","_callee2","promiseFnThunks","concurrency","options","delay","totalThunk","finalResults","_args2","wrap","_callee2$","_context2","prev","next","undefined","abrupt","process","env","NODE_ENV","Error","polling","_callee","promiseFnThunksBatch","result","_callee$","_context","splice","all","map","promiseFnThunk","sent","concat","stop"],"sources":["lib/concurrentExecute/index.ts"],"sourcesContent":["import { polling } from '@ringcentral-integration/utils';\n\nexport type ConcurrentExecuteOptions = {\n  /**\n   * delay between each thunk `Promise.all` execution\n   */\n  delay?: number;\n  // TODO: implement that for export result with fail item after Promise.allSettled\n  /**\n   * onFinalize callback\n   */\n  //  onFinalize\n};\n\n// type all<T extends readonly unknown[] | []>(values: T): ;\n/**\n * Provide you to control the concurrency and delay of your `Promise.all` execution.\n * @param options Specify your own delay function and custom promise instance\n *\n * @example\n * ```\n * const result = await concurrentExecute(\n *   [\n *     () => Promise.resolve('123' as const),\n *     () => Promise.resolve(1),\n *     () => Promise.resolve('456'),\n *     () => Promise.resolve(2),\n *     () => Promise.resolve('789'),\n *   ],\n *   2, // in that example that will split into 3 `Promise.all` executions, run each thunk one by one\n *   {\n *      delay: 100, // that will be delay 100ms between each thunk `Promise.all` execution\n *   }\n * );\n *\n * console.log(a); // [ '123', 1, '456', 2, '789' ]\n * ```\n */\nexport default async function concurrentExecute<\n  T extends (() => unknown)[] | [],\n>(\n  /**\n   * A set of thunk functions of Promise\n   */\n  promiseFnThunks: T,\n  /**\n   * concurrency Concurrent granularity\n   */\n  concurrency: number,\n  /**\n   * custom options\n   */\n  options: ConcurrentExecuteOptions = {},\n): Promise<{\n  [P in keyof T]: Awaited<T[P] extends () => infer R ? R : any>;\n}> {\n  const { delay } = options;\n\n  if (!Array.isArray(promiseFnThunks) || promiseFnThunks.length <= 0) {\n    return [] as any;\n  }\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    typeof promiseFnThunks[0] !== 'function'\n  ) {\n    throw new Error('concurrentExecute needs promise thunk');\n  }\n\n  let totalThunk = promiseFnThunks.length;\n\n  let finalResults: any = [];\n\n  await polling(async () => {\n    const promiseFnThunksBatch = promiseFnThunks.splice(0, concurrency);\n\n    // TODO: should switch to Promise.allSettled\n    // TODO: if any one error, should still keep all the results and output error items\n    const result = await Promise.all(\n      promiseFnThunksBatch.map((promiseFnThunk) => promiseFnThunk()),\n    );\n\n    finalResults = [...finalResults, ...result];\n\n    totalThunk -= result.length;\n\n    // when all thunks are executed, leave polling\n    return totalThunk <= 0;\n  }, delay);\n\n  return finalResults;\n}\n"],"mappings":"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","ignoreList":[]}