{"version":3,"sources":["lib/fetchWithJsonp.ts"],"names":["callback","RUNTIME","lastPromise","fetchWithJsonp","url","promise","Promise","resolve","reject","script","document","createElement","src","onerror","body","removeChild","window","Error","data","appendChild"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAMA,QAAQ,GAAG,6BAAjB;AAEA,IAAMC,OAEL,GAAG;AACFC,EAAAA,WAAW,EAAE;AADX,CAFJ;;AAMO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAIC,GAAJ,EAAoB;AAChD,MAAMF,WAAW,GAAGD,OAAO,CAACC,WAA5B;;AACA,MAAMG,OAAO,GAAG,wDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIPH,WAJO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAQR,IAAII,OAAJ,CAAe,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACzC,kBAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,cAAAA,MAAM,CAACG,GAAP,GAAaR,GAAb;;AACAK,cAAAA,MAAM,CAACI,OAAP,GAAiB,YAAM;AACrBH,gBAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,MAA1B;AACCO,gBAAAA,MAAD,CAAgBhB,QAAhB,IAA4B,IAA5B;;AACA,oBAAIC,OAAO,CAACC,WAAR,KAAwBG,OAA5B,EAAqC;AACnCJ,kBAAAA,OAAO,CAACC,WAAR,GAAsB,IAAtB;AACD;;AACDM,gBAAAA,MAAM,CAAC,IAAIS,KAAJ,YAAcb,GAAd,0BAAD,CAAN;AACD,eAPD,CAHyC,CAWzC;;;AAAA;AACCY,cAAAA,MAAD,CAAgBhB,QAAhB,IAA4B,UAACkB,IAAD,EAAa;AACvCR,gBAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,MAA1B;AACCO,gBAAAA,MAAD,CAAgBhB,QAAhB,IAA4B,IAA5B;;AACA,oBAAIC,OAAO,CAACC,WAAR,KAAwBG,OAA5B,EAAqC;AACnCJ,kBAAAA,OAAO,CAACC,WAAR,GAAsB,IAAtB;AACD;;AACDK,gBAAAA,OAAO,CAACW,IAAD,CAAP;AACD,eAPD;;AAQAR,cAAAA,QAAQ,CAACI,IAAT,CAAcK,WAAd,CAA0BV,MAA1B;AACD,aArBM,CARQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAAhB;;AA+BAR,EAAAA,OAAO,CAACC,WAAR,GAAsBG,OAAtB;AACA,SAAOA,OAAP;AACD,CAnCM","sourcesContent":["const callback = '__rc_config_data_callback__';\n\nconst RUNTIME: {\n  lastPromise: Promise<any>;\n} = {\n  lastPromise: null,\n};\n\nexport const fetchWithJsonp = <T>(url: string) => {\n  const lastPromise = RUNTIME.lastPromise;\n  const promise = (async () => {\n    try {\n      // if there is already ongoing request, wait for it to be done\n      // before replacing the window.__rc_config_data_callback__ function\n      await lastPromise;\n    } catch (error) {\n      // ignore last error\n    }\n    return new Promise<T>((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = url;\n      script.onerror = () => {\n        document.body.removeChild(script);\n        (window as any)[callback] = null;\n        if (RUNTIME.lastPromise === promise) {\n          RUNTIME.lastPromise = null;\n        }\n        reject(new Error(`'${url}' jsonp fetch failed`));\n      };\n      // TODO: add type\n      (window as any)[callback] = (data: T) => {\n        document.body.removeChild(script);\n        (window as any)[callback] = null;\n        if (RUNTIME.lastPromise === promise) {\n          RUNTIME.lastPromise = null;\n        }\n        resolve(data);\n      };\n      document.body.appendChild(script);\n    });\n  })();\n  RUNTIME.lastPromise = promise;\n  return promise;\n};\n"],"file":"fetchWithJsonp.js"}