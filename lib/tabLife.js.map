{"version":3,"sources":["lib/tabLife.ts"],"names":["TAB_CHANNEL_KEY","ALIVE_EVENT","TabLife","prefix","option","intervalTime","checkTime","_eventEmitter","EventEmitter","reqKey","resKey","_req","_res","_isInit","_isAlive","_destroy","timeout","_checkHasAlive","isAlive","console","log","BroadcastChannel","close","onmessage","data","key","postMessage","emit","cb","count","alive","listener","Promise","resolve","_resolve","once","addEventListener","error","onTimeout","finalize","off","removeEventListener","result"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\n\nimport { raceTimeout } from '@ringcentral-integration/commons/lib/raceTimeout';\nimport { sleep } from '@ringcentral-integration/commons/lib/sleep';\n\nconst TAB_CHANNEL_KEY = 'channel$$';\n\nconst ALIVE_EVENT = 'TabLife_alive';\n\nexport class TabLife {\n  private _eventEmitter = new EventEmitter();\n  private readonly reqKey = `${this.prefix}_req_${TAB_CHANNEL_KEY}`;\n  private readonly resKey = `${this.prefix}_res_${TAB_CHANNEL_KEY}`;\n\n  private _req: BroadcastChannel;\n  private _res: BroadcastChannel;\n\n  private _isInit = false;\n  private _isAlive = false;\n  private _destroy = false;\n\n  constructor(\n    private prefix: string,\n    private option: { intervalTime?: number; checkTime?: number } = {\n      intervalTime: 1000,\n      checkTime: 30 * 1000,\n    },\n  ) {}\n\n  async isAlive(timeout?: number) {\n    return this._isAlive || this._checkHasAlive(timeout);\n  }\n\n  async isLeave(timeout = 3000) {\n    return !(await this.isAlive(timeout));\n  }\n\n  init() {\n    console.log(`${this.reqKey}--------------init`);\n\n    if (!this._isInit) {\n      this._req = new BroadcastChannel(this.reqKey);\n      this._res = new BroadcastChannel(this.resKey);\n    }\n\n    this._isInit = true;\n    this._isAlive = false;\n    this._destroy = false;\n  }\n\n  destroy() {\n    console.log(`${this.reqKey}--------------destroy`);\n\n    if (this._isInit) {\n      this._req.close();\n      this._res.close();\n    }\n\n    this._isInit = false;\n    this._isAlive = false;\n    this._destroy = true;\n  }\n\n  alive() {\n    if (!this._isAlive) {\n      console.log(`${this.reqKey}--------------bindAlive`);\n      this._req.onmessage = ({ data }) => {\n        const { key } = data;\n        console.log('alive!!!', key);\n        switch (key) {\n          case this.prefix:\n            if (!this._destroy) {\n              this._res.postMessage({ key: this.prefix });\n            }\n            break;\n\n          default:\n            break;\n        }\n      };\n      this._isAlive = true;\n      // for self tab get alive event\n    }\n    this._eventEmitter.emit(ALIVE_EVENT, true);\n  }\n\n  async onLeave(cb: () => any, checkTime = this.option.intervalTime) {\n    let count = 0;\n\n    while (count < 10) {\n      if (this._isAlive || this._destroy) {\n        console.log('check leave end');\n        break;\n      }\n      const alive = await this._checkHasAlive(checkTime);\n      console.log('alive?~', alive);\n\n      if (!alive) {\n        if (count > 0) {\n          cb();\n          break;\n        }\n        count++;\n      } else {\n        await sleep(checkTime);\n      }\n    }\n  }\n\n  private async _checkHasAlive(timeout = this.option.checkTime) {\n    let _resolve: (value?: any) => void;\n\n    const listener = ({ data }: MessageEvent) => {\n      const { key } = data;\n      switch (key) {\n        case this.prefix:\n          this._eventEmitter.emit(ALIVE_EVENT, true);\n          break;\n        default:\n          break;\n      }\n    };\n\n    const result = await raceTimeout<boolean>(\n      new Promise((resolve) => {\n        _resolve = resolve;\n        this._eventEmitter.once(ALIVE_EVENT, _resolve);\n\n        if (this._isInit) {\n          try {\n            this._res.addEventListener('message', listener);\n\n            this._req.postMessage({ key: this.prefix });\n          } catch (error) {\n            // console.trace(error);\n            resolve(false);\n          }\n        }\n      }),\n      {\n        timeout,\n        onTimeout: (resolve) => resolve(false),\n        finalize: () => {\n          this._eventEmitter.off(ALIVE_EVENT, _resolve);\n\n          if (this._isInit) {\n            try {\n              this._res.removeEventListener('message', listener);\n            } catch (error) {\n              // console.trace(error);\n            }\n          }\n          _resolve();\n        },\n      },\n    );\n\n    return result;\n  }\n}\n"],"file":"tabLife.js"}