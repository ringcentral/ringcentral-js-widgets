{"version":3,"file":"tabLife.js","names":["_events","require","_utils","_typeof","obj","Symbol","iterator","constructor","prototype","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","String","input","hint","prim","toPrimitive","res","call","Number","TAB_CHANNEL_KEY","ALIVE_EVENT","TabLife","prefix","option","intervalTime","checkTime","_eventEmitter","EventEmitter","reqKey","concat","resKey","_req","_res","_isInit","_isAlive","_destroy","regeneratorRuntime","mark","_callee","timeout","wrap","_callee$","_context","prev","next","abrupt","_checkHasAlive","stop","isAlive","_x","_isLeave","_callee2","_args2","_callee2$","_context2","sent","isLeave","init","console","log","BroadcastChannel","destroy","close","alive","_this","onmessage","_ref","data","postMessage","emit","_onLeave","_callee3","cb","count","_args3","_callee3$","_context3","sleep","onLeave","_x2","_checkHasAlive2","_callee4","_this2","_resolve","resolveTrue","listener","result","_args4","_callee4$","_context4","_ref2","waitUntilTo","once","addEventListener","t0","off","removeEventListener","finish","exports"],"sources":["lib/tabLife.ts"],"sourcesContent":["import { EventEmitter } from 'events';\n\nimport { sleep, waitUntilTo } from '@ringcentral-integration/commons/utils';\n\nconst TAB_CHANNEL_KEY = 'channel$$';\n\nconst ALIVE_EVENT = 'TabLife_alive';\n\n// TODO: that tabLife need cleanup\nexport class TabLife {\n  private _eventEmitter = new EventEmitter();\n  private readonly reqKey = `${this.prefix}_req_${TAB_CHANNEL_KEY}`;\n  private readonly resKey = `${this.prefix}_res_${TAB_CHANNEL_KEY}`;\n\n  private _req: BroadcastChannel;\n  private _res: BroadcastChannel;\n\n  private _isInit = false;\n  private _isAlive = false;\n  private _destroy = false;\n\n  constructor(\n    private prefix: string,\n    private option: { intervalTime?: number; checkTime?: number } = {\n      intervalTime: 1000,\n      checkTime: 30 * 1000,\n    },\n  ) {}\n\n  async isAlive(timeout?: number) {\n    if (this._isAlive) {\n      return true;\n    }\n\n    return this._checkHasAlive(timeout);\n  }\n\n  async isLeave(timeout = 3000) {\n    return !(await this.isAlive(timeout));\n  }\n\n  init() {\n    console.log(`${this.reqKey}--------------init`);\n\n    if (!this._isInit) {\n      this._req = new BroadcastChannel(this.reqKey);\n      this._res = new BroadcastChannel(this.resKey);\n    }\n\n    this._isInit = true;\n    this._isAlive = false;\n    this._destroy = false;\n  }\n\n  destroy() {\n    console.log(`${this.reqKey}--------------destroy`);\n\n    if (this._isInit) {\n      this._req.close();\n      this._res.close();\n    }\n\n    this._isInit = false;\n    this._isAlive = false;\n    this._destroy = true;\n  }\n\n  alive() {\n    if (!this._isAlive) {\n      console.log(`${this.reqKey}--------------bindAlive`);\n      this._req.onmessage = ({ data }) => {\n        const { key } = data;\n        console.log('alive!!!', key);\n        switch (key) {\n          case this.prefix:\n            if (!this._destroy) {\n              this._res.postMessage({ key: this.prefix });\n            }\n            break;\n\n          default:\n            break;\n        }\n      };\n      this._isAlive = true;\n      // for self tab get alive event\n    }\n    this._eventEmitter.emit(ALIVE_EVENT, true);\n  }\n\n  async onLeave(cb: () => any, checkTime = this.option.intervalTime) {\n    let count = 0;\n\n    while (count < 10) {\n      if (this._isAlive || this._destroy) {\n        console.log('check leave end');\n        break;\n      }\n      const alive = await this._checkHasAlive(checkTime);\n      console.log('alive?~', alive);\n\n      if (!alive) {\n        if (count > 0) {\n          cb();\n          break;\n        }\n        count++;\n      } else {\n        await sleep(checkTime);\n      }\n    }\n  }\n\n  private async _checkHasAlive(timeout = this.option.checkTime) {\n    let _resolve: (value?: any) => void;\n    const resolveTrue = () => _resolve(true);\n\n    const listener = ({ data }: MessageEvent) => {\n      const { key } = data;\n      switch (key) {\n        case this.prefix:\n          this._eventEmitter.emit(ALIVE_EVENT, true);\n          break;\n        default:\n          break;\n      }\n    };\n\n    try {\n      const result = await waitUntilTo(\n        () =>\n          new Promise<boolean>((resolve) => {\n            _resolve = resolve;\n            this._eventEmitter.once(ALIVE_EVENT, resolveTrue);\n\n            if (this._isInit) {\n              try {\n                this._res.addEventListener('message', listener);\n\n                this._req.postMessage({ key: this.prefix });\n              } catch (error) {\n                _resolve(false);\n              }\n            }\n          }),\n        {\n          timeout,\n        },\n      );\n\n      return result;\n    } catch (error) {\n      // timeout\n      return false;\n    } finally {\n      this._eventEmitter.off(ALIVE_EVENT, resolveTrue);\n\n      if (this._isInit) {\n        try {\n          this._res.removeEventListener('message', listener);\n        } catch (error) {\n          // console.trace(error);\n        }\n      }\n      _resolve();\n    }\n  }\n}\n"],"mappings":"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"}