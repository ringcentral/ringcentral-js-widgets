{"version":3,"file":"tabLife.js","names":["_utils","require","_events","_typeof","o","Symbol","iterator","constructor","prototype","asyncGeneratorStep","n","t","e","r","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","TypeError","_defineProperties","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","_toPrimitive","toPrimitive","call","String","Number","TAB_CHANNEL_KEY","ALIVE_EVENT","TabLife","prefix","option","undefined","intervalTime","checkTime","_eventEmitter","EventEmitter","reqKey","concat","resKey","_req","_res","_isInit","_isAlive","_destroy","regeneratorRuntime","mark","_callee","timeout","wrap","_callee$","_context","prev","next","abrupt","_checkHasAlive","stop","isAlive","_x","_isLeave","_callee2","_args2","_callee2$","_context2","sent","isLeave","init","console","log","BroadcastChannel","destroy","close","alive","_this","onmessage","_ref","data","postMessage","emit","_onLeave","_callee3","cb","count","_args3","_callee3$","_context3","sleep","onLeave","_x2","_checkHasAlive2","_callee4","_this2","_resolve","resolveTrue","listener","result","_args4","_callee4$","_context4","_ref2","waitUntilTo","once","addEventListener","error","t0","off","removeEventListener","finish","exports"],"sources":["lib/tabLife.ts"],"sourcesContent":["import { sleep, waitUntilTo } from '@ringcentral-integration/commons/utils';\nimport { EventEmitter } from 'events';\n\nconst TAB_CHANNEL_KEY = 'channel$$';\n\nconst ALIVE_EVENT = 'TabLife_alive';\n\n// TODO: that tabLife need cleanup\nexport class TabLife {\n  private _eventEmitter = new EventEmitter();\n  private readonly reqKey = `${this.prefix}_req_${TAB_CHANNEL_KEY}`;\n  private readonly resKey = `${this.prefix}_res_${TAB_CHANNEL_KEY}`;\n\n  private _req: BroadcastChannel;\n  private _res: BroadcastChannel;\n\n  private _isInit = false;\n  private _isAlive = false;\n  private _destroy = false;\n\n  constructor(\n    private prefix: string,\n    private option: { intervalTime?: number; checkTime?: number } = {\n      intervalTime: 1000,\n      checkTime: 30 * 1000,\n    },\n  ) {}\n\n  async isAlive(timeout?: number) {\n    if (this._isAlive) {\n      return true;\n    }\n\n    return this._checkHasAlive(timeout);\n  }\n\n  async isLeave(timeout = 3000) {\n    return !(await this.isAlive(timeout));\n  }\n\n  init() {\n    console.log(`${this.reqKey}--------------init`);\n\n    if (!this._isInit) {\n      this._req = new BroadcastChannel(this.reqKey);\n      this._res = new BroadcastChannel(this.resKey);\n    }\n\n    this._isInit = true;\n    this._isAlive = false;\n    this._destroy = false;\n  }\n\n  destroy() {\n    console.log(`${this.reqKey}--------------destroy`);\n\n    if (this._isInit) {\n      this._req.close();\n      this._res.close();\n    }\n\n    this._isInit = false;\n    this._isAlive = false;\n    this._destroy = true;\n  }\n\n  alive() {\n    if (!this._isAlive) {\n      console.log(`${this.reqKey}--------------bindAlive`);\n      this._req.onmessage = ({ data }) => {\n        const { key } = data;\n        console.log('alive!!!', key);\n        switch (key) {\n          case this.prefix:\n            if (!this._destroy) {\n              this._res.postMessage({ key: this.prefix });\n            }\n            break;\n\n          default:\n            break;\n        }\n      };\n      this._isAlive = true;\n      // for self tab get alive event\n    }\n    this._eventEmitter.emit(ALIVE_EVENT, true);\n  }\n\n  async onLeave(cb: () => any, checkTime = this.option.intervalTime) {\n    let count = 0;\n\n    while (count < 10) {\n      if (this._isAlive || this._destroy) {\n        console.log('check leave end');\n        break;\n      }\n      const alive = await this._checkHasAlive(checkTime);\n      console.log('alive?~', alive);\n\n      if (!alive) {\n        if (count > 0) {\n          cb();\n          break;\n        }\n        count++;\n      } else {\n        await sleep(checkTime);\n      }\n    }\n  }\n\n  private async _checkHasAlive(timeout = this.option.checkTime) {\n    let _resolve: (value?: any) => void;\n    const resolveTrue = () => _resolve(true);\n\n    const listener = ({ data }: MessageEvent) => {\n      const { key } = data;\n      switch (key) {\n        case this.prefix:\n          this._eventEmitter.emit(ALIVE_EVENT, true);\n          break;\n        default:\n          break;\n      }\n    };\n\n    try {\n      const result = await waitUntilTo(\n        () =>\n          new Promise<boolean>((resolve) => {\n            _resolve = resolve;\n            this._eventEmitter.once(ALIVE_EVENT, resolveTrue);\n\n            if (this._isInit) {\n              try {\n                this._res.addEventListener('message', listener);\n\n                this._req.postMessage({ key: this.prefix });\n              } catch (error) {\n                _resolve(false);\n              }\n            }\n          }),\n        {\n          timeout,\n        },\n      );\n\n      return result;\n    } catch (error) {\n      // timeout\n      return false;\n    } finally {\n      this._eventEmitter.off(ALIVE_EVENT, resolveTrue);\n\n      if (this._isInit) {\n        try {\n          this._res.removeEventListener('message', listener);\n        } catch (error) {\n          // console.trace(error);\n        }\n      }\n      _resolve();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}