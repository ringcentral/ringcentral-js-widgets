{"version":3,"sources":["lib/StorageBase/getStorageReducer.ts"],"names":["calculateInitialState","reducers","initialState","key","undefined","getDataReducer","types","state","action","type","initSuccess","data","sync","value","resetSuccess","newState","hasChange","getStorageKeyReducer","storageKey","getStorageReducer","status"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;AAEA,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC;AACvC,MAAMC,YAAY,GAAG,EAArB;AACA;;AACA,OAAK,IAAMC,GAAX,IAAkBF,QAAlB,EAA4B;AAC1BC,IAAAA,YAAY,CAACC,GAAD,CAAZ,GAAoBF,QAAQ,CAACE,GAAD,CAAR,CAAcC,SAAd,EAAyB,EAAzB,CAApB;AACD;;AACD,SAAOF,YAAP;AACD;;AAEM,SAASG,cAAT,OAA6C;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,MAAZL,QAAY,QAAZA,QAAY;AAClD,SAAO,YAAqD;AAAA,QAApDM,KAAoD,uEAA5CP,qBAAqB,CAACC,QAAD,CAAuB;AAAA,QAAXO,MAAW;;AAC1D,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKH,KAAK,CAACI,WAAX;AACE,eAAOF,MAAM,CAACG,IAAd;;AACF,WAAKL,KAAK,CAACM,IAAX;AACE,+CACKL,KADL,2BAEGC,MAAM,CAACL,GAFV,EAEgBK,MAAM,CAACK,KAFvB;;AAIF,WAAKP,KAAK,CAACQ,YAAX;AAAyB;AACvB,cAAMC,QAAQ,GAAG,EAAjB,CADuB,CAEvB;;AACA;;AACA,eAAK,IAAMZ,GAAX,IAAkBF,QAAlB,EAA4B;AAC1Bc,YAAAA,QAAQ,CAACZ,GAAD,CAAR,GAAgBF,QAAQ,CAACE,GAAD,CAAR,CAAcC,SAAd,EAAyBI,MAAzB,CAAhB;AACD;;AACD,iBAAOO,QAAP;AACD;;AACD;AAAS;AACP,cAAMA,SAAQ,GAAG,EAAjB;AACA,cAAIC,SAAS,GAAG,KAAhB,CAFO,CAGP;;AACA;;AACA,eAAK,IAAMb,IAAX,IAAkBF,QAAlB,EAA4B;AAC1Bc,YAAAA,SAAQ,CAACZ,IAAD,CAAR,GAAgBF,QAAQ,CAACE,IAAD,CAAR,CAAcI,KAAK,CAACJ,IAAD,CAAnB,EAA0BK,MAA1B,CAAhB;AACA,gBAAIO,SAAQ,CAACZ,IAAD,CAAR,KAAkBI,KAAK,CAACJ,IAAD,CAA3B,EAAkCa,SAAS,GAAG,IAAZ;AACnC;;AACD,iBAAOA,SAAS,GAAGD,SAAH,GAAcR,KAA9B;AACD;AA3BH;AA6BD,GA9BD;AA+BD;;AAEM,SAASU,oBAAT,CAA8BX,KAA9B,EAAqC;AAC1C,SAAO,YAAwC;AAAA,QAAvCC,KAAuC,uEAA/B,IAA+B;;AAAA;AAAA,QAAvBE,IAAuB,SAAvBA,IAAuB;AAAA,QAAjBS,UAAiB,SAAjBA,UAAiB;;AAC7C,YAAQT,IAAR;AACE,WAAKH,KAAK,CAACI,WAAX;AACE,eAAOQ,UAAP;;AAEF,WAAKZ,KAAK,CAACQ,YAAX;AACE,eAAO,IAAP;;AAEF;AACE,eAAOP,KAAP;AARJ;AAUD,GAXD;AAYD;;AAEc,SAASY,iBAAT,QAAgD;AAAA,MAAnBb,KAAmB,SAAnBA,KAAmB;AAAA,MAAZL,QAAY,SAAZA,QAAY;AAC7D,SAAO,4BAAgB;AACrBmB,IAAAA,MAAM,EAAE,wCAAuBd,KAAvB,CADa;AAErBK,IAAAA,IAAI,EAAEN,cAAc,CAAC;AAAEC,MAAAA,KAAK,EAALA,KAAF;AAASL,MAAAA,QAAQ,EAARA;AAAT,KAAD,CAFC;AAGrBiB,IAAAA,UAAU,EAAED,oBAAoB,CAACX,KAAD;AAHX,GAAhB,CAAP;AAKD","sourcesContent":["import { combineReducers } from 'redux';\n\nimport getModuleStatusReducer from '../getModuleStatusReducer';\n\nfunction calculateInitialState(reducers) {\n  const initialState = {};\n  /* eslint-disable guard-for-in */\n  for (const key in reducers) {\n    initialState[key] = reducers[key](undefined, {});\n  }\n  return initialState;\n}\n\nexport function getDataReducer({ types, reducers }) {\n  return (state = calculateInitialState(reducers), action) => {\n    switch (action.type) {\n      case types.initSuccess:\n        return action.data;\n      case types.sync:\n        return {\n          ...state,\n          [action.key]: action.value,\n        };\n      case types.resetSuccess: {\n        const newState = {};\n        // reset the data to initial states\n        /* eslint-disable guard-for-in */\n        for (const key in reducers) {\n          newState[key] = reducers[key](undefined, action);\n        }\n        return newState;\n      }\n      default: {\n        const newState = {};\n        let hasChange = false;\n        // compute new substates and check for changes\n        /* eslint-disable guard-for-in */\n        for (const key in reducers) {\n          newState[key] = reducers[key](state[key], action);\n          if (newState[key] !== state[key]) hasChange = true;\n        }\n        return hasChange ? newState : state;\n      }\n    }\n  };\n}\n\nexport function getStorageKeyReducer(types) {\n  return (state = null, { type, storageKey }) => {\n    switch (type) {\n      case types.initSuccess:\n        return storageKey;\n\n      case types.resetSuccess:\n        return null;\n\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getStorageReducer({ types, reducers }) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    data: getDataReducer({ types, reducers }),\n    storageKey: getStorageKeyReducer(types),\n  });\n}\n"],"file":"getStorageReducer.js"}