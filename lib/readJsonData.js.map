{"version":3,"file":"readJsonData.js","names":["readJsonData","localizationFolder","translationLocales","sourceLocale","rawData","reduce","acc","locale","fileName","filePath","path","resolve","fs","existsSync","statSync","isFile","content","readFileSync","JSON","parse","result","fileData","folderPath","dirname","targetFile","extname","targetFilePath","join","key","value","source","Object","keys"],"sources":["lib/readJsonData.js"],"sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { reduce } from 'ramda';\n\nexport function readJsonData({\n  localizationFolder,\n  translationLocales,\n  sourceLocale,\n  rawData,\n}) {\n  if (!rawData) {\n    rawData = reduce(\n      (acc, locale) => {\n        const fileName = `${locale}.json`;\n        const filePath = path.resolve(localizationFolder, fileName);\n        if (fs.existsSync(filePath) && fs.statSync(filePath).isFile()) {\n          const content = fs.readFileSync(filePath, 'utf8');\n          acc[locale] = JSON.parse(content);\n        }\n        return acc;\n      },\n      {},\n      translationLocales,\n    );\n  }\n\n  return reduce(\n    (result, locale) => {\n      if (locale !== sourceLocale) {\n        result[locale] = reduce(\n          (fileData, filePath) => {\n            const folderPath = path.dirname(filePath);\n            const targetFile = `${locale}${path.extname(filePath)}`;\n            const targetFilePath = path.join(folderPath, targetFile);\n            fileData[targetFilePath] = reduce(\n              (acc, key) => {\n                const value = rawData[locale][filePath][key];\n                const source = rawData[sourceLocale][filePath][key];\n                if (source && value) {\n                  acc[key] = {\n                    source,\n                    value,\n                  };\n                }\n                return acc;\n              },\n              {},\n              Object.keys(rawData[locale][filePath]),\n            );\n            return fileData;\n          },\n          {},\n          Object.keys(rawData[locale]),\n        );\n      }\n      return result;\n    },\n    {},\n    translationLocales,\n  );\n}\n"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEO,SAASA,YAAT,OAKJ;EAAA,IAJDC,kBAIC,QAJDA,kBAIC;EAAA,IAHDC,kBAGC,QAHDA,kBAGC;EAAA,IAFDC,YAEC,QAFDA,YAEC;EAAA,IADDC,OACC,QADDA,OACC;;EACD,IAAI,CAACA,OAAL,EAAc;IACZA,OAAO,GAAG,IAAAC,aAAA,EACR,UAACC,GAAD,EAAMC,MAAN,EAAiB;MACf,IAAMC,QAAQ,aAAMD,MAAN,UAAd;;MACA,IAAME,QAAQ,GAAGC,gBAAA,CAAKC,OAAL,CAAaV,kBAAb,EAAiCO,QAAjC,CAAjB;;MACA,IAAII,mBAAA,CAAGC,UAAH,CAAcJ,QAAd,KAA2BG,mBAAA,CAAGE,QAAH,CAAYL,QAAZ,EAAsBM,MAAtB,EAA/B,EAA+D;QAC7D,IAAMC,OAAO,GAAGJ,mBAAA,CAAGK,YAAH,CAAgBR,QAAhB,EAA0B,MAA1B,CAAhB;;QACAH,GAAG,CAACC,MAAD,CAAH,GAAcW,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAd;MACD;;MACD,OAAOV,GAAP;IACD,CATO,EAUR,EAVQ,EAWRJ,kBAXQ,CAAV;EAaD;;EAED,OAAO,IAAAG,aAAA,EACL,UAACe,MAAD,EAASb,MAAT,EAAoB;IAClB,IAAIA,MAAM,KAAKJ,YAAf,EAA6B;MAC3BiB,MAAM,CAACb,MAAD,CAAN,GAAiB,IAAAF,aAAA,EACf,UAACgB,QAAD,EAAWZ,QAAX,EAAwB;QACtB,IAAMa,UAAU,GAAGZ,gBAAA,CAAKa,OAAL,CAAad,QAAb,CAAnB;;QACA,IAAMe,UAAU,aAAMjB,MAAN,SAAeG,gBAAA,CAAKe,OAAL,CAAahB,QAAb,CAAf,CAAhB;;QACA,IAAMiB,cAAc,GAAGhB,gBAAA,CAAKiB,IAAL,CAAUL,UAAV,EAAsBE,UAAtB,CAAvB;;QACAH,QAAQ,CAACK,cAAD,CAAR,GAA2B,IAAArB,aAAA,EACzB,UAACC,GAAD,EAAMsB,GAAN,EAAc;UACZ,IAAMC,KAAK,GAAGzB,OAAO,CAACG,MAAD,CAAP,CAAgBE,QAAhB,EAA0BmB,GAA1B,CAAd;UACA,IAAME,MAAM,GAAG1B,OAAO,CAACD,YAAD,CAAP,CAAsBM,QAAtB,EAAgCmB,GAAhC,CAAf;;UACA,IAAIE,MAAM,IAAID,KAAd,EAAqB;YACnBvB,GAAG,CAACsB,GAAD,CAAH,GAAW;cACTE,MAAM,EAANA,MADS;cAETD,KAAK,EAALA;YAFS,CAAX;UAID;;UACD,OAAOvB,GAAP;QACD,CAXwB,EAYzB,EAZyB,EAazByB,MAAM,CAACC,IAAP,CAAY5B,OAAO,CAACG,MAAD,CAAP,CAAgBE,QAAhB,CAAZ,CAbyB,CAA3B;QAeA,OAAOY,QAAP;MACD,CArBc,EAsBf,EAtBe,EAuBfU,MAAM,CAACC,IAAP,CAAY5B,OAAO,CAACG,MAAD,CAAnB,CAvBe,CAAjB;IAyBD;;IACD,OAAOa,MAAP;EACD,CA9BI,EA+BL,EA/BK,EAgCLlB,kBAhCK,CAAP;AAkCD"}