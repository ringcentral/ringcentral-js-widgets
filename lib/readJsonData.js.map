{"version":3,"sources":["lib/readJsonData.js"],"names":["readJsonData","localizationFolder","translationLocales","sourceLocale","rawData","acc","locale","fileName","filePath","path","resolve","fs","existsSync","statSync","isFile","content","readFileSync","JSON","parse","result","fileData","folderPath","dirname","targetFile","extname","targetFilePath","join","key","value","source","Object","keys"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEO,SAASA,YAAT,OAKJ;AAAA,MAJDC,kBAIC,QAJDA,kBAIC;AAAA,MAHDC,kBAGC,QAHDA,kBAGC;AAAA,MAFDC,YAEC,QAFDA,YAEC;AAAA,MADDC,OACC,QADDA,OACC;;AACD,MAAI,CAACA,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,mBACR,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACf,UAAMC,QAAQ,aAAMD,MAAN,UAAd;;AACA,UAAME,QAAQ,GAAGC,iBAAKC,OAAL,CAAaT,kBAAb,EAAiCM,QAAjC,CAAjB;;AACA,UAAII,oBAAGC,UAAH,CAAcJ,QAAd,KAA2BG,oBAAGE,QAAH,CAAYL,QAAZ,EAAsBM,MAAtB,EAA/B,EAA+D;AAC7D,YAAMC,OAAO,GAAGJ,oBAAGK,YAAH,CAAgBR,QAAhB,EAA0B,MAA1B,CAAhB;;AACAH,QAAAA,GAAG,CAACC,MAAD,CAAH,GAAcW,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAd;AACD;;AACD,aAAOV,GAAP;AACD,KATO,EAUR,EAVQ,EAWRH,kBAXQ,CAAV;AAaD;;AAED,SAAO,mBACL,UAACiB,MAAD,EAASb,MAAT,EAAoB;AAClB,QAAIA,MAAM,KAAKH,YAAf,EAA6B;AAC3BgB,MAAAA,MAAM,CAACb,MAAD,CAAN,GAAiB,mBACf,UAACc,QAAD,EAAWZ,QAAX,EAAwB;AACtB,YAAMa,UAAU,GAAGZ,iBAAKa,OAAL,CAAad,QAAb,CAAnB;;AACA,YAAMe,UAAU,aAAMjB,MAAN,SAAeG,iBAAKe,OAAL,CAAahB,QAAb,CAAf,CAAhB;;AACA,YAAMiB,cAAc,GAAGhB,iBAAKiB,IAAL,CAAUL,UAAV,EAAsBE,UAAtB,CAAvB;;AACAH,QAAAA,QAAQ,CAACK,cAAD,CAAR,GAA2B,mBACzB,UAACpB,GAAD,EAAMsB,GAAN,EAAc;AACZ,cAAMC,KAAK,GAAGxB,OAAO,CAACE,MAAD,CAAP,CAAgBE,QAAhB,EAA0BmB,GAA1B,CAAd;AACA,cAAME,MAAM,GAAGzB,OAAO,CAACD,YAAD,CAAP,CAAsBK,QAAtB,EAAgCmB,GAAhC,CAAf;;AACA,cAAIE,MAAM,IAAID,KAAd,EAAqB;AACnBvB,YAAAA,GAAG,CAACsB,GAAD,CAAH,GAAW;AACTE,cAAAA,MAAM,EAANA,MADS;AAETD,cAAAA,KAAK,EAALA;AAFS,aAAX;AAID;;AACD,iBAAOvB,GAAP;AACD,SAXwB,EAYzB,EAZyB,EAazByB,MAAM,CAACC,IAAP,CAAY3B,OAAO,CAACE,MAAD,CAAP,CAAgBE,QAAhB,CAAZ,CAbyB,CAA3B;AAeA,eAAOY,QAAP;AACD,OArBc,EAsBf,EAtBe,EAuBfU,MAAM,CAACC,IAAP,CAAY3B,OAAO,CAACE,MAAD,CAAnB,CAvBe,CAAjB;AAyBD;;AACD,WAAOa,MAAP;AACD,GA9BI,EA+BL,EA/BK,EAgCLjB,kBAhCK,CAAP;AAkCD","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { reduce } from 'ramda';\n\nexport function readJsonData({\n  localizationFolder,\n  translationLocales,\n  sourceLocale,\n  rawData,\n}) {\n  if (!rawData) {\n    rawData = reduce(\n      (acc, locale) => {\n        const fileName = `${locale}.json`;\n        const filePath = path.resolve(localizationFolder, fileName);\n        if (fs.existsSync(filePath) && fs.statSync(filePath).isFile()) {\n          const content = fs.readFileSync(filePath, 'utf8');\n          acc[locale] = JSON.parse(content);\n        }\n        return acc;\n      },\n      {},\n      translationLocales,\n    );\n  }\n\n  return reduce(\n    (result, locale) => {\n      if (locale !== sourceLocale) {\n        result[locale] = reduce(\n          (fileData, filePath) => {\n            const folderPath = path.dirname(filePath);\n            const targetFile = `${locale}${path.extname(filePath)}`;\n            const targetFilePath = path.join(folderPath, targetFile);\n            fileData[targetFilePath] = reduce(\n              (acc, key) => {\n                const value = rawData[locale][filePath][key];\n                const source = rawData[sourceLocale][filePath][key];\n                if (source && value) {\n                  acc[key] = {\n                    source,\n                    value,\n                  };\n                }\n                return acc;\n              },\n              {},\n              Object.keys(rawData[locale][filePath]),\n            );\n            return fileData;\n          },\n          {},\n          Object.keys(rawData[locale]),\n        );\n      }\n      return result;\n    },\n    {},\n    translationLocales,\n  );\n}\n"],"file":"readJsonData.js"}