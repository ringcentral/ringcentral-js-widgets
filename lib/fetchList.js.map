{"version":3,"file":"fetchList.js","names":["parallelFetch","_x","_x2","_x3","_parallelFetch","apply","arguments","_asyncToGenerator","regeneratorRuntime","mark","_callee","fn","perPage","params","data","list","promises","i","wrap","_callee$","_context","prev","next","_objectSpread","page","sent","records","slice","paging","totalPages","push","Promise","all","reduce","output","item","_toConsumableArray","abrupt","stop","serialFetch","_x4","_x5","_x6","_serialFetch","_callee2","fetchedPages","_callee2$","_context2","fetchList","_x7","_fetchList","_callee3","_ref","_ref$perPage","_ref$parallel","parallel","_args3","_callee3$","_context3","length","undefined","_objectWithoutProperties"],"sources":["lib/fetchList.ts"],"sourcesContent":["type Fn<R> = (\n  ...args: any\n) => Promise<{ records?: R[]; paging?: { totalPages?: number } }>;\n\ntype PerPage = number | string;\n\nasync function parallelFetch<T, P>(fn: Fn<T>, perPage: PerPage, params: P) {\n  const data = await fn({\n    ...params,\n    perPage,\n    page: 1,\n  });\n  const list = data.records!.slice();\n  if (data.paging!.totalPages! > 1) {\n    const promises = [];\n    for (let i = data.paging!.totalPages!; i > 1; i -= 1) {\n      promises.push(\n        fn({\n          ...params,\n          perPage,\n          page: i,\n        }),\n      );\n    }\n    (await Promise.all(promises)).reduce((output, item) => {\n      output.push(...item.records!);\n      return output;\n    }, list);\n  }\n  return list;\n}\n\nasync function serialFetch<T, P>(fn: Fn<T>, perPage: PerPage, params: P) {\n  let fetchedPages = 0;\n  let totalPages = 1;\n  const list = [];\n\n  while (fetchedPages < totalPages) {\n    fetchedPages += 1;\n    const data = await fn({\n      ...params,\n      perPage,\n      page: fetchedPages,\n    });\n    /* eslint { \"prefer-destructuring\": 0 } */\n    totalPages = data.paging!.totalPages!;\n    list.push(...data.records!);\n  }\n  return list;\n}\n\ntype Options<P> = { perPage?: string; parallel?: boolean } & P;\n\nexport default async function fetchList<T, P>(\n  fn: Fn<T>,\n  {\n    perPage = 'MAX',\n    parallel = true,\n    ...params\n  }: Options<P> = {} as Options<P>,\n) {\n  return parallel\n    ? parallelFetch(fn, perPage, params)\n    : serialFetch(fn, perPage, params);\n}\n"],"mappings":"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"}