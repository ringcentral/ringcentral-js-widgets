{"version":3,"sources":["lib/StorageBaseV2/getStorageReducer.ts"],"names":["calculateInitialState","reducers","initialState","key","undefined","getDataReducer","types","state","action","_usm","usmAction","type","init","split","name","_state","target","data","newState","hasChange"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;AAIA,SAASA,qBAAT,CAA+BC,QAA/B,EAA4D;AAC1D,MAAMC,YAAqC,GAAG,EAA9C;AACA;;AACA,OAAK,IAAMC,GAAX,IAAkBF,QAAlB,EAA4B;AAC1BC,IAAAA,YAAY,CAACC,GAAD,CAAZ,GAAoBF,QAAQ,CAACE,GAAD,CAAR,CAAcC,SAAd,EAAyB,EAAzB,CAApB;AACD;;AACD,SAAOF,YAAP;AACD;;AAEM,SAASG,cAAT,OAMK;AAAA,MALVC,KAKU,QALVA,KAKU;AAAA,MAJVL,QAIU,QAJVA,QAIU;AACV,SAAO,YAAqD;AAAA,QAApDM,KAAoD,uEAA5CP,qBAAqB,CAACC,QAAD,CAAuB;AAAA,QAAXO,MAAW;;AAC1D,QACEA,MAAM,CAACC,IAAP,KAAgBC,eAAhB,KACCF,MAAM,CAACG,IAAP,KAAgB,eAAhB,IAAmCH,MAAM,CAACG,IAAP,KAAgB,SADpD,CADF,EAGE;AACA;AADA,8BAEeL,KAAK,CAACM,IAAN,CAAWC,KAAX,CAAiB,GAAjB,CAFf;AAAA;AAAA,UAEOC,IAFP;;AAGA,UAAIA,IAAI,KAAKN,MAAM,CAACG,IAApB,EAA0B;AACxB;AACA,YAAIH,MAAM,CAACO,MAAP,CAAcC,MAAlB,EAA0B;AACxB,iBAAOR,MAAM,CAACO,MAAP,CAAcC,MAAd,CAAqBR,MAAM,CAACG,IAA5B,EAAkCM,IAAzC;AACD;;AACD,eAAOT,MAAM,CAACO,MAAP,CAAcP,MAAM,CAACG,IAArB,EAA2BM,IAAlC;AACD;AACF;;AACD,QAAMC,QAAiC,GAAG,EAA1C;AACA,QAAIC,SAAS,GAAG,KAAhB,CAhB0D,CAiB1D;;AACA;;AACA,SAAK,IAAMhB,GAAX,IAAkBF,QAAlB,EAA4B;AAC1BiB,MAAAA,QAAQ,CAACf,GAAD,CAAR,GAAgBF,QAAQ,CAACE,GAAD,CAAR,CAAcI,KAAK,CAACJ,GAAD,CAAnB,EAA0BK,MAA1B,CAAhB;AACA,UAAIU,QAAQ,CAACf,GAAD,CAAR,KAAkBI,KAAK,CAACJ,GAAD,CAA3B,EAAkCgB,SAAS,GAAG,IAAZ;AACnC;;AACD,WAAOA,SAAS,GAAGD,QAAH,GAAcX,KAA9B;AACD,GAxBD;AAyBD","sourcesContent":["import { Reducer, ReducersMapObject } from 'redux';\n\nimport { usmAction } from '@ringcentral-integration/core';\n\nimport { ActionTypesBase } from './actionTypesBase';\n\nfunction calculateInitialState(reducers: ReducersMapObject) {\n  const initialState: Record<string, unknown> = {};\n  /* eslint-disable guard-for-in */\n  for (const key in reducers) {\n    initialState[key] = reducers[key](undefined, {} as any);\n  }\n  return initialState;\n}\n\nexport function getDataReducer({\n  types,\n  reducers,\n}: {\n  types: ActionTypesBase;\n  reducers: ReducersMapObject;\n}): Reducer {\n  return (state = calculateInitialState(reducers), action) => {\n    if (\n      action._usm === usmAction &&\n      (action.type === 'globalStorage' || action.type === 'storage')\n    ) {\n      // usm-redux update data with generic reducer for globalStorage & storage.\n      const [name] = types.init.split('-');\n      if (name === action.type) {\n        // for proxy storage state\n        if (action._state.target) {\n          return action._state.target[action.type].data;\n        }\n        return action._state[action.type].data;\n      }\n    }\n    const newState: Record<string, unknown> = {};\n    let hasChange = false;\n    // compute new sub states and check for changes\n    /* eslint-disable guard-for-in */\n    for (const key in reducers) {\n      newState[key] = reducers[key](state[key], action);\n      if (newState[key] !== state[key]) hasChange = true;\n    }\n    return hasChange ? newState : state;\n  };\n}\n"],"file":"getStorageReducer.js"}