{"version":3,"sources":["lib/generateLoaderContent/index.js"],"names":["getBaseName","f","replace","returnLoadLocaleCode","chunk","locale","basename","padding","code","generateLoaderContent","files","supportedLocales","sortIdx","forEach","idx","byLocale","a","b","ta","tb","aIdx","bIdx","usedLang","cases","sort","map","lang","split","returnCode","langDefaultCase","dedent","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,SAASA,WAAT,CAAqBC,CAArB,EAAwB;AACtB,SAAOA,CAAC,CAACC,OAAF,CAAU,kBAAV,EAA8B,EAA9B,CAAP;AACD;;AAED,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,MAArC,EAA6CC,QAA7C,EAAuD;AACrD,MAAMC,OAAO,GAAGH,KAAK,GAAG,MAAH,GAAY,IAAjC;AACA,MAAII,IAAI,yBACED,OADF,qCACoCD,QADpC,4BAEEC,OAFF,oEAAR;;AAGA,MAAIH,KAAJ,EAAW;AACTI,IAAAA,IAAI,4GAEgCF,QAFhC,+BAE6DE,IAF7D,+BAGUH,MAHV,oCAIYG,IAJZ,kBAAJ;AAMD;;AACD,SAAOA,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASC,qBAAT;AACb;AADa,MAEb;AAAA,MAD4BC,KAC5B,QAD4BA,KAC5B;AAAA,wBADmCN,KACnC;AAAA,MADmCA,KACnC,2BAD2C,IAC3C;AAAA,mCADiDO,gBACjD;AAAA,MADiDA,gBACjD,sCADoE,EACpE;AACA;AACA,MAAMC,OAAO,GAAG,EAAhB;AACAD,EAAAA,gBAAgB,CAACE,OAAjB,CAAyB,UAACR,MAAD,EAASS,GAAT,EAAiB;AACxCF,IAAAA,OAAO,CAAC,8BAAaP,MAAb,CAAD,CAAP,GAAgCS,GAAhC;AACD,GAFD;;AAGA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAIC,CAAJ,EAAU;AAAA;;AACzB,QAAMC,EAAE,GAAG,8BAAalB,WAAW,CAACgB,CAAD,CAAxB,CAAX;AACA,QAAMG,EAAE,GAAG,8BAAanB,WAAW,CAACiB,CAAD,CAAxB,CAAX;AACA,QAAMG,IAAI,kBAAGR,OAAO,CAACM,EAAD,CAAV,qDAAkB,CAAC,CAA7B;AACA,QAAMG,IAAI,kBAAGT,OAAO,CAACO,EAAD,CAAV,qDAAkB,CAAC,CAA7B;;AACA,QAAIC,IAAI,KAAKC,IAAb,EAAmB;AACjB;AACA,UAAIH,EAAE,KAAKC,EAAX,EAAe;AACb,eAAO,CAAP;AACD;;AACD,aAAOD,EAAE,GAAGC,EAAL,GAAU,CAAV,GAAc,CAAC,CAAtB;AACD,KAXwB,CAYzB;;;AACA,WAAOC,IAAI,GAAGC,IAAP,GAAc,CAAd,GAAkB,CAAC,CAA1B;AACD,GAdD;;AAgBA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,KAAK,GAAGb,KAAK,CAACc,IAAN,CAAWT,QAAX,EAAqBU,GAArB,CAAyB,UAACxB,CAAD,EAAO;AAC5C,QAAMK,QAAQ,GAAGN,WAAW,CAACC,CAAD,CAA5B;AACA,QAAMI,MAAM,GAAG,8BAAaC,QAAb,CAAf;AACA,QAAMoB,IAAI,GAAGrB,MAAM,CAACsB,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAb;AACA,QAAMC,UAAU,GAAGzB,oBAAoB,CAACC,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,CAAvC;AACA,QAAIuB,eAAe,GAAG,EAAtB;;AACA,QAAI,CAACP,QAAQ,CAACI,IAAD,CAAb,EAAqB;AACnBJ,MAAAA,QAAQ,CAACI,IAAD,CAAR,GAAiB,IAAjB;AACAG,MAAAA,eAAe,6BACLH,IADK,eAAf;AAGD;;AACD,qBAAUG,eAAV,+BACcxB,MADd,iBAC2BuB,UAD3B;AAGD,GAfa,CAAd;AAiBA,aAAOE,kBAAP,qBAEyBP,KAAK,CAACQ,IAAN,CAAW,EAAX,CAFzB;AAQD","sourcesContent":["import dedent from 'dedent';\nimport formatLocale from '@ringcentral-integration/i18n/lib/formatLocale';\n\nfunction getBaseName(f) {\n  return f.replace(/\\.(js|json|ts)$/i, '');\n}\n\nfunction returnLoadLocaleCode(chunk, locale, basename) {\n  const padding = chunk ? '    ' : '  ';\n  let code = `\n          ${padding}const data = require('./${basename}');\n          ${padding}return resolve(data.__esModule === true ? data.default : data);`;\n  if (chunk) {\n    code = `\n          if (typeof require.ensure === 'function') {\n            return require.ensure(['./${basename}'], (require) => {${code}\n            }, '${locale}');\n          } else {${code}\n          }`;\n  }\n  return code;\n}\n\n/**\n * @typedef GLCOptions\n * @property {String[]} files\n * @property {Boolean} [chunk]\n *\n */\n/**\n * @function\n * @description Generate js code for localeLoader according the files listed.\n * @param {GLCOptions} options\n */\nexport default function generateLoaderContent(\n  /** @type {GLCOptions} */ { files, chunk = true, supportedLocales = [] },\n) {\n  // create sort function\n  const sortIdx = {};\n  supportedLocales.forEach((locale, idx) => {\n    sortIdx[formatLocale(locale)] = idx;\n  });\n  const byLocale = (a, b) => {\n    const ta = formatLocale(getBaseName(a));\n    const tb = formatLocale(getBaseName(b));\n    const aIdx = sortIdx[ta] ?? -1;\n    const bIdx = sortIdx[tb] ?? -1;\n    if (aIdx === bIdx) {\n      // -1 or ta === tb\n      if (ta === tb) {\n        return 0;\n      }\n      return ta > tb ? 1 : -1;\n    }\n    // smaller index has priority\n    return aIdx > bIdx ? 1 : -1;\n  };\n\n  const usedLang = {};\n  const cases = files.sort(byLocale).map((f) => {\n    const basename = getBaseName(f);\n    const locale = formatLocale(basename);\n    const lang = locale.split('-')[0];\n    const returnCode = returnLoadLocaleCode(chunk, locale, basename);\n    let langDefaultCase = '';\n    if (!usedLang[lang]) {\n      usedLang[lang] = true;\n      langDefaultCase = `\n        case '${lang}':\n      `;\n    }\n    return `${langDefaultCase}\n          case '${locale}': {${returnCode}\n          }`;\n  });\n\n  return dedent`export default function loadLocale(locale) {\n      return new Promise((resolve) => {\n        switch (locale) {${cases.join('')}\n          default:\n            return resolve(null);\n        }\n      });\n    }\\n`;\n}\n"],"file":"index.js"}