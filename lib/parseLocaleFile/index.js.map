{"version":3,"file":"index.js","names":["_generator","_interopRequireDefault","require","_parser","_ramda","_extractAnnotations2","e","__esModule","parseLocaleFile","rawContent","data","Map","_extractAnnotations","extractAnnotations","content","annotations","ast","parse","sourceType","plugins","getData","properties","forEach","prop","key","substring","start","end","type","concat","value","eval","generate","code","source","get","set","defaultExport","find","item","program","body","declaration","nest","expression"],"sources":["lib/parseLocaleFile/index.js"],"sourcesContent":["import generate from '@babel/generator';\nimport { parse } from '@babel/parser';\nimport { find, forEach } from 'ramda';\n\nimport extractAnnotations from '../extractAnnotations';\n\n/* eslint { no-eval: 0 } */\nexport default function parseLocaleFile(rawContent) {\n  const data = new Map();\n  const { content, annotations } = extractAnnotations(rawContent);\n  const ast = parse(content, { sourceType: 'module', plugins: ['typescript'] });\n\n  function getData(properties) {\n    forEach((prop) => {\n      // get raw key from source content\n      let key = content.substring(prop.key.start, prop.key.end);\n      // wrap key in [] if needed\n      if (\n        prop.key.type !== 'StringLiteral' &&\n        prop.key.type !== 'Identifier' &&\n        prop.key.type !== 'NumericLiteral'\n      ) {\n        key = `[${key}]`;\n      }\n      // evaluate value to convert template literals or string concats into single string literal\n      const value = eval(generate(prop.value).code);\n      const source = annotations.get(key);\n\n      data.set(key, {\n        key,\n        value,\n        source,\n      });\n    }, properties);\n  }\n\n  const defaultExport = find(\n    (item) => item.type === 'ExportDefaultDeclaration',\n    ast.program.body,\n  );\n\n  if (defaultExport) {\n    if (defaultExport.declaration.type === 'ObjectExpression') {\n      getData(defaultExport.declaration.properties);\n    } else if (defaultExport.declaration.type === 'TSAsExpression') {\n      const nest = defaultExport.declaration.expression;\n      if (nest.type === 'ObjectExpression') {\n        getData(nest.properties);\n      }\n    }\n  }\n\n  return {\n    content,\n    annotations,\n    ast,\n    data,\n  };\n}\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AAEA,IAAAG,oBAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAAuD,SAAAD,uBAAAK,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,gBAAAA,CAAA;AAEvD;AACe,SAASE,eAAeA,CAACC,UAAU,EAAE;EAClD,IAAMC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EAAC,IAAAC,mBAAA,GACU,IAAAC,+BAAkB,EAACJ,UAAU,CAAC;IAAvDK,OAAO,GAAAF,mBAAA,CAAPE,OAAO;IAAEC,WAAW,GAAAH,mBAAA,CAAXG,WAAW;EAC5B,IAAMC,GAAG,GAAG,IAAAC,aAAK,EAACH,OAAO,EAAE;IAAEI,UAAU,EAAE,QAAQ;IAAEC,OAAO,EAAE,CAAC,YAAY;EAAE,CAAC,CAAC;EAE7E,SAASC,OAAOA,CAACC,UAAU,EAAE;IAC3B,IAAAC,cAAO,EAAC,UAACC,IAAI,EAAK;MAChB;MACA,IAAIC,GAAG,GAAGV,OAAO,CAACW,SAAS,CAACF,IAAI,CAACC,GAAG,CAACE,KAAK,EAAEH,IAAI,CAACC,GAAG,CAACG,GAAG,CAAC;MACzD;MACA,IACEJ,IAAI,CAACC,GAAG,CAACI,IAAI,KAAK,eAAe,IACjCL,IAAI,CAACC,GAAG,CAACI,IAAI,KAAK,YAAY,IAC9BL,IAAI,CAACC,GAAG,CAACI,IAAI,KAAK,gBAAgB,EAClC;QACAJ,GAAG,OAAAK,MAAA,CAAOL,GAAG,MAAG;MAClB;MACA;MACA,IAAMM,KAAK,GAAGC,IAAI,CAAC,IAAAC,qBAAQ,EAACT,IAAI,CAACO,KAAK,CAAC,CAACG,IAAI,CAAC;MAC7C,IAAMC,MAAM,GAAGnB,WAAW,CAACoB,GAAG,CAACX,GAAG,CAAC;MAEnCd,IAAI,CAAC0B,GAAG,CAACZ,GAAG,EAAE;QACZA,GAAG,EAAHA,GAAG;QACHM,KAAK,EAALA,KAAK;QACLI,MAAM,EAANA;MACF,CAAC,CAAC;IACJ,CAAC,EAAEb,UAAU,CAAC;EAChB;EAEA,IAAMgB,aAAa,GAAG,IAAAC,WAAI,EACxB,UAACC,IAAI;IAAA,OAAKA,IAAI,CAACX,IAAI,KAAK,0BAA0B;EAAA,GAClDZ,GAAG,CAACwB,OAAO,CAACC,IACd,CAAC;EAED,IAAIJ,aAAa,EAAE;IACjB,IAAIA,aAAa,CAACK,WAAW,CAACd,IAAI,KAAK,kBAAkB,EAAE;MACzDR,OAAO,CAACiB,aAAa,CAACK,WAAW,CAACrB,UAAU,CAAC;IAC/C,CAAC,MAAM,IAAIgB,aAAa,CAACK,WAAW,CAACd,IAAI,KAAK,gBAAgB,EAAE;MAC9D,IAAMe,IAAI,GAAGN,aAAa,CAACK,WAAW,CAACE,UAAU;MACjD,IAAID,IAAI,CAACf,IAAI,KAAK,kBAAkB,EAAE;QACpCR,OAAO,CAACuB,IAAI,CAACtB,UAAU,CAAC;MAC1B;IACF;EACF;EAEA,OAAO;IACLP,OAAO,EAAPA,OAAO;IACPC,WAAW,EAAXA,WAAW;IACXC,GAAG,EAAHA,GAAG;IACHN,IAAI,EAAJA;EACF,CAAC;AACH","ignoreList":[]}