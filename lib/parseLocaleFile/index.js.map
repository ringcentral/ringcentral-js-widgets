{"version":3,"file":"index.js","names":["_ramda","require","_parser","_generator","_interopRequireDefault","_extractAnnotations2","obj","__esModule","parseLocaleFile","rawContent","data","Map","_extractAnnotations","extractAnnotations","content","annotations","ast","parse","sourceType","defaultExport","find","item","type","program","body","declaration","forEach","prop","key","substring","start","end","concat","value","eval","generate","code","source","get","set","properties"],"sources":["lib/parseLocaleFile/index.js"],"sourcesContent":["import { find, forEach } from 'ramda';\nimport { parse } from '@babel/parser';\nimport generate from '@babel/generator';\nimport extractAnnotations from '../extractAnnotations';\n\n/* eslint { no-eval: 0 } */\nexport default function parseLocaleFile(rawContent) {\n  const data = new Map();\n  const { content, annotations } = extractAnnotations(rawContent);\n  const ast = parse(content, { sourceType: 'module' });\n\n  const defaultExport = find(\n    (item) => item.type === 'ExportDefaultDeclaration',\n    ast.program.body,\n  );\n  if (defaultExport && defaultExport.declaration.type === 'ObjectExpression') {\n    forEach((prop) => {\n      // get raw key from source content\n      let key = content.substring(prop.key.start, prop.key.end);\n      // wrap key in [] if needed\n      if (\n        prop.key.type !== 'StringLiteral' &&\n        prop.key.type !== 'Identifier' &&\n        prop.key.type !== 'NumericLiteral'\n      ) {\n        key = `[${key}]`;\n      }\n      // evaluate value to convert template literals or string concats into single string literal\n      const value = eval(generate(prop.value).code);\n      const source = annotations.get(key);\n\n      data.set(key, {\n        key,\n        value,\n        source,\n      });\n    }, defaultExport.declaration.properties);\n  }\n\n  return {\n    content,\n    annotations,\n    ast,\n    data,\n  };\n}\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,oBAAA,GAAAD,sBAAA,CAAAH,OAAA;AAAuD,SAAAG,uBAAAE,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAEvD;AACe,SAASE,eAAeA,CAACC,UAAU,EAAE;EAClD,IAAMC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EAAC,IAAAC,mBAAA,GACU,IAAAC,+BAAkB,EAACJ,UAAU,CAAC;IAAvDK,OAAO,GAAAF,mBAAA,CAAPE,OAAO;IAAEC,WAAW,GAAAH,mBAAA,CAAXG,WAAW;EAC5B,IAAMC,GAAG,GAAG,IAAAC,aAAK,EAACH,OAAO,EAAE;IAAEI,UAAU,EAAE;EAAS,CAAC,CAAC;EAEpD,IAAMC,aAAa,GAAG,IAAAC,WAAI,EACxB,UAACC,IAAI;IAAA,OAAKA,IAAI,CAACC,IAAI,KAAK,0BAA0B;EAAA,GAClDN,GAAG,CAACO,OAAO,CAACC,IACd,CAAC;EACD,IAAIL,aAAa,IAAIA,aAAa,CAACM,WAAW,CAACH,IAAI,KAAK,kBAAkB,EAAE;IAC1E,IAAAI,cAAO,EAAC,UAACC,IAAI,EAAK;MAChB;MACA,IAAIC,GAAG,GAAGd,OAAO,CAACe,SAAS,CAACF,IAAI,CAACC,GAAG,CAACE,KAAK,EAAEH,IAAI,CAACC,GAAG,CAACG,GAAG,CAAC;MACzD;MACA,IACEJ,IAAI,CAACC,GAAG,CAACN,IAAI,KAAK,eAAe,IACjCK,IAAI,CAACC,GAAG,CAACN,IAAI,KAAK,YAAY,IAC9BK,IAAI,CAACC,GAAG,CAACN,IAAI,KAAK,gBAAgB,EAClC;QACAM,GAAG,OAAAI,MAAA,CAAOJ,GAAG,MAAG;MAClB;MACA;MACA,IAAMK,KAAK,GAAGC,IAAI,CAAC,IAAAC,qBAAQ,EAACR,IAAI,CAACM,KAAK,CAAC,CAACG,IAAI,CAAC;MAC7C,IAAMC,MAAM,GAAGtB,WAAW,CAACuB,GAAG,CAACV,GAAG,CAAC;MAEnClB,IAAI,CAAC6B,GAAG,CAACX,GAAG,EAAE;QACZA,GAAG,EAAHA,GAAG;QACHK,KAAK,EAALA,KAAK;QACLI,MAAM,EAANA;MACF,CAAC,CAAC;IACJ,CAAC,EAAElB,aAAa,CAACM,WAAW,CAACe,UAAU,CAAC;EAC1C;EAEA,OAAO;IACL1B,OAAO,EAAPA,OAAO;IACPC,WAAW,EAAXA,WAAW;IACXC,GAAG,EAAHA,GAAG;IACHN,IAAI,EAAJA;EACF,CAAC;AACH"}