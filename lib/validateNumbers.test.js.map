{"version":3,"sources":["lib/validateNumbers.test.ts"],"names":["describe","it","result","phoneNumbers","countryCode","areaCode","allowRegionSettings","to","deep","equal"],"mappings":";;;;;;;;AAAA;;AAEA;;;;;;AAEAA,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCC,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMC,MAAM,GAAG,sCAAgB;AAC7BC,MAAAA,YAAY,EAAE,CAAC,SAAD,CADe;AAE7BC,MAAAA,WAAW,EAAE,IAFgB;AAG7BC,MAAAA,QAAQ,EAAE,KAHmB;AAI7BC,MAAAA,mBAAmB,EAAE;AAJQ,KAAhB,CAAf;AAMA,sBAAOJ,MAAP,EAAeK,EAAf,CAAkBC,IAAlB,CAAuBC,KAAvB,CAA6B,CAAC,cAAD,CAA7B;AACD,GARC,CAAF;AAUAR,EAAAA,EAAE,CAAC,2DAAD,uEAA8D;AAAA;AAAA;AAAA;AAAA;AAAA;AACxDC,YAAAA,MADwD,GAC/C,sCAAgB;AAC7BC,cAAAA,YAAY,EAAE,CAAC,KAAD,CADe;AAE7BC,cAAAA,WAAW,EAAE,IAFgB;AAG7BC,cAAAA,QAAQ,EAAE,KAHmB;AAI7BC,cAAAA,mBAAmB,EAAE;AAJQ,aAAhB,CAD+C;AAO9D,8BAAOJ,MAAP,EAAeK,EAAf,CAAkBC,IAAlB,CAAuBC,KAAvB,CAA6B,CAAC,KAAD,CAA7B;;AAP8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9D,GAAF;AAUAR,EAAAA,EAAE,CAAC,oEAAD,uEAAuE;AAAA;AAAA;AAAA;AAAA;AAAA;AACjEC,YAAAA,MADiE,GACxD,sCAAgB;AAC7BC,cAAAA,YAAY,EAAE,CAAC,KAAD,CADe;AAE7BC,cAAAA,WAAW,EAAE,IAFgB;AAG7BC,cAAAA,QAAQ,EAAE,KAHmB;AAI7BC,cAAAA,mBAAmB,EAAE;AAJQ,aAAhB,CADwD;AAOvE,8BAAOJ,MAAP,EAAeK,EAAf,CAAkBC,IAAlB,CAAuBC,KAAvB,CAA6B,CAAC,KAAD,CAA7B;;AAPuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvE,GAAF;AAUAR,EAAAA,EAAE,CAAC,yDAAD,uEAA4D;AAAA;AAAA;AAAA;AAAA;AAC5D,8BAAO,YAAM;AACX,oDAAgB;AACdE,gBAAAA,YAAY,EAAE,CAAC,QAAD,CADA;AAEdC,gBAAAA,WAAW,EAAE,IAFC;AAGdC,gBAAAA,QAAQ,EAAE,KAHI;AAIdC,gBAAAA,mBAAmB,EAAE;AAJP,eAAhB;AAMD,aAPD,EAOGC,EAPH,YAD4D,CAS5D;AACA;AACA;AACA;AACA;;AAb4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5D,GAAF;AAeD,CA9CO,CAAR","sourcesContent":["import { expect } from 'chai';\n\nimport { validateNumbers } from './validateNumbers';\n\ndescribe('validateNumbers', () => {\n  it('should return result numbers if phoneNumbers is valid', () => {\n    const result = validateNumbers({\n      phoneNumbers: ['8370000'],\n      countryCode: 'US',\n      areaCode: '666',\n      allowRegionSettings: true,\n    });\n    expect(result).to.deep.equal(['+16668370000']);\n  });\n\n  it('should return result true if one number is special number', async () => {\n    const result = validateNumbers({\n      phoneNumbers: ['911'],\n      countryCode: 'US',\n      areaCode: '666',\n      allowRegionSettings: true,\n    });\n    expect(result).to.deep.equal(['911']);\n  });\n\n  it('should return result true if one number is not an extension number', async () => {\n    const result = validateNumbers({\n      phoneNumbers: ['999'],\n      countryCode: 'US',\n      areaCode: '666',\n      allowRegionSettings: true,\n    });\n    expect(result).to.deep.equal(['999']);\n  });\n\n  it('should throw error if one number is not an valid number', async () => {\n    expect(() => {\n      validateNumbers({\n        phoneNumbers: ['*&%^&%'],\n        countryCode: 'US',\n        areaCode: '666',\n        allowRegionSettings: true,\n      });\n    }).to.throw();\n    //   const result = validateNumbers(['*&%^&%'], validateNumbersOptions, brandId);\n    //   expect(result).to.deep.equal(['*&%^&%'], {\n    //     phoneNumber: '*&%^&%',\n    //     type: 'noToNumber'\n    //   });\n  });\n});\n"],"file":"validateNumbers.test.js"}