{"version":3,"file":"customFormat.js","names":["_extractDigits","require","customFormat","_ref","localPhoneNumber","template","_ref$templateChar","templateChar","_ref$strict","strict","localDigits","extractDigits","split","numOfDigits","length","templateCharCount","result","reduce","acc","char","push","shift","join","Error","concat"],"sources":["lib/customFormat/customFormat.ts"],"sourcesContent":["import { extractDigits } from '../extractDigits';\n\nimport { CustomFormatOptions } from './customFormat.interface';\n\n/**\n * @param localPhoneNumber phone number in local number format\n * @param template template to format the phone number\n * @param templateChar character to replace with phone number digits\n * @param strict if true, will throw an error if the number of digits in the phone number doesn't match the number of template characters\n * @returns formatted phone number\n *\n * @example\n * ```ts\n * customFormat({ localPhoneNumber: '6505551234', template: 'XXX-XXX-XXXX' }); // '650-555-1234'\n *\n * customFormat({ localPhoneNumber: '6505551234', template: '(YYY) YYY-YYYY', templateChar: 'Y' }); // '(650) 555-1234'\n *\n * customFormat({ localPhoneNumber: '6505551234', template: 'XXX-XXX-XXX', strict: true }); // Error: Invalid custom format: 6505551234 => XXX-XXX-XXX, number of digits don't match: 10 !== 9\n *\n * customFormat({ localPhoneNumber: '6505551234', template: 'XXX-XXX-XXX'}); // '650-555-123' // ignore extra digits in non strict mode\n *\n * customFormat({ localPhoneNumber: '6505551234', template: 'XXX-XXX-XXXXX'); // '650-555-1234' // extra X will be ignored in non strict mode\n * ```\n */\nexport function customFormat({\n  localPhoneNumber,\n  template,\n  templateChar = 'X',\n  strict = false,\n}: CustomFormatOptions) {\n  const localDigits = extractDigits(localPhoneNumber).split('');\n  const numOfDigits = localDigits.length;\n  let templateCharCount = 0;\n\n  const result = template\n    .split('')\n    .reduce<string[]>((acc, char) => {\n      if (char === templateChar) {\n        templateCharCount += 1;\n        if (localDigits.length > 0) {\n          acc.push(localDigits.shift()!);\n        }\n      } else {\n        acc.push(char);\n      }\n      return acc;\n    }, [])\n    .join('');\n\n  if (strict && templateCharCount !== numOfDigits) {\n    throw new Error(\n      `Invalid custom format: ${localPhoneNumber} => ${template}, number of digits don't match: ${numOfDigits} !== ${templateCharCount}`,\n    );\n  }\n  return result;\n}\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,YAAYA,CAAAC,IAAA,EAKJ;EAAA,IAJtBC,gBAAgB,GAAAD,IAAA,CAAhBC,gBAAgB;IAChBC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAAAC,iBAAA,GAAAH,IAAA,CACRI,YAAY;IAAZA,YAAY,GAAAD,iBAAA,cAAG,GAAG,GAAAA,iBAAA;IAAAE,WAAA,GAAAL,IAAA,CAClBM,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAG,KAAK,GAAAA,WAAA;EAEd,IAAME,WAAW,GAAG,IAAAC,4BAAa,EAACP,gBAAgB,CAAC,CAACQ,KAAK,CAAC,EAAE,CAAC;EAC7D,IAAMC,WAAW,GAAGH,WAAW,CAACI,MAAM;EACtC,IAAIC,iBAAiB,GAAG,CAAC;EAEzB,IAAMC,MAAM,GAAGX,QAAQ,CACpBO,KAAK,CAAC,EAAE,CAAC,CACTK,MAAM,CAAW,UAACC,GAAG,EAAEC,KAAI,EAAK;IAC/B,IAAIA,KAAI,KAAKZ,YAAY,EAAE;MACzBQ,iBAAiB,IAAI,CAAC;MACtB,IAAIL,WAAW,CAACI,MAAM,GAAG,CAAC,EAAE;QAC1BI,GAAG,CAACE,IAAI,CAACV,WAAW,CAACW,KAAK,CAAC,CAAE,CAAC;MAChC;IACF,CAAC,MAAM;MACLH,GAAG,CAACE,IAAI,CAACD,KAAI,CAAC;IAChB;IACA,OAAOD,GAAG;EACZ,CAAC,EAAE,EAAE,CAAC,CACLI,IAAI,CAAC,EAAE,CAAC;EAEX,IAAIb,MAAM,IAAIM,iBAAiB,KAAKF,WAAW,EAAE;IAC/C,MAAM,IAAIU,KAAK,2BAAAC,MAAA,CACapB,gBAAgB,UAAAoB,MAAA,CAAOnB,QAAQ,sCAAAmB,MAAA,CAAmCX,WAAW,WAAAW,MAAA,CAAQT,iBAAiB,CAClI,CAAC;EACH;EACA,OAAOC,MAAM;AACf","ignoreList":[]}