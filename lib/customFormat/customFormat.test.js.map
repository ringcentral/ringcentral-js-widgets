{"version":3,"file":"customFormat.test.js","names":["_customFormat","require","describe","it","localUSNumbers","template","forEach","localPhoneNumber","expect","customFormat","toBe","strict","toThrow","templateChar"],"sources":["lib/customFormat/customFormat.test.ts"],"sourcesContent":["import { customFormat } from './customFormat';\n\ndescribe('customFormat', () => {\n  it('should format phone numbers with custom format template', () => {\n    const localUSNumbers = [\n      '(650) 555-1234',\n      '6505551234',\n      '650.555.1234',\n      '650-555-1234',\n      '650 555 1234',\n    ];\n    let template = 'XXX-XXX-XXXX';\n    localUSNumbers.forEach((localPhoneNumber) => {\n      expect(customFormat({ localPhoneNumber, template })).toBe('650-555-1234');\n    });\n    template = '(XXX) XXX-XXXX';\n    localUSNumbers.forEach((localPhoneNumber) => {\n      expect(customFormat({ localPhoneNumber, template })).toBe(\n        '(650) 555-1234',\n      );\n    });\n    template = 'XXX.XXX.XXXX';\n    localUSNumbers.forEach((localPhoneNumber) => {\n      expect(customFormat({ localPhoneNumber, template })).toBe('650.555.1234');\n    });\n    template = 'XXX XXX XXXX';\n    localUSNumbers.forEach((localPhoneNumber) => {\n      expect(customFormat({ localPhoneNumber, template })).toBe('650 555 1234');\n    });\n  });\n  it(\"should throw an error if the number of digits in the phone number doesn't match the number of template characters in strict mode\", () => {\n    const localPhoneNumber = '6505551234';\n    const template = 'XXX-XXX-XXX';\n    expect(() =>\n      customFormat({ localPhoneNumber, template, strict: true }),\n    ).toThrow(\n      `Invalid custom format: 6505551234 => XXX-XXX-XXX, number of digits don't match: 10 !== 9`,\n    );\n  });\n  it('should ignore extra digits in non strict mode', () => {\n    const localPhoneNumber = '6505551234';\n    const template = 'XXX-XXX-XXX';\n    expect(customFormat({ localPhoneNumber, template })).toBe('650-555-123');\n  });\n  it('should ignore extra template characters in non strict mode', () => {\n    const localPhoneNumber = '6505551234';\n    const template = 'XXX-XXX-XXXXX';\n    expect(customFormat({ localPhoneNumber, template })).toBe('650-555-1234');\n  });\n  it('should format phone numbers with custom format template and custom template character', () => {\n    const localUSNumbers = [\n      '(650) 555-1234',\n      '6505551234',\n      '650.555.1234',\n      '650-555-1234',\n      '650 555 1234',\n    ];\n    const template = 'YYY-YYY-YYYY';\n    const templateChar = 'Y';\n    localUSNumbers.forEach((localPhoneNumber) => {\n      expect(customFormat({ localPhoneNumber, template, templateChar })).toBe(\n        '650-555-1234',\n      );\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}