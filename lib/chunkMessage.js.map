{"version":3,"sources":["lib/chunkMessage.ts"],"names":["chunkMessage","text","maxLength","Error","chunks","fromIndex","total","length","toIndex","offset","char","charAt","isWhiteSpace","test","snippet","substring","push"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEe,SAASA,YAAT,CAAsBC,IAAtB,EAA4BC,SAA5B,EAAuC;AACpD,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,MAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;AACjC,UAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,MAAID,SAAS,GAAG,CAAhB,EAAmB;AACjB,UAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED,MAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAMC,KAAK,GAAGL,IAAI,CAACM,MAAnB;;AAEA,SAAOF,SAAS,GAAGC,KAAnB,EAA0B;AACxB,QAAIE,OAAO,GAAGH,SAAS,GAAGH,SAA1B;AACA,QAAIO,MAAM,GAAG,CAAb;;AACA,WAAOA,MAAM,GAAGP,SAAhB,EAA2BO,MAAM,IAAI,CAArC,EAAwC;AACtC,UAAMC,KAAI,GAAGT,IAAI,CAACU,MAAL,CAAYH,OAAO,GAAGC,MAAtB,CAAb;;AACA,UAAI,CAACC,KAAL,EAAW;AACT;AACD;;AACD,UAAME,YAAY,GAAG,KAAKC,IAAL,CAAUH,KAAV,CAArB;;AACA,UAAIE,YAAJ,EAAkB;AAChB,YAAIH,MAAM,GAAG,CAAb,EAAgB;AACdA,UAAAA,MAAM,IAAI,CAAV;AACD;;AACD;AACD;AACF;;AACD,QAAIA,MAAM,KAAKP,SAAf,EAA0B;AACxBM,MAAAA,OAAO,IAAIC,MAAX;AACD;;AACD,QAAMK,OAAO,GAAGb,IAAI,CAACc,SAAL,CAAeV,SAAf,EAA0BG,OAA1B,CAAhB;AACAH,IAAAA,SAAS,GAAGG,OAAZ;AACAJ,IAAAA,MAAM,CAACY,IAAP,CAAYF,OAAZ;AACD;;AAED,SAAOV,MAAP;AACD","sourcesContent":["/**\n * this module seems better\n * https://www.npmjs.com/package/chunk-text\n * use our own implementation for now.\n */\n\nexport default function chunkMessage(text, maxLength) {\n  if (!text) {\n    return [];\n  }\n\n  if (typeof maxLength !== 'number') {\n    throw new Error('Should be a integer \"maxLength\"');\n  }\n\n  if (maxLength < 1) {\n    throw new Error('Should greater than 0 \"maxLength\"');\n  }\n\n  const chunks = [];\n  let fromIndex = 0;\n  const total = text.length;\n\n  while (fromIndex < total) {\n    let toIndex = fromIndex + maxLength;\n    let offset = 0;\n    for (; offset < maxLength; offset += 1) {\n      const char = text.charAt(toIndex - offset);\n      if (!char) {\n        break;\n      }\n      const isWhiteSpace = /\\s/.test(char);\n      if (isWhiteSpace) {\n        if (offset > 0) {\n          offset -= 1;\n        }\n        break;\n      }\n    }\n    if (offset !== maxLength) {\n      toIndex -= offset;\n    }\n    const snippet = text.substring(fromIndex, toIndex);\n    fromIndex = toIndex;\n    chunks.push(snippet);\n  }\n\n  return chunks;\n}\n"],"file":"chunkMessage.js"}