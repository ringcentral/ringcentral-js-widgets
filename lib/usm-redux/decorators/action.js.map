{"version":3,"file":"action.js","names":["_immer","require","_constant","_createStore","_index","_checkPatches","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","_typeof","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","o","minLen","_arrayLikeToArray","n","prototype","toString","slice","constructor","name","Array","from","test","len","arr2","_i","iterator","_s","_e","_x","_r","_arr","_n","_d","next","done","err","isArray","action","descriptor","fn","Error","concat","_this","_len","args","_key","time","process","env","NODE_ENV","Date","now","getStagedState","_this$_getLastState","_this$_getLastState2","lastState","_getLastState","storeKey","getState","state","patches","inversePatches","recipe","draftState","setStagedState","enablePatches","getPatchesToggle","_produceWithPatches","produceWithPatches","_produceWithPatches2","produce","changed","_console","console","warn","identifierKey","executionTime","_this$_handleState","_handleState","type","method","params","_state","_usm","usm","_patches","_inversePatches","requiredWarning","checkPatches","dispatch","exports"],"sources":["lib/usm-redux/decorators/action.ts"],"sourcesContent":["/* eslint-disable func-names */\nimport type { Patch } from 'immer';\nimport { produceWithPatches, produce } from 'immer';\nimport type { Service, Action } from '../interface';\nimport { storeKey, identifierKey, usm } from '../constant';\nimport { getPatchesToggle } from '../createStore';\nimport { getStagedState, setStagedState } from '../utils/index';\nimport { checkPatches } from '../checkPatches';\n\nexport const action = (\n  target: object,\n  key: string | symbol,\n  descriptor: TypedPropertyDescriptor<(...args: any[]) => void>,\n) => {\n  const fn = descriptor.value;\n  if (typeof fn !== 'function') {\n    throw new Error(\n      `${String(key)} can only be decorated by '@action' as a class method.`,\n    );\n  }\n  const value = function (this: Service, ...args: unknown[]) {\n    let time: number;\n    if (process.env.NODE_ENV === 'development') {\n      time = Date.now();\n    }\n    if (typeof getStagedState() === 'undefined') {\n      try {\n        const lastState: Record<string, any> =\n          this._getLastState?.() ?? this[storeKey].getState();\n        let state: Record<string, any> | undefined;\n        let patches: Patch[] = [];\n        let inversePatches: Patch[] = [];\n        const recipe = (draftState: Record<string, unknown>) => {\n          setStagedState(draftState);\n          fn.apply(this, args);\n        };\n        const enablePatches = getPatchesToggle();\n        if (enablePatches) {\n          [state, patches, inversePatches] = produceWithPatches(\n            lastState,\n            recipe,\n          );\n        } else {\n          state = produce(lastState, recipe);\n        }\n        setStagedState(undefined);\n        const changed = lastState !== state;\n        if (process.env.NODE_ENV === 'development') {\n          if (!changed) {\n            console.warn(\n              `There are no state updates to method '${\n                this[identifierKey]\n              }.${key.toString()}' with arguments:`,\n              ...args,\n            );\n          }\n          // performance checking\n          const executionTime = Date.now() - time!;\n          if (executionTime > 100)\n            console.warn(\n              `The execution time of method '${\n                this[identifierKey]\n              }.${key.toString()}' is ${executionTime} ms, it's recommended to use 'dispatch' API.`,\n            );\n          // performance detail: https://immerjs.github.io/immer/docs/performance\n        }\n\n        if (changed) {\n          this._handleState?.(state);\n          const action: Action = {\n            type: this[identifierKey],\n            method: key,\n            params: args,\n            _state: state,\n            _usm: usm,\n            ...(enablePatches\n              ? {\n                  _patches: patches,\n                  _inversePatches: inversePatches,\n                }\n              : {}),\n          };\n          if (process.env.NODE_ENV === 'development') {\n            const requiredWarning = checkPatches(lastState, action);\n            if (requiredWarning) {\n              console.warn(\n                `The state update operation in the method '${this[\n                  identifierKey\n                ].toString()}.${key.toString()}'  is a replacement update operation. If there is a performance issue, be sure to use mutation updates to ensure the minimum set of update patches.`,\n              );\n            }\n          }\n          this[storeKey].dispatch(action);\n        }\n      } finally {\n        setStagedState(undefined);\n      }\n    } else {\n      // enable staged state mode.\n      fn.apply(this, args);\n    }\n  };\n  return {\n    ...descriptor,\n    value,\n  };\n};\n"],"mappings":"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"}