{"version":3,"sources":["lib/usm-redux/subscribe.ts"],"names":["subscribe","module","listener","Error","service","className","Object","getPrototypeOf","constructor","name","unsubscribe","storeKey","subscriptions","subscriptionsKey","_unsubscribe","push","assign","watch","selector","watcher","multiple","isEqual","defaultIsEqual","oldValue","Array","isArray","newValue","length","i","lastValues","lastValue"],"mappings":"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","sourcesContent":["import {\n  Subscribe,\n  Watch,\n  Unsubscribe,\n  Subscription,\n  Service,\n} from './interface';\nimport { storeKey, subscriptionsKey } from './constant';\nimport { isEqual as defaultIsEqual } from './utils/index';\n\nconst subscribe: Subscribe = (module, listener) => {\n  if (typeof module !== 'object') {\n    throw new Error(`The subscription target '${module}' is not an object.`);\n  }\n  const service: Service = module;\n  const className = Object.getPrototypeOf(service).constructor.name;\n  if (typeof listener !== 'function') {\n    throw new Error(\n      `The 'listener' should be a function in the class '${className}'.`,\n    );\n  }\n  let unsubscribe: Unsubscribe;\n  if (service[storeKey]) {\n    unsubscribe = service[storeKey].subscribe(listener);\n  } else {\n    // When constructing\n    const subscriptions: Subscription[] = service[subscriptionsKey] || [];\n    let _unsubscribe: Unsubscribe;\n    subscriptions.push(() => {\n      if (typeof service[storeKey] !== 'object') {\n        throw new Error(\n          `The subscription target class '${className}' should be created via 'createStore()'.`,\n        );\n      }\n      _unsubscribe = service[storeKey].subscribe(listener);\n    });\n    unsubscribe = () => _unsubscribe();\n    Object.assign(service, {\n      [subscriptionsKey]: subscriptions,\n    });\n  }\n  return unsubscribe;\n};\n\n/**\n * watch value change in the store\n *\n * @param module binding module instance\n * @param selector that selector you want to watch\n * @param watcher callback function\n * @param options options for that watcher\n * @returns unsubscribe method\n *\n * @example\n * ```ts\n *\n    // watch one variable\n    watch(\n      this,\n      () => this._deps.auth.loggedIn,\n      (newValue, oldValue) => {\n        // do something\n      },\n    );\n\n    // watch many variables\n    watch(\n      this,\n      () => [\n        this._deps.auth.loggedIn,\n        this._deps.routerInteraction.currentPath,\n      ],\n      (newValue, oldValue) => {\n        // do something\n      },\n      { multiple: true },\n    );\n * ```\n * custom equality function\n * ```ts\n    export const customEqual = (newValue: unknown, oldValue: unknown) => {\n      return x !== y;\n    };\n\n    watch(\n      this,\n      () => this._deps.auth.loggedIn,\n      (newValue, oldValue) => {\n        // do something\n      },\n      { isEqual: customEqual },\n    );\n    ```\n */\nconst watch: Watch = (\n  module,\n  selector,\n  watcher,\n  { multiple = false, isEqual = defaultIsEqual } = {},\n) => {\n  if (typeof watcher !== 'function') {\n    const className = Object.getPrototypeOf(module).constructor.name;\n    throw new Error(\n      `The 'watcher' should be a function in the class '${className}'.`,\n    );\n  }\n  let oldValue = selector();\n  if (multiple) {\n    if (!Array.isArray(oldValue)) {\n      const className = Object.getPrototypeOf(module).constructor.name;\n      throw new Error(\n        `The 'selector' should be a function that returns an array in the class '${className}'.`,\n      );\n    }\n    return subscribe(module, () => {\n      const newValue = selector();\n      const length = oldValue.length;\n      for (let i = 0; i < length; i++) {\n        if (!isEqual(newValue[i], oldValue[i])) {\n          const lastValues = oldValue;\n          oldValue = newValue;\n          watcher(newValue, lastValues);\n          break;\n        }\n      }\n    });\n  }\n  return subscribe(module, () => {\n    const newValue = selector();\n    if (!isEqual(newValue, oldValue)) {\n      const lastValue = oldValue;\n      oldValue = newValue;\n      watcher(newValue, lastValue);\n    }\n  });\n};\n\nexport { subscribe, watch };\n"],"file":"subscribe.js"}