{"version":3,"sources":["lib/MessageTransport/MessageTransport.ts"],"names":["TRANSPORTER_TYPES","POST_MESSAGE","EVENT_EMITTER","MessageTransport","transporterType","transporterDirection","TRANSPORTER_DIRECTION","TO_EXTERNAL","targetWindow","window","origin","options","name","_addReceiver","_createEmitter","_targetWindow","_origin","_myRequests","_othersRequests","_postMessage","_transporter","_onMessage","event","data","type","payload","requestId","result","error","_events","push","emit","response","has","get","reject","Error","resolve","request","set","dispose","PostMessageTransporter","EventEmitterTransporter","direction","addReceiver","createEmitter","Map","on","uuid","v4","promise","Promise","timeout","setTimeout","JSON","stringify","_timeout","then","clearTimeout","message","TransportBase"],"mappings":"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","sourcesContent":["import * as uuid from 'uuid';\n\nimport TransportBase from '../TransportBase';\nimport { TransportBaseProps } from '../TransportBase/TransportBase';\nimport { TransportResponseData } from '../TransportInteractionBase';\nimport {\n  EventEmitterTransporter,\n  PostMessageTransporter,\n  TRANSPORTER_DIRECTION,\n  TransporterDirection,\n} from './MessageTransporters';\n\ntype MessageTransportListener<T = any, K = {}> = (params: {\n  requestId: string;\n  payload: MessageTransportPayload<T, K>;\n}) => any;\n\ntype MessagePushTransportListener<T = any, K = {}> = (\n  payload: MessageTransportPayload<T, K>,\n) => any;\n\nexport type MessageTransportPayload<T = any, K = {}> = {\n  requestType: string;\n  data?: T;\n} & K;\n\nexport interface MessageTransportResponse {\n  requestId: string;\n  result: any;\n  error?: Error | string;\n}\n\nexport const TRANSPORTER_TYPES = {\n  POST_MESSAGE: 'postMessage',\n  EVENT_EMITTER: 'eventEmitter',\n} as const;\n\nexport type TransporterTypes = typeof TRANSPORTER_TYPES[keyof typeof TRANSPORTER_TYPES];\n\nexport interface MessageTransportProps {\n  transporterDirection?: TransporterDirection;\n  targetWindow?: Window;\n  origin?: string;\n  transporterType?: TransporterTypes;\n}\n\ntype MessageTransportRequestData<T = any, K = {}> = {\n  payload: MessageTransportPayload<T, K>;\n};\n\ntype Transporter = EventEmitterTransporter | PostMessageTransporter;\n\nexport default class MessageTransport extends TransportBase {\n  private _addReceiver: Transporter['addReceiver'];\n  private _createEmitter: Transporter['createEmitter'];\n  private _targetWindow: Window;\n  private _origin: string;\n  private _myRequests: Map<any, any>;\n  private _othersRequests: Map<any, any>;\n  private _postMessage: any;\n  private _transporter: Transporter;\n\n  constructor({\n    transporterType = TRANSPORTER_TYPES.POST_MESSAGE,\n    transporterDirection = TRANSPORTER_DIRECTION.TO_EXTERNAL,\n    targetWindow = window,\n    origin,\n    ...options\n  }: MessageTransportProps & Omit<TransportBaseProps, 'name'>) {\n    super({\n      ...options,\n      name: 'MessageTransport',\n    });\n    switch (transporterType) {\n      case TRANSPORTER_TYPES.EVENT_EMITTER:\n        this._transporter = new EventEmitterTransporter({\n          direction: transporterDirection,\n        });\n        break;\n      default:\n      case TRANSPORTER_TYPES.POST_MESSAGE:\n        this._transporter = new PostMessageTransporter();\n        break;\n    }\n\n    this._addReceiver = this._transporter.addReceiver;\n    this._createEmitter = this._transporter.createEmitter;\n\n    this._targetWindow = targetWindow;\n    this._origin = origin;\n    this._myRequests = new Map();\n    this._othersRequests = new Map();\n    this._postMessage = this._createEmitter(this._targetWindow);\n    this._addReceiver(this._onMessage);\n  }\n\n  _onMessage = (event: MessageEvent) => {\n    // TODO: confirm if the message is from iframe\n    if (this._origin && event.origin !== this._origin) {\n      return;\n    }\n    const { type, payload, requestId, result, error } = event.data;\n    switch (type) {\n      case this._events.push:\n        if (payload) {\n          this.emit(this._events.push, payload);\n        }\n        break;\n      case this._events.response:\n        if (requestId && this._myRequests.has(requestId)) {\n          if (error) {\n            this._myRequests.get(requestId).reject(new Error(error));\n          } else {\n            this._myRequests.get(requestId).resolve(result);\n          }\n        }\n        break;\n      case this._events.request:\n        if (requestId && payload) {\n          this._othersRequests.set(requestId, payload);\n          this.emit(this._events.request, {\n            requestId,\n            payload,\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  dispose = () => {\n    if (this._transporter instanceof PostMessageTransporter) {\n      this._transporter.dispose(this._onMessage);\n    }\n  };\n\n  addListeners<T = any, K = {}>({\n    push,\n    response,\n    request,\n  }: {\n    push?: MessagePushTransportListener<T, K>;\n    response?: MessageTransportListener<T, K>;\n    request?: MessageTransportListener<T, K>;\n  }) {\n    if (typeof push === 'function') {\n      this.on(this._events.push, push);\n    }\n    if (typeof response === 'function') {\n      this.on(this._events.response, response);\n    }\n    if (typeof request === 'function') {\n      this.on(this._events.request, request);\n    }\n  }\n\n  /** T is request data, K is response data */\n  async request<T = any, K = any>({\n    payload,\n  }: MessageTransportRequestData<T>): Promise<K> {\n    const requestId = uuid.v4();\n\n    const promise = new Promise<K>((resolve, reject) => {\n      this._myRequests.set(requestId, {\n        resolve,\n        reject,\n      });\n      this._postMessage({\n        type: this._events.request,\n        requestId,\n        payload,\n      });\n    });\n\n    let timeout = setTimeout(() => {\n      timeout = null;\n      this._myRequests\n        .get(requestId)\n        .reject(\n          new Error(`${this._events.timeout}: ${JSON.stringify(payload)}`),\n        );\n    }, this._timeout);\n\n    return promise\n      .then((result) => {\n        if (timeout) clearTimeout(timeout);\n        this._myRequests.delete(requestId);\n        return Promise.resolve(result);\n      })\n      .catch((error) => {\n        if (timeout) clearTimeout(timeout);\n        this._myRequests.delete(requestId);\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Send message without response\n   * @param {payload}\n   */\n  send<T = any>({ payload }: MessageTransportRequestData<T>): void {\n    this._postMessage({\n      type: this._events.push,\n      payload,\n    });\n  }\n\n  response({\n    requestId,\n    result,\n    error,\n  }: MessageTransportResponse): TransportResponseData {\n    const request = this._othersRequests.get(requestId);\n\n    if (request) {\n      this._othersRequests.delete(requestId);\n      this._postMessage({\n        type: this._events.response,\n        requestId,\n        result,\n        error: error instanceof Error ? error.message : error,\n      });\n    }\n\n    return {\n      result,\n      error,\n      requestId,\n    };\n  }\n}\n"],"file":"MessageTransport.js"}