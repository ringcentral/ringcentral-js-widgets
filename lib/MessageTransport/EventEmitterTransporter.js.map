{"version":3,"sources":["lib/MessageTransport/EventEmitterTransporter.ts"],"names":["TRANSPORTER_DIRECTION","TO_INTERNAL","TO_EXTERNAL","EventEmitterTransporter","direction","_direction","addReceiver","onMessage","window","_transporterEventEmitter","on","data","createEmitter","emitterData","callback","emit","EventEmitter","BasicTransporter"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;AAQO,IAAMA,qBAAqB,GAAG;AACnCC,EAAAA,WAAW,EAAE,YADsB;AAEnCC,EAAAA,WAAW,EAAE;AAFsB,CAA9B;;;AAQP;AACA;AACA;IACaC,uB;;;;;AAGX,yCAAgE;AAAA;;AAAA,QAAlDC,SAAkD,QAAlDA,SAAkD;;AAAA;;AAC9D;AAD8D,UAFxDC,UAEwD;;AAAA,UAQhEC,WARgE,GAQlD,UAACC,SAAD,EAAoB;AAChCC,MAAAA,MAAM,CAACC,wBAAP,CAAgCC,EAAhC,CACE,MAAKL,UAAL,KAAoBL,qBAAqB,CAACE,WAA1C,GACIF,qBAAqB,CAACC,WAD1B,GAEID,qBAAqB,CAACE,WAH5B,EAIE,UAACS,IAAD,EAAU;AACRJ,QAAAA,SAAS,CAAC;AACRI,UAAAA,IAAI,EAAJA;AADQ,SAAD,CAAT;AAGD,OARH;AAUD,KAnB+D;;AAAA,UAqBhEC,aArBgE,GAsB9D;AAAA,aACA,UAACC,WAAD,EAAsE;AAAA,wFAAP,EAAO;AAAA,YAA9CC,QAA8C,SAA9CA,QAA8C;;AACpEN,QAAAA,MAAM,CAACC,wBAAP,CAAgCM,IAAhC,CACE,MAAKV,UAAL,KAAoBL,qBAAqB,CAACE,WAA1C,GACIF,qBAAqB,CAACE,WAD1B,GAEIF,qBAAqB,CAACC,WAH5B,EAIEY,WAJF;;AAMA,YAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoCA,QAAQ;AAC7C,OATD;AAAA,KAtB8D;;AAE9D,QAAI,CAACN,MAAM,CAACC,wBAAZ,EAAsC;AACpCD,MAAAA,MAAM,CAACC,wBAAP,GAAkC,IAAIO,oBAAJ,EAAlC;AACD;;AACD,UAAKX,UAAL,GAAkBD,SAAlB;AAL8D;AAM/D;;;EAT0Ca,6B","sourcesContent":["import { EventEmitter } from 'events';\n\nimport BasicTransporter from './BasicTransporter';\n\ndeclare global {\n  interface Window {\n    _transporterEventEmitter: EventEmitter;\n  }\n}\n\nexport const TRANSPORTER_DIRECTION = {\n  TO_INTERNAL: 'toInternal',\n  TO_EXTERNAL: 'toExternal',\n} as const;\n\nexport type TransporterDirection =\n  typeof TRANSPORTER_DIRECTION[keyof typeof TRANSPORTER_DIRECTION];\n\n/**\n * @param direction if direction is 'toExternal', meaning this instance is created in internal adapter, need in eventEmitter\n */\nexport class EventEmitterTransporter extends BasicTransporter {\n  private _direction: TransporterDirection;\n\n  constructor({ direction }: { direction: TransporterDirection }) {\n    super();\n    if (!window._transporterEventEmitter) {\n      window._transporterEventEmitter = new EventEmitter();\n    }\n    this._direction = direction;\n  }\n\n  addReceiver = (onMessage: any) => {\n    window._transporterEventEmitter.on(\n      this._direction === TRANSPORTER_DIRECTION.TO_EXTERNAL\n        ? TRANSPORTER_DIRECTION.TO_INTERNAL\n        : TRANSPORTER_DIRECTION.TO_EXTERNAL,\n      (data) => {\n        onMessage({\n          data,\n        });\n      },\n    );\n  };\n\n  createEmitter =\n    () =>\n    (emitterData: Object, { callback }: { callback?: () => any } = {}) => {\n      window._transporterEventEmitter.emit(\n        this._direction === TRANSPORTER_DIRECTION.TO_EXTERNAL\n          ? TRANSPORTER_DIRECTION.TO_EXTERNAL\n          : TRANSPORTER_DIRECTION.TO_INTERNAL,\n        emitterData,\n      );\n      if (typeof callback === 'function') callback();\n    };\n}\n"],"file":"EventEmitterTransporter.js"}