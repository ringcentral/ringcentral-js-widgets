{"version":3,"sources":["lib/isValidNumber.test.ts"],"names":["describe","it","isValidNumberOptions","input","countryCode","result","to","equal"],"mappings":";;AAAA;;AAEA;;AAEAA,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9BC,EAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAM;AACtD,QAAMC,oBAAoB,GAAG;AAC3BC,MAAAA,KAAK,EAAE,EADoB;AAE3BC,MAAAA,WAAW,EAAE;AAFc,KAA7B;AAIA,QAAMC,MAAM,GAAG,kCAAcH,oBAAd,CAAf;AACA,sBAAOG,MAAP,EAAeC,EAAf,CAAkBC,KAAlB,CAAwB,KAAxB;AACD,GAPC,CAAF;AASAN,EAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAM;AACtD,QAAMC,oBAAoB,GAAG;AAC3BE,MAAAA,WAAW,EAAE,IADc;AAE3BD,MAAAA,KAAK,EAAE;AAFoB,KAA7B;AAIA,QAAME,MAAM,GAAG,kCAAcH,oBAAd,CAAf;AACA,sBAAOG,MAAP,EAAeC,EAAf,CAAkBC,KAAlB,CAAwB,KAAxB;AACD,GAPC,CAAF;AASAN,EAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC/D,QAAMC,oBAAoB,GAAG;AAC3BE,MAAAA,WAAW,EAAE,IADc;AAE3BD,MAAAA,KAAK,EAAE;AAFoB,KAA7B;AAIA,QAAME,MAAM,GAAG,kCAAcH,oBAAd,CAAf;AACA,sBAAOG,MAAP,EAAeC,EAAf,CAAkBC,KAAlB,CAAwB,IAAxB;AACD,GAPC,CAAF;AASAN,EAAAA,EAAE,CAAC,4CAAD,EAA+C,YAAM;AACrD,QAAMC,oBAAoB,GAAG;AAC3BE,MAAAA,WAAW,EAAE,IADc;AAE3BD,MAAAA,KAAK,EAAE;AAFoB,KAA7B;AAIA,QAAME,MAAM,GAAG,kCAAcH,oBAAd,CAAf;AACA,sBAAOG,MAAP,EAAeC,EAAf,CAAkBC,KAAlB,CAAwB,IAAxB;AACD,GAPC,CAAF;AASAN,EAAAA,EAAE,CAAC,kDAAD,EAAqD,YAAM;AAC3D,QAAMC,oBAAoB,GAAG;AAC3BE,MAAAA,WAAW,EAAE,IADc;AAE3BD,MAAAA,KAAK,EAAE;AAFoB,KAA7B;AAIA,QAAME,MAAM,GAAG,kCAAcH,oBAAd,CAAf;AACA,sBAAOG,MAAP,EAAeC,EAAf,CAAkBC,KAAlB,CAAwB,IAAxB;AACD,GAPC,CAAF;AAQD,CA7CO,CAAR","sourcesContent":["import { expect } from 'chai';\n\nimport { isValidNumber } from './isValidNumber';\n\ndescribe('isValidNumber', () => {\n  it('should return false if phoneNumber is blank', () => {\n    const isValidNumberOptions = {\n      input: '',\n      countryCode: 'US',\n    };\n    const result = isValidNumber(isValidNumberOptions);\n    expect(result).to.equal(false);\n  });\n\n  it('should return false if cleanNumber is blank', () => {\n    const isValidNumberOptions = {\n      countryCode: 'US',\n      input: \"iamn%@onedi!@$%^&()_=\\\\][';/.,~nu><.,,?/mber\",\n    };\n    const result = isValidNumber(isValidNumberOptions);\n    expect(result).to.equal(false);\n  });\n\n  it('should return true if phoneNumber is extensionNumber', () => {\n    const isValidNumberOptions = {\n      countryCode: 'US',\n      input: '1234',\n    };\n    const result = isValidNumber(isValidNumberOptions);\n    expect(result).to.equal(true);\n  });\n\n  it('should return true if phoneNumber is valid', () => {\n    const isValidNumberOptions = {\n      countryCode: 'US',\n      input: '(999) 1234 567',\n    };\n    const result = isValidNumber(isValidNumberOptions);\n    expect(result).to.equal(true);\n  });\n\n  it('should return true if phoneNumber is e164 format', () => {\n    const isValidNumberOptions = {\n      countryCode: 'US',\n      input: '+1234567890',\n    };\n    const result = isValidNumber(isValidNumberOptions);\n    expect(result).to.equal(true);\n  });\n});\n"],"file":"isValidNumber.test.js"}