{"version":3,"sources":["lib/SleepDetection/SleepDetection.ts"],"names":["DEFAULT_INTERVAL","DEFAULT_THRESHOLD","DEFAULT_MAX_LISTENERS","EVENTS","ObjectMap","fromKeys","SleepDetection","detectionInterval","detectionThreshold","maxListeners","startImmediately","_detectionInterval","_detectionThreshold","_timeoutId","_emitter","EventEmitter","setMaxListeners","start","event","handler","on","off","stop","startTime","Date","now","emit","events","heartbeat","global","setTimeout","endTime","sleepTime","console","log","detected","_detect","clearTimeout"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;;;;AAKA,IAAMA,gBAAgB,GAAG,KAAK,IAA9B,C,CACA;AACA;;AACA,IAAMC,iBAAiB,GAAG,KAAK,IAA/B;AACA,IAAMC,qBAAqB,GAAG,EAA9B;;AAEO,IAAMC,MAAM,GAAGC,qBAAUC,QAAV,CAAmB,CAAC,WAAD,EAAc,UAAd,CAAnB,CAAf;;;;IASMC,c;AAMX,4BAK+B;AAAA,mFAAJ,EAAI;AAAA,qCAJ7BC,iBAI6B;AAAA,QAJ7BA,iBAI6B,sCAJTP,gBAIS;AAAA,qCAH7BQ,kBAG6B;AAAA,QAH7BA,kBAG6B,sCAHRP,iBAGQ;AAAA,iCAF7BQ,YAE6B;AAAA,QAF7BA,YAE6B,kCAFdP,qBAEc;AAAA,qCAD7BQ,gBAC6B;AAAA,QAD7BA,gBAC6B,sCADV,IACU;;AAAA;;AAAA,SAVrBC,kBAUqB;AAAA,SATrBC,mBASqB;AAAA,SARrBC,UAQqB,GARQ,IAQR;AAAA,SAPrBC,QAOqB,GAPV,IAAIC,oBAAJ,EAOU;AAC7B,SAAKJ,kBAAL,GAA0BJ,iBAA1B;AACA,SAAKK,mBAAL,GAA2BJ,kBAA3B;;AACA,SAAKM,QAAL,CAAcE,eAAd,CAA8BP,YAA9B;;AACA,QAAIC,gBAAJ,EAAsB;AACpB,WAAKO,KAAL;AACD;AACF;;;;uBAMEC,K,EAAsCC,O,EAAkC;AACzE,WAAKL,QAAL,CAAcM,EAAd,CAAiBF,KAAjB,EAAwBC,OAAxB;AACD;;;wBAEGD,K,EAAsCC,O,EAAkC;AAC1E,WAAKL,QAAL,CAAcO,GAAd,CAAkBH,KAAlB,EAAyBC,OAAzB;AACD;;;8BAEmB;AAAA;;AAClB,WAAKG,IAAL;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;;AACA,WAAKX,QAAL,CAAcY,IAAd,CAAmB,KAAKC,MAAL,CAAYC,SAA/B,EAA0CL,SAA1C;;AACA,WAAKV,UAAL,GAAkBgB,MAAM,CAACC,UAAP,CAAkB,YAAM;AACxC,YAAMC,OAAO,GAAGP,IAAI,CAACC,GAAL,EAAhB;AACA,YAAMO,SAAS,GAAGD,OAAO,GAAGR,SAAV,GAAsB,KAAI,CAACZ,kBAA7C;;AACA,YAAIqB,SAAS,GAAG,KAAI,CAACpB,mBAArB,EAA0C;AACxCqB,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;;AACA,UAAA,KAAI,CAACpB,QAAL,CAAcY,IAAd,CAAmB,KAAI,CAACC,MAAL,CAAYQ,QAA/B,EAAyCZ,SAAzC,EAAoDQ,OAApD,EAA6DC,SAA7D;AACD;;AACD,QAAA,KAAI,CAACnB,UAAL,GAAkB,IAAlB;;AACA,QAAA,KAAI,CAACuB,OAAL;AACD,OATiB,EASf,KAAKzB,kBATU,CAAlB;AAUD;;;4BAEO;AACN,WAAKyB,OAAL;AACD;;;2BAEM;AACL,UAAI,KAAKvB,UAAT,EAAqB;AACnBgB,QAAAA,MAAM,CAACQ,YAAP,CAAoB,KAAKxB,UAAzB;AACA,aAAKA,UAAL,GAAkB,IAAlB;AACD;AACF;;;wBArCY;AACX,aAAOV,MAAP;AACD","sourcesContent":["import { EventEmitter } from 'events';\n\nimport {\n  ObjectMap,\n  ObjectMapValue,\n} from '@ringcentral-integration/core/lib/ObjectMap';\n\nconst DEFAULT_INTERVAL = 20 * 1000;\n// For chrome 88 timer-throttling https://developer.chrome.com/blog/timer-throttling-in-chrome-88/\n// need to make sure time diff is more than 1 min\nconst DEFAULT_THRESHOLD = 75 * 1000;\nconst DEFAULT_MAX_LISTENERS = 30;\n\nexport const EVENTS = ObjectMap.fromKeys(['heartbeat', 'detected']);\n\nexport interface SleepDetectionOptions {\n  detectionInterval?: number;\n  detectionThreshold?: number;\n  startImmediately?: boolean;\n  maxListeners?: number;\n}\n\nexport class SleepDetection {\n  protected _detectionInterval: number;\n  protected _detectionThreshold: number;\n  protected _timeoutId: NodeJS.Timeout = null;\n  protected _emitter = new EventEmitter();\n\n  constructor({\n    detectionInterval = DEFAULT_INTERVAL,\n    detectionThreshold = DEFAULT_THRESHOLD,\n    maxListeners = DEFAULT_MAX_LISTENERS,\n    startImmediately = true,\n  }: SleepDetectionOptions = {}) {\n    this._detectionInterval = detectionInterval;\n    this._detectionThreshold = detectionThreshold;\n    this._emitter.setMaxListeners(maxListeners);\n    if (startImmediately) {\n      this.start();\n    }\n  }\n\n  get events() {\n    return EVENTS;\n  }\n\n  on(event: ObjectMapValue<typeof EVENTS>, handler: (...args: any[]) => any) {\n    this._emitter.on(event, handler);\n  }\n\n  off(event: ObjectMapValue<typeof EVENTS>, handler: (...args: any[]) => any) {\n    this._emitter.off(event, handler);\n  }\n\n  protected _detect() {\n    this.stop();\n    const startTime = Date.now();\n    this._emitter.emit(this.events.heartbeat, startTime);\n    this._timeoutId = global.setTimeout(() => {\n      const endTime = Date.now();\n      const sleepTime = endTime - startTime - this._detectionInterval;\n      if (sleepTime > this._detectionThreshold) {\n        console.log('==== Sleep Detected =====');\n        this._emitter.emit(this.events.detected, startTime, endTime, sleepTime);\n      }\n      this._timeoutId = null;\n      this._detect();\n    }, this._detectionInterval);\n  }\n\n  start() {\n    this._detect();\n  }\n\n  stop() {\n    if (this._timeoutId) {\n      global.clearTimeout(this._timeoutId);\n      this._timeoutId = null;\n    }\n  }\n}\n"],"file":"SleepDetection.js"}