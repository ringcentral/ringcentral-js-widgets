{"version":3,"file":"ObjectMap.js","names":["_ramda","require","_class","_typeof","obj","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","iter","Array","from","isArray","_arrayLikeToArray","_slicedToArray","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_i","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","value","length","err","_createForOfIteratorHelper","o","allowArrayLike","it","F","s","n","e","_e2","f","normalCompletion","didErr","step","_e3","minLen","toString","slice","name","test","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_applyDecoratedDescriptor","property","decorators","context","desc","keys","forEach","initializer","reverse","reduce","decorator","undefined","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread","arguments","source","_defineProperty","getOwnPropertyDescriptors","defineProperties","arg","_toPrimitive","String","input","hint","prim","toPrimitive","res","Number","sDefinition","RUNTIME","usingFactory","prefixCache","Map","factory","baseFunction","_len","args","_key","result","concat","prefixString","str","prefix","ObjectMap","definition","_this","_loop","hasOwnProperty","set","get","fromObject","fromKeys","_iterator","_step","prefixKeys","_iterator2","_step2","getKey","_ref","find","_ref3","_ref4","v","entries","_ref2","_ref2$","size","has","hasValue","values","fn","k","prefixValues","prefixedInstance","exports"],"sources":["lib/ObjectMap/ObjectMap.ts"],"sourcesContent":["import { find } from 'ramda';\n\nconst sDefinition = Symbol('definition');\nconst RUNTIME = {\n  usingFactory: false,\n  prefixCache: new Map(),\n};\n\nfunction factory<T>(\n  prototype: T,\n  property: string,\n  descriptor: PropertyDescriptor,\n) {\n  const baseFunction = descriptor.value;\n  return {\n    ...descriptor,\n    value(this: ThisType<T>, ...args: any) {\n      RUNTIME.usingFactory = true;\n      const result = baseFunction.call(this, ...args);\n      RUNTIME.usingFactory = false;\n      return result;\n    },\n  };\n}\n\nexport type ObjectMapKey<D> = D extends ObjectMap<infer D, infer K, infer V> &\n  infer D\n  ? K\n  : never;\n\nexport type ObjectMapValue<D> = D extends ObjectMap<infer D, infer K, infer V> &\n  infer D\n  ? V\n  : never;\n\nexport function prefixString(str: string, prefix = ''): string {\n  return prefix === '' ? str : `${prefix}-${str}`;\n}\n\nexport class ObjectMap<\n  D extends Record<string | number, any>,\n  K extends keyof D,\n  V extends D[K],\n> {\n  private readonly [sDefinition] = new Map();\n\n  constructor(definition: D) {\n    if (!RUNTIME.usingFactory) {\n      throw TypeError(\n        'Instantiating ObjectMap with `new ObjectMap(definition)` is not recommended. ' +\n          'Please use one of the ObjectMap factory functions.',\n      );\n    }\n    if (definition) {\n      for (const key in definition) {\n        if (Object.prototype.hasOwnProperty.call(definition, key)) {\n          this[sDefinition].set(key, definition[key]);\n          Object.defineProperty(this, key, {\n            get() {\n              return this[sDefinition].get(key);\n            },\n            enumerable: true,\n          });\n        }\n      }\n    }\n  }\n\n  @factory\n  static fromObject<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(definition: D) {\n    return new ObjectMap(definition) as ObjectMap<D, K, V> & D;\n  }\n\n  @factory\n  static fromKeys<K extends string>(keys: K[]) {\n    const definition = {} as Record<K, K>;\n    for (const key of keys) {\n      definition[key] = key;\n    }\n    return new ObjectMap(definition) as ObjectMap<{ [V in K]: V }, K, K> & {\n      [V in K]: V;\n    };\n  }\n\n  @factory\n  static prefixKeys<K extends string>(keys: K[], prefix = '') {\n    const definition = {} as Record<K, string>;\n    for (const key of keys) {\n      definition[key] = prefixString(key, prefix);\n    }\n    return new ObjectMap(definition) as ObjectMap<\n      { [V in K]: string },\n      K,\n      string\n    > & { [V in K]: string };\n  }\n\n  static getKey<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D, value: V): K | null {\n    const [key = null] =\n      find<[K, V]>(([, v]) => v === value, [...ObjectMap.entries(instance)]) ||\n      [];\n    return key;\n  }\n\n  static entries<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D): IterableIterator<[K, V]> {\n    return instance[sDefinition].entries();\n  }\n\n  static size<\n    K extends keyof D,\n    V extends D[K],\n    D extends Record<string | number, any>,\n  >(instance: ObjectMap<D, K, V> & D): number {\n    return instance[sDefinition].size;\n  }\n\n  static has<\n    K extends keyof D,\n    V extends D[K],\n    D extends Record<string | number, any>,\n  >(instance: ObjectMap<D, K, V> & D, key: K): boolean {\n    return instance[sDefinition].has(key);\n  }\n\n  static hasValue<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D, value: V): boolean {\n    return !!ObjectMap.getKey(instance, value);\n  }\n\n  static keys<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D): IterableIterator<K> {\n    return instance[sDefinition].keys();\n  }\n\n  static values<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D): IterableIterator<V> {\n    return instance[sDefinition].values();\n  }\n\n  static forEach<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(\n    fn: (value: V, key: K, map: ObjectMap<D, K, V> & D) => void,\n    instance: ObjectMap<D, K, V> & D,\n  ): void {\n    return instance[sDefinition].forEach((v, k) => fn(v, k, instance));\n  }\n\n  static filter<D extends Record<K, V>, K extends keyof D, V extends D[K]>(\n    fn: (value: V, key: K) => boolean,\n    instance: ObjectMap<D, K, V> & D,\n  ) {\n    const obj = {} as Record<K, V>;\n    ObjectMap.forEach((v, k) => {\n      if (fn(v, k)) {\n        obj[k] = v;\n      }\n    }, instance);\n    return ObjectMap.fromObject(obj);\n  }\n\n  static prefixValues<\n    D extends Record<K, string>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D, prefix = '') {\n    if (prefix === '') {\n      return instance;\n    }\n    if (!RUNTIME.prefixCache.has(prefix)) {\n      RUNTIME.prefixCache.set(prefix, new Map());\n    }\n    if (!RUNTIME.prefixCache.get(prefix).has(instance)) {\n      const definition = {} as Record<K, string>;\n      ObjectMap.forEach((value, key) => {\n        definition[key] = prefixString(value, prefix);\n      }, instance);\n      const prefixedInstance = ObjectMap.fromObject(definition);\n      RUNTIME.prefixCache.get(prefix).set(instance, prefixedInstance);\n    }\n    return RUNTIME.prefixCache.get(prefix).get(instance) as ObjectMap<\n      { [V in K]: string },\n      K,\n      string\n    > & { [V in K]: string };\n  }\n}\n"],"mappings":"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"}