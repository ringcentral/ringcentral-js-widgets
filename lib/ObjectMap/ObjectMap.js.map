{"version":3,"file":"ObjectMap.js","names":["require","_ramda","_class","_typeof","o","Symbol","iterator","constructor","prototype","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","Array","from","isArray","_arrayLikeToArray","_slicedToArray","e","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","l","t","n","i","u","a","f","call","next","Object","done","push","value","length","_createForOfIteratorHelper","_n","F","s","toString","slice","name","test","_classCallCheck","_defineProperties","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","_applyDecoratedDescriptor","keys","forEach","initializer","reverse","reduce","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","apply","_objectSpread","arguments","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPrimitive","toPrimitive","String","Number","sDefinition","RUNTIME","usingFactory","prefixCache","Map","factory","property","descriptor","baseFunction","_len","args","_key","result","concat","prefixString","str","prefix","undefined","ObjectMap","definition","_this","_loop","hasOwnProperty","set","get","fromObject","fromKeys","_iterator","_step","err","prefixKeys","_iterator2","_step2","getKey","instance","_ref","find","_ref3","_ref4","v","entries","_ref2","_ref2$","size","has","hasValue","values","fn","k","obj","prefixValues","prefixedInstance","exports"],"sources":["lib/ObjectMap/ObjectMap.ts"],"sourcesContent":["import 'reflect-metadata';\n\nimport { find } from 'ramda';\n\nconst sDefinition = Symbol('definition');\nconst RUNTIME = {\n  usingFactory: false,\n  prefixCache: new Map(),\n};\n\nfunction factory<T>(\n  prototype: T,\n  property: string,\n  descriptor: PropertyDescriptor,\n) {\n  const baseFunction = descriptor.value;\n  return {\n    ...descriptor,\n    value(this: ThisType<T>, ...args: any) {\n      RUNTIME.usingFactory = true;\n      const result = baseFunction.call(this, ...args);\n      RUNTIME.usingFactory = false;\n      return result;\n    },\n  };\n}\n\nexport type ObjectMapKey<D> = D extends ObjectMap<infer D, infer K, infer V> &\n  infer D\n  ? K\n  : never;\n\nexport type ObjectMapValue<D> = D extends ObjectMap<infer D, infer K, infer V> &\n  infer D\n  ? V\n  : never;\n\nexport function prefixString(str: string, prefix = ''): string {\n  return prefix === '' ? str : `${prefix}-${str}`;\n}\n\nexport class ObjectMap<\n  D extends Record<string | number, any>,\n  K extends keyof D,\n  V extends D[K],\n> {\n  private readonly [sDefinition] = new Map();\n\n  constructor(definition: D) {\n    if (!RUNTIME.usingFactory) {\n      throw TypeError(\n        'Instantiating ObjectMap with `new ObjectMap(definition)` is not recommended. ' +\n          'Please use one of the ObjectMap factory functions.',\n      );\n    }\n    if (definition) {\n      for (const key in definition) {\n        if (Object.prototype.hasOwnProperty.call(definition, key)) {\n          this[sDefinition].set(key, definition[key]);\n          Object.defineProperty(this, key, {\n            get() {\n              return this[sDefinition].get(key);\n            },\n            enumerable: true,\n          });\n        }\n      }\n    }\n  }\n\n  @factory\n  static fromObject<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(definition: D) {\n    return new ObjectMap(definition) as ObjectMap<D, K, V> & D;\n  }\n\n  @factory\n  static fromKeys<K extends string>(keys: K[]) {\n    const definition = {} as Record<K, K>;\n    for (const key of keys) {\n      definition[key] = key;\n    }\n    return new ObjectMap(definition) as ObjectMap<{ [V in K]: V }, K, K> & {\n      [V in K]: V;\n    };\n  }\n\n  @factory\n  static prefixKeys<K extends string>(keys: K[], prefix = '') {\n    const definition = {} as Record<K, string>;\n    for (const key of keys) {\n      definition[key] = prefixString(key, prefix);\n    }\n    return new ObjectMap(definition) as ObjectMap<\n      { [V in K]: string },\n      K,\n      string\n    > & { [V in K]: string };\n  }\n\n  static getKey<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D, value: V): K | null {\n    const [key = null] =\n      find<[K, V]>(([, v]) => v === value, [...ObjectMap.entries(instance)]) ||\n      [];\n    return key;\n  }\n\n  static entries<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D): IterableIterator<[K, V]> {\n    return instance[sDefinition].entries();\n  }\n\n  static size<\n    K extends keyof D,\n    V extends D[K],\n    D extends Record<string | number, any>,\n  >(instance: ObjectMap<D, K, V> & D): number {\n    return instance[sDefinition].size;\n  }\n\n  static has<\n    K extends keyof D,\n    V extends D[K],\n    D extends Record<string | number, any>,\n  >(instance: ObjectMap<D, K, V> & D, key: K): boolean {\n    return instance[sDefinition].has(key);\n  }\n\n  static hasValue<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D, value: V): boolean {\n    return !!ObjectMap.getKey(instance, value);\n  }\n\n  static keys<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D): IterableIterator<K> {\n    return instance[sDefinition].keys();\n  }\n\n  static values<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D): IterableIterator<V> {\n    return instance[sDefinition].values();\n  }\n\n  static forEach<\n    D extends Record<string | number, any>,\n    K extends keyof D,\n    V extends D[K],\n  >(\n    fn: (value: V, key: K, map: ObjectMap<D, K, V> & D) => void,\n    instance: ObjectMap<D, K, V> & D,\n  ): void {\n    return instance[sDefinition].forEach((v, k) => fn(v, k, instance));\n  }\n\n  static filter<D extends Record<K, V>, K extends keyof D, V extends D[K]>(\n    fn: (value: V, key: K) => boolean,\n    instance: ObjectMap<D, K, V> & D,\n  ) {\n    const obj = {} as Record<K, V>;\n    ObjectMap.forEach((v, k) => {\n      if (fn(v, k)) {\n        obj[k] = v;\n      }\n    }, instance);\n    return ObjectMap.fromObject(obj);\n  }\n\n  static prefixValues<\n    D extends Record<K, string>,\n    K extends keyof D,\n    V extends D[K],\n  >(instance: ObjectMap<D, K, V> & D, prefix = '') {\n    if (prefix === '') {\n      return instance;\n    }\n    if (!RUNTIME.prefixCache.has(prefix)) {\n      RUNTIME.prefixCache.set(prefix, new Map());\n    }\n    if (!RUNTIME.prefixCache.get(prefix).has(instance)) {\n      const definition = {} as Record<K, string>;\n      ObjectMap.forEach((value, key) => {\n        definition[key] = prefixString(value, prefix);\n      }, instance);\n      const prefixedInstance = ObjectMap.fromObject(definition);\n      RUNTIME.prefixCache.get(prefix).set(instance, prefixedInstance);\n    }\n    return RUNTIME.prefixCache.get(prefix).get(instance) as ObjectMap<\n      { [V in K]: string },\n      K,\n      string\n    > & { [V in K]: string };\n  }\n}\n"],"mappings":"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","ignoreList":[]}