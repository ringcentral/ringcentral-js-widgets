{"version":3,"sources":["react-hooks/useInterval.ts"],"names":["useInterval","callback","delay","startImmediately","intervalRef","countRef","getRunning","current","savedCallback","times","pause","clearInterval","undefined","cancel","play","isRunning","window","setInterval"],"mappings":";;;;;;;;;AAAA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAEzBC,QAFyB,EAOtB;AAAA,MAHHC,KAGG,uEAHa,CAGb;AAAA,MADHC,gBACG,uEADgB,IAChB;AACH,MAAMC,WAAW,GAAG,oBAApB;AACA,MAAMC,QAAQ,GAAG,mBAAO,CAAP,CAAjB;AAEA,MAAMC,UAAU,GAAG,wCAAiB;AAAA,WAAM,CAAC,CAACF,WAAW,CAACG,OAApB;AAAA,GAAjB,CAAnB;AAEA,MAAMC,aAAa,GAAG,wCAAiB,UAACC,KAAD,EAAmB;AACxDR,IAAAA,QAAQ,CAACQ,KAAD,CAAR;AACD,GAFqB,CAAtB;AAIA,MAAMC,KAAK,GAAG,wBAAY,YAAM;AAC9B,QAAIN,WAAW,CAACG,OAAhB,EAAyB;AACvBI,MAAAA,aAAa,CAACP,WAAW,CAACG,OAAb,CAAb;AACAH,MAAAA,WAAW,CAACG,OAAZ,GAAsBK,SAAtB;AACD;AACF,GALa,EAKX,EALW,CAAd;AAOA,MAAMC,MAAM,GAAG,wBAAY,YAAM;AAC/BH,IAAAA,KAAK;AAELL,IAAAA,QAAQ,CAACE,OAAT,GAAmB,CAAnB;AACD,GAJc,EAIZ,CAACG,KAAD,CAJY,CAAf;AAMA,MAAMI,IAAI,GAAG,wBAAY,YAAM;AAC7B,QAAMC,SAAS,GAAGT,UAAU,EAA5B;AACA,QAAIS,SAAJ,EAAe;AACfX,IAAAA,WAAW,CAACG,OAAZ,GAAsBS,MAAM,CAACC,WAAP,CAAmB,YAAM;AAC7CZ,MAAAA,QAAQ,CAACE,OAAT;AACAC,MAAAA,aAAa,CAACH,QAAQ,CAACE,OAAV,CAAb;AACD,KAHqB,EAGnBL,KAHmB,CAAtB;AAID,GAPY,EAOV,CAACA,KAAD,EAAQI,UAAR,EAAoBE,aAApB,CAPU,CAAb;AASA,wBAAU,YAAM;AACd,QAAIL,gBAAJ,EAAsB;AACpBW,MAAAA,IAAI;AACL;;AAED,WAAO;AAAA,aAAMD,MAAM,EAAZ;AAAA,KAAP;AACD,GAND,EAMG,CAACA,MAAD,EAASC,IAAT,EAAeX,gBAAf,CANH;AAQA,SAAO;AACL;AACJ;AACA;AACIU,IAAAA,MAAM,EAANA,MAJK;;AAKL;AACJ;AACA;AACIH,IAAAA,KAAK,EAALA,KARK;;AASL;AACJ;AACA;AACII,IAAAA,IAAI,EAAJA,IAZK;;AAaL;AACJ;AACA;AACIR,IAAAA,UAAU,EAAVA;AAhBK,GAAP;AAkBD,CAjEM","sourcesContent":["import { useEffect, useRef, useCallback } from 'react';\nimport { useEventCallback } from '@ringcentral/juno';\n\n/**\n * controllable interval, provide easy way to control interval\n *\n * - cancel: cancel current interval\n * - pause: pause current interval\n * - play: play current interval\n * - getRunning: return current interval running state\n *\n *  @example\n * ```ts\n * const { cancel, play, pause } = useInterval(() => {\n *    console.log('interval be triggered');\n * }, 1000)\n *\n * // get current run times\n * useInterval((times) => {\n *    console.log('current times start from 1', times);\n * }, 2000)\n *\n * // not start interval immediately\n * useInterval((times) => {\n *    console.log('current times start from 1', times);\n * }, 2000, false)\n * ```\n */\nexport const useInterval = (\n  /** callback with times, times start from 1 */\n  callback: (times: number) => void,\n  /** what delay time of that interval */\n  delay: number = 0,\n  /** is that start interval immediately */\n  startImmediately = true,\n) => {\n  const intervalRef = useRef<number>();\n  const countRef = useRef(0);\n\n  const getRunning = useEventCallback(() => !!intervalRef.current);\n\n  const savedCallback = useEventCallback((times: number) => {\n    callback(times);\n  });\n\n  const pause = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = undefined;\n    }\n  }, []);\n\n  const cancel = useCallback(() => {\n    pause();\n\n    countRef.current = 0;\n  }, [pause]);\n\n  const play = useCallback(() => {\n    const isRunning = getRunning();\n    if (isRunning) return;\n    intervalRef.current = window.setInterval(() => {\n      countRef.current++;\n      savedCallback(countRef.current);\n    }, delay);\n  }, [delay, getRunning, savedCallback]);\n\n  useEffect(() => {\n    if (startImmediately) {\n      play();\n    }\n\n    return () => cancel();\n  }, [cancel, play, startImmediately]);\n\n  return {\n    /**\n     * cancel current interval\n     */\n    cancel,\n    /**\n     * pause current interval\n     */\n    pause,\n    /**\n     * play current interval\n     */\n    play,\n    /**\n     * return current interval running state\n     */\n    getRunning,\n  };\n};\n"],"file":"useInterval.js"}