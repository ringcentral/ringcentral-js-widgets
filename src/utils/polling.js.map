{"version":3,"file":"polling.js","names":["polling","fn","interval","process","env","NODE_ENV","Error","finished","sleepPromise","promise","Promise","resolve","reject","result","sleep","cancel"],"sources":["src/utils/polling.ts"],"sourcesContent":["// import { jestFakeTimersAreEnabled } from '@ringcentral-integration/test-utils/lib/jestFakeTimersAreEnabled';\n\nimport { sleep } from './sleep';\n\nexport interface PollingPromise extends Promise<void> {\n  /** cancel polling timer */\n  cancel: () => void;\n}\n\n/**\n * polling execute function, that will be executed until it returns `true`\n * @param fn polling function\n * @param interval interval time in milliseconds, when you not provide it, that will ignore any delay between each execution\n *\n * @example\n * ```ts\n * let count = 5;\n *\n * const pollingPromise = polling(() => {\n *  count++;\n *\n *  return count >= 5;\n * }, 1000);\n *\n * pollingPromise\n *   .then(() => {\n *     console.log('polling done');\n *   })\n *   .catch(() => {\n *     console.log('polling canceled');\n *   }\n *\n * const onClick = () => {\n *   pollingPromise.cancel();\n * }\n * ```\n */\nexport const polling = (\n  fn: () => boolean | Promise<boolean>,\n  interval?: number,\n) => {\n  if (process.env.NODE_ENV !== 'production' && typeof fn !== 'function') {\n    throw new Error(\"'fn' must be a function\");\n  }\n\n  let finished = false;\n  let sleepPromise: ReturnType<typeof sleep>;\n\n  // eslint-disable-next-line no-async-promise-executor\n  const promise = new Promise<void>(async (resolve, reject) => {\n    while (!finished) {\n      const result = await fn();\n\n      // check that still not finished, because user may cancel in that fn execution period\n      if (!finished) {\n        finished = result;\n      }\n\n      if (!finished && typeof interval === 'number' && interval >= 0) {\n        sleepPromise = sleep(interval);\n\n        try {\n          await sleepPromise;\n        } catch (error) {\n          reject(new Error('Async Polling has been cancelled'));\n        }\n      }\n    }\n\n    resolve();\n  }) as PollingPromise;\n\n  promise.cancel = () => {\n    sleepPromise?.cancel();\n    finished = true;\n  };\n\n  return promise;\n};\n"],"mappings":";;;;;;;;;;;;;AAEA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CACrBC,EADqB,EAErBC,QAFqB,EAGlB;EACH,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,OAAOJ,EAAP,KAAc,UAA3D,EAAuE;IACrE,MAAM,IAAIK,KAAJ,CAAU,yBAAV,CAAN;EACD;;EAED,IAAIC,QAAQ,GAAG,KAAf;EACA,IAAIC,YAAJ,CANG,CAQH;;EACA,IAAMC,OAAO,GAAG,IAAIC,OAAJ;IAAA,mEAAkB,iBAAOC,OAAP,EAAgBC,MAAhB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACxBL,QADwB;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAETN,EAAE,EAFO;;YAAA;cAExBY,MAFwB;;cAI9B;cACA,IAAI,CAACN,QAAL,EAAe;gBACbA,QAAQ,GAAGM,MAAX;cACD;;cAP6B,MAS1B,CAACN,QAAD,IAAa,OAAOL,QAAP,KAAoB,QAAjC,IAA6CA,QAAQ,IAAI,CAT/B;gBAAA;gBAAA;cAAA;;cAU5BM,YAAY,GAAG,IAAAM,YAAA,EAAMZ,QAAN,CAAf;cAV4B;cAAA;cAAA,OAapBM,YAboB;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAe1BI,MAAM,CAAC,IAAIN,KAAJ,CAAU,kCAAV,CAAD,CAAN;;YAf0B;cAAA;cAAA;;YAAA;cAoBhCK,OAAO;;YApByB;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAlB;;IAAA;MAAA;IAAA;EAAA,IAAhB;;EAuBAF,OAAO,CAACM,MAAR,GAAiB,YAAM;IAAA;;IACrB,iBAAAP,YAAY,UAAZ,sDAAcO,MAAd;IACAR,QAAQ,GAAG,IAAX;EACD,CAHD;;EAKA,OAAOE,OAAP;AACD,CAzCM"}