{"version":3,"file":"cleanNumber.js","names":["cleanRegex","plusRegex","extensionDelimiter","cleanNumber","phoneNumber","keepPlus","arguments","length","undefined","cleaned","replace","hasPlus","output","split","slice","join","concat"],"sources":["src/utils/cleanNumber.ts"],"sourcesContent":["// copy from ringcentral-js-widgets/ringcentral-integration/lib/cleanNumber/index.ts\n// for GA usage\nconst cleanRegex = /[^\\d*+#]/g;\nconst plusRegex = /\\+/g;\nconst extensionDelimiter = /[*#]/g;\n/**\n * Remove any characters except numeric, #, *, and leading +. We only consider\n * first occurrence of * or #. Things after subsequent * or # will be removed.\n */\n\nexport function cleanNumber(phoneNumber: string, keepPlus = true) {\n  const cleaned = phoneNumber.replace(cleanRegex, '');\n  const hasPlus = cleaned[0] === '+';\n  const output = cleaned\n    .replace(plusRegex, '')\n    .split(extensionDelimiter)\n    .slice(0, 2)\n    .join('*');\n  return hasPlus && keepPlus ? `+${output}` : output;\n}\n"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA,IAAMA,UAAU,GAAG,WAAW;AAC9B,IAAMC,SAAS,GAAG,KAAK;AACvB,IAAMC,kBAAkB,GAAG,OAAO;AAClC;AACA;AACA;AACA;;AAEO,SAASC,WAAWA,CAACC,WAAmB,EAAmB;EAAA,IAAjBC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC9D,IAAMG,OAAO,GAAGL,WAAW,CAACM,OAAO,CAACV,UAAU,EAAE,EAAE,CAAC;EACnD,IAAMW,OAAO,GAAGF,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG;EAClC,IAAMG,MAAM,GAAGH,OAAO,CACnBC,OAAO,CAACT,SAAS,EAAE,EAAE,CAAC,CACtBY,KAAK,CAACX,kBAAkB,CAAC,CACzBY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,IAAI,CAAC,GAAG,CAAC;EACZ,OAAOJ,OAAO,IAAIN,QAAQ,OAAAW,MAAA,CAAOJ,MAAM,IAAKA,MAAM;AACpD","ignoreList":[]}