{"version":3,"file":"base64Handler.js","names":["REGEXP_BASE64_DATA_URL","isBase64DataUrl","value","test","decodeBase64DataUrl","dataURL","atob","split","fileToBase64","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","err","readAsDataURL","exports","fileToBinary","readAsBinaryString","base64ToBlob","base64Image","type","replace","byteString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","base64ToFile","filename","blob","File"],"sources":["src/utils/base64Handler.ts"],"sourcesContent":["const REGEXP_BASE64_DATA_URL =\n  /^(data:\\w+\\/[a-zA-Z+\\-.]+;base64,)?(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/i;\n\nexport function isBase64DataUrl(value: string) {\n  return REGEXP_BASE64_DATA_URL.test(value);\n}\n\nexport function decodeBase64DataUrl(dataURL: string) {\n  if (isBase64DataUrl(dataURL)) {\n    return atob(dataURL.split('base64,')[1]);\n  }\n\n  return '';\n}\n\nexport const fileToBase64 = (file: File | Blob) => {\n  return new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      resolve(e.target!.result as string);\n    };\n\n    reader.onerror = (err) => {\n      reject(err);\n    };\n\n    reader.readAsDataURL(file);\n  });\n};\n\nexport const fileToBinary = (file: File | Blob) => {\n  return new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      resolve(e.target!.result as string);\n    };\n\n    reader.onerror = (err) => {\n      reject(err);\n    };\n\n    reader.readAsBinaryString(file);\n  });\n};\n\nexport function base64ToBlob(base64Image: string) {\n  const split = base64Image.split(',');\n  const type = split[0].replace('data:', '').replace(';base64', '');\n  const byteString = atob(split[1]);\n  const ab = new ArrayBuffer(byteString.length);\n  const ia = new Uint8Array(ab);\n  for (let i = 0; i < byteString.length; i += 1) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n  return new Blob([ab], { type });\n}\n\nexport function base64ToFile(base64Image: string, filename: string) {\n  const blob = base64ToBlob(base64Image);\n\n  return new File([blob], filename);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,sBAAsB,GAC1B,qGAAqG;AAEhG,SAASC,eAAeA,CAACC,KAAa,EAAE;EAC7C,OAAOF,sBAAsB,CAACG,IAAI,CAACD,KAAK,CAAC;AAC3C;AAEO,SAASE,mBAAmBA,CAACC,OAAe,EAAE;EACnD,IAAIJ,eAAe,CAACI,OAAO,CAAC,EAAE;IAC5B,OAAOC,IAAI,CAACD,OAAO,CAACE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1C;EAEA,OAAO,EAAE;AACX;AAEO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,IAAiB,EAAK;EACjD,OAAO,IAAIC,OAAO,CAAS,UAACC,OAAO,EAAEC,MAAM,EAAK;IAC9C,IAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,UAACC,CAAC,EAAK;MACrBL,OAAO,CAACK,CAAC,CAACC,MAAM,CAAEC,MAAgB,CAAC;IACrC,CAAC;IAEDL,MAAM,CAACM,OAAO,GAAG,UAACC,GAAG,EAAK;MACxBR,MAAM,CAACQ,GAAG,CAAC;IACb,CAAC;IAEDP,MAAM,CAACQ,aAAa,CAACZ,IAAI,CAAC;EAC5B,CAAC,CAAC;AACJ,CAAC;AAACa,OAAA,CAAAd,YAAA,GAAAA,YAAA;AAEK,IAAMe,YAAY,GAAG,SAAfA,YAAYA,CAAId,IAAiB,EAAK;EACjD,OAAO,IAAIC,OAAO,CAAS,UAACC,OAAO,EAAEC,MAAM,EAAK;IAC9C,IAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,UAACC,CAAC,EAAK;MACrBL,OAAO,CAACK,CAAC,CAACC,MAAM,CAAEC,MAAgB,CAAC;IACrC,CAAC;IAEDL,MAAM,CAACM,OAAO,GAAG,UAACC,GAAG,EAAK;MACxBR,MAAM,CAACQ,GAAG,CAAC;IACb,CAAC;IAEDP,MAAM,CAACW,kBAAkB,CAACf,IAAI,CAAC;EACjC,CAAC,CAAC;AACJ,CAAC;AAACa,OAAA,CAAAC,YAAA,GAAAA,YAAA;AAEK,SAASE,YAAYA,CAACC,WAAmB,EAAE;EAChD,IAAMnB,KAAK,GAAGmB,WAAW,CAACnB,KAAK,CAAC,GAAG,CAAC;EACpC,IAAMoB,IAAI,GAAGpB,KAAK,CAAC,CAAC,CAAC,CAACqB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;EACjE,IAAMC,UAAU,GAAGvB,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACjC,IAAMuB,EAAE,GAAG,IAAIC,WAAW,CAACF,UAAU,CAACG,MAAM,CAAC;EAC7C,IAAMC,EAAE,GAAG,IAAIC,UAAU,CAACJ,EAAE,CAAC;EAC7B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,UAAU,CAACG,MAAM,EAAEG,CAAC,IAAI,CAAC,EAAE;IAC7CF,EAAE,CAACE,CAAC,CAAC,GAAGN,UAAU,CAACO,UAAU,CAACD,CAAC,CAAC;EAClC;EACA,OAAO,IAAIE,IAAI,CAAC,CAACP,EAAE,CAAC,EAAE;IAAEH,IAAI,EAAJA;EAAK,CAAC,CAAC;AACjC;AAEO,SAASW,YAAYA,CAACZ,WAAmB,EAAEa,QAAgB,EAAE;EAClE,IAAMC,IAAI,GAAGf,YAAY,CAACC,WAAW,CAAC;EAEtC,OAAO,IAAIe,IAAI,CAAC,CAACD,IAAI,CAAC,EAAED,QAAQ,CAAC;AACnC","ignoreList":[]}