{"version":3,"file":"getImagePositionColor.js","names":["_loadImage","require","_rgbToHex","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","getImagePositionColor","_ref","regeneratorRuntime","mark","_callee","url","position","_position$x","_position$y","img","canvas","ctx","p","hex","wrap","_callee$","_context","prev","next","loadImage","sent","document","createElement","getContext","width","height","drawImage","getImageData","x","y","data","rgbToHex","remove","abrupt","t0","stop","_x","_x2","exports"],"sources":["src/utils/getImagePositionColor.ts"],"sourcesContent":["import { loadImage } from './loadImage';\nimport { rgbToHex } from './rgbToHex';\n\n/**\n * get image position color by url\n * @param url image url\n * @param position that color of position of the image in relative of `300x300`, by default is `left-center(0, 150)` of the image\n * @returns color hex\n *\n * ### Remember the url should be same origin or allow fetch the source image\n */\nexport const getImagePositionColor = async (\n  url: string,\n  position?: { x: number; y: number },\n) => {\n  try {\n    const img = await loadImage(url);\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    canvas.width = 300;\n    canvas.height = 300;\n\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n    const p = ctx.getImageData(\n      position?.x ?? 0,\n      position?.y ?? canvas.height / 2,\n      1,\n      1,\n    ).data;\n    const hex = rgbToHex(p[0], p[1], p[2]);\n\n    canvas.remove();\n    img.remove();\n    return hex;\n  } catch (error) {\n    return '#FFF';\n  }\n};\n"],"mappings":"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","ignoreList":[]}