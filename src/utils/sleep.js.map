{"version":3,"file":"sleep.js","names":["sleep","ms","timer","rejector","promise","Promise","resolve","reject","setTimeout","cancel","Error","clearTimeout","exports"],"sources":["src/utils/sleep.ts"],"sourcesContent":["export interface SleepPromise extends Promise<void> {\n  /** cancel sleep timer */\n  cancel: () => void;\n}\n\n/**\n * sleep for ms\n * @param ms what ms to sleep\n * @returns Promise with cancel method, that can be used to cancel sleep\n *\n * @example\n *\n * when call cancel, it will cancel sleep, otherwise that will be completed after 1000ms\n * ```ts\n * const sleepPromise = sleep(1000);\n *\n * sleepPromise\n *   .then(() => {\n *     console.log('sleep done');\n *   })\n *   .catch(() => {\n *     console.log('sleep canceled');\n *   }\n *\n * const onClick = () => {\n *   sleepPromise.cancel();\n * }\n * ```\n */\nexport const sleep = (ms: number) => {\n  let timer: ReturnType<typeof setTimeout>;\n  let rejector: (reason?: any) => void;\n\n  const promise = new Promise((resolve, reject) => {\n    rejector = reject;\n    timer = setTimeout(resolve, ms);\n  }) as SleepPromise;\n\n  promise.cancel = () => {\n    rejector(new Error('Async sleep has been cancelled'));\n    clearTimeout(timer);\n  };\n\n  return promise;\n};\n"],"mappings":";;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,KAAK,GAAG,SAARA,KAAKA,CAAIC,EAAU,EAAK;EACnC,IAAIC,KAAoC;EACxC,IAAIC,QAAgC;EAEpC,IAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IAC/CJ,QAAQ,GAAGI,MAAM;IACjBL,KAAK,GAAGM,UAAU,CAACF,OAAO,EAAEL,EAAE,CAAC;EACjC,CAAC,CAAiB;EAElBG,OAAO,CAACK,MAAM,GAAG,YAAM;IACrBN,QAAQ,CAAC,IAAIO,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACrDC,YAAY,CAACT,KAAK,CAAC;EACrB,CAAC;EAED,OAAOE,OAAO;AAChB,CAAC;AAACQ,OAAA,CAAAZ,KAAA,GAAAA,KAAA"}