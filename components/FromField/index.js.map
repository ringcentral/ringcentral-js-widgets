{"version":3,"sources":["components/FromField/index.tsx"],"names":["PhoneNumber","formatPhone","usageType","currentLocale","phoneNumber","usageTypeDom","styles","i18n","getString","propTypes","PropTypes","func","isRequired","string","defaultProps","FromField","className","fromNumber","fromNumbers","onChange","hidden","disabled","showAnonymous","options","push","root","selectIcon","value","option","arrayOf","shape","bool","undefined"],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\n\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport DropdownSelect from '../DropdownSelect';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\nconst PhoneNumber = ({\n  formatPhone,\n  usageType,\n  currentLocale,\n  phoneNumber,\n}) => {\n  const usageTypeDom = usageType ? (\n    <span className={styles.usageType}>\n      {i18n.getString(usageType, currentLocale)}\n    </span>\n  ) : null;\n  return (\n    <span className={styles.phoneNumber}>\n      {usageTypeDom}\n      <span data-sign=\"phoneNumber\">{formatPhone(phoneNumber)}</span>\n    </span>\n  );\n};\n\nPhoneNumber.propTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  phoneNumber: PropTypes.string,\n  usageType: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n};\n\nPhoneNumber.defaultProps = {\n  phoneNumber: null,\n  usageType: null,\n};\n\n// phone number formatting becomes expensive when there are lots of numbers\n// memo makes this a pure component to reduce rendering cost\nconst FromField = memo(function FromField({\n  className,\n  fromNumber,\n  fromNumbers,\n  onChange,\n  formatPhone,\n  hidden,\n  disabled,\n  showAnonymous,\n  currentLocale,\n}) {\n  if (hidden) {\n    return null;\n  }\n  const options = [...fromNumbers];\n  if (showAnonymous) {\n    options.push({\n      phoneNumber: 'anonymous',\n    });\n  }\n  return (\n    <DropdownSelect\n      className={classnames(styles.root, className)}\n      iconClassName={styles.selectIcon}\n      value={fromNumber}\n      label={`${i18n.getString('from', currentLocale)}:`}\n      onChange={onChange}\n      options={options}\n      disabled={disabled}\n      renderValue={(value) => {\n        if (value === 'anonymous') {\n          return <span>{i18n.getString('Blocked', currentLocale)}</span>;\n        }\n        return (\n          <PhoneNumber\n            formatPhone={formatPhone}\n            phoneNumber={value}\n            currentLocale={currentLocale}\n          />\n        );\n      }}\n      valueFunction={(option) => option.phoneNumber}\n      renderFunction={(option) => {\n        if (option.phoneNumber === 'anonymous') {\n          return <span>{i18n.getString('Blocked', currentLocale)}</span>;\n        }\n        return (\n          <PhoneNumber\n            formatPhone={formatPhone}\n            phoneNumber={option.phoneNumber}\n            usageType={option.usageType}\n            currentLocale={currentLocale}\n          />\n        );\n      }}\n    />\n  );\n});\n\nFromField.propTypes = {\n  fromNumber: PropTypes.string,\n  formatPhone: PropTypes.func.isRequired,\n  fromNumbers: PropTypes.arrayOf(\n    PropTypes.shape({\n      phoneNumber: PropTypes.string,\n      usageType: PropTypes.string,\n    }),\n  ).isRequired,\n  onChange: PropTypes.func.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  hidden: PropTypes.bool.isRequired,\n  showAnonymous: PropTypes.bool,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n};\n\nFromField.defaultProps = {\n  fromNumber: null,\n  className: undefined,\n  showAnonymous: true,\n  disabled: false,\n};\n\nexport default FromField;\n"],"file":"index.js"}