{"version":3,"sources":["components/CopyToClipboard/index.tsx"],"names":["CopyToClipboard","props","copiedText","handleSuccess","handleFailure","currentLocale","buttonClassName","disabled","buttonText","CustomButton","button","executeCopy","styles","primaryButton","i18n","getString","Component","defaultProps","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYMA,e;;;;;;;;;;;;;;;;;;;;;8BAEmD,KAAKC,K,EAAlDC,U,eAAAA,U,EAAYC,a,eAAAA,a,EAAeC,a,eAAAA,a;;;uBAE3B,4BAAWF,UAAX,C;;;AACNC,gBAAAA,aAAa;;;;;;;;AAEb,oBAAI,OAAOC,aAAP,KAAyB,UAA7B,EAAyC;AACvCA,kBAAAA,aAAa;AACd;;;;;;;;;;;;;;;;;;6BAGI;AAAA;;AAAA,yBAOH,KAAKH,KAPF;AAAA,UAELI,aAFK,gBAELA,aAFK;AAAA,UAGLC,eAHK,gBAGLA,eAHK;AAAA,UAILC,QAJK,gBAILA,QAJK;AAAA,UAKLC,UALK,gBAKLA,UALK;AAAA,UAMGC,YANH,gBAMLC,MANK;AAQP,aAAOD,YAAY,gBACjB,gCAAC,YAAD,eAAkB,KAAKR,KAAvB;AAA8B,QAAA,WAAW,EAAE;AAAA,iBAAM,KAAI,CAACU,WAAL,EAAN;AAAA;AAA3C,SADiB,gBAGjB,gCAAC,cAAD;AACE,QAAA,QAAQ,EAAEJ,QADZ;AAEE,QAAA,QAAQ,EAAC,iBAFX;AAGE,QAAA,SAAS,EAAE,4BAAWK,mBAAOC,aAAlB,EAAiCP,eAAjC,CAHb;AAIE,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACK,WAAL,EAAN;AAAA;AAJX,SAMGH,UAAU,IAAIM,iBAAKC,SAAL,CAAe,iBAAf,EAAkCV,aAAlC,CANjB,CAHF;AAYD;;;;EAhC2BW,gB;;AAkC9BhB,eAAe,CAACiB,YAAhB,GAA+B;AAC7Bd,EAAAA,aAAa,EAAEe,SADc;AAE7Bd,EAAAA,aAAa,EAAEc,SAFc;AAG7BZ,EAAAA,eAAe,EAAEY,SAHY;AAI7BX,EAAAA,QAAQ,EAAEW,SAJmB;AAK7BhB,EAAAA,UAAU,EAAEgB,SALiB;AAM7BV,EAAAA,UAAU,EAAEU,SANiB;AAO7BR,EAAAA,MAAM,EAAEQ;AAPqB,CAA/B;eASelB,e","sourcesContent":["import React, { Component } from 'react';\n\nimport classnames from 'classnames';\n\nimport { handleCopy } from '../../lib/handleCopy';\nimport { Button } from '../Button';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\ntype CopyToClipboardProps = {\n  currentLocale: string;\n  handleSuccess?: (...args: any[]) => any;\n  handleFailure?: (...args: any[]) => any;\n  buttonClassName?: string;\n  disabled?: boolean;\n  copiedText?: string;\n  buttonText?: string;\n  button?: React.ReactNode | ((...args: any[]) => any);\n};\nclass CopyToClipboard extends Component<CopyToClipboardProps, {}> {\n  async executeCopy() {\n    const { copiedText, handleSuccess, handleFailure } = this.props;\n    try {\n      await handleCopy(copiedText);\n      handleSuccess();\n    } catch (e) {\n      if (typeof handleFailure === 'function') {\n        handleFailure();\n      }\n    }\n  }\n  render() {\n    const {\n      currentLocale,\n      buttonClassName,\n      disabled,\n      buttonText,\n      button: CustomButton,\n    } = this.props;\n    return CustomButton ? (\n      <CustomButton {...this.props} executeCopy={() => this.executeCopy()} />\n    ) : (\n      <Button\n        disabled={disabled}\n        dataSign=\"copyToClipboard\"\n        className={classnames(styles.primaryButton, buttonClassName)}\n        onClick={() => this.executeCopy()}\n      >\n        {buttonText || i18n.getString('copyToClipboard', currentLocale)}\n      </Button>\n    );\n  }\n}\nCopyToClipboard.defaultProps = {\n  handleSuccess: undefined,\n  handleFailure: undefined,\n  buttonClassName: undefined,\n  disabled: undefined,\n  copiedText: undefined,\n  buttonText: undefined,\n  button: undefined,\n};\nexport default CopyToClipboard;\n"],"file":"index.js"}