{"version":3,"sources":["components/WebRTCNotificationSection/WebRTCNotificationSection.tsx"],"names":["ForwardActiveList","styled","div","WebRTCNotificationSection","call","onCloseNotification","currentNotificationIdentify","logName","subContactNameDisplay","currentLocale","formatPhone","isWide","onIgnore","endAndAnswer","holdAndAnswer","toVoicemail","hasActiveSession","answer","forwardingNumbers","onForward","clickForwardTrack","renderCallNotificationAvatar","displayEntity","entityType","getAvatarUrl","entityDetailLink","anchorEl","setAnchorEl","profileImageUrl","avatarUrl","setAvatarUrl","result","hasProfileImage","then","url","displayMatchedEntity","renderLogSection","direction","to","from","telephonySessionId","number","callDirections","outbound","phoneNumber","extensionNumber","formatNumber","handleClick","event","currentTarget","styles","layer","classic","content","contact","window","open","control","buttonsGroup","singleCallCtrl","callButton","Ignore","button","i18n","getString","firstLineText","ForwardIcon","voicemail","Voicemail","hangup","answerButton","AnswerIcon","secondLineText","EndAnswerIcon","multipleButton","HoldAnswerIcon","renderForwardList","handleClose","forward","e","stopPropagation","selectedValue","attributes","value","forwardList","map","key","text","label","subText","onClick","push","vertical","horizontal","paper","forwardPopover","moreActionItem","actionText"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport classnames from 'classnames';\n\nimport callDirections from '@ringcentral-integration/commons/enums/callDirections';\nimport {\n  RcMenuItem,\n  RcMenuList,\n  RcPopover,\n  styled,\n  RcLink,\n} from '@ringcentral/juno';\nimport { Ignore, Voicemail } from '@ringcentral/juno/icon';\n\nimport AnswerIcon from '../../assets/images/Answer.svg';\nimport EndAnswerIcon from '../../assets/images/EndAnswer.svg';\nimport ForwardIcon from '../../assets/images/Forward_white.svg';\nimport HoldAnswerIcon from '../../assets/images/HoldAnswer.svg';\nimport CircleButton from '../CircleButton';\nimport i18n from './i18n';\nimport styles from './styles.scss';\nimport { WebRTCNotificationProps } from './WebRTCNotificationSection.interface';\n\nconst ForwardActiveList = styled.div`\n  max-width: 170px;\n`;\n\nexport const WebRTCNotificationSection: FunctionComponent<WebRTCNotificationProps> =\n  ({\n    call,\n    onCloseNotification,\n    currentNotificationIdentify,\n    logName,\n    subContactNameDisplay,\n    currentLocale,\n    formatPhone,\n    isWide,\n    onIgnore,\n    endAndAnswer,\n    holdAndAnswer,\n    toVoicemail,\n    hasActiveSession,\n    answer,\n    forwardingNumbers,\n    onForward,\n    clickForwardTrack = () => {},\n    renderCallNotificationAvatar,\n    displayEntity,\n    entityType,\n    getAvatarUrl,\n    entityDetailLink,\n  }) => {\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [avatarUrl, setAvatarUrl] = useState(displayEntity?.profileImageUrl);\n\n    useEffect(() => {\n      if (currentNotificationIdentify) {\n        const { result } = call;\n        if (result) {\n          onCloseNotification();\n        }\n      }\n    }, [call.result]);\n\n    useEffect(() => {\n      if (\n        displayEntity &&\n        displayEntity.hasProfileImage &&\n        !displayEntity.profileImageUrl\n      ) {\n        getAvatarUrl(displayEntity).then((url: string) => {\n          setAvatarUrl(url);\n        });\n      }\n    }, [displayEntity]);\n\n    const displayMatchedEntity = displayEntity\n      ? {\n          ...displayEntity,\n          profileImageUrl: avatarUrl,\n        }\n      : null;\n\n    const renderLogSection = () => {\n      const { direction, to, from, telephonySessionId } = call;\n      const number =\n        direction === callDirections.outbound\n          ? to && (to.phoneNumber || to.extensionNumber)\n          : from && (from.phoneNumber || from.extensionNumber);\n      const formatNumber = formatPhone(number);\n      const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        clickForwardTrack();\n        setAnchorEl(event.currentTarget);\n      };\n      return (\n        <div className={styles.layer}>\n          <div\n            data-sign=\"inboundNotification\"\n            className={classnames(\n              !isWide ? styles.classic : null,\n              styles.content,\n            )}\n          >\n            {renderCallNotificationAvatar?.(displayMatchedEntity, entityType)}\n            <div data-sign=\"logName\" title={logName} className={styles.contact}>\n              {entityDetailLink ? (\n                <RcLink\n                  variant=\"inherit\"\n                  onClick={() => window.open(entityDetailLink, '_blank')}\n                >\n                  {logName}\n                </RcLink>\n              ) : (\n                logName\n              )}\n            </div>\n            {subContactNameDisplay && (\n              <div data-sign=\"subName\" className={styles.number}>\n                {subContactNameDisplay}\n              </div>\n            )}\n            <div className={styles.control}>\n              <ul\n                className={classnames(styles.buttonsGroup, {\n                  [styles.singleCallCtrl]: !hasActiveSession,\n                })}\n              >\n                <li className={styles.callButton}>\n                  <CircleButton\n                    dataSign=\"ignore\"\n                    icon={Ignore}\n                    iconWidth={250}\n                    iconHeight={250}\n                    iconX={125}\n                    iconY={125}\n                    className={styles.button}\n                    onClick={() => onIgnore(telephonySessionId)}\n                  />\n                  <span\n                    title={i18n.getString('ignore', currentLocale)}\n                    className={styles.firstLineText}\n                  >\n                    {i18n.getString('ignore', currentLocale)}\n                  </span>\n                </li>\n                <li className={styles.callButton}>\n                  <CircleButton\n                    dataSign={!anchorEl ? 'forward' : 'forwardActive'}\n                    icon={ForwardIcon}\n                    className={styles.button}\n                    onClick={handleClick}\n                  />\n                  <span\n                    title={i18n.getString('forward', currentLocale)}\n                    className={styles.firstLineText}\n                  >\n                    {i18n.getString('forward', currentLocale)}\n                  </span>\n                </li>\n                {!isWide && hasActiveSession && (\n                  <li\n                    className={classnames(styles.callButton, styles.voicemail)}\n                  >\n                    <CircleButton\n                      dataSign=\"toVoiceMail\"\n                      icon={Voicemail}\n                      className={classnames(styles.button, styles.hangup)}\n                      showBorder={false}\n                      iconWidth={250}\n                      iconHeight={250}\n                      iconX={125}\n                      iconY={125}\n                      onClick={() => toVoicemail(telephonySessionId)}\n                    />\n                    <span\n                      title={i18n.getString('toVoicemail', currentLocale)}\n                      className={styles.firstLineText}\n                    >\n                      {i18n.getString('toVoicemail', currentLocale)}\n                    </span>\n                  </li>\n                )}\n              </ul>\n              <ul className={styles.buttonsGroup}>\n                {!hasActiveSession && (\n                  <li\n                    className={classnames(\n                      styles.callButton,\n                      styles.answerButton,\n                    )}\n                  >\n                    <CircleButton\n                      dataSign=\"answer\"\n                      icon={AnswerIcon}\n                      className={classnames(styles.button, styles.answer)}\n                      showBorder={false}\n                      onClick={() => answer(telephonySessionId)}\n                    />\n                    <span\n                      title={i18n.getString('answer', currentLocale)}\n                      className={styles.secondLineText}\n                    >\n                      {i18n.getString('answer', currentLocale)}\n                    </span>\n                  </li>\n                )}\n                {hasActiveSession && (\n                  <li className={styles.callButton}>\n                    <CircleButton\n                      dataSign=\"endAndAnswer\"\n                      icon={EndAnswerIcon}\n                      className={classnames(\n                        styles.button,\n                        styles.multipleButton,\n                      )}\n                      showBorder={false}\n                      iconWidth={500}\n                      iconHeight={500}\n                      iconX={0}\n                      iconY={0}\n                      onClick={() => endAndAnswer(telephonySessionId)}\n                    />\n                    <span\n                      title={i18n.getString('endAndAnswer', currentLocale)}\n                      className={styles.secondLineText}\n                    >\n                      {i18n.getString('endAndAnswer', currentLocale)}\n                    </span>\n                  </li>\n                )}\n                {(isWide || !hasActiveSession) && (\n                  <li className={styles.callButton}>\n                    <CircleButton\n                      dataSign=\"toVoiceMail\"\n                      icon={Voicemail}\n                      className={classnames(styles.button, styles.hangup)}\n                      showBorder={false}\n                      iconWidth={250}\n                      iconHeight={250}\n                      iconX={125}\n                      iconY={125}\n                      onClick={() => toVoicemail(telephonySessionId)}\n                    />\n                    <span\n                      title={i18n.getString('toVoicemail', currentLocale)}\n                      className={styles.secondLineText}\n                    >\n                      {i18n.getString('toVoicemail', currentLocale)}\n                    </span>\n                  </li>\n                )}\n                {hasActiveSession && (\n                  <li className={styles.callButton}>\n                    <CircleButton\n                      dataSign=\"holdAndAnswer\"\n                      icon={HoldAnswerIcon}\n                      className={classnames(\n                        styles.button,\n                        styles.multipleButton,\n                      )}\n                      showBorder={false}\n                      iconWidth={500}\n                      iconHeight={500}\n                      iconX={0}\n                      iconY={0}\n                      onClick={() => holdAndAnswer(telephonySessionId)}\n                    />\n                    <span\n                      title={i18n.getString('holdAndAnswer', currentLocale)}\n                      className={styles.secondLineText}\n                    >\n                      {i18n.getString('holdAndAnswer', currentLocale)}\n                    </span>\n                  </li>\n                )}\n              </ul>\n            </div>\n          </div>\n        </div>\n      );\n    };\n\n    const renderForwardList = () => {\n      const handleClose = () => {\n        setAnchorEl(null);\n      };\n      const forward = (e: React.MouseEvent<HTMLElement>) => {\n        e.stopPropagation();\n        handleClose();\n        // TODO: check that type, should switch to getAttribute\n        const selectedValue = e.currentTarget.attributes['data-value'].value;\n        onForward(selectedValue, call?.telephonySessionId);\n      };\n      const forwardList = forwardingNumbers.map((phoneNumber) => {\n        return {\n          key: phoneNumber.phoneNumber,\n          text: phoneNumber.label,\n          subText: phoneNumber.phoneNumber,\n          onClick: forward,\n        };\n      });\n      forwardList.push({\n        key: 'custom',\n        text: i18n.getString('custom', currentLocale),\n        subText: null,\n        onClick: forward,\n      });\n      return (\n        <RcPopover\n          anchorOrigin={{\n            vertical: 'center',\n            horizontal: isWide ? 'left' : 'center',\n          }}\n          transformOrigin={{\n            vertical: 'center',\n            horizontal: isWide ? 'right' : 'center',\n          }}\n          marginThreshold={isWide ? 0 : 15}\n          anchorEl={anchorEl}\n          open={!!anchorEl}\n          onClose={() => handleClose()}\n          classes={{ paper: styles.forwardPopover }}\n        >\n          <ForwardActiveList data-sign=\"forwardActiveList\">\n            <RcMenuList>\n              {forwardList.map(({ text, subText, onClick, key }) => (\n                <RcMenuItem key={key} onClick={onClick} data-value={key}>\n                  <div className={styles.moreActionItem} data-sign={key}>\n                    {text && <span className={styles.actionText}>{text}</span>}\n                    {subText && (\n                      <span className={styles.subText}>{subText} </span>\n                    )}\n                  </div>\n                </RcMenuItem>\n              ))}\n            </RcMenuList>\n          </ForwardActiveList>\n        </RcPopover>\n      );\n    };\n    return (\n      <>\n        {renderLogSection()}\n        {renderForwardList()}\n      </>\n    );\n  };\n"],"file":"WebRTCNotificationSection.js"}