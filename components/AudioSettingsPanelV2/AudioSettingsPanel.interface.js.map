{"version":3,"file":"AudioSettingsPanel.interface.js","names":[],"sources":["components/AudioSettingsPanelV2/AudioSettingsPanel.interface.ts"],"sourcesContent":["import type {\n  AudioInfo,\n  RingtoneItem,\n} from '@ringcentral-integration/commons/modules/RingtoneConfiguration';\nimport type { AUDIO_TYPE } from '@ringcentral-integration/commons/modules/VolumeInspector';\nimport type { OmitFunctions } from '@ringcentral-integration/utils/src/typeFunctions/OmitFunctions';\n\nexport interface AudioSettingsPanelProps {\n  isAGCEnabled: boolean;\n  hasUserMedia: boolean;\n  showAGCEnabled: boolean;\n  availableInputDevices: OmitFunctions<MediaDeviceInfo>[];\n  availableOutputDevices: OmitFunctions<MediaDeviceInfo>[];\n  availableRingtoneDevices: OmitFunctions<MediaDeviceInfo>[];\n  checkUserMedia: () => Promise<void>;\n  showAlert: () => void;\n  className?: string | null;\n  inputDeviceDisabled?: boolean;\n  ringtoneSelectDisabled?: boolean;\n  inputDeviceId: string;\n  isWebRTC: boolean;\n  onBackButtonClick: (...args: any) => unknown;\n  onSave: (...args: any) => unknown;\n  outputDeviceDisabled?: boolean;\n  outputDeviceId: string;\n  ringtoneVolume: number;\n  callVolume: number;\n  ringtoneDeviceId: string;\n  handleTestMicroClick: (...args: any) => unknown;\n  handleTestSpeakerClick: (...args: any) => unknown;\n  isUploadRingtoneDisabled?: boolean;\n  volumeTestData: {\n    volume: number;\n    countDown: number;\n    testState: number;\n    isRecording: boolean;\n    type: AUDIO_TYPE | null;\n  };\n  fullRingtoneList: RingtoneItem[];\n  selectedRingtoneId: string;\n  enableCustomRingtone?: boolean;\n  updateCurrentRingtone: (id: string) => void;\n  removeCustomRingtone: (id: string) => void;\n  uploadCustomRingtone: (audioInfo: AudioInfo) => void;\n  showDangerAlert: (message: string) => void;\n}\n"],"mappings":"","ignoreList":[]}