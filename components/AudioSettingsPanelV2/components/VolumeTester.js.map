{"version":3,"file":"VolumeTester.js","names":["_VolumeInspector","require","_juno","_react","_interopRequireWildcard","_i18n","_styles","_interopRequireDefault","_VolumeGauge","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","VolumeTester","props","type","audioType","handleButtonClick","_props$gaugeSize","gaugeSize","volume","testState","countDown","isRecording","disabled","isInactive","useMemo","convertVolumeForGauge","Math","floor","buttonText","defaultText","TEST_TYPE","microphone","TEST_STATE","RECORDS_AUDIO","PLAYS_AUDIO","hintText","createElement","className","styles","testVolumeContainer","RcTypography","concat","testVolumeHint","color","variant","display","RcButton","testVolumeButton","size","onClick","VolumeGauge","exports"],"sources":["components/AudioSettingsPanelV2/components/VolumeTester.tsx"],"sourcesContent":["import {\n  AUDIO_TYPE,\n  TEST_STATE,\n  TEST_TYPE,\n} from '@ringcentral-integration/commons/modules/VolumeInspector';\nimport { RcTypography, RcButton } from '@ringcentral/juno';\nimport React, { useMemo } from 'react';\n\nimport { t } from '../i18n';\nimport styles from '../styles.scss';\n\nimport { VolumeGauge } from './VolumeGauge';\n\ntype VolumeTesterProps = {\n  type: AUDIO_TYPE | null;\n  audioType: AUDIO_TYPE;\n  volume: number;\n  testState: number;\n  gaugeSize?: number;\n  handleButtonClick: (...args: any[]) => any;\n  isRecording?: boolean;\n  countDown?: number;\n  disabled?: boolean;\n};\n\nexport const VolumeTester = (props: VolumeTesterProps) => {\n  const {\n    type,\n    audioType,\n    handleButtonClick,\n    gaugeSize = 16,\n    volume,\n    testState,\n    countDown,\n    isRecording,\n    disabled,\n  } = props;\n\n  const isInactive = useMemo(() => {\n    return type && audioType !== type;\n  }, [audioType, type]);\n\n  const convertVolumeForGauge = useMemo(() => {\n    if (isInactive) {\n      return 0;\n    }\n    return Math.floor(gaugeSize * volume) * (100 / gaugeSize);\n  }, [gaugeSize, volume, isInactive]);\n\n  const buttonText = useMemo(() => {\n    const defaultText = t(\n      audioType === TEST_TYPE.microphone\n        ? 'startRecordButton'\n        : 'startTestButton',\n    );\n    if (isInactive) {\n      return defaultText;\n    }\n    switch (testState) {\n      case TEST_STATE.RECORDS_AUDIO:\n        return t('stopRecordButton');\n      case TEST_STATE.PLAYS_AUDIO:\n        return t('stopPlaybackButton');\n      default:\n        return defaultText;\n    }\n  }, [testState, audioType, isInactive]);\n\n  const hintText = useMemo(() => {\n    if (isInactive) {\n      return null;\n    }\n    if (testState === TEST_STATE.RECORDS_AUDIO && countDown) {\n      return t('stopRecordDescription', {\n        countDown,\n      });\n    }\n    if (testState === TEST_STATE.PLAYS_AUDIO) {\n      return t(\n        audioType === TEST_TYPE.microphone\n          ? 'stopPlaybackDescription'\n          : 'stopTestDescription',\n      );\n    }\n    return null;\n  }, [countDown, testState, audioType, isInactive]);\n\n  return (\n    <div className={styles.testVolumeContainer}>\n      {hintText ? (\n        <RcTypography\n          data-sign={`test-${audioType}-hint`}\n          className={styles.testVolumeHint}\n          color={isRecording ? 'danger.f02' : 'success.f02'}\n          variant=\"caption1\"\n          display=\"block\"\n        >\n          {hintText}\n        </RcTypography>\n      ) : null}\n      <RcButton\n        className={styles.testVolumeButton}\n        size=\"small\"\n        variant=\"outlined\"\n        data-sign={`test-${audioType}-button`}\n        disabled={isInactive || disabled}\n        onClick={handleButtonClick}\n      >\n        {buttonText}\n      </RcButton>\n      <VolumeGauge\n        data-sign={`test-${audioType}-volume-gauge`}\n        volume={convertVolumeForGauge}\n        size={gaugeSize}\n        isRecording={isRecording}\n      />\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]}