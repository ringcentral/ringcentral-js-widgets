{"version":3,"file":"CallLogFields.interface.js","names":[],"sources":["components/CallLogFields/CallLogFields.interface.ts"],"sourcesContent":["import type { MutableRefObject, ReactNode } from 'react';\n\nimport type { ReactElementLike } from 'prop-types';\n\nimport type { RcDatePickerProps } from '@ringcentral/juno';\n\nimport type { CallLog, Task } from '../CallLogPanel';\n\nexport type CallLogFieldsProps = {\n  currentLocale: string;\n  currentLog?: CallLog;\n  onUpdateCallLog?: (data: { task: Task }, id: string) => any;\n  onSaveCallLog?: (...args: any[]) => any;\n  onSelectViewVisible?: (visible: boolean, fieldName: string) => any;\n  customInputDataStruct?: (...args: any[]) => any;\n  subjectDropdownsTracker?: (...args: any[]) => any;\n  startAdornmentRender?: (...args: any[]) => any;\n  referenceFieldOptions: { [key: string]: FieldOption };\n  contactSearch: ({\n    searchString,\n  }: {\n    searchString: string;\n  }) => Promise<Array<any>> | Promise<void>;\n  showFoundFromServer: boolean;\n  editSectionScrollBy?: (top: number) => void;\n  fieldSize: RcDatePickerProps['size'];\n  classes?: {\n    root?: string;\n  };\n  refs?: {\n    [key: string]: MutableRefObject<any>;\n  };\n  disabled: boolean;\n  onSelectListOpen?(fieldValue: string): void;\n  onTextAreaFocus?: React.FocusEventHandler<\n    HTMLInputElement | HTMLTextAreaElement\n  >;\n  onFullSelectFieldClick?(field: string): void;\n};\n\nexport interface FieldOption {\n  getLabel: (item: any, length?: number, currentLog?: CallLog) => string;\n  getSelectedOptionLabel?: (\n    item: any,\n    length?: number,\n    currentLog?: CallLog,\n  ) => string;\n  getType?: (item: any) => string;\n  onChange: (item: any) => any;\n  metadata?: FieldMetadata;\n  currentOptionFinder: (task: Task) => (item: any) => boolean;\n  matchedEntitiesGetter: (currentLog: CallLog) => any;\n  otherEntitiesGetter?: (currentLog: CallLog) => any;\n  associatedEntitiesGetter?: (currentLog: CallLog) => any;\n  searchOptionFinder?: (option: any, text: string) => boolean;\n  shouldShowAssociatedSection?: (currentLog: CallLog) => boolean;\n  rightIconRender?: (item: any) => ReactElementLike;\n  onBackClick?: () => void;\n  backHeaderClassName?: string;\n  shouldDisable?: (task?: Task) => boolean;\n  disableReason?: ReactNode | string;\n  getValue?: (item: any) => any;\n  foundFromServerEntityGetter?: (currentLog: CallLog) => any[];\n  multiple?: boolean;\n}\n\nexport interface FieldMetadata {\n  title: string;\n  placeholder: string;\n  valueField: string;\n}\n"],"mappings":""}