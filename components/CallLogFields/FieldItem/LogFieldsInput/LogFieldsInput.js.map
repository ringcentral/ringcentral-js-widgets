{"version":3,"sources":["components/CallLogFields/FieldItem/LogFieldsInput/LogFieldsInput.tsx"],"names":["LogFieldsInput","props","inputRef","React","createRef","checkPropsUpdate","debounce","value","state","nextProps","isFocus","document","activeElement","current","onChange","setState","required","error","type","onFocus","rest","styleRequired","styles","isRequired","commonStyle","e","updateValue","target","Number","Component","defaultProps","placeholder","undefined","multiline"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;AAIA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUaA,c;;;;;AAgBX,0BAAYC,KAAZ,EAAwC;AAAA;;AAAA;;AACtC,8BAAMA,KAAN;AADsC,UALxCC,QAKwC,gBAL7BC,kBAAMC,SAAN,EAK6B;AAAA,UAHxCC,gBAGwC,GAHrB,4EAGqB;AAAA,UAFxCC,QAEwC,GAF7B,+DAAmB,GAAnB,CAE6B;AAAA,QAE9BC,KAF8B,GAEpBN,KAFoB,CAE9BM,KAF8B;AAGtC,UAAKC,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAEA,KAAK,IAAI;AADL,KAAb;AAHsC;AAMvC,G,CAED;;;;;8CAC0BE,S,EAAW;AACnC,UAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,KAA2B,KAAKV,QAAL,CAAcW,OAAzD;AACA,WAAKR,gBAAL,CAAsBI,SAAtB,EAAiC,OAAjC,EAA0CC,OAA1C;AACD;;;gCAGCH,K,EACAO,Q,EACA;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA,KAAK,EAALA;AAAF,OAAd;AACA,WAAKD,QAAL,CAAc;AAAA,eAAMQ,QAAQ,CAACP,KAAD,CAAd;AAAA,OAAd;AACD;;;6BAEQ;AAAA;;AAAA,wBACuD,KAAKN,KAD5D;AAAA,UACCa,SADD,eACCA,QADD;AAAA,UACWE,QADX,eACWA,QADX;AAAA,UACqBC,KADrB,eACqBA,KADrB;AAAA,UAC4BC,IAD5B,eAC4BA,IAD5B;AAAA,UACkCC,OADlC,eACkCA,OADlC;AAAA,UAC8CC,IAD9C;;AAAA,UAECb,KAFD,GAEW,KAAKC,KAFhB,CAECD,KAFD;AAGP,UAAMc,aAAa,GAAGL,QAAQ,GAAGM,mBAAOC,UAAV,GAAuB,IAArD;AACA,0BACE;AAAK,QAAA,SAAS,EAAE,4BAAWF,aAAX,EAA0BC,mBAAOE,WAAjC;AAAhB,sBACE,gCAAC,sBAAD,eACMJ,IADN;AAEE,QAAA,QAAQ,EAAE,KAAKlB,QAFjB;AAGE,QAAA,IAAI,EAAEgB,IAHR;AAIE,QAAA,QAAQ,EAAEF,QAJZ;AAKE,QAAA,KAAK,EAAEC,KALT;AAME,QAAA,KAAK,EAAEV,KANT;AAOE,QAAA,YAAY,MAPd;AAQE,QAAA,QAAQ,EAAE,kBAACkB,CAAD;AAAA,iBACR,MAAI,CAACC,WAAL,CACER,IAAI,KAAK,QAAT,IAAqBO,CAAC,CAACE,MAAF,CAASpB,KAAT,KAAmB,EAAxC,GACIqB,MAAM,CAACH,CAAC,CAACE,MAAF,CAASpB,KAAV,CADV,GAEIkB,CAAC,CAACE,MAAF,CAASpB,KAHf,EAIEO,SAJF,CADQ;AAAA,SARZ;AAgBE,QAAA,SAAS,MAhBX;AAiBE,QAAA,QAAQ,EAAE,KAjBZ;AAkBE,QAAA,OAAO,EAAEK;AAlBX,SADF,CADF;AAwBD;;;;EAlEiCU,gB;;;AAAvB7B,c,CAIJ8B,Y,GAA6C;AAClDZ,EAAAA,IAAI,EAAE,MAD4C;AAElDF,EAAAA,QAAQ,EAAE,KAFwC;AAGlDe,EAAAA,WAAW,EAAE,UAHqC;AAIlDxB,EAAAA,KAAK,EAAEyB,SAJ2C;AAKlDC,EAAAA,SAAS,EAAE;AALuC,C","sourcesContent":["import React, { Component } from 'react';\n\nimport classnames from 'classnames';\n\nimport { RcTextField, RcTextFieldProps } from '@ringcentral/juno';\n\nimport { bindDebounce } from '../../../../lib/bindDebounce';\nimport { bindNextPropsUpdate } from '../../../../lib/bindNextPropsUpdate';\nimport styles from '../styles.scss';\n\ntype LogFieldsInputProps = {\n  onChange: (...args: any[]) => any;\n} & Omit<RcTextFieldProps, 'ref'>;\n\ntype LogFieldsInputState = {\n  value: any;\n};\n\nexport class LogFieldsInput extends Component<\n  LogFieldsInputProps,\n  LogFieldsInputState\n> {\n  static defaultProps: Partial<LogFieldsInputProps> = {\n    type: 'text',\n    required: false,\n    placeholder: 'no label',\n    value: undefined,\n    multiline: false,\n  };\n  inputRef = React.createRef();\n\n  checkPropsUpdate = bindNextPropsUpdate(this);\n  debounce = bindDebounce(this, 500);\n\n  constructor(props: LogFieldsInputProps) {\n    super(props);\n    const { value } = props;\n    this.state = {\n      value: value || '',\n    };\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillReceiveProps(nextProps) {\n    const isFocus = document.activeElement === this.inputRef.current;\n    this.checkPropsUpdate(nextProps, 'value', isFocus);\n  }\n\n  updateValue(\n    value: string | number,\n    onChange: LogFieldsInputProps['onChange'],\n  ) {\n    this.setState({ value });\n    this.debounce(() => onChange(value));\n  }\n\n  render() {\n    const { onChange, required, error, type, onFocus, ...rest } = this.props;\n    const { value } = this.state;\n    const styleRequired = required ? styles.isRequired : null;\n    return (\n      <div className={classnames(styleRequired, styles.commonStyle)}>\n        <RcTextField\n          {...rest}\n          inputRef={this.inputRef}\n          type={type}\n          required={required}\n          error={error}\n          value={value}\n          gutterBottom\n          onChange={(e) =>\n            this.updateValue(\n              type === 'number' && e.target.value !== ''\n                ? Number(e.target.value)\n                : e.target.value,\n              onChange,\n            )\n          }\n          fullWidth\n          clearBtn={false}\n          onFocus={onFocus}\n        />\n      </div>\n    );\n  }\n}\n"],"file":"LogFieldsInput.js"}