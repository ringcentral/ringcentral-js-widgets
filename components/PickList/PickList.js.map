{"version":3,"sources":["components/PickList/PickList.tsx"],"names":["PickList","options","optionValueKey","optionLabelKey","label","value","required","onChange","dataSign","renderItem","renderValue","InputProps","rest","target","map","item","i","styles","menuItem"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAIA;;;;;;;;;;AAqBO,IAAMA,QAA0C,GAAG,SAA7CA,QAA6C,OAapD;AAAA,MAZJC,OAYI,QAZJA,OAYI;AAAA,iCAXJC,cAWI;AAAA,MAXJA,cAWI,oCAXa,IAWb;AAAA,iCAVJC,cAUI;AAAA,MAVJA,cAUI,oCAVa,OAUb;AAAA,MATJC,KASI,QATJA,KASI;AAAA,MARJC,KAQI,QARJA,KAQI;AAAA,MAPJC,QAOI,QAPJA,QAOI;AAAA,MANJC,SAMI,QANJA,QAMI;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,WAGI,QAHJA,WAGI;AAAA,MAFJC,UAEI,QAFJA,UAEI;AAAA,MADDC,IACC;;AACJ,sBACE,gCAAC,gBAAD;AACE,iBAAWJ,QADb;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,YAAY,MAHd;AAIE,IAAA,QAAQ,EAAEF,QAJZ;AAKE,IAAA,KAAK,EAAEF,KALT;AAME,IAAA,KAAK,EAAEC,KANT;AAOE,IAAA,UAAU,EAAEM,UAPd;AAQE,IAAA,QAAQ,EAAE,yBAA2B;AAAA,UAAdN,KAAc,SAAxBQ,MAAwB,CAAdR,KAAc;;AACnCE,MAAAA,SAAQ,CAACF,KAAD,CAAR;AACD,KAVH;AAWE,IAAA,WAAW,EAAEK;AAXf,KAYME,IAZN,GAcGX,OAAO,CAACa,GAAR,CAAY,UAACC,IAAD,EAAOC,CAAP,EAAa;AACxB,QAAMZ,KAAK,GAAGW,IAAI,CAACZ,cAAD,CAAlB;AACA,wBACE,gCAAC,oBAAD;AACE,MAAA,GAAG,EAAEa,CADP;AAEE,MAAA,KAAK,EAAED,IAAI,CAACb,cAAD,CAFb;AAGE,mCAAoBc,CAApB;AAHF,OAKGP,UAAU,GACTA,UAAU,CAACM,IAAD,CADD,gBAGT;AAAK,MAAA,SAAS,EAAEE,mBAAOC,QAAvB;AAAiC,MAAA,KAAK,EAAEd;AAAxC,OACGA,KADH,CARJ,CADF;AAeD,GAjBA,CAdH,CADF;AAmCD,CAjDM","sourcesContent":["import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { RcMenuItem, RcSelect, RcSelectProps } from '@ringcentral/juno';\n\nimport styles from './styles.scss';\n\nexport interface PickListProps extends Pick<RcSelectProps, 'InputProps'> {\n  options: any[];\n  /**\n   * the option value with key of options, default is 'id'\n   */\n  optionValueKey?: string;\n  /**\n   * the option show label with the key of options, default is 'label'\n   */\n  optionLabelKey?: string;\n  label: string;\n  value: string;\n  required?: boolean;\n  onChange: (e: any) => void;\n  dataSign?: string;\n  renderItem?: (...args: any[]) => ReactNode;\n  renderValue?: (...args: any[]) => ReactNode;\n}\n\nexport const PickList: FunctionComponent<PickListProps> = ({\n  options,\n  optionValueKey = 'id',\n  optionLabelKey = 'label',\n  label,\n  value,\n  required,\n  onChange,\n  dataSign,\n  renderItem,\n  renderValue,\n  InputProps,\n  ...rest\n}) => {\n  return (\n    <RcSelect\n      data-sign={dataSign}\n      fullWidth\n      gutterBottom\n      required={required}\n      label={label}\n      value={value}\n      InputProps={InputProps}\n      onChange={({ target: { value } }) => {\n        onChange(value);\n      }}\n      renderValue={renderValue}\n      {...rest}\n    >\n      {options.map((item, i) => {\n        const label = item[optionLabelKey];\n        return (\n          <RcMenuItem\n            key={i}\n            value={item[optionValueKey]}\n            data-sign={`option${i}`}\n          >\n            {renderItem ? (\n              renderItem(item)\n            ) : (\n              <div className={styles.menuItem} title={label}>\n                {label}\n              </div>\n            )}\n          </RcMenuItem>\n        );\n      })}\n    </RcSelect>\n  );\n};\n"],"file":"PickList.js"}