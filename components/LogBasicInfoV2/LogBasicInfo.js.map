{"version":3,"sources":["components/LogBasicInfoV2/LogBasicInfo.tsx"],"names":["callIconMap","callResults","missed","dynamicsFont","callDirections","inbound","outbound","telephonyStatuses","ringing","callHover","getInfoStatus","status","onHold","callConnected","LogBasicInfo","React","memo","props","currentLog","call","logName","logNameAndMoreDisplay","isShowEntity","basicURL","task","formatPhone","currentLocale","dataSign","disableLinks","dateTimeFormatter","isWide","className","recordStatus","showRecordingIndicator","direction","to","from","startTime","offset","duration","result","telephonyStatus","getDurationElm","durationElement","i18n","getString","number","phoneNumber","extensionNumber","formatNumber","statusI18n","isRinging","infoStatus","isRecording","recordStatusEnum","recording","styles","root","classic","logBasicInfo","top","leftSectionInfo","icon","recordingIndicator","callDisplay","info","whatid","whoid","SFrecordLink","window","open","logNameAndMore","follow","time","utcTimestamp","locale","prevProps","nextProps","defaultProps","value","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { isEmpty } from 'ramda';\n\nimport callDirections from '@ringcentral-integration/commons/enums/callDirections';\nimport callResults from '@ringcentral-integration/commons/enums/callResults';\nimport telephonyStatuses, {\n  TelephonyStatus,\n} from '@ringcentral-integration/commons/enums/telephonyStatus';\nimport { isMissed } from '@ringcentral-integration/commons/lib/callLogHelpers';\nimport recordStatusEnum from '@ringcentral-integration/commons/modules/Webphone/recordStatus';\nimport { Call } from '@ringcentral-integration/commons/interfaces/Call.interface';\n\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport formatDuration from '../../lib/formatDuration';\nimport DurationCounter from '../DurationCounter';\nimport { RecordingIndicator } from '../RecordingIndicator';\nimport { CallIcon } from './CallIcon';\nimport i18n from './i18n';\nimport { ShinyBar } from './ShinyBar';\nimport styles from './styles.scss';\n\nconst callIconMap = {\n  [callResults.missed]: dynamicsFont.missed,\n  [callDirections.inbound]: dynamicsFont.inbound,\n  [callDirections.outbound]: dynamicsFont.outbound,\n  [telephonyStatuses.ringing]: dynamicsFont.callHover,\n};\nfunction getInfoStatus(status: TelephonyStatus) {\n  switch (status) {\n    case telephonyStatuses.onHold:\n      return 'onHold';\n    case telephonyStatuses.callConnected:\n    case telephonyStatuses.ringing:\n      return 'active';\n    default:\n      return 'callEnd';\n  }\n}\ntype LogBasicInfoProps = {\n  currentLocale?: string;\n  formatPhone?: (...args: any[]) => any;\n  currentLog?: {\n    call?: Call;\n    logName?: string;\n    logNameAndMoreDisplay?: string;\n    basicURL?: string;\n    task?: any;\n    isShowEntity?: boolean;\n  };\n  dataSign?: string;\n  disableLinks?: boolean;\n  dateTimeFormatter: (...args: any[]) => any;\n  isWide?: boolean;\n  className?: string;\n  recordStatus?: string;\n  showRecordingIndicator?: boolean;\n};\nconst LogBasicInfo: React.SFC<LogBasicInfoProps> = React.memo(\n  (props) => {\n    const {\n      currentLog: {\n        call,\n        logName,\n        logNameAndMoreDisplay,\n        isShowEntity,\n        basicURL,\n        task,\n      },\n      formatPhone,\n      currentLocale,\n      dataSign,\n      disableLinks,\n      dateTimeFormatter,\n      isWide,\n      className,\n      recordStatus,\n      showRecordingIndicator,\n    } = props;\n    if (!call) return null;\n    const {\n      direction,\n      to,\n      from,\n      startTime,\n      offset,\n      duration,\n      result,\n      telephonyStatus,\n    } = call;\n\n    function getDurationElm() {\n      let durationElement = null;\n      if (typeof duration === 'undefined') {\n        durationElement = disableLinks ? (\n          i18n.getString('unavailable', currentLocale)\n        ) : (\n          <DurationCounter startTime={startTime} offset={offset} />\n        );\n      } else {\n        durationElement = formatDuration(duration);\n      }\n      return durationElement;\n    }\n    const number =\n      direction === callDirections.outbound\n        ? to && (to.phoneNumber || to.extensionNumber)\n        : from && (from.phoneNumber || from.extensionNumber);\n    const formatNumber = formatPhone(number);\n    const missed = isMissed(call);\n    const durationElement = getDurationElm();\n    const status = result || telephonyStatus;\n    const statusI18n = i18n.getString(status, currentLocale);\n    const isRinging = status === telephonyStatuses.ringing;\n    const infoStatus = getInfoStatus(status);\n    const isRecording = recordStatus === recordStatusEnum.recording;\n    return (\n      <div\n        data-sign=\"logSection\"\n        className={classnames(\n          styles.root,\n          !isWide && styles.classic,\n          styles[infoStatus],\n          className,\n          styles.logBasicInfo,\n        )}\n      >\n        <ShinyBar\n          className={styles.top}\n          isRinging={isRinging}\n          status={infoStatus}\n        />\n        <div data-sign={dataSign} className={styles.leftSectionInfo}>\n          <CallIcon\n            title={\n              missed\n                ? i18n.getString(callResults.missed, currentLocale)\n                : i18n.getString(direction, currentLocale)\n            }\n            iconClassName={classnames(\n              styles.icon,\n              callIconMap[missed ? callResults.missed : direction],\n            )}\n          />\n          {showRecordingIndicator && isRecording && (\n            <RecordingIndicator\n              customClass={styles.recordingIndicator}\n              dataSign=\"recordingIndicator\"\n            />\n          )}\n          <ul className={styles.callDisplay}>\n            <li className={styles.info}>\n              {isShowEntity &&\n              (task?.whatid || task?.whoid || logNameAndMoreDisplay) ? (\n                <p\n                  className={styles.logName}\n                  title={`${\n                    logNameAndMoreDisplay\n                      ? `${logName}\\xa0$${logNameAndMoreDisplay}`\n                      : logName\n                  }`}\n                  data-sign=\"logName\"\n                >\n                  <a\n                    className={styles.SFrecordLink}\n                    onClick={() =>\n                      window.open(\n                        `${basicURL}/${task.whatid || task.whoid}`,\n                        '_blank',\n                      )\n                    }\n                  >\n                    {logNameAndMoreDisplay ? (\n                      <span>\n                        {logName}\n                        <span className={styles.logNameAndMore}>\n                          {logNameAndMoreDisplay}\n                        </span>\n                      </span>\n                    ) : (\n                      logName\n                    )}\n                  </a>\n                </p>\n              ) : (\n                <p\n                  className={styles.logName}\n                  title={logName}\n                  data-sign=\"logName\"\n                >\n                  {logName}\n                </p>\n              )}\n\n              <p className={classnames(styles.follow, styles['text-ellipsis'])}>\n                <span title={formatNumber} data-sign=\"phoneNumber\">\n                  {formatNumber}\n                </span>\n                <span data-sign=\"callStatus\" title={statusI18n}>\n                  {statusI18n}\n                </span>\n              </p>\n            </li>\n            <li className={styles['flex-fill']} />\n            <li className={classnames(styles.follow, styles.time)}>\n              <p>{durationElement}</p>\n              <p>\n                {dateTimeFormatter({\n                  utcTimestamp: startTime,\n                  locale: currentLocale,\n                })}\n              </p>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    // current call will be {} temporally when the call is ended\n    // will not update log info component at that time\n    if (\n      nextProps.currentLog?.call !== prevProps.currentLog?.call &&\n      isEmpty(nextProps.currentLog?.call)\n    ) {\n      return true;\n    }\n    return false;\n  },\n);\n\nLogBasicInfo.defaultProps = {\n  formatPhone: (value) => value,\n  currentLog: {},\n  dataSign: undefined,\n  disableLinks: false,\n  isWide: true,\n  currentLocale: 'en',\n  className: null,\n  recordStatus: '',\n  showRecordingIndicator: false,\n};\nexport default LogBasicInfo;\n"],"file":"LogBasicInfo.js"}