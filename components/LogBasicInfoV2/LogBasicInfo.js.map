{"version":3,"sources":["components/LogBasicInfoV2/LogBasicInfo.tsx"],"names":["callIconMap","callResults","missed","dynamicsFont","callDirections","inbound","outbound","telephonyStatuses","ringing","callHover","getInfoStatus","status","onHold","callConnected","LogBasicInfo","React","memo","props","currentLog","call","logName","subContactNameDisplay","isShowEntity","entityDetailLink","formatPhone","currentLocale","dataSign","disableLinks","dateTimeFormatter","isWide","className","recordStatus","showRecordingIndicator","direction","to","from","startTime","offset","duration","result","telephonyStatus","getDurationElm","durationElement","i18n","getString","number","phoneNumber","extensionNumber","formatNumber","statusI18n","isRinging","infoStatus","isRecording","recordStatusEnum","recording","styles","root","classic","logBasicInfo","top","leftSectionInfo","icon","recordingIndicator","callDisplay","info","window","open","follow","time","utcTimestamp","locale","prevProps","nextProps","defaultProps","value","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { isEmpty } from 'ramda';\n\nimport callDirections from '@ringcentral-integration/commons/enums/callDirections';\nimport callResults from '@ringcentral-integration/commons/enums/callResults';\nimport telephonyStatuses, {\n  TelephonyStatus,\n} from '@ringcentral-integration/commons/enums/telephonyStatus';\nimport { isMissed } from '@ringcentral-integration/commons/lib/callLogHelpers';\nimport recordStatusEnum from '@ringcentral-integration/commons/modules/Webphone/recordStatus';\nimport { Call } from '@ringcentral-integration/commons/interfaces/Call.interface';\n\nimport { RcLink, RcText } from '@ringcentral/juno';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport formatDuration from '../../lib/formatDuration';\nimport DurationCounter from '../DurationCounter';\nimport { RecordingIndicator } from '../RecordingIndicator';\nimport { CallIcon } from './CallIcon';\nimport i18n from './i18n';\nimport { ShinyBar } from './ShinyBar';\nimport styles from './styles.scss';\n\nconst callIconMap = {\n  [callResults.missed]: dynamicsFont.missed,\n  [callDirections.inbound]: dynamicsFont.inbound,\n  [callDirections.outbound]: dynamicsFont.outbound,\n  [telephonyStatuses.ringing]: dynamicsFont.callHover,\n};\nfunction getInfoStatus(status: TelephonyStatus) {\n  switch (status) {\n    case telephonyStatuses.onHold:\n      return 'onHold';\n    case telephonyStatuses.callConnected:\n    case telephonyStatuses.ringing:\n      return 'active';\n    default:\n      return 'callEnd';\n  }\n}\ntype LogBasicInfoProps = {\n  currentLocale?: string;\n  formatPhone?: (...args: any[]) => any;\n  currentLog?: {\n    call?: Call;\n    logName?: string;\n    subContactNameDisplay?: string;\n    entityDetailLink?: string;\n    isShowEntity?: boolean;\n  };\n  dataSign?: string;\n  disableLinks?: boolean;\n  dateTimeFormatter: (...args: any[]) => any;\n  isWide?: boolean;\n  className?: string;\n  recordStatus?: string;\n  showRecordingIndicator?: boolean;\n};\nconst LogBasicInfo: React.SFC<LogBasicInfoProps> = React.memo(\n  (props) => {\n    const {\n      currentLog: {\n        call,\n        logName,\n        subContactNameDisplay,\n        isShowEntity,\n        entityDetailLink,\n      },\n      formatPhone,\n      currentLocale,\n      dataSign,\n      disableLinks,\n      dateTimeFormatter,\n      isWide,\n      className,\n      recordStatus,\n      showRecordingIndicator,\n    } = props;\n    if (!call) return null;\n    const {\n      direction,\n      to,\n      from,\n      startTime,\n      offset,\n      duration,\n      result,\n      telephonyStatus,\n    } = call;\n\n    function getDurationElm() {\n      let durationElement = null;\n      if (typeof duration === 'undefined') {\n        durationElement = disableLinks ? (\n          i18n.getString('unavailable', currentLocale)\n        ) : (\n          <DurationCounter startTime={startTime} offset={offset} />\n        );\n      } else {\n        durationElement = formatDuration(duration);\n      }\n      return durationElement;\n    }\n    const number =\n      direction === callDirections.outbound\n        ? to && (to.phoneNumber || to.extensionNumber)\n        : from && (from.phoneNumber || from.extensionNumber);\n    const formatNumber = formatPhone(number);\n    const missed = isMissed(call);\n    const durationElement = getDurationElm();\n    const status = result || telephonyStatus;\n    const statusI18n = i18n.getString(status, currentLocale);\n    const isRinging = status === telephonyStatuses.ringing;\n    const infoStatus = getInfoStatus(status);\n    const isRecording = recordStatus === recordStatusEnum.recording;\n    return (\n      <div\n        data-sign=\"logSection\"\n        className={classnames(\n          styles.root,\n          !isWide && styles.classic,\n          styles[infoStatus],\n          className,\n          styles.logBasicInfo,\n        )}\n      >\n        <ShinyBar\n          className={styles.top}\n          isRinging={isRinging}\n          status={infoStatus}\n        />\n        <div data-sign={dataSign} className={styles.leftSectionInfo}>\n          <CallIcon\n            title={\n              missed\n                ? i18n.getString(callResults.missed, currentLocale)\n                : i18n.getString(direction, currentLocale)\n            }\n            iconClassName={classnames(\n              styles.icon,\n              callIconMap[missed ? callResults.missed : direction],\n            )}\n          />\n          {showRecordingIndicator && isRecording && (\n            <RecordingIndicator\n              customClass={styles.recordingIndicator}\n              dataSign=\"recordingIndicator\"\n            />\n          )}\n          <ul className={styles.callDisplay}>\n            <li className={styles.info}>\n              {isShowEntity ? (\n                <RcText\n                  className={styles.logName}\n                  title={`${\n                    subContactNameDisplay\n                      ? `${logName} ${subContactNameDisplay}`\n                      : logName\n                  }`}\n                  data-sign=\"logName\"\n                >\n                  {entityDetailLink ? (\n                    <RcLink\n                      variant=\"inherit\"\n                      onClick={() => window.open(entityDetailLink, '_blank')}\n                    >\n                      {logName}\n                    </RcLink>\n                  ) : (\n                    logName\n                  )}\n                  {subContactNameDisplay && (\n                    <RcText\n                      color=\"neutral.f04\"\n                      component=\"span\"\n                      align=\"center\"\n                      variant=\"caption1\"\n                    >\n                      {` ${subContactNameDisplay}`}\n                    </RcText>\n                  )}\n                </RcText>\n              ) : (\n                <p\n                  className={styles.logName}\n                  title={logName}\n                  data-sign=\"logName\"\n                >\n                  {logName}\n                </p>\n              )}\n\n              <p className={classnames(styles.follow, styles['text-ellipsis'])}>\n                <span title={formatNumber} data-sign=\"phoneNumber\">\n                  {formatNumber}\n                </span>\n                <span data-sign=\"callStatus\" title={statusI18n}>\n                  {statusI18n}\n                </span>\n              </p>\n            </li>\n            <li className={styles['flex-fill']} />\n            <li className={classnames(styles.follow, styles.time)}>\n              <p>{durationElement}</p>\n              <p>\n                {dateTimeFormatter({\n                  utcTimestamp: startTime,\n                  locale: currentLocale,\n                })}\n              </p>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    // current call will be {} temporally when the call is ended\n    // will not update log info component at that time\n    if (\n      nextProps.currentLog?.call !== prevProps.currentLog?.call &&\n      isEmpty(nextProps.currentLog?.call)\n    ) {\n      return true;\n    }\n    return false;\n  },\n);\n\nLogBasicInfo.defaultProps = {\n  formatPhone: (value) => value,\n  currentLog: {},\n  dataSign: undefined,\n  disableLinks: false,\n  isWide: true,\n  currentLocale: 'en',\n  className: null,\n  recordStatus: '',\n  showRecordingIndicator: false,\n};\nexport default LogBasicInfo;\n"],"file":"LogBasicInfo.js"}