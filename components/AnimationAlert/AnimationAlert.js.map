{"version":3,"sources":["components/AnimationAlert/AnimationAlert.tsx"],"names":["ENTRANCE_ANIMATION","EXIT_ANIMATION","AnimationAlert","mounted","state","messages","props","nextProps","duration","entranceAnimation","exitAnimation","currentMessagesIDs","map","message","id","nextMessagesIDs","addedMessagesIDs","filter","removedMessagesIDs","allMessagesIDs","Set","concat","allMessages","nextMessages","isAddedMessage","isRemovedMessage","animation","length","setState","isCurrentEmpty","nextState","AnimationMessage","Component","defaultProps","AlertDisplay","ANIMATION_DURATION"],"mappings":"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","sourcesContent":["import 'animate.css/animate.min.css';\n\nimport React, { Component } from 'react';\n\nimport { contains } from 'ramda';\n\nimport { sleep } from '@ringcentral-integration/commons/lib/sleep';\n\nimport AlertDisplay, { AlertDisplayProps } from '../AlertDisplay';\nimport { ANIMATION_DURATION } from './AnimationAlertUtils';\nimport { AnimationMessage } from './AnimationMessage';\n\nconst ENTRANCE_ANIMATION = 'fadeInDown';\nconst EXIT_ANIMATION = 'fadeOutUp';\n\ntype AnimationAlertProps = {\n  entranceAnimation?: string;\n  exitAnimation?: string;\n  duration?: number;\n  messages: any[];\n} & AlertDisplayProps;\n\ntype AnimationAlertState = { messages: any[] };\n\nclass AnimationAlert extends Component<\n  AnimationAlertProps,\n  AnimationAlertState\n> {\n  static defaultProps: Partial<AnimationAlertProps> = {\n    ...AlertDisplay.defaultProps,\n    entranceAnimation: ENTRANCE_ANIMATION,\n    exitAnimation: EXIT_ANIMATION,\n    duration: ANIMATION_DURATION,\n  };\n\n  mounted: boolean;\n\n  state = {\n    messages: this.props.messages,\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { messages } = this.props;\n\n    if (messages === nextProps.messages) return;\n    (async () => {\n      const { duration, entranceAnimation, exitAnimation } = this.props;\n      const currentMessagesIDs = messages.map((message) => message.id);\n      const nextMessagesIDs = nextProps.messages.map((message) => message.id);\n\n      const addedMessagesIDs = nextMessagesIDs.filter(\n        (id) => !contains(id, currentMessagesIDs),\n      );\n      const removedMessagesIDs = currentMessagesIDs.filter(\n        (id) => !contains(id, nextMessagesIDs),\n      );\n      const allMessagesIDs = [\n        ...new Set(currentMessagesIDs.concat(nextMessagesIDs)),\n      ] as string[];\n\n      const allMessages = {};\n\n      messages.concat(nextProps.messages).map((message) => {\n        allMessages[message.id] = message;\n        return message;\n      });\n\n      const nextMessages = allMessagesIDs.map((id) => {\n        const message = allMessages[id];\n        const isAddedMessage = contains(id, addedMessagesIDs);\n        const isRemovedMessage = contains(id, removedMessagesIDs);\n        let animation;\n        if (isAddedMessage) {\n          animation = entranceAnimation;\n        } else if (isRemovedMessage) {\n          animation = exitAnimation;\n        }\n        return {\n          ...message,\n          ...(animation ? { animation } : {}),\n          duration,\n        };\n      });\n\n      if (nextMessages.length > 0) {\n        this.setState({\n          messages: nextMessages,\n        });\n      }\n      await sleep(duration);\n\n      if (!this.mounted) return;\n      const isCurrentEmpty = currentMessagesIDs.length === 0;\n      this.setState({\n        messages: isCurrentEmpty ? nextMessages : nextProps.messages,\n      });\n    })();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextState.messages !== this.state.messages;\n  }\n\n  render() {\n    return (\n      <AlertDisplay\n        {...this.props}\n        component={AnimationMessage}\n        messages={this.state.messages}\n      />\n    );\n  }\n}\n\nexport default AnimationAlert;\n"],"file":"AnimationAlert.js"}