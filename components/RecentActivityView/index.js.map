{"version":3,"sources":["components/RecentActivityView/index.tsx"],"names":["RecentActivityView","props","onTabChanged","tabName","defaultTab","currentTab","getCurrentTab","getData","setState","state","prevProps","currentContact","id","tabs","tab","cleanUp","currentTabPath","view","find","path","showSpinner","currentPath","goTo","trackClickTab","styles","recentActivityView","RecentActivityNavigationButton","navigationBar","listView","getCurrentTabPanel","PureComponent","propTypes","PropTypes","bool","isRequired","object","array","string","func","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport NavigationBar from '../NavigationBar';\nimport RecentActivityNavigationButton from '../RecentActivityNavigationButton';\nimport { SpinnerOverlay } from '../SpinnerOverlay';\nimport styles from './styles.scss';\n\nclass RecentActivityView extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: props.defaultTab,\n    };\n  }\n\n  componentDidMount() {\n    // Switch to default tab and load all data\n    this.onTabChanged();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentContact.id !== this.props.currentContact.id) {\n      this.onTabChanged(this.state.currentTab);\n    }\n  }\n\n  componentWillUnmount() {\n    for (const tab of this.props.tabs) {\n      tab.cleanUp();\n    }\n  }\n\n  onTabChanged = (tabName = this.props.defaultTab) => {\n    const currentTab = this.getCurrentTab(tabName);\n    if (currentTab) currentTab.getData();\n    this.setState({\n      currentTab: tabName,\n    });\n  };\n\n  getCurrentTabPanel() {\n    const currentTabPath = this.state.currentTab;\n    const currentTab = this.getCurrentTab(currentTabPath);\n    return currentTab ? currentTab.view : null;\n  }\n\n  getCurrentTab(currentTabPath) {\n    const tabs = this.props.tabs;\n    return tabs.find((tab) => tab.path === currentTabPath);\n  }\n\n  render() {\n    const { showSpinner } = this.props;\n    if (showSpinner) return <SpinnerOverlay />;\n    const props = {\n      currentPath: this.state.currentTab,\n      goTo: (tabName) => {\n        this.props.trackClickTab?.(tabName);\n        this.onTabChanged(tabName);\n      },\n      tabs: this.props.tabs,\n    };\n    return (\n      <div className={styles.recentActivityView} data-sign=\"recentActivityView\">\n        <NavigationBar\n          button={RecentActivityNavigationButton}\n          className={styles.navigationBar}\n          {...props}\n        />\n        <div className={styles.listView}>{this.getCurrentTabPanel()}</div>\n      </div>\n    );\n  }\n}\n\nRecentActivityView.propTypes = {\n  showSpinner: PropTypes.bool.isRequired,\n  currentContact: PropTypes.object.isRequired,\n  tabs: PropTypes.array.isRequired,\n  defaultTab: PropTypes.string.isRequired,\n  trackClickTab: PropTypes.func,\n};\n\nRecentActivityView.defaultProps = {\n  trackClickTab: undefined,\n};\n\nexport default RecentActivityView;\n"],"file":"index.js"}