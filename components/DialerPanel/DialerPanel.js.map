{"version":3,"file":"DialerPanel.js","names":["_react","_interopRequireWildcard","require","_classnames","_interopRequireDefault","_Answer","_CircleButton","_DialPad","_FromField","_RecipientsInput","_RecipientsInputV","_SpinnerOverlay","_styles","obj","__esModule","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","DialerPanel","_ref","currentLocale","callButtonDisabled","className","dialButtonsClassName","onToNumberChange","onCallButtonClick","toNumber","fromNumber","fromNumbers","changeFromNumber","formatPhone","isWebphoneMode","showSpinner","dialButtonVolume","dialButtonMuted","searchContact","searchContactList","recipients","recipient","clearToNumber","setRecipient","clearRecipient","phoneTypeRenderer","phoneSourceNameRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","autoFocus","_ref$showFromField","showFromField","_ref$disableFromField","disableFromField","children","withTabs","inConference","isLastInputFromDialpad","showAnonymous","useV2","inputEl","useRef","useEffect","current","focus","input","createElement","RecipientsInputV2","ref","value","onInputChange","onInputClear","addToRecipients","removeFromRecipients","formatContactPhone","contactInfoRenderer","contactPhoneRenderer","enableTitle","classnames","styles","inputField","recipientsField","inputRef","element","onChange","onClean","titleEnabled","root","hidden","disabled","dialButtons","dialPad","onButtonOutput","callBtnRow","callBtnRowWithTabs","callBtnRowInConference","callBtn","dataSign","dialBtn","onClick","clickDialerToCall","icon","AnswerIcon","showBorder","SpinnerOverlay","Empty","defaultProps","phoneNumber","_default","exports"],"sources":["components/DialerPanel/DialerPanel.tsx"],"sourcesContent":["import type { FunctionComponent } from 'react';\nimport React, { useEffect, useRef } from 'react';\n\nimport classnames from 'classnames';\n\nimport type { ToNumber as Recipient } from '@ringcentral-integration/commons/modules/ComposeText';\n\nimport AnswerIcon from '../../assets/images/Answer.svg';\nimport CircleButton from '../CircleButton';\nimport DialPad from '../DialPad';\nimport FromField from '../FromField';\nimport RecipientsInput from '../RecipientsInput';\nimport { RecipientsInputV2 } from '../RecipientsInputV2';\nimport { SpinnerOverlay } from '../SpinnerOverlay';\nimport styles from './styles.scss';\n\nexport interface DialerPanelProps {\n  currentLocale: string;\n  className?: string;\n  dialButtonsClassName?: string;\n  onCallButtonClick: (...args: any[]) => any;\n  callButtonDisabled?: boolean;\n  isWebphoneMode?: boolean;\n  toNumber?: string;\n  onToNumberChange?: (...args: any[]) => any;\n  fromNumber?: string;\n  fromNumbers?: {\n    phoneNumber?: string;\n    usageType?: string;\n  }[];\n  changeFromNumber?: (...args: any[]) => any;\n  formatPhone?: (...args: any[]) => any;\n  showSpinner?: boolean;\n  dialButtonVolume?: number;\n  dialButtonMuted?: boolean;\n  searchContact: (...args: any[]) => any;\n  searchContactList: {\n    name: string;\n    entityType: string;\n    phoneType: string;\n    phoneNumber: string;\n  }[];\n  recipient?: Recipient;\n  recipients: Recipient[];\n  clearToNumber: (...args: any[]) => any;\n  setRecipient: (...args: any[]) => any;\n  clearRecipient: (...args: any[]) => any;\n  phoneTypeRenderer?: (...args: any[]) => any;\n  phoneSourceNameRenderer?: (...args: any[]) => any;\n  recipientsContactInfoRenderer?: (...args: any[]) => any;\n  recipientsContactPhoneRenderer?: (...args: any[]) => any;\n  autoFocus?: boolean;\n  showFromField?: boolean;\n  disableFromField?: boolean;\n  withTabs?: boolean;\n  inConference?: boolean;\n  isLastInputFromDialpad?: boolean;\n  useV2?: boolean;\n  showAnonymous?: boolean;\n}\nconst DialerPanel: FunctionComponent<DialerPanelProps> = ({\n  currentLocale,\n  callButtonDisabled,\n  className,\n  dialButtonsClassName,\n  onToNumberChange,\n  onCallButtonClick,\n  toNumber,\n  fromNumber,\n  fromNumbers,\n  changeFromNumber,\n  formatPhone,\n  isWebphoneMode,\n  showSpinner,\n  dialButtonVolume,\n  dialButtonMuted,\n  searchContact,\n  searchContactList,\n  recipients,\n  recipient,\n  clearToNumber,\n  setRecipient,\n  clearRecipient,\n  phoneTypeRenderer,\n  phoneSourceNameRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n  autoFocus,\n  showFromField = true,\n  disableFromField = false,\n  children,\n  withTabs,\n  inConference,\n  isLastInputFromDialpad,\n  showAnonymous,\n  useV2,\n}) => {\n  const inputEl = useRef(null);\n  useEffect(() => {\n    if (useV2 && autoFocus && inputEl.current) {\n      // @ts-expect-error TS(2339): Property 'focus' does not exist on type 'never'.\n      inputEl.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const input = useV2 ? (\n    <RecipientsInputV2\n      ref={inputEl}\n      // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n      value={toNumber}\n      // @ts-expect-error TS(2322): Type '((...args: any[]) => any) | undefined' is no... Remove this comment to see the full error message\n      onInputChange={onToNumberChange}\n      onInputClear={clearToNumber}\n      recipients={recipients}\n      addToRecipients={setRecipient}\n      removeFromRecipients={clearRecipient}\n      searchContactList={searchContactList}\n      // @ts-expect-error TS(2322): Type '((...args: any[]) => any) | undefined' is no... Remove this comment to see the full error message\n      formatContactPhone={formatPhone}\n      currentLocale={currentLocale}\n      phoneTypeRenderer={phoneTypeRenderer}\n      phoneSourceNameRenderer={phoneSourceNameRenderer}\n      contactInfoRenderer={recipientsContactInfoRenderer}\n      contactPhoneRenderer={recipientsContactPhoneRenderer}\n      isLastInputFromDialpad={isLastInputFromDialpad}\n      enableTitle\n      // @ts-expect-error TS(2322): Type 'string | null' is not assignable to type 'st... Remove this comment to see the full error message\n      className={\n        !showFromField\n          ? classnames(styles.inputField, styles.recipientsField)\n          : null\n      }\n    />\n  ) : (\n    <RecipientsInput\n      inputRef={(element) => {\n        inputEl.current = element;\n      }}\n      value={toNumber}\n      onChange={onToNumberChange}\n      onClean={clearToNumber}\n      recipient={recipient}\n      addToRecipients={setRecipient}\n      removeFromRecipients={clearRecipient}\n      searchContact={searchContact}\n      searchContactList={searchContactList}\n      formatContactPhone={formatPhone}\n      currentLocale={currentLocale}\n      phoneTypeRenderer={phoneTypeRenderer}\n      phoneSourceNameRenderer={phoneSourceNameRenderer}\n      contactInfoRenderer={recipientsContactInfoRenderer}\n      contactPhoneRenderer={recipientsContactPhoneRenderer}\n      isLastInputFromDialpad={isLastInputFromDialpad}\n      titleEnabled\n      autoFocus={autoFocus}\n      // @ts-expect-error TS(2322): Type 'string | null' is not assignable to type 'st... Remove this comment to see the full error message\n      className={\n        !showFromField\n          ? classnames(styles.inputField, styles.recipientsField)\n          : null\n      }\n    />\n  );\n  return (\n    <div className={classnames(styles.root, className)}>\n      {input}\n      {showFromField ? (\n        <div className={styles.inputField}>\n          <FromField\n            // @ts-expect-error TS(2322): Type 'boolean | undefined' is not assignable to ty... Remove this comment to see the full error message\n            showAnonymous={showAnonymous}\n            // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n            fromNumber={fromNumber}\n            // @ts-expect-error TS(2322): Type '{ phoneNumber?: string | undefined; usageTyp... Remove this comment to see the full error message\n            fromNumbers={fromNumbers}\n            // @ts-expect-error TS(2322): Type '((...args: any[]) => any) | undefined' is no... Remove this comment to see the full error message\n            onChange={changeFromNumber}\n            // @ts-expect-error TS(2322): Type '((...args: any[]) => any) | undefined' is no... Remove this comment to see the full error message\n            formatPhone={formatPhone}\n            currentLocale={currentLocale}\n            hidden={!isWebphoneMode}\n            disabled={disableFromField}\n          />\n        </div>\n      ) : null}\n      <div className={classnames(styles.dialButtons, dialButtonsClassName)}>\n        <DialPad\n          className={styles.dialPad}\n          onButtonOutput={(key) => {\n            // @ts-expect-error TS(2722): Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message\n            onToNumberChange(toNumber + key, true);\n            if (inputEl.current) {\n              // @ts-expect-error TS(2339): Property 'focus' does not exist on type 'never'.\n              inputEl.current.focus();\n            }\n          }}\n          dialButtonVolume={dialButtonVolume}\n          dialButtonMuted={dialButtonMuted}\n        />\n        <div\n          className={classnames(\n            styles.callBtnRow,\n            withTabs && styles.callBtnRowWithTabs,\n            inConference && styles.callBtnRowInConference,\n          )}\n        >\n          <div className={styles.callBtn}>\n            <CircleButton\n              dataSign=\"callButton\"\n              className={classnames(\n                styles.dialBtn,\n                callButtonDisabled && styles.disabled,\n              )}\n              onClick={() => onCallButtonClick({ clickDialerToCall: true })}\n              disabled={callButtonDisabled}\n              icon={AnswerIcon}\n              showBorder={false}\n            />\n          </div>\n        </div>\n      </div>\n      {showSpinner ? <SpinnerOverlay /> : null}\n      {children}\n    </div>\n  );\n};\n\nconst Empty: FunctionComponent = () => null;\n\nDialerPanel.defaultProps = {\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  className: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  dialButtonsClassName: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  fromNumber: null,\n  callButtonDisabled: false,\n  toNumber: '',\n  fromNumbers: [],\n  isWebphoneMode: false,\n  changeFromNumber: Empty,\n  onToNumberChange: Empty,\n  formatPhone: (phoneNumber) => phoneNumber,\n  showSpinner: false,\n  dialButtonVolume: 1,\n  dialButtonMuted: false,\n  recipients: [],\n  autoFocus: false,\n  showFromField: true,\n  disableFromField: false,\n  withTabs: false,\n  inConference: false,\n  isLastInputFromDialpad: false,\n  useV2: false,\n  showAnonymous: true,\n};\nexport default DialerPanel;\n"],"mappings":"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"}