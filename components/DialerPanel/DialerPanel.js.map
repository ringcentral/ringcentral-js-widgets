{"version":3,"file":"DialerPanel.js","names":["_clsx","_interopRequireDefault","require","_react","_interopRequireWildcard","_Answer","_CircleButton","_DialPad","_FromField","_RecipientsInput","_RecipientsInputV","_SpinnerOverlay","_styles","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","DialerPanel","_ref","currentLocale","callButtonDisabled","className","dialButtonsClassName","onToNumberChange","onCallButtonClick","toNumber","fromNumber","fromNumbers","changeFromNumber","formatPhone","isWebphoneMode","showSpinner","callVolume","searchContact","searchContactList","recipients","recipient","clearToNumber","setRecipient","clearRecipient","phoneTypeRenderer","phoneSourceNameRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","autoFocus","_ref$showFromField","showFromField","_ref$disableFromField","disableFromField","children","withTabs","inConference","isLastInputFromDialpad","showAnonymous","useV2","inputEl","useRef","useEffect","current","focus","input","createElement","RecipientsInputV2","ref","value","onInputChange","onInputClear","addToRecipients","removeFromRecipients","formatContactPhone","contactInfoRenderer","contactPhoneRenderer","enableTitle","clsx","styles","inputField","recipientsField","inputRef","element","onChange","onClean","titleEnabled","root","hidden","disabled","dialButtons","dialPad","onButtonOutput","key","dialButtonVolume","callBtnRow","callBtnRowWithTabs","callBtnRowInConference","callBtn","dataSign","dialBtn","onClick","clickDialerToCall","icon","AnswerIcon","showBorder","SpinnerOverlay","Empty","defaultProps","phoneNumber","_default","exports"],"sources":["components/DialerPanel/DialerPanel.tsx"],"sourcesContent":["import type { ToNumber as Recipient } from '@ringcentral-integration/commons/modules/ComposeText';\nimport clsx from 'clsx';\nimport type { FunctionComponent } from 'react';\nimport React, { useEffect, useRef } from 'react';\n\nimport AnswerIcon from '../../assets/images/Answer.svg';\nimport CircleButton from '../CircleButton';\nimport DialPad from '../DialPad';\nimport FromField from '../FromField';\nimport RecipientsInput from '../RecipientsInput';\nimport { RecipientsInputV2 } from '../RecipientsInputV2';\nimport { SpinnerOverlay } from '../SpinnerOverlay';\n\nimport styles from './styles.scss';\n\nexport interface DialerPanelProps {\n  currentLocale: string;\n  className?: string;\n  dialButtonsClassName?: string;\n  onCallButtonClick: (...args: any[]) => any;\n  callButtonDisabled?: boolean;\n  isWebphoneMode?: boolean;\n  toNumber?: string;\n  onToNumberChange?: (...args: any[]) => any;\n  fromNumber?: string;\n  fromNumbers?: {\n    phoneNumber?: string;\n    usageType?: string;\n  }[];\n  changeFromNumber?: (...args: any[]) => any;\n  formatPhone?: (...args: any[]) => any;\n  showSpinner?: boolean;\n  callVolume?: number;\n  searchContact: (...args: any[]) => any;\n  searchContactList: {\n    name: string;\n    entityType: string;\n    phoneType: string;\n    phoneNumber: string;\n  }[];\n  recipient?: Recipient;\n  recipients: Recipient[];\n  clearToNumber: (...args: any[]) => any;\n  setRecipient: (...args: any[]) => any;\n  clearRecipient: (...args: any[]) => any;\n  phoneTypeRenderer?: (...args: any[]) => any;\n  phoneSourceNameRenderer?: (...args: any[]) => any;\n  recipientsContactInfoRenderer?: (...args: any[]) => any;\n  recipientsContactPhoneRenderer?: (...args: any[]) => any;\n  autoFocus?: boolean;\n  showFromField?: boolean;\n  disableFromField?: boolean;\n  withTabs?: boolean;\n  inConference?: boolean;\n  isLastInputFromDialpad?: boolean;\n  useV2?: boolean;\n  showAnonymous?: boolean;\n}\nconst DialerPanel: FunctionComponent<DialerPanelProps> = ({\n  currentLocale,\n  callButtonDisabled,\n  className,\n  dialButtonsClassName,\n  onToNumberChange,\n  onCallButtonClick,\n  toNumber,\n  fromNumber,\n  fromNumbers,\n  changeFromNumber,\n  formatPhone,\n  isWebphoneMode,\n  showSpinner,\n  // use to set dial button volume(dialButtonVolume)\n  callVolume,\n  searchContact,\n  searchContactList,\n  recipients,\n  recipient,\n  clearToNumber,\n  setRecipient,\n  clearRecipient,\n  phoneTypeRenderer,\n  phoneSourceNameRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n  autoFocus,\n  showFromField = true,\n  disableFromField = false,\n  children,\n  withTabs,\n  inConference,\n  isLastInputFromDialpad,\n  showAnonymous,\n  useV2,\n}) => {\n  const inputEl = useRef(null);\n  useEffect(() => {\n    if (useV2 && autoFocus && inputEl.current) {\n      // @ts-expect-error TS(2339): Property 'focus' does not exist on type 'never'.\n      inputEl.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const input = useV2 ? (\n    <RecipientsInputV2\n      ref={inputEl}\n      // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n      value={toNumber}\n      // @ts-expect-error TS(2322): Type '((...args: any[]) => any) | undefined' is no... Remove this comment to see the full error message\n      onInputChange={onToNumberChange}\n      onInputClear={clearToNumber}\n      recipients={recipients}\n      addToRecipients={setRecipient}\n      removeFromRecipients={clearRecipient}\n      searchContactList={searchContactList}\n      // @ts-expect-error TS(2322): Type '((...args: any[]) => any) | undefined' is no... Remove this comment to see the full error message\n      formatContactPhone={formatPhone}\n      currentLocale={currentLocale}\n      phoneTypeRenderer={phoneTypeRenderer}\n      phoneSourceNameRenderer={phoneSourceNameRenderer}\n      contactInfoRenderer={recipientsContactInfoRenderer}\n      contactPhoneRenderer={recipientsContactPhoneRenderer}\n      isLastInputFromDialpad={isLastInputFromDialpad}\n      enableTitle\n      // @ts-expect-error TS(2322): Type 'string | null' is not assignable to type 'st... Remove this comment to see the full error message\n      className={\n        !showFromField ? clsx(styles.inputField, styles.recipientsField) : null\n      }\n    />\n  ) : (\n    <RecipientsInput\n      inputRef={(element) => {\n        inputEl.current = element;\n      }}\n      value={toNumber}\n      onChange={onToNumberChange}\n      onClean={clearToNumber}\n      recipient={recipient}\n      addToRecipients={setRecipient}\n      removeFromRecipients={clearRecipient}\n      searchContact={searchContact}\n      searchContactList={searchContactList}\n      formatContactPhone={formatPhone}\n      currentLocale={currentLocale}\n      phoneTypeRenderer={phoneTypeRenderer}\n      phoneSourceNameRenderer={phoneSourceNameRenderer}\n      contactInfoRenderer={recipientsContactInfoRenderer}\n      contactPhoneRenderer={recipientsContactPhoneRenderer}\n      isLastInputFromDialpad={isLastInputFromDialpad}\n      titleEnabled\n      autoFocus={autoFocus}\n      // @ts-expect-error TS(2322): Type 'string | null' is not assignable to type 'st... Remove this comment to see the full error message\n      className={\n        !showFromField ? clsx(styles.inputField, styles.recipientsField) : null\n      }\n    />\n  );\n  return (\n    <div className={clsx(styles.root, className)}>\n      {input}\n      {showFromField ? (\n        <div className={styles.inputField}>\n          <FromField\n            // @ts-expect-error TS(2322): Type 'boolean | undefined' is not assignable to ty... Remove this comment to see the full error message\n            showAnonymous={showAnonymous}\n            // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n            fromNumber={fromNumber}\n            // @ts-expect-error TS(2322): Type '{ phoneNumber?: string | undefined; usageTyp... Remove this comment to see the full error message\n            fromNumbers={fromNumbers}\n            // @ts-expect-error TS(2322): Type '((...args: any[]) => any) | undefined' is no... Remove this comment to see the full error message\n            onChange={changeFromNumber}\n            // @ts-expect-error TS(2322): Type '((...args: any[]) => any) | undefined' is no... Remove this comment to see the full error message\n            formatPhone={formatPhone}\n            currentLocale={currentLocale}\n            hidden={!isWebphoneMode}\n            disabled={disableFromField}\n          />\n        </div>\n      ) : null}\n      <div className={clsx(styles.dialButtons, dialButtonsClassName)}>\n        <DialPad\n          className={styles.dialPad}\n          onButtonOutput={(key) => {\n            // @ts-expect-error TS(2722): Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message\n            onToNumberChange(toNumber + key, true);\n            if (inputEl.current) {\n              // @ts-expect-error TS(2339): Property 'focus' does not exist on type 'never'.\n              inputEl.current.focus();\n            }\n          }}\n          dialButtonVolume={callVolume}\n        />\n        <div\n          className={clsx(\n            styles.callBtnRow,\n            withTabs && styles.callBtnRowWithTabs,\n            inConference && styles.callBtnRowInConference,\n          )}\n        >\n          <div className={styles.callBtn}>\n            <CircleButton\n              dataSign=\"callButton\"\n              className={clsx(\n                styles.dialBtn,\n                callButtonDisabled && styles.disabled,\n              )}\n              onClick={() => onCallButtonClick({ clickDialerToCall: true })}\n              disabled={callButtonDisabled}\n              icon={AnswerIcon}\n              showBorder={false}\n            />\n          </div>\n        </div>\n      </div>\n      {showSpinner ? <SpinnerOverlay /> : null}\n      {children}\n    </div>\n  );\n};\n\nconst Empty: FunctionComponent = () => null;\n\nDialerPanel.defaultProps = {\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  className: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  dialButtonsClassName: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  fromNumber: null,\n  callButtonDisabled: false,\n  toNumber: '',\n  fromNumbers: [],\n  isWebphoneMode: false,\n  changeFromNumber: Empty,\n  onToNumberChange: Empty,\n  formatPhone: (phoneNumber) => phoneNumber,\n  showSpinner: false,\n  callVolume: 1,\n  recipients: [],\n  autoFocus: false,\n  showFromField: true,\n  disableFromField: false,\n  withTabs: false,\n  inConference: false,\n  isLastInputFromDialpad: false,\n  useV2: false,\n  showAnonymous: true,\n};\nexport default DialerPanel;\n"],"mappings":"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","ignoreList":[]}