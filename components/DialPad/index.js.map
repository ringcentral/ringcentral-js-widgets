{"version":3,"sources":["components/DialPad/index.tsx"],"names":["keyConfig","value","text","dx","alternativeValue","DialPad","className","hideSpecial","onButtonPress","onButtonOutput","alternativeTimeout","dialButtonVolume","dialButtonMuted","dataSign","styles","root","map","row","rowIdx","btn","btnPlaceholder","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport classnames from 'classnames';\n\nimport DialButton from '../DialButton';\nimport styles from './styles.scss';\n\nconst keyConfig = [\n  [\n    { value: '1', text: '' },\n    { value: '2', text: 'ABC', dx: '175' },\n    { value: '3', text: 'DEF', dx: '180' },\n  ],\n  [\n    { value: '4', text: 'GHI', dx: '175' },\n    { value: '5', text: 'JKL', dx: '180' },\n    { value: '6', text: 'MNO', dx: '155' },\n  ],\n  [\n    { value: '7', text: 'PQRS', dx: '140' },\n    { value: '8', text: 'TUV', dx: '175' },\n    { value: '9', text: 'WXYZ', dx: '140' },\n  ],\n  [\n    { value: '*', text: '' },\n    {\n      value: '0',\n      text: '+',\n      alternativeValue: '+',\n      dx: '220',\n    },\n    { value: '#', text: '' },\n  ],\n];\ntype DialPadProps = {\n  className?: string;\n  hideSpecial?: boolean;\n  onButtonPress?: (...args: any[]) => any;\n  onButtonOutput?: (...args: any[]) => any;\n  alternativeTimeout?: number;\n  dialButtonVolume?: number;\n  dialButtonMuted?: boolean;\n  dataSign?: string;\n};\nconst DialPad: React.SFC<DialPadProps> = ({\n  className,\n  hideSpecial,\n  onButtonPress,\n  onButtonOutput,\n  alternativeTimeout,\n  dialButtonVolume,\n  dialButtonMuted,\n  dataSign,\n}) => {\n  dataSign = typeof dataSign !== 'undefined' ? dataSign : '';\n  return (\n    <div\n      data-sign={`${dataSign}DialPad`}\n      className={classnames(styles.root, className)}\n    >\n      {keyConfig.map((row, rowIdx) => (\n        <div key={rowIdx} className={styles.row}>\n          {row.map((btn) => {\n            if (hideSpecial && (btn.value === '*' || btn.value === '#')) {\n              return <div key={btn.value} className={styles.btnPlaceholder} />;\n            }\n            return (\n              <DialButton\n                key={btn.value}\n                btn={btn}\n                className={styles.btnPlaceholder}\n                onPress={onButtonPress}\n                onOutput={onButtonOutput}\n                alternativeTimeout={alternativeTimeout}\n                volume={dialButtonVolume}\n                muted={dialButtonMuted}\n              />\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n};\nDialPad.defaultProps = {\n  className: undefined,\n  hideSpecial: false,\n  onButtonPress: undefined,\n  onButtonOutput: undefined,\n  alternativeTimeout: undefined,\n  dialButtonVolume: 1,\n  dialButtonMuted: false,\n  dataSign: undefined,\n};\nexport default DialPad;\n"],"file":"index.js"}