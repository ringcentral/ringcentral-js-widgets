{"version":3,"file":"helper.js","names":["isSplitterKey","e","key","keyCode","exports","invalidCharsRegExp","numberRegExp","validateValidChars","input","chars","trim","length","test"],"sources":["components/CommunicationSetupPanel/helper.ts"],"sourcesContent":["export const isSplitterKey = (e: React.KeyboardEvent): boolean =>\n  e.key === ',' ||\n  e.key === ';' ||\n  (e.key === 'Unidentified' && // for Safari (FF cannot rely on keyCode...)\n    (e.keyCode === 186 || // semicolon\n      e.keyCode === 188)); // comma\n\nconst invalidCharsRegExp = /[^\\d*+#\\-(). ]/;\nconst numberRegExp = /\\d/;\nexport const validateValidChars = (input: string): boolean => {\n  const chars = input.trim();\n  return (\n    chars.length > 0 &&\n    !invalidCharsRegExp.test(chars) &&\n    numberRegExp.test(chars)\n  );\n};\n"],"mappings":";;;;;;;AAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,CAAsB;EAAA,OAClDA,CAAC,CAACC,GAAG,KAAK,GAAG,IACbD,CAAC,CAACC,GAAG,KAAK,GAAG,IACZD,CAAC,CAACC,GAAG,KAAK,cAAc;EAAI;EAC1BD,CAAC,CAACE,OAAO,KAAK,GAAG;EAAI;EACpBF,CAAC,CAACE,OAAO,KAAK,GAAG,CAAE;AAAA,EAAC,CAAC;AAAAC,OAAA,CAAAJ,aAAA,GAAAA,aAAA;AAE3B,IAAMK,kBAAkB,GAAG,gBAAgB;AAC3C,IAAMC,YAAY,GAAG,IAAI;AAClB,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,KAAa,EAAc;EAC5D,IAAMC,KAAK,GAAGD,KAAK,CAACE,IAAI,CAAC,CAAC;EAC1B,OACED,KAAK,CAACE,MAAM,GAAG,CAAC,IAChB,CAACN,kBAAkB,CAACO,IAAI,CAACH,KAAK,CAAC,IAC/BH,YAAY,CAACM,IAAI,CAACH,KAAK,CAAC;AAE5B,CAAC;AAACL,OAAA,CAAAG,kBAAA,GAAAA,kBAAA"}