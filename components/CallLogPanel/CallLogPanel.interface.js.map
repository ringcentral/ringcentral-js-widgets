{"version":3,"file":"CallLogPanel.interface.js","names":[],"sources":["components/CallLogPanel/CallLogPanel.interface.ts"],"sourcesContent":["import type { IContact } from '@ringcentral-integration/commons/interfaces/Contact.model';\nimport type { DateTimeFormatter } from '@ringcentral-integration/commons/lib/getIntlDateTimeFormatter';\nimport type { RcIconProps } from '@ringcentral/juno';\nimport type { MutableRefObject } from 'react';\n\nimport type { Call, CallLog, CallLogTitle } from './CallLog.interface';\n\ninterface CallLogPanelConfig {\n  showSpinner: boolean;\n  isInTransferPage: boolean;\n\n  enableReply?: boolean;\n  isWide?: boolean;\n  header?: boolean;\n  headerTitle?: CallLogTitle;\n  showSmallCallControl?: boolean;\n  disableLinks?: boolean;\n  useNewNotification?: boolean;\n  showNotiLogButton?: boolean;\n}\n\ntype CallLogPanelGroup<T> = {\n  root?: T;\n  callLogCallControl?: T;\n  backHeader?: T;\n  logBasicInfo?: T;\n  editSection?: T;\n};\n\nexport interface CallLogPanelProps extends CallLogPanelConfig {\n  rootLayout?: boolean;\n  currentLog: CallLog;\n  currentDelaySavingState?: any;\n  warmTransferLog?: CallLog;\n  warmTransferActiveTelephonySessionId: string;\n  currentLocale: string;\n  goBack: (...args: any[]) => any;\n  formatPhone: (...args: any[]) => any;\n  onReject: (...args: any[]) => any;\n  onHangup: (...args: any[]) => any;\n  onSwitchWarmTransferSession: () => any;\n  renderKeypadPanel: (...args: any[]) => any;\n  renderSaveLogButton: (...args: any[]) => JSX.Element;\n  getRenderLogButton?: () => JSX.Element;\n  buttonStatus: { buttonDisabled: boolean; buttonContent: string };\n\n  additionalInfo?: object;\n  onUpdateCallLog?: (data: { task: any }, id: string) => any;\n  onSaveCallLog?: (...args: any[]) => any;\n  openEntityDetailLinkTrack?: (...args: any[]) => any;\n  onSelectViewVisible?: (visible: boolean, fieldName: string) => any;\n\n  dateTimeFormatter?: DateTimeFormatter;\n  renderBasicInfo?: ({\n    formatPhone,\n    dateTimeFormatter,\n    currentLog,\n  }: Pick<\n    CallLogPanelProps,\n    'formatPhone' | 'dateTimeFormatter' | 'currentLog'\n  >) => JSX.Element;\n\n  renderEditLogSection?: (\n    props: Pick<\n      CallLogPanelProps,\n      | 'currentLocale'\n      | 'onSaveCallLog'\n      | 'onUpdateCallLog'\n      | 'onSelectViewVisible'\n      | 'currentLog'\n      | 'additionalInfo'\n      | 'subjectDropdownsTracker'\n      | 'contactSearch'\n      | 'showFoundFromServer'\n      | 'appName'\n      | 'isSearching'\n      | 'startAdornmentRender'\n      | 'isWide'\n      | 'objectTypeIconsMap'\n      | 'currentDelaySavingState'\n    > & {\n      editSectionScrollBy?: (top: number) => void;\n    },\n  ) => JSX.Element;\n\n  renderCallLogCallControl?: (\n    telephonySessionId: string,\n    isWide: boolean,\n    enableReply: boolean,\n    isCurrentDeviceCall: boolean,\n    warmTransferActiveTelephonySessionId: string,\n  ) => JSX.Element;\n\n  backIcon?: RcIconProps['symbol'];\n  currentIdentify?: string;\n  subjectDropdownsTracker?: (...args: any[]) => any;\n  classes?: CallLogPanelGroup<string>;\n  refs?: CallLogPanelGroup<MutableRefObject<any>>;\n  logNotification?: LogNotification;\n  onCloseNotification?: (...args: any[]) => any;\n  onDiscardNotification?: (...args: any[]) => any;\n  onSaveNotification?: (...args: any[]) => any;\n  onExpandNotification?: (...args: any[]) => any;\n  currentNotificationIdentify?: string;\n  currentSession?: object;\n  activeSession?: boolean | object;\n  pushLogPageStatus?: (...args: any[]) => any;\n  shrinkNotification?: (...args: any[]) => any;\n  contactSearch?: ({\n    searchString,\n  }: {\n    searchString: string;\n  }) => Promise<Array<any>> | Promise<void>;\n  showFoundFromServer: boolean;\n  appName?: string;\n  isSearching?: boolean;\n  startAdornmentRender?: (...args: any[]) => any;\n  objectTypeIconsMap?: {\n    [type: string]: {\n      icon: string;\n      color: string;\n    };\n  };\n  isWebRTC: boolean;\n  onIgnore: (telephonySession: string) => any;\n  endAndAnswer: (telephonySession: string) => any;\n  holdAndAnswer: (telephonySession: string) => any;\n  toVoicemail: (telephonySession: string) => any;\n  forwardingNumbers: any[];\n  onForward: (phoneNumber: string, telephonySession: string) => any;\n  reply: (telephonySessionId: string) => any;\n  answer: (telephonySession: string) => any;\n  showRecordingIndicator?: boolean;\n  clickForwardTrack?: () => any;\n  clickParticipantsIconTrack?: () => void;\n  clickRemoveParticipantTrack?: () => void;\n  renderCallNotificationAvatar?: (\n    contact: IContact,\n    entityType: string,\n  ) => JSX.Element;\n  renderConferenceParticipantsAvatar?: (item: {\n    displayEntity?: IContact;\n    entityType?: string;\n    name?: string;\n  }) => JSX.Element;\n  getAvatarUrl?: (contact: IContact) => Promise<string>;\n  getConferenceCallParticipantName: (\n    sessionId: string,\n    isHost?: boolean,\n  ) => {\n    logName?: string;\n    entityDetailLink?: string;\n  };\n  onRemoveParticipant: (\n    telephonySessionId: string,\n    removedPartyId: string,\n  ) => Promise<void>;\n}\n\nexport interface LogNotification {\n  showNotification: boolean;\n  notificationIsExpand: boolean;\n  call: Call;\n  logName: string;\n  subContactNameDisplay: string;\n  displayEntity: any;\n  entityType: string;\n  entityDetailLink: string;\n  showLogOptions?: boolean;\n}\n"],"mappings":"","ignoreList":[]}