{"version":3,"sources":["components/ActiveCallPanel/MergeInfo.tsx"],"names":["MergeInfo","props","state","lastCallAvatar","lastCallInfoTimeout","mounted","timeout_clock","clearTimeout","lastCallInfo","getAvatarUrl","avatarUrl","lastCallContact","then","setState","calleeType","calleeTypes","conference","isSimplifiedCallAndLastCallInfoNotReady","name","phoneNumber","setTimeout","checkLastCallInfoTimeout","currentLocale","timeCounter","currentCallTitle","currentCallAvatarUrl","formatPhone","styles","userInfo","isLastCallInfoReady","isLastCallEnded","status","sessionStatus","finished","statusClasses","callee_status","callee_status_disconnected","isOnConferenceCall","isContacts","contacts","calleeName","loadingText","i18n","getString","loadingTimeoutText","showSpinner","mergeInfo","merge_item","callee_avatar","extraNum","callee_name","last_call_info_load_timeout","merge_item_active","callee_avatar_active","callee_name_active","callee_status_active","Component","defaultProps","unknown","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport classnames from 'classnames';\n\nimport calleeTypes from '@ringcentral-integration/commons/enums/calleeTypes';\nimport sessionStatus from '@ringcentral-integration/commons/modules/Webphone/sessionStatus';\n\nimport CallAvatar from '../CallAvatar';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\ntype MergeInfoProps = {\n  currentLocale: string;\n  timeCounter: JSX.Element;\n  lastCallInfo?: object;\n  currentCallTitle?: string;\n  currentCallAvatarUrl?: string;\n  formatPhone?: (...args: any[]) => any;\n  getAvatarUrl?: (...args: any[]) => any;\n  checkLastCallInfoTimeout?: number;\n};\ntype MergeInfoState = {\n  lastCallAvatar: any | null;\n  lastCallInfoTimeout: boolean;\n};\nclass MergeInfo extends Component<MergeInfoProps, MergeInfoState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lastCallAvatar: null,\n      lastCallInfoTimeout: false,\n    };\n    this.mounted = false;\n  }\n  componentWillUnmount() {\n    this.mounted = false;\n    if (this.timeout_clock) {\n      clearTimeout(this.timeout_clock);\n    }\n  }\n  componentDidMount() {\n    this.mounted = true;\n    const { lastCallInfo, getAvatarUrl } = this.props;\n    if (\n      lastCallInfo &&\n      !lastCallInfo.avatarUrl &&\n      lastCallInfo.lastCallContact\n    ) {\n      getAvatarUrl(lastCallInfo.lastCallContact).then((lastCallAvatar) => {\n        if (this.mounted) {\n          this.setState({\n            lastCallAvatar,\n          });\n        }\n      });\n    }\n    if (lastCallInfo && lastCallInfo.calleeType !== calleeTypes.conference) {\n      const isSimplifiedCallAndLastCallInfoNotReady =\n        !lastCallInfo.name || !lastCallInfo.phoneNumber;\n      if (isSimplifiedCallAndLastCallInfoNotReady) {\n        this.timeout_clock = setTimeout(() => {\n          if (this.mounted) {\n            this.setState({\n              lastCallInfoTimeout: true,\n            });\n          }\n        }, this.props.checkLastCallInfoTimeout);\n      } else if (this.timeout_clock) {\n        clearTimeout(this.timeout_clock);\n      }\n    }\n  }\n  render() {\n    const {\n      currentLocale,\n      timeCounter,\n      lastCallInfo,\n      currentCallTitle,\n      currentCallAvatarUrl,\n      formatPhone,\n    } = this.props;\n    if (!lastCallInfo) {\n      return <div className={styles.userInfo} />;\n    }\n    const { lastCallAvatar, lastCallInfoTimeout } = this.state;\n    const isLastCallInfoReady =\n      !!lastCallInfo && (!!lastCallInfo.name || !!lastCallInfo.phoneNumber);\n    const isLastCallEnded =\n      lastCallInfo && lastCallInfo.status === sessionStatus.finished;\n    const statusClasses = classnames({\n      [styles.callee_status]: true,\n      [styles.callee_status_disconnected]: !!isLastCallEnded,\n    });\n    const isOnConferenceCall = !!(\n      lastCallInfo && lastCallInfo.calleeType === calleeTypes.conference\n    );\n    const isContacts = !!(\n      lastCallInfo && lastCallInfo.calleeType === calleeTypes.contacts\n    );\n    const calleeName = isContacts\n      ? lastCallInfo.name\n      : formatPhone(lastCallInfo.phoneNumber);\n    const loadingText = i18n.getString('loading');\n    const loadingTimeoutText = i18n.getString('loadingTimeout');\n    const showSpinner =\n      !lastCallInfoTimeout && !isLastCallInfoReady && !isOnConferenceCall;\n    return (\n      <div className={styles.mergeInfo}>\n        <div className={styles.merge_item}>\n          <div className={styles.callee_avatar}>\n            <CallAvatar\n              avatarUrl={\n                isContacts && !lastCallInfo.avatarUrl\n                  ? lastCallAvatar\n                  : lastCallInfo.avatarUrl\n              }\n              extraNum={isOnConferenceCall ? lastCallInfo.extraNum : 0}\n              isOnConferenceCall={isOnConferenceCall}\n              spinnerMode={showSpinner}\n            />\n          </div>\n          {(isLastCallInfoReady ||\n            (!isLastCallInfoReady && isOnConferenceCall)) && (\n            <div className={styles.callee_name}>\n              {isOnConferenceCall ? (\n                <span title={i18n.getString('conferenceCall', currentLocale)}>\n                  {i18n.getString('conferenceCall', currentLocale)}\n                </span>\n              ) : (\n                <span title={calleeName}>{calleeName}</span>\n              )}\n            </div>\n          )}\n          {!isLastCallInfoReady &&\n            !isOnConferenceCall &&\n            (lastCallInfoTimeout ? (\n              <div className={styles.last_call_info_load_timeout}>\n                <span title={loadingTimeoutText}>{loadingTimeoutText}</span>\n              </div>\n            ) : (\n              <div className={styles.callee_name}>\n                <span title={loadingText}>{loadingText}</span>\n              </div>\n            ))}\n\n          {(isLastCallInfoReady ||\n            (!isLastCallInfoReady && isOnConferenceCall)) && (\n            <div className={statusClasses}>\n              {lastCallInfo.status === sessionStatus.finished\n                ? i18n.getString('disconnected', currentLocale)\n                : i18n.getString('onHold', currentLocale)}\n            </div>\n          )}\n        </div>\n        <div className={styles.merge_item_active}>\n          <div className={styles.callee_avatar_active}>\n            {currentCallAvatarUrl ? (\n              <CallAvatar avatarUrl={currentCallAvatarUrl} />\n            ) : (\n              <CallAvatar avatarUrl={null} />\n            )}\n          </div>\n          <div\n            className={styles.callee_name_active}\n            data-sign=\"activeCalleeName\"\n          >\n            <span title={currentCallTitle}>{currentCallTitle}</span>\n          </div>\n          <div className={styles.callee_status_active}>{timeCounter}</div>\n        </div>\n      </div>\n    );\n  }\n}\nMergeInfo.defaultProps = {\n  lastCallInfo: { calleeType: calleeTypes.unknown },\n  currentCallTitle: undefined,\n  currentCallAvatarUrl: undefined,\n  formatPhone: () => null,\n  getAvatarUrl: () => null,\n  /**\n   * The timeout seconds to check if the last call info is received.\n   */\n  checkLastCallInfoTimeout: 30 * 1000,\n};\nexport default MergeInfo;\n"],"file":"MergeInfo.js"}