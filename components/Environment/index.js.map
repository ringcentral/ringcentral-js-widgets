{"version":3,"sources":["components/Environment/index.tsx"],"names":["Environment","props","state","hidden","defaultHidden","serverValue","server","recordingHostValue","recordingHost","enabledValue","enabled","onServerChange","e","setState","currentTarget","value","onRecordingHostChange","onToggleEnabled","onOk","onSetData","toggleEnv","onCancel","window","nextProps","hasChanges","styles","root","content","saveButton","disabled","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport classnames from 'classnames';\n\nimport BackHeader from '../BackHeader';\nimport { Button } from '../Button';\nimport IconLine from '../IconLine';\nimport Line from '../Line';\nimport Panel from '../Panel';\nimport Switch from '../Switch';\nimport TextInput from '../TextInput';\nimport styles from './styles.scss';\n\ntype EnvironmentProps = {\n  server: string;\n  recordingHost: string;\n  enabled: boolean;\n  onSetData: (...args: any[]) => any;\n  defaultHidden?: boolean;\n};\ntype EnvironmentState = {\n  serverValue: any;\n  recordingHostValue: any;\n  enabledValue: any;\n  hidden: any;\n};\n/**\n * Environment component for switching api server. Intended only for testing.\n * This component current does not comply to use redux properly.\n */\nclass Environment extends Component<EnvironmentProps, EnvironmentState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hidden: props.defaultHidden,\n      serverValue: props.server,\n      recordingHostValue: props.recordingHost,\n      enabledValue: props.enabled,\n    };\n    this.onServerChange = (e) => {\n      this.setState({\n        serverValue: e.currentTarget.value,\n      });\n    };\n    this.onRecordingHostChange = (e) => {\n      this.setState({\n        recordingHostValue: e.currentTarget.value,\n      });\n    };\n    this.onToggleEnabled = (e) => {\n      this.setState({\n        enabledValue: !this.state.enabledValue,\n      });\n    };\n    this.onOk = () => {\n      this.props.onSetData({\n        server: this.state.serverValue,\n        recordingHost: this.state.recordingHostValue,\n        enabled: this.state.enabledValue,\n      });\n      this.toggleEnv();\n    };\n    this.onCancel = () => {\n      this.setState({\n        serverValue: this.props.server,\n        recordingHostValue: this.props.recordingHost,\n        enabledValue: this.props.enabled,\n      });\n      this.toggleEnv();\n    };\n    this.toggleEnv = () => {\n      this.setState({\n        hidden: !this.state.hidden,\n      });\n    };\n    if (typeof window !== 'undefined') {\n      window.toggleEnv = this.toggleEnv;\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.server !== this.props.server) {\n      this.setState({\n        serverValue: nextProps.server,\n      });\n    }\n    if (nextProps.recordingHost !== this.props.recordingHost) {\n      this.setState({\n        recordingHostValue: nextProps.recordingHost,\n      });\n    }\n    if (nextProps.enabled !== this.props.enabled) {\n      this.setState({\n        enabledValue: nextProps.enabled,\n      });\n    }\n  }\n  render() {\n    if (this.state.hidden) {\n      return null;\n    }\n    const hasChanges = !(\n      this.state.serverValue === this.props.server &&\n      this.state.enabledValue === this.props.enabled &&\n      this.state.recordingHostValue === this.props.recordingHost\n    );\n    return (\n      <div className={styles.root}>\n        <BackHeader onBackClick={this.onCancel} buttons={[]}>\n          Environment\n        </BackHeader>\n        <Panel classname={styles.content}>\n          <Line>\n            Server\n            <TextInput\n              dataSign=\"envServerUrl\"\n              value={this.state.serverValue}\n              onChange={this.onServerChange}\n            />\n          </Line>\n          <Line>\n            Recording Host\n            <TextInput\n              dataSign=\"envRecordingHost\"\n              value={this.state.recordingHostValue}\n              onChange={this.onRecordingHostChange}\n            />\n          </Line>\n          <IconLine\n            icon={\n              <Switch\n                dataSign=\"envToggle\"\n                checked={this.state.enabledValue}\n                onChange={this.onToggleEnabled}\n              />\n            }\n          >\n            Enable\n          </IconLine>\n          <Line>\n            <Button\n              dataSign=\"envSave\"\n              className={classnames(\n                styles.saveButton,\n                !hasChanges ? styles.disabled : null,\n              )}\n              onClick={this.onOk}\n              disabled={!hasChanges}\n            >\n              Save\n            </Button>\n          </Line>\n        </Panel>\n      </div>\n    );\n  }\n}\nEnvironment.defaultProps = {\n  defaultHidden: true,\n};\nexport default Environment;\n"],"file":"index.js"}