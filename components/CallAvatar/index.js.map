{"version":3,"sources":["components/CallAvatar/index.tsx"],"names":["CallAvatar","props","state","avatarUrl","_mounted","setState","$img","document","createElement","src","onload","onerror","loadImg","nextProps","extraNum","isOnConferenceCall","spinnerMode","className","onClick","initialSize","margin","avatarCircleRadius","extraNumCircleRadius","extraNumCircleBorder","circleBorder","$snow","$blueLight","$blue","$dark","$transparency","defaultAvatarStyle","opacity","hash","uuid","v4","portraitChar","iconFont","textId","clipId","avatarStyle","stroke","strokeWidth","showingSpinner","aspectRatio","xmlns","svgCls","styles","callAvatar","autoPointerEvents","disabledPointerEvents","spinnerId","spinnerScaleSize","spinnerSize","spinnerTranslateTo","isOnConferenceCallWithExtraNum","spinnerTransform","fontSize","fill","fontWeight","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport classnames from 'classnames';\nimport * as uuid from 'uuid';\n\nimport { isBase64DataUrl } from '@ringcentral-integration/commons/lib/dataUrl';\n\nimport SpinnerIcon from '../../assets/images/Spinner.svg';\nimport styles from './styles.scss';\n\ntype CallAvatarProps = {\n  isOnConferenceCall?: boolean;\n  avatarUrl?: string;\n  extraNum?: number;\n  spinnerMode?: boolean;\n  className?: string;\n  onClick?: (...args: any[]) => any;\n};\ntype CallAvatarState = {\n  avatarUrl: any | null;\n};\nclass CallAvatar extends Component<CallAvatarProps, CallAvatarState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      avatarUrl: null,\n    };\n    this._mounted = false;\n  }\n  loadImg(props = this.props) {\n    const { avatarUrl } = props;\n    if (isBase64DataUrl(avatarUrl)) {\n      this.setState({\n        avatarUrl,\n      });\n      return;\n    }\n    // means we have to load it\n    if (!this._mounted) {\n      return;\n    }\n    if (avatarUrl) {\n      const $img = document.createElement('img');\n      $img.src = avatarUrl;\n      $img.onload = () => {\n        if (!this._mounted) {\n          return;\n        }\n        this.setState({\n          avatarUrl,\n        });\n      };\n      $img.onerror = () => {\n        if (!this._mounted) {\n          return;\n        }\n        this.setState({\n          avatarUrl: null,\n        });\n      };\n    }\n  }\n  UNSAFE_componentWillMount() {\n    this.loadImg();\n  }\n  componentDidMount() {\n    this._mounted = true;\n    if (!this.state.avatarUrl) {\n      this.loadImg();\n    }\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.avatarUrl !== this.props.avatarUrl) {\n      this.loadImg(nextProps);\n    }\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  render() {\n    const { extraNum, isOnConferenceCall, spinnerMode, className, onClick } =\n      this.props;\n    const { avatarUrl } = this.state;\n    const initialSize = 38;\n    const margin = 4;\n    const avatarCircleRadius = 15;\n    const extraNumCircleRadius = 8.5;\n    const extraNumCircleBorder = 1;\n    const circleBorder = 1;\n    const $snow = '#fff';\n    const $blueLight = '#cee7f2';\n    const $blue = '#066FAC';\n    const $dark = '#e2e2e2';\n    const $transparency = '0.8';\n    const defaultAvatarStyle = { opacity: +$transparency };\n    const hash = uuid.v4();\n    const portraitChar = '\\ue904'; // HACK: &#xe904; is the font code for the portrait icon\n    const iconFont = 'dynamics_icon'; // Hard coding this for firefox to load iconfont\n    const textId = `text-${hash}`;\n    const clipId = `circleClip-${hash}`;\n    const avatarStyle = { stroke: $dark, strokeWidth: `${circleBorder}px` };\n    const showingSpinner = spinnerMode;\n    const aspectRatio = 'xMidYMid meet';\n    const xmlns = 'http://www.w3.org/2000/svg';\n    const svgCls = classnames(\n      styles.callAvatar,\n      onClick ? styles.autoPointerEvents : styles.disabledPointerEvents,\n      className,\n    );\n    // spinner sizing\n    const spinnerId = `spinner-${hash}`;\n    const spinnerScaleSize = 1.5;\n    const spinnerSize = 12;\n    const spinnerTranslateTo =\n      (initialSize - spinnerSize * spinnerScaleSize) / 2;\n    const isOnConferenceCallWithExtraNum = isOnConferenceCall && extraNum > 0;\n    const spinnerTransform = `translate(${\n      spinnerTranslateTo - (isOnConferenceCallWithExtraNum ? margin : 0)\n    },${spinnerTranslateTo}) scale(${spinnerScaleSize}, ${spinnerScaleSize})`;\n    if (isOnConferenceCallWithExtraNum) {\n      return (\n        <svg\n          onClick={onClick ? () => onClick() : null}\n          className={svgCls}\n          style={avatarUrl ? avatarStyle : null}\n          viewBox={`0 0 ${initialSize} ${initialSize}`}\n          preserveAspectRatio={aspectRatio}\n          xmlns={xmlns}\n        >\n          <defs>\n            <g id={textId}>\n              <text\n                x=\"0\"\n                y=\"0\"\n                dy={`${initialSize - 10}px`}\n                style={{\n                  fontSize: `${avatarCircleRadius * 2}px`,\n                  fill: $blue,\n                  opacity: '.5',\n                }}\n                fontFamily={iconFont}\n              >\n                {portraitChar}\n              </text>\n            </g>\n            <SpinnerIcon id={spinnerId} />\n          </defs>\n          <circle\n            cx={avatarCircleRadius}\n            cy={margin + avatarCircleRadius}\n            r={avatarCircleRadius}\n            fill={$snow}\n            stroke={showingSpinner ? $dark : 'inherit'}\n            strokeOpacity={showingSpinner ? $transparency : '1'}\n          />\n          <g>\n            <clipPath id={clipId}>\n              <circle\n                cx={avatarCircleRadius}\n                cy={margin + avatarCircleRadius}\n                r={avatarCircleRadius}\n                fill={$snow}\n              />\n            </clipPath>\n          </g>\n          {showingSpinner && (\n            <g transform={spinnerTransform}>\n              <use xlinkHref={`#${spinnerId}`} />\n            </g>\n          )}\n          {avatarUrl && (\n            <image\n              clipPath={`url(#${clipId})`}\n              height=\"100%\"\n              width=\"100%\"\n              xlinkHref={avatarUrl}\n            />\n          )}\n          {!avatarUrl && !showingSpinner && (\n            <use\n              xlinkHref={`#${textId}`}\n              clipPath={`url(#${clipId})`}\n              style={defaultAvatarStyle}\n            />\n          )}\n          <circle\n            cx={initialSize - extraNumCircleRadius}\n            cy={extraNumCircleRadius}\n            r={extraNumCircleRadius}\n            fill={$snow}\n          />\n          <circle\n            cx={initialSize - extraNumCircleRadius}\n            cy={extraNumCircleRadius}\n            r={extraNumCircleRadius - extraNumCircleBorder}\n            fill={$blueLight}\n          />\n\n          <text\n            x={initialSize - extraNumCircleRadius}\n            y={extraNumCircleRadius}\n            dy=\"3px\"\n            textAnchor=\"middle\"\n            style={{\n              fontSize: '9px',\n              stroke: 'none',\n              fill: $blue,\n              fontWeight: 'bolder',\n              opacity: '.5',\n            }}\n          >\n            {`+${extraNum}`}\n          </text>\n        </svg>\n      );\n    }\n    return (\n      <svg\n        className={svgCls}\n        onClick={onClick ? () => onClick() : null}\n        style={avatarUrl ? avatarStyle : null}\n        viewBox={`0 0 ${initialSize} ${initialSize}`}\n        preserveAspectRatio={aspectRatio}\n        xmlns={xmlns}\n      >\n        <defs>\n          <g id={textId}>\n            <text\n              x=\"0\"\n              y=\"0\"\n              dy={`${initialSize - 10}px`}\n              dx=\"2\"\n              style={{\n                fontSize: `${(initialSize / 2 - 2) * 2}px`,\n                fill: $blue,\n                opacity: '.5',\n              }}\n              fontFamily={iconFont}\n            >\n              {portraitChar}\n            </text>\n          </g>\n          <SpinnerIcon id={spinnerId} />\n        </defs>\n        <circle\n          cx={initialSize / 2}\n          cy={initialSize / 2}\n          r={initialSize / 2 - circleBorder}\n          fill={$snow}\n          stroke={showingSpinner ? $dark : 'inherit'}\n          strokeOpacity={showingSpinner ? $transparency : '1'}\n        />\n        <g>\n          <clipPath id={clipId}>\n            <circle\n              cx={initialSize / 2}\n              cy={initialSize / 2}\n              r={initialSize / 2 - 1}\n            />\n          </clipPath>\n        </g>\n        {showingSpinner && (\n          <g transform={spinnerTransform}>\n            <use xlinkHref={`#${spinnerId}`} />\n          </g>\n        )}\n        {showingSpinner && (\n          <g transform={spinnerTransform}>\n            <use xlinkHref={`#${spinnerId}`} />\n          </g>\n        )}\n        {avatarUrl && (\n          <image\n            clipPath={`url(#${clipId})`}\n            height=\"100%\"\n            width=\"100%\"\n            xlinkHref={avatarUrl}\n            preserveAspectRatio=\"xMinYMin slice\"\n          />\n        )}\n        {!avatarUrl && !showingSpinner && (\n          <use\n            xlinkHref={`#${textId}`}\n            clipPath={`url(#${clipId})`}\n            style={defaultAvatarStyle}\n          />\n        )}\n      </svg>\n    );\n  }\n}\nCallAvatar.defaultProps = {\n  isOnConferenceCall: false,\n  avatarUrl: null,\n  extraNum: 0,\n  spinnerMode: false,\n  className: null,\n  onClick: null,\n};\nexport default CallAvatar;\n"],"file":"index.js"}