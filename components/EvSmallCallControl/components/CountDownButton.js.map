{"version":3,"sources":["components/EvSmallCallControl/components/CountDownButton.tsx"],"names":["CountDown","data","count","CountDownButton","currentLocale","onRestartTimer","onResumeRecord","size","className","dataSign","recordPauseCount","timeStamp","intervalTime","setIntervalTime","clearTimerSet","handleTime","time","Math","ceil","Date","now","intervalId","setInterval","clearInterval","i18n","getString","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAKO,IAAMA,SAA4C,GAAG,SAA/CA,SAA+C,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AACxE,MAAMC,KAAK,GAAGD,IAAI,GAAG,EAAP,GAAY,KAAZ,GAAoBA,IAAlC;AACA,sBACE,gCAAC,YAAD;AAAQ,IAAA,KAAK,EAAC,YAAd;AAA2B,IAAA,OAAO,EAAC,aAAnC;AAAiD,iBAAU;AAA3D,KACGC,KADH,CADF;AAKD,CAPM;;;;AAgBA,IAAMC,eAAwD,GAAG,SAA3DA,eAA2D,QASlE;AAAA,MARJC,aAQI,SARJA,aAQI;AAAA,MAPJC,cAOI,SAPJA,cAOI;AAAA,MANJC,cAMI,SANJA,cAMI;AAAA,MALJC,IAKI,SALJA,IAKI;AAAA,MAJJC,SAII,SAJJA,SAII;AAAA,MAHJC,QAGI,SAHJA,QAGI;AAAA,MAFJC,gBAEI,SAFJA,gBAEI;AAAA,MADJC,SACI,SADJA,SACI;;AAAA,kBACoC,qBAASD,gBAAT,CADpC;AAAA;AAAA,MACGE,YADH;AAAA,MACiBC,eADjB;;AAGJ,wBAAU,YAAM;AACd,QAAI,CAACF,SAAL,EAAgB;;AAChB,QAAIG,aAAa,GAAG,yBAAM,CAAE,CAA5B;;AACA,QAAMC,UAAU;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,gBAAAA,IADW,GACJC,IAAI,CAACC,IAAL,CACXR,gBAAgB,GAAG,CAACC,SAAS,GAAGQ,IAAI,CAACC,GAAL,EAAb,IAA2B,IADnC,CADI;;AAAA,sBAIbJ,IAAI,GAAG,CAJM;AAAA;AAAA;AAAA;;AAKfF,gBAAAA,aAAa,GALE,CAMf;;AANe;AAAA,uBAOT,uBAAM,IAAN,CAPS;;AAAA;AASfR,gBAAAA,cAAc;AATC;;AAAA;AAYjBO,gBAAAA,eAAe,CAACG,IAAD,CAAf;;AAZiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAVD,UAAU;AAAA;AAAA;AAAA,OAAhB;;AAeA,QAAMM,UAAU,GAAGC,WAAW,CAACP,UAAD,EAAa,IAAb,CAA9B;AACAA,IAAAA,UAAU;;AACVD,IAAAA,aAAa,GAAG,yBAAM;AACpBS,MAAAA,aAAa,CAACF,UAAD,CAAb;AACD,KAFD;;AAGA,WAAOP,aAAP;AACD,GAxBD,EAwBG,CAACH,SAAD,EAAYD,gBAAZ,CAxBH;AA0BA,sBACE,gCAAC,wBAAD;AACE,iBAAWD,QADb;AAEE,IAAA,KAAK,EAAC,YAFR;AAGE,IAAA,MAAM,EAAE;AAAA,0BAAM,gCAAC,SAAD;AAAW,QAAA,IAAI,EAAEG;AAAjB,QAAN;AAAA,KAHV;AAIE,IAAA,OAAO,EAAC,OAJV;AAKE,IAAA,KAAK,EAAEY,iBAAKC,SAAL,CAAe,cAAf,EAA+BrB,aAA/B,CALT;AAME,IAAA,OAAO,EAAEC,cANX;AAOE,IAAA,IAAI,EAAEE,IAPR;AAQE,IAAA,SAAS,EAAEC,SARb;AASE,IAAA,eAAe;AATjB,IADF;AAaD,CAnDM;;;AAqDPL,eAAe,CAACuB,YAAhB,GAA+B;AAC7BtB,EAAAA,aAAa,EAAE,OADc;AAE7BK,EAAAA,QAAQ,EAAE;AAFmB,CAA/B","sourcesContent":["import React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport sleep from '@ringcentral-integration/commons/lib/sleep';\nimport { RcIconButton, RcText } from '@ringcentral/juno';\n\nimport { CallButtonsProps } from '../../SmallCallControl';\nimport i18n from '../i18n';\n\ntype CountDownProps = {\n  data: number;\n};\nexport const CountDown: FunctionComponent<CountDownProps> = ({ data }) => {\n  const count = data > 99 ? '99+' : data;\n  return (\n    <RcText color=\"danger.f02\" variant=\"subheading1\" data-sign=\"CountDownText\">\n      {count}\n    </RcText>\n  );\n};\n\nexport type CountDownButtonProps = CallButtonsProps & {\n  onRestartTimer?(): void | Promise<void>;\n  onResumeRecord?(): void;\n  recordPauseCount?: number;\n  timeStamp?: number;\n};\n\nexport const CountDownButton: FunctionComponent<CountDownButtonProps> = ({\n  currentLocale,\n  onRestartTimer,\n  onResumeRecord,\n  size,\n  className,\n  dataSign,\n  recordPauseCount,\n  timeStamp,\n}) => {\n  const [intervalTime, setIntervalTime] = useState(recordPauseCount);\n\n  useEffect(() => {\n    if (!timeStamp) return;\n    let clearTimerSet = () => {};\n    const handleTime = async () => {\n      const time = Math.ceil(\n        recordPauseCount + (timeStamp - Date.now()) / 1000,\n      );\n      if (time < 0) {\n        clearTimerSet();\n        // to handle other tabs had not execute this part code because this Component destroyed\n        await sleep(1000);\n\n        onResumeRecord();\n        return;\n      }\n      setIntervalTime(time);\n    };\n\n    const intervalId = setInterval(handleTime, 1000);\n    handleTime();\n    clearTimerSet = () => {\n      clearInterval(intervalId);\n    };\n    return clearTimerSet;\n  }, [timeStamp, recordPauseCount]);\n\n  return (\n    <RcIconButton\n      data-sign={dataSign}\n      color=\"danger.f02\"\n      symbol={() => <CountDown data={intervalTime} />}\n      variant=\"round\"\n      title={i18n.getString('restartTimer', currentLocale)}\n      onClick={onRestartTimer}\n      size={size}\n      className={className}\n      shouldPersistBg\n    />\n  );\n};\n\nCountDownButton.defaultProps = {\n  currentLocale: 'en-US',\n  dataSign: 'CountDown',\n};\n"],"file":"CountDownButton.js"}