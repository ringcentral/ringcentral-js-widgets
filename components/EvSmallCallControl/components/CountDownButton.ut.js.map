{"version":3,"sources":["components/EvSmallCallControl/components/CountDownButton.ut.tsx"],"names":["setup","currentLocale","onRestartTimer","onResumeRecord","recordPauseCount","timeStamp","Date","now","dataSign","CheckCountDownButtonTooltip","container","node","querySelector","expect","toBeTruthy","title","toBe","CheckCountDownShows","secondsToPause","textContent","toEqual","CheckCountDownTimer","jest","useFakeTimers","setInterval","toHaveBeenCalledTimes","useRealTimers","WaitCountDownOver","advanceTimersByTime"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAGA;;AACA;;;;AAEA,SAASA,KAAT,OAOkC;AAAA,gCANhCC,aAMgC;AAAA,MANhCA,aAMgC,mCANhB,OAMgB;AAAA,iCALhCC,cAKgC;AAAA,MALhCA,cAKgC,oCALf,YAAM,CAAE,CAKO;AAAA,iCAJhCC,cAIgC;AAAA,MAJhCA,cAIgC,oCAJf,YAAM,CAAE,CAIO;AAAA,mCAHhCC,gBAGgC;AAAA,MAHhCA,gBAGgC,sCAHb,EAGa;AAAA,4BAFhCC,SAEgC;AAAA,MAFhCA,SAEgC,+BAFpBC,IAAI,CAACC,GAAL,EAEoB;AAAA,2BADhCC,QACgC;AAAA,MADhCA,QACgC,8BADrB,WACqB;AAChC,SAAO,kCACL,gCAAC,qBAAD,qBACE,gCAAC,iBAAD;AACE,IAAA,aAAa,EAAEP,aADjB;AAEE,IAAA,cAAc,EAAEC,cAFlB;AAGE,IAAA,cAAc,EAAEC,cAHlB;AAIE,IAAA,gBAAgB,EAAEC,gBAJpB;AAKE,IAAA,SAAS,EAAEC,SALb;AAME,IAAA,QAAQ,EAAEG;AANZ,IADF,CADK,CAAP;AAYD;;AAEM,IAAMC,2BAA8C,GAAG,SAAjDA,2BAAiD,GAAM;AAAA,eAC5CT,KAAK,CAAC,EAAD,CADuC;AAAA,MAC1DU,SAD0D,UAC1DA,SAD0D;;AAElE,MAAMC,IAAI,GAAGD,SAAS,CAACE,aAAV,CACX,yBADW,CAAb;AAGAC,EAAAA,MAAM,CAACF,IAAD,CAAN,CAAaG,UAAb;AACAD,EAAAA,MAAM,CAACF,IAAI,CAACI,KAAN,CAAN,CAAmBC,IAAnB,CAAwB,eAAxB;AACD,CAPM;;;;AASA,IAAMC,mBAAsC,GAAG,SAAzCA,mBAAyC,QAAwB;AAAA,MAArBC,cAAqB,SAArBA,cAAqB;;AAAA,gBACtD,kCACpB,gCAAC,qBAAD,qBACE,gCAAC,WAAD;AAAW,IAAA,IAAI,EAAEA;AAAjB,IADF,CADoB,CADsD;AAAA,MACpER,SADoE,WACpEA,SADoE;;AAM5E,MAAMC,IAAI,GAAGD,SAAS,CAACE,aAAV,CAAwB,6BAAxB,CAAb;AACAC,EAAAA,MAAM,CAACF,IAAI,CAACQ,WAAN,CAAN,CAAyBC,OAAzB,CACEF,cAAc,GAAG,EAAjB,GAAsB,KAAtB,GAA8BA,cADhC;AAGD,CAVM;;;;AAYA,IAAMG,mBAAsC,GAAG,SAAzCA,mBAAyC,GAAM;AAC1DC,EAAAA,IAAI,CAACC,aAAL,CAAmB,QAAnB;;AAD0D,gBAEpCvB,KAAK,CAAC;AAAEI,IAAAA,gBAAgB,EAAE;AAApB,GAAD,CAF+B;AAAA,MAElDM,SAFkD,WAElDA,SAFkD;;AAG1D,MAAMC,IAAI,GAAGD,SAAS,CAACE,aAAV,CAAwB,yBAAxB,CAAb;AACAC,EAAAA,MAAM,CAACF,IAAI,CAACQ,WAAN,CAAN,CAAyBC,OAAzB,CAAiC,GAAjC;AACAP,EAAAA,MAAM,CAACW,WAAD,CAAN,CAAoBC,qBAApB,CAA0C,CAA1C;AACAH,EAAAA,IAAI,CAACI,aAAL;AACD,CAPM;;;;AASA,IAAMC,iBAAoC,GAAG,SAAvCA,iBAAuC,QAAwB;AAAA,MAArBT,cAAqB,SAArBA,cAAqB;AAC1EI,EAAAA,IAAI,CAACC,aAAL;AACAD,EAAAA,IAAI,CAACM,mBAAL,CAAyBV,cAAc,GAAG,IAA1C;AACAI,EAAAA,IAAI,CAACI,aAAL;AACD,CAJM","sourcesContent":["import { RcThemeProvider } from '@ringcentral/juno';\nimport React from 'react';\n\nimport { StepFunction } from 'crius-test';\nimport { render } from '@testing-library/react';\nimport { CountDown, CountDownButton, CountDownButtonProps } from '.';\n\nfunction setup({\n  currentLocale = 'en-US',\n  onRestartTimer = () => {},\n  onResumeRecord = () => {},\n  recordPauseCount = 10,\n  timeStamp = Date.now(),\n  dataSign = 'CountDown',\n}: Partial<CountDownButtonProps>) {\n  return render(\n    <RcThemeProvider>\n      <CountDownButton\n        currentLocale={currentLocale}\n        onRestartTimer={onRestartTimer}\n        onResumeRecord={onResumeRecord}\n        recordPauseCount={recordPauseCount}\n        timeStamp={timeStamp}\n        dataSign={dataSign}\n      />\n    </RcThemeProvider>,\n  );\n}\n\nexport const CheckCountDownButtonTooltip: StepFunction<any> = () => {\n  const { container } = setup({});\n  const node = container.querySelector<HTMLButtonElement>(\n    '[data-sign=\"CountDown\"]',\n  );\n  expect(node).toBeTruthy;\n  expect(node.title).toBe('Restart timer');\n};\n\nexport const CheckCountDownShows: StepFunction<any> = ({ secondsToPause }) => {\n  const { container } = render(\n    <RcThemeProvider>\n      <CountDown data={secondsToPause} />\n    </RcThemeProvider>,\n  );\n  const node = container.querySelector('[data-sign=\"CountDownText\"]');\n  expect(node.textContent).toEqual(\n    secondsToPause > 99 ? '99+' : secondsToPause,\n  );\n};\n\nexport const CheckCountDownTimer: StepFunction<any> = () => {\n  jest.useFakeTimers('legacy');\n  const { container } = setup({ recordPauseCount: 3 });\n  const node = container.querySelector('[data-sign=\"CountDown\"]');\n  expect(node.textContent).toEqual('3');\n  expect(setInterval).toHaveBeenCalledTimes(1);\n  jest.useRealTimers();\n};\n\nexport const WaitCountDownOver: StepFunction<any> = ({ secondsToPause }) => {\n  jest.useFakeTimers();\n  jest.advanceTimersByTime(secondsToPause * 1000);\n  jest.useRealTimers();\n};\n"],"file":"CountDownButton.ut.js"}