{"version":3,"sources":["components/CheckBox/index.tsx"],"names":["CheckBox","data","selected","onSelect","valueField","textField","className","dataSign","type","checked","disabled","onChecked","children","props","isListObject","map","item","key","isSelected","checkStyle","styles","selectedCheckButton","onClick","undefined","extraInfo","renderExtraInfo","checkButton","text","checkboxWrapperClassNames","checkboxWrapper","wrapperDisabled","checkboxClassName","checkbox","checkboxDisabled","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport classnames from 'classnames';\n\nimport styles from './styles.scss';\n\ntype CheckBoxProps = {\n  valueField?: string;\n  textField?: string;\n  selected?: any;\n  data?: any[];\n  onSelect?: (...args: any[]) => any;\n  className?: string;\n  dataSign?: string;\n  type?: string;\n  onChecked?: (...args: any[]) => any;\n  checked?: boolean;\n  disabled?: boolean;\n};\nconst CheckBox: React.SFC<CheckBoxProps> = ({\n  data,\n  selected,\n  onSelect,\n  valueField,\n  textField,\n  className,\n  dataSign,\n  type,\n  checked,\n  disabled,\n  onChecked,\n  children,\n  ...props\n}) => {\n  const isListObject = !!(textField && valueField);\n  switch (type) {\n    case 'radio': {\n      return (\n        <div className={className} data-sign={dataSign}>\n          {data.map((item, key) => {\n            const isSelected =\n              selected === (isListObject ? item[valueField] : item);\n            const checkStyle = isSelected ? styles.selectedCheckButton : null;\n            const onClick = () => (disabled ? undefined : onSelect(item));\n            const extraInfo =\n              typeof item.renderExtraInfo === 'function' && isSelected\n                ? item.renderExtraInfo({ ...props })\n                : null;\n            return (\n              <div\n                key={key}\n                data-sign={isSelected ? 'selectedItem' : undefined}\n              >\n                <div\n                  onClick={onClick}\n                  className={classnames(\n                    styles.item,\n                    disabled || (item && item.disabled)\n                      ? styles.disabled\n                      : null,\n                  )}\n                >\n                  <div className={classnames(styles.checkButton, checkStyle)} />\n                  <div className={styles.text} data-sign=\"text\">\n                    {isListObject ? item[textField] : item}\n                  </div>\n                </div>\n                {extraInfo}\n              </div>\n            );\n          })}\n        </div>\n      );\n    }\n    case 'checkbox': {\n      const checkboxWrapperClassNames = classnames(\n        styles.checkboxWrapper,\n        disabled ? styles.wrapperDisabled : '',\n        className,\n      );\n      const checkboxClassName = classnames(\n        styles.checkbox,\n        checked ? styles.checked : '',\n        disabled ? styles.checkboxDisabled : '',\n      );\n      return (\n        <div\n          className={checkboxWrapperClassNames}\n          data-sign={dataSign}\n          onClick={() => {\n            if (!disabled && onChecked) {\n              onChecked(!checked);\n            }\n          }}\n        >\n          <div className={checkboxClassName}>{checked && 'âœ“'}</div>\n          {children}\n        </div>\n      );\n    }\n    default:\n      break;\n  }\n};\nCheckBox.defaultProps = {\n  textField: null,\n  valueField: null,\n  className: null,\n  dataSign: undefined,\n  type: 'radio',\n  onChecked() {},\n  onSelect() {},\n  data: [],\n  selected: null,\n  checked: false,\n  disabled: false,\n};\nexport default CheckBox;\n"],"file":"index.js"}