{"version":3,"sources":["components/RegionSettingsPanel/index.tsx"],"names":["RegionSettings","props","onAreaCodeChange","e","value","currentTarget","setState","areaCodeValue","areaCodeInputFilter","onCountryCodeChange","option","isoCode","state","countryCodeValue","onResetClick","areaCode","countryCode","onSaveClick","onSave","showAreaCode","undefined","onBackClick","onBackButtonClick","replace","renderHandler","callingCode","countryNames","getString","currentLocale","renderValue","selectedOption","availableCountries","find","country","nextProps","hasChanges","hasNA","c","messageId","length","styles","root","className","i18n","content","hint","select","children","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport classnames from 'classnames';\nimport { contains } from 'ramda';\n\nimport countryNames from '../../lib/countryNames';\nimport BackHeader from '../BackHeader';\nimport Select from '../DropdownSelect';\nimport InputField from '../InputField';\nimport Panel from '../Panel';\nimport SaveButton from '../SaveButton';\nimport TextInput from '../TextInput';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\ntype RegionSettingsProps = {\n  className?: string;\n  onBackButtonClick?: (...args: any[]) => any;\n  currentLocale: string;\n  availableCountries: {\n    isoCode?: string;\n    callingCode?: string;\n  }[];\n  countryCode: string;\n  areaCode: string;\n  onSave?: (...args: any[]) => any;\n};\ntype RegionSettingsState = {\n  areaCodeValue: any;\n  countryCodeValue: any;\n};\nclass RegionSettings extends Component<\n  RegionSettingsProps,\n  RegionSettingsState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countryCodeValue: props.countryCode,\n      areaCodeValue: props.areaCode,\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.areaCode !== this.props.areaCode) {\n      this.setState({\n        areaCodeValue: nextProps.areaCode,\n      });\n    }\n    if (nextProps.countryCode !== this.props.countryCode) {\n      this.setState({\n        countryCodeValue: nextProps.countryCode,\n      });\n    }\n  }\n  onAreaCodeChange = (e) => {\n    const value = e.currentTarget.value;\n    this.setState({\n      areaCodeValue: this.areaCodeInputFilter(value),\n    });\n  };\n  onCountryCodeChange = (option) => {\n    const value = option.isoCode;\n    if (value !== this.state.countryCodeValue) {\n      this.setState({\n        countryCodeValue: value,\n      });\n    }\n  };\n  onResetClick = () => {\n    this.setState({\n      areaCodeValue: this.props.areaCode,\n      countryCodeValue: this.props.countryCode,\n    });\n  };\n  onSaveClick = () => {\n    if (typeof this.props.onSave === 'function') {\n      const showAreaCode = contains(this.state.countryCodeValue, ['CA', 'US']);\n      this.props.onSave({\n        areaCode: showAreaCode ? this.state.areaCodeValue : undefined,\n        countryCode: this.state.countryCodeValue,\n      });\n    }\n  };\n  onBackClick = () => {\n    if (typeof this.props.onBackButtonClick === 'function') {\n      this.props.onBackButtonClick();\n    }\n  };\n  areaCodeInputFilter = (value) => value.replace(/[^\\d]/g, '');\n  renderHandler = (option) =>\n    `(+${option.callingCode}) ${countryNames.getString(\n      option.isoCode,\n      this.props.currentLocale,\n    )}`;\n  renderValue = (value) => {\n    const selectedOption = this.props.availableCountries.find(\n      (country) => country.isoCode === value,\n    );\n    if (!selectedOption) {\n      return '';\n    }\n    return `(+${selectedOption.callingCode}) ${countryNames.getString(\n      selectedOption.isoCode,\n      this.props.currentLocale,\n    )}`;\n  };\n  render() {\n    const hasChanges =\n      this.state.areaCodeValue !== this.props.areaCode ||\n      this.state.countryCodeValue !== this.props.countryCode;\n    const hasNA =\n      !!this.props.availableCountries.find((c) => c.isoCode === 'US') ||\n      !!this.props.availableCountries.find((c) => c.isoCode === 'CA');\n    let messageId;\n    if (this.props.availableCountries.length > 1) {\n      if (hasNA) {\n        messageId = 'MultiWithNAMessage';\n      } else {\n        messageId = 'MultiWithoutNAMessage';\n      }\n    } else if (hasNA) {\n      messageId = 'NAOnlyMessage';\n    }\n    const showAreaCode =\n      this.state.countryCodeValue === 'US' ||\n      this.state.countryCodeValue === 'CA';\n    return (\n      <div className={classnames(styles.root, this.props.className)}>\n        <BackHeader buttons={[]} onBackClick={this.onBackClick}>\n          {i18n.getString('title', this.props.currentLocale)}\n        </BackHeader>\n        <Panel className={styles.content}>\n          <div className={styles.hint}>\n            {i18n.getString(messageId, this.props.currentLocale)}\n          </div>\n          <InputField\n            label={i18n.getString('country', this.props.currentLocale)}\n          >\n            <Select\n              className={styles.select}\n              value={this.state.countryCodeValue}\n              onChange={this.onCountryCodeChange}\n              options={this.props.availableCountries}\n              dropdownAlign=\"left\"\n              valueFunction={(option) => option.isoCode}\n              renderFunction={this.renderHandler}\n              renderValue={this.renderValue}\n              titleEnabled\n            />\n          </InputField>\n          {showAreaCode && (\n            <InputField\n              label={i18n.getString('areaCode', this.props.currentLocale)}\n            >\n              <TextInput\n                placeholder={i18n.getString(\n                  'areaCodePlaceholder',\n                  this.props.currentLocale,\n                )}\n                maxLength={3}\n                filter={this.areaCodeInputFilter}\n                value={this.state.areaCodeValue}\n                onChange={this.onAreaCodeChange}\n                dataSign=\"areaCodeInputField\"\n              />\n            </InputField>\n          )}\n          <SaveButton\n            currentLocale={this.props.currentLocale}\n            onClick={this.onSaveClick}\n            disabled={!hasChanges}\n          />\n          {this.props.children}\n        </Panel>\n      </div>\n    );\n  }\n}\nRegionSettings.defaultProps = {\n  className: undefined,\n  children: undefined,\n  onBackButtonClick: undefined,\n  onSave: undefined,\n};\nexport default RegionSettings;\n"],"file":"index.js"}