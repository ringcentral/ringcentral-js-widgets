{"version":3,"sources":["components/ActiveCallDialPad/index.tsx"],"names":["cleanRegex","filter","value","replace","MAX_PASTE_LENGTH","ActiveCallDialPad","props","state","document","createElement","audio","playAudio","canPlayType","audios","paused","pause","src","currentTime","play","onButtonOutput","key","setState","preState","onChange","sendDTMFKeys","keys","split","forEach","index","setTimeout","e","currentTarget","onKeyDown","onPaste","item","clipboardData","items","getAsString","data","length","slice","remove","styles","root","hiddenDialPad","i18n","getString","currentLocale","dialInput","input","padContainer","dialPad","buttonRow","button","stopButton","onHangup","EndIcon","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport EndIcon from '../../assets/images/End.svg';\nimport BackHeader from '../BackHeader';\nimport CircleButton from '../CircleButton';\nimport audios from '../DialButton/audios';\nimport DialPad from '../DialPad';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\nconst cleanRegex = /[^\\d*#]/g;\nconst filter = (value) => value.replace(cleanRegex, '');\nconst MAX_PASTE_LENGTH = 15;\ntype ActiveCallDialPadProps = {\n  onChange: (...args: any[]) => any;\n  hiddenDialPad: (...args: any[]) => any;\n  onHangup: (...args: any[]) => any;\n  currentLocale: string;\n};\ntype ActiveCallDialPadState = {\n  value: string;\n};\nclass ActiveCallDialPad extends Component<\n  ActiveCallDialPadProps,\n  ActiveCallDialPadState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n    };\n    if (typeof document !== 'undefined' && document.createElement) {\n      this.audio = document.createElement('audio');\n    }\n    this.playAudio = (value) => {\n      if (\n        this.audio &&\n        this.audio.canPlayType('audio/ogg') !== '' &&\n        audios[value]\n      ) {\n        if (!this.audio.paused) {\n          this.audio.pause();\n        }\n        this.audio.src = audios[value];\n        this.audio.currentTime = 0;\n        this.audio.play();\n      }\n    };\n    this.onButtonOutput = (key) => {\n      this.setState((preState) => {\n        const value = preState.value + key;\n        this.props.onChange(key);\n        return { value };\n      });\n    };\n    this.sendDTMFKeys = (keys) => {\n      if (keys === '') {\n        return;\n      }\n      this.props.onChange(keys);\n      keys.split('').forEach((key, index) => {\n        setTimeout(() => {\n          this.playAudio(key);\n        }, 100 * index);\n      });\n    };\n    this.onChange = (e) => {\n      const value = filter(e.currentTarget.value);\n      this.setState({ value });\n    };\n    this.onKeyDown = (e) => {\n      const value = filter(e.key);\n      this.sendDTMFKeys(value);\n    };\n    this.onPaste = (e) => {\n      const item = e.clipboardData.items[0];\n      item.getAsString((data) => {\n        const value = filter(data.replace(/<[^>]*>/g, '')); // remove HTML tag in firefox\n        let keys = value;\n        if (value.length > MAX_PASTE_LENGTH) {\n          keys = value.slice(0, MAX_PASTE_LENGTH);\n        }\n        this.sendDTMFKeys(keys);\n        if (value.length > MAX_PASTE_LENGTH) {\n          this.setState((preState) => ({\n            value: preState.value.replace(value, keys),\n          }));\n        }\n      });\n    };\n  }\n  componentWillUnmount() {\n    if (this.audio) {\n      this.audio.remove();\n      this.audio = null;\n    }\n  }\n  render() {\n    return (\n      <div data-sign=\"activeCallDialPad\" className={styles.root}>\n        <BackHeader onBackClick={this.props.hiddenDialPad}>\n          {i18n.getString('keypad', this.props.currentLocale)}\n        </BackHeader>\n        <div className={styles.dialInput}>\n          <input\n            data-sign=\"input\"\n            className={styles.input}\n            value={this.state.value}\n            onChange={this.onChange}\n            onKeyDown={this.onKeyDown}\n            onPaste={this.onPaste}\n            autoFocus // eslint-disable-line\n          />\n        </div>\n        <div className={styles.padContainer}>\n          <DialPad\n            dataSign=\"keypad\"\n            className={styles.dialPad}\n            onButtonOutput={this.onButtonOutput}\n          />\n          <div className={styles.buttonRow}>\n            <div className={styles.button}>\n              <CircleButton\n                className={styles.stopButton}\n                onClick={this.props.onHangup}\n                icon={EndIcon}\n                showBorder={false}\n                dataSign=\"hangUp\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default ActiveCallDialPad;\n"],"file":"index.js"}