{"version":3,"file":"index.js","names":["_clsx2","_interopRequireDefault","require","_react","_styles","e","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_defineProperty","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","toPrimitive","call","TypeError","String","Number","capitalize","str","toUpperCase","slice","getMeidaCls","styles","concat","MediaObject","_ref","_clsx","containerCls","mediaLeft","mediaBody","mediaRight","leftCls","bodyCls","rightCls","mediaHeading","headingCls","leftAlignment","bodyAlignment","rightAlignment","flexible","leftAlignmentClassName","rightAlignmentClassName","bodyAlignmentClassName","createElement","className","clsx","media","flex","mediaObject","defaultProps","_default","exports"],"sources":["components/MediaObject/index.tsx"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\n\nimport styles from './styles.scss';\n\nfunction capitalize(str: any) {\n  return str[0].toUpperCase() + str.slice(1);\n}\nfunction getMeidaCls(str: any) {\n  return styles[`media${capitalize(str)}`];\n}\ntype MediaObjectProps = {\n  containerCls?: string;\n  mediaLeft?: JSX.Element;\n  mediaBody?: JSX.Element | string;\n  mediaRight?: JSX.Element;\n  mediaHeading?: string;\n  leftCls?: string;\n  bodyCls?: string;\n  rightCls?: string;\n  headingCls?: string;\n  leftAlignment?: 'top' | 'middle' | 'bottom';\n  bodyAlignment?: 'top' | 'middle' | 'bottom';\n  rightAlignment?: 'top' | 'middle' | 'bottom';\n  flexible?: boolean;\n};\nconst MediaObject: React.FC<MediaObjectProps> = ({\n  containerCls,\n  mediaLeft,\n  mediaBody,\n  mediaRight,\n  leftCls,\n  bodyCls,\n  rightCls,\n  mediaHeading,\n  headingCls,\n  leftAlignment,\n  bodyAlignment,\n  rightAlignment,\n  flexible,\n}) => {\n  const leftAlignmentClassName = getMeidaCls(leftAlignment);\n  const rightAlignmentClassName = getMeidaCls(rightAlignment);\n  const bodyAlignmentClassName = getMeidaCls(bodyAlignment);\n  return (\n    <div\n      className={clsx({\n        [styles.media]: true,\n        [styles.flex]: !!flexible,\n        // @ts-expect-error TS(2464): A computed property name must be of type 'string',... Remove this comment to see the full error message\n        [containerCls]: !!containerCls,\n      })}\n    >\n      {mediaLeft ? (\n        <div\n          className={clsx(styles.mediaLeft, leftAlignmentClassName, leftCls)}\n        >\n          <div className={styles.mediaObject}>{mediaLeft}</div>\n        </div>\n      ) : null}\n      <div className={clsx(styles.mediaBody, bodyAlignmentClassName, bodyCls)}>\n        {mediaHeading ? (\n          <h4 className={clsx(styles.mediaHeading, headingCls)}>\n            {mediaHeading}\n          </h4>\n        ) : null}\n        {mediaBody}\n      </div>\n      {mediaRight ? (\n        <div\n          className={clsx(styles.mediaRight, rightAlignmentClassName, rightCls)}\n        >\n          <div className={styles.mediaObject}>{mediaRight}</div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\nMediaObject.defaultProps = {\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  containerCls: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'Element | u... Remove this comment to see the full error message\n  mediaLeft: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | El... Remove this comment to see the full error message\n  mediaBody: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'Element | u... Remove this comment to see the full error message\n  mediaRight: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  mediaHeading: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  leftCls: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  bodyCls: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  rightCls: null,\n  // @ts-expect-error TS(2322): Type 'null' is not assignable to type 'string | un... Remove this comment to see the full error message\n  headingCls: null,\n  leftAlignment: 'middle',\n  bodyAlignment: 'middle',\n  rightAlignment: 'middle',\n  flexible: true,\n};\nexport default MediaObject;\n"],"mappings":"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","ignoreList":[]}