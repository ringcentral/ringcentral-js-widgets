{"version":3,"sources":["components/TabNavigationButton/index.tsx"],"names":["NavigationButton","active","activeIcon","icon","label","noticeCounts","onClick","width","height","keepStyle","className","activeClassName","inActiveClassName","id","tooltipForceHide","dataSign","notice","styles","notices","navigationButton","iconHolder","iconStyles","defaultProps"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;;;AAwBA,IAAMA,gBAA0D,GAAG,SAA7DA,gBAA6D,OAgB7D;AAAA,MAfJC,MAeI,QAfJA,MAeI;AAAA,MAdJC,UAcI,QAdJA,UAcI;AAAA,MAbJC,IAaI,QAbJA,IAaI;AAAA,MAZJC,KAYI,QAZJA,KAYI;AAAA,MAXJC,YAWI,QAXJA,YAWI;AAAA,MAVJC,OAUI,QAVJA,OAUI;AAAA,MATJC,KASI,QATJA,KASI;AAAA,MARJC,MAQI,QARJA,MAQI;AAAA,MAPJC,SAOI,QAPJA,SAOI;AAAA,MANJC,SAMI,QANJA,SAMI;AAAA,MALJC,eAKI,QALJA,eAKI;AAAA,MAJJC,iBAII,QAJJA,iBAII;AAAA,MAHJC,EAGI,QAHJA,EAGI;AAAA,MAFJC,gBAEI,QAFJA,gBAEI;AAAA,MADJC,QACI,QADJA,QACI;AACJ,MAAIC,MAAM,GAAG,IAAb;;AACA,MAAIX,YAAY,IAAIA,YAAY,GAAG,CAAnC,EAAsC;AACpC,QAAIA,YAAY,GAAG,EAAnB,EAAuB;AACrBW,MAAAA,MAAM,gBAAG;AAAK,QAAA,SAAS,EAAEC,mBAAOC;AAAvB,eAAT;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,gBAAG;AAAK,QAAA,SAAS,EAAEC,mBAAOD;AAAvB,SAAgCX,YAAhC,CAAT;AACD;AACF;;AAED,sBACE;AACE,IAAA,OAAO,EAAEC,OADX;AAEE,IAAA,SAAS,EAAE,4BAAWW,mBAAOE,gBAAlB,EAAoClB,MAAM,IAAIgB,mBAAOhB,MAArD,CAFb;AAGE,IAAA,KAAK,EAAE;AACLM,MAAAA,KAAK,EAALA,KADK;AAELC,MAAAA,MAAM,EAANA;AAFK,KAHT;AAOE,IAAA,EAAE,EAAEK;AAPN,kBASE,gCAAC,gBAAD;AAAS,IAAA,KAAK,EAAET,KAAhB;AAAuB,IAAA,gBAAgB,EAAEU;AAAzC,kBACE;AAAK,IAAA,SAAS,EAAEG,mBAAOG,UAAvB;AAAmC,iBAAWL,QAAX,aAAWA,QAAX,cAAWA,QAAX,GAAuBX;AAA1D,kBACE;AACE,IAAA,SAAS,EAAE,4BACTa,mBAAOd,IADE,EAET,CAACM,SAAD,GAAaQ,mBAAOI,UAApB,GAAiC,IAFxB,EAGTX,SAHS,EAITT,MAAM,GAAGU,eAAH,GAAqBC,iBAJlB;AADb,KAQGX,MAAM,GAAGC,UAAH,GAAgBC,IARzB,CADF,EAWGa,MAXH,CADF,CATF,CADF;AA2BD,CArDD;;AAuDAhB,gBAAgB,CAACsB,YAAjB,GAAgC;AAC9BrB,EAAAA,MAAM,EAAE,KADsB;AAE9BQ,EAAAA,SAAS,EAAE;AAFmB,CAAhC;eAKeT,gB","sourcesContent":["import React, { DOMAttributes, FunctionComponent, ReactNode } from 'react';\n\nimport classnames from 'classnames';\n\nimport { Tooltip } from '../Rcui/Tooltip';\nimport styles from './styles.scss';\n\nexport type NavigationButtonIcon =\n  | ReactNode\n  | (({ currentPath }: { currentPath: string }) => ReactNode);\n\nexport interface NavigationButtonProps {\n  icon: NavigationButtonIcon;\n  activeIcon: NavigationButtonIcon;\n  active?: boolean;\n  label: string;\n  noticeCounts?: number;\n  width: number | string;\n  height: number | string;\n  onClick: DOMAttributes<HTMLDivElement>['onClick'];\n  keepStyle: boolean;\n  activeClassName: string;\n  inActiveClassName: string;\n  className?: string;\n  id?: string;\n  tooltipForceHide?: boolean;\n  dataSign?: string;\n}\n\nconst NavigationButton: FunctionComponent<NavigationButtonProps> = ({\n  active,\n  activeIcon,\n  icon,\n  label,\n  noticeCounts,\n  onClick,\n  width,\n  height,\n  keepStyle,\n  className,\n  activeClassName,\n  inActiveClassName,\n  id,\n  tooltipForceHide,\n  dataSign,\n}) => {\n  let notice = null;\n  if (noticeCounts && noticeCounts > 0) {\n    if (noticeCounts > 99) {\n      notice = <div className={styles.notices}>99+</div>;\n    } else {\n      notice = <div className={styles.notice}>{noticeCounts}</div>;\n    }\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      className={classnames(styles.navigationButton, active && styles.active)}\n      style={{\n        width,\n        height,\n      }}\n      id={id}\n    >\n      <Tooltip title={label} tooltipForceHide={tooltipForceHide}>\n        <div className={styles.iconHolder} data-sign={dataSign ?? label}>\n          <div\n            className={classnames(\n              styles.icon,\n              !keepStyle ? styles.iconStyles : null,\n              className,\n              active ? activeClassName : inActiveClassName,\n            )}\n          >\n            {active ? activeIcon : icon}\n          </div>\n          {notice}\n        </div>\n      </Tooltip>\n    </div>\n  );\n};\n\nNavigationButton.defaultProps = {\n  active: false,\n  keepStyle: false,\n};\n\nexport default NavigationButton;\n"],"file":"index.js"}