{"version":3,"sources":["components/RecordingIndicator/RecordingIndicator.tsx"],"names":["SyncRenderContext","count","setCount","RecordingIndicatorProvider","children","RecordingIndicator","customClass","dataSign","show","setShow","timer","window","clearTimeout","setTimeout","RecordIconActive","styles","recordingIndicator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAQA;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;AAYA,IAAMA,iBAAiB,gBAAG,0BAAsC;AAC9DC,EAAAA,KAAK,EAAE,CADuD;AAE9DC,EAAAA,QAAQ,EAAE,oBAAM,CAAE;AAF4C,CAAtC,CAA1B;;AAKO,IAAMC,0BAA6C,GAAG,SAAhDA,0BAAgD,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACnD,qBAAS,CAAT,CADmD;AAAA;AAAA,MACtEH,KADsE;AAAA,MAC/DC,QAD+D;;AAE7E,sBACE,gCAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,KAAK,EAALA,KADK;AAELC,MAAAA,QAAQ,EAARA;AAFK;AADT,KAMGE,QANH,CADF;AAUD,CAZM;;;;AAcA,IAAMC,kBAA8D,GAAG,SAAjEA,kBAAiE,QAGxE;AAAA,gCAFJC,WAEI;AAAA,MAFJA,WAEI,kCAFU,EAEV;AAAA,MADJC,QACI,SADJA,QACI;;AAAA,oBACwB,uBAAWP,iBAAX,CADxB;AAAA,MACIC,KADJ,eACIA,KADJ;AAAA,MACWC,QADX,eACWA,QADX;;AAAA,mBAEoB,qBAAS,IAAT,CAFpB;AAAA;AAAA,MAEGM,IAFH;AAAA,MAESC,OAFT;;AAGJ,MAAIC,KAAJ;AAEA,wBAAU,YAAM;AACdR,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACA,WAAO,YAAM;AACX,OAAC,CAACS,KAAF,IAAWC,MAAM,CAACC,YAAP,CAAoBF,KAApB,CAAX;AACD,KAFD;AAGD,GALD,EAKG,EALH;AAOA,wBAAU,YAAM;AACd;AACAD,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,IAAAA,KAAK,GAAGC,MAAM,CAACE,UAAP,CAAkB;AAAA,aAAMJ,OAAO,CAAC,IAAD,CAAb;AAAA,KAAlB,EAAuC,CAAvC,CAAR;AACD,GAJD,EAIG,CAACR,KAAD,CAJH;AAMA,SAAOO,IAAI,gBACT,gCAAC,YAAD;AACE,iBAAWD,QADb;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,MAAM,EAAEO,oBAHV;AAIE,IAAA,SAAS,EAAE,4BACTC,mBAAOC,kBADE,EAET,CAAC,CAACV,WAAF,IAAiBA,WAFR;AAJb,IADS,GAUP,IAVJ;AAWD,CAhCM","sourcesContent":["import React, {\n  createContext,\n  FunctionComponent,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nimport classnames from 'classnames';\n\nimport { RcIcon } from '@ringcentral/juno';\n\nimport RecordIconActive from '../../assets/images/RecordOn.svg';\nimport styles from './styles.scss';\n\ntype SyncRenderContextValue = {\n  count: number;\n  setCount: (number: number) => void;\n};\n\ntype RecordingIndicatorProps = {\n  customClass?: string;\n  dataSign?: string;\n};\n\nconst SyncRenderContext = createContext<SyncRenderContextValue>({\n  count: 0,\n  setCount: () => {},\n});\n\nexport const RecordingIndicatorProvider: FunctionComponent = ({ children }) => {\n  const [count, setCount] = useState(0);\n  return (\n    <SyncRenderContext.Provider\n      value={{\n        count,\n        setCount,\n      }}\n    >\n      {children}\n    </SyncRenderContext.Provider>\n  );\n};\n\nexport const RecordingIndicator: FunctionComponent<RecordingIndicatorProps> = ({\n  customClass = '',\n  dataSign,\n}) => {\n  const { count, setCount } = useContext(SyncRenderContext);\n  const [show, setShow] = useState(true);\n  let timer: number;\n\n  useEffect(() => {\n    setCount(count + 1);\n    return () => {\n      !!timer && window.clearTimeout(timer);\n    };\n  }, []);\n\n  useEffect(() => {\n    // force re-render\n    setShow(false);\n    timer = window.setTimeout(() => setShow(true), 0);\n  }, [count]);\n\n  return show ? (\n    <RcIcon\n      data-sign={dataSign}\n      size=\"small\"\n      symbol={RecordIconActive}\n      className={classnames(\n        styles.recordingIndicator,\n        !!customClass && customClass,\n      )}\n    />\n  ) : null;\n};\n"],"file":"RecordingIndicator.js"}