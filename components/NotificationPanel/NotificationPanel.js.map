{"version":3,"sources":["components/NotificationPanel/NotificationPanel.tsx"],"names":["NotificationPanel","messages","className","exitAnimation","entranceAnimation","backdropEntranceAnimation","backdropExitAnimation","duration","rest","currentMessages","setCurrentMessages","sleep","cancel","updatedMessages","length","forEach","currentMessage","updatedMessage","some","m","id","animation","backdropAnimation","push","then","styles","root","map","data","i","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAEA;;AAEA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,iBAA4D,GAAG,SAA/DA,iBAA+D,OAStE;AAAA,MARJC,QAQI,QARJA,QAQI;AAAA,MAPJC,SAOI,QAPJA,SAOI;AAAA,MANJC,aAMI,QANJA,aAMI;AAAA,MALJC,iBAKI,QALJA,iBAKI;AAAA,MAJJC,yBAII,QAJJA,yBAII;AAAA,MAHJC,qBAGI,QAHJA,qBAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADDC,IACC;;AAAA,kBAC0C,qBAASP,QAAT,CAD1C;AAAA;AAAA,MACGQ,eADH;AAAA,MACoBC,kBADpB;;AAAA,kBAEsB,0BAFtB;AAAA,MAEIC,KAFJ,aAEIA,KAFJ;AAAA,MAEWC,MAFX,aAEWA,MAFX;;AAIJ,wBAAU,YAAM;AACd,QAAMC,eAAsC,GAAG,EAA/C,CADc,CAEd;;AACA,QAAIJ,eAAe,CAACK,MAAhB,GAAyBb,QAAQ,CAACa,MAAtC,EAA8C;AAC5CL,MAAAA,eAAe,CAACM,OAAhB,CAAwB,UAACC,cAAD,EAAoB;AAC1C,YAAMC,cAAc,qBACfD,cADe,CAApB,CAD0C,CAI1C;;;AACA,YAAI,CAACf,QAAQ,CAACiB,IAAT,CAAc,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACC,EAAF,KAASJ,cAAc,CAACI,EAA/B;AAAA,SAAd,CAAL,EAAuD;AACrDH,UAAAA,cAAc,CAACI,SAAf,GAA2BlB,aAA3B;AACAc,UAAAA,cAAc,CAACK,iBAAf,GAAmChB,qBAAnC;AACD,SAHD,MAGO;AACLW,UAAAA,cAAc,CAACI,SAAf,GAA2B,EAA3B;AACAJ,UAAAA,cAAc,CAACK,iBAAf,GAAmC,EAAnC;AACD;;AACDT,QAAAA,eAAe,CAACU,IAAhB,CAAqBN,cAArB;AACD,OAbD;AAeAP,MAAAA,kBAAkB,CAACG,eAAD,CAAlB;;AAEA,UAAIN,QAAQ,GAAG,CAAf,EAAkB;AAChBI,QAAAA,KAAK,CAACJ,QAAD,CAAL,CAAgBiB,IAAhB,CAAqB,YAAM;AACzBd,UAAAA,kBAAkB,CAACT,QAAD,CAAlB;AACD,SAFD;AAGD;AACF,KAvBD,MAuBO;AACLW,MAAAA,MAAM;AACNF,MAAAA,kBAAkB,CAACT,QAAD,CAAlB;AACD,KA7Ba,CA8Bd;;AACD,GA/BD,EA+BG,CAACA,QAAD,CA/BH;AAiCA,sBACE;AAAK,IAAA,SAAS,EAAE,4BAAWwB,mBAAOC,IAAlB,EAAwBxB,SAAxB;AAAhB,KACGO,eAAe,CAACkB,GAAhB,CAAoB,UAACC,IAAD,EAAOC,CAAP,EAAa;AAAA;;AAChC,wBACE,gCAAC,kCAAD,eACMrB,IADN;AAEE,MAAA,IAAI,EAAEoB,IAFR;AAGE,MAAA,QAAQ,EAAErB,QAHZ;AAIE,MAAA,iBAAiB,2BACfqB,IAAI,CAACN,iBADU,yEACWjB,yBAL9B;AAOE,MAAA,SAAS,qBAAEuB,IAAI,CAACP,SAAP,6DAAoBjB,iBAP/B;AAQE,MAAA,GAAG,EAAEyB;AARP,OADF;AAYD,GAbA,CADH,CADF;AAkBD,CAhEM;;;AAkEP7B,iBAAiB,CAAC8B,YAAlB,GAAiC;AAC/B1B,EAAAA,iBAAiB,EAAE,YADY;AAE/BD,EAAAA,aAAa,EAAE,WAFgB;AAG/BE,EAAAA,yBAAyB,EAAE,QAHI;AAI/BC,EAAAA,qBAAqB,EAAE,SAJQ;AAK/BC,EAAAA,QAAQ,EAAE;AALqB,CAAjC","sourcesContent":["import { useSleep } from '@ringcentral/juno';\nimport 'animate.css/animate.min.css';\n\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport classNames from 'classnames';\n\nimport { NotificationItem } from './NotificationItem';\nimport {\n  NotificationMessage,\n  NotificationPanelProps,\n} from './NotificationPanel.interface';\nimport styles from './styles.scss';\n\nexport const NotificationPanel: FunctionComponent<NotificationPanelProps> = ({\n  messages,\n  className,\n  exitAnimation,\n  entranceAnimation,\n  backdropEntranceAnimation,\n  backdropExitAnimation,\n  duration,\n  ...rest\n}) => {\n  const [currentMessages, setCurrentMessages] = useState(messages);\n  const { sleep, cancel } = useSleep();\n\n  useEffect(() => {\n    const updatedMessages: NotificationMessage[] = [];\n    // if length is grater means that is delete item.\n    if (currentMessages.length > messages.length) {\n      currentMessages.forEach((currentMessage) => {\n        const updatedMessage = {\n          ...currentMessage,\n        };\n        // if that can't find this id, that means that is delete\n        if (!messages.some((m) => m.id === currentMessage.id)) {\n          updatedMessage.animation = exitAnimation;\n          updatedMessage.backdropAnimation = backdropExitAnimation;\n        } else {\n          updatedMessage.animation = '';\n          updatedMessage.backdropAnimation = '';\n        }\n        updatedMessages.push(updatedMessage);\n      });\n\n      setCurrentMessages(updatedMessages);\n\n      if (duration > 0) {\n        sleep(duration).then(() => {\n          setCurrentMessages(messages);\n        });\n      }\n    } else {\n      cancel();\n      setCurrentMessages(messages);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  return (\n    <div className={classNames(styles.root, className)}>\n      {currentMessages.map((data, i) => {\n        return (\n          <NotificationItem\n            {...rest}\n            data={data}\n            duration={duration}\n            backdropAnimation={\n              data.backdropAnimation ?? backdropEntranceAnimation\n            }\n            animation={data.animation ?? entranceAnimation}\n            key={i}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nNotificationPanel.defaultProps = {\n  entranceAnimation: 'fadeInDown',\n  exitAnimation: 'fadeOutUp',\n  backdropEntranceAnimation: 'fadeIn',\n  backdropExitAnimation: 'fadeOut',\n  duration: 500,\n};\n"],"file":"NotificationPanel.js"}