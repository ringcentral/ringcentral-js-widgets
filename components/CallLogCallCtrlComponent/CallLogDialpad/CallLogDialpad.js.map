{"version":3,"sources":["components/CallLogCallCtrlComponent/CallLogDialpad/CallLogDialpad.tsx"],"names":["cleanRegex","filter","value","replace","MAX_PASTE_LENGTH","CallLogDialpad","onChange","onClose","className","isWide","React","useState","setValue","audioRef","useRef","useEffect","document","createElement","current","remove","playAudio","canPlayType","audios","paused","pause","src","currentTime","play","onButtonOutput","key","sendDTMFKeys","keys","split","forEach","index","setTimeout","onInputChange","e","currentTarget","onKeyDown","onPaste","item","clipboardData","items","getAsString","data","filteredValue","length","slice","styles","root","classic","closeBtn","dialInput","input","keypadContainer","dialPad"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAG,UAAnB;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,OAAN,CAAcH,UAAd,EAA0B,EAA1B,CAAX;AAAA,CAAf;;AAEA,IAAMI,gBAAgB,GAAG,EAAzB;;AAEA,IAAMC,cAAsD,GAAG,SAAzDA,cAAyD,OAKzD;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,OAGI,QAHJA,OAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADJC,MACI,QADJA,MACI;;AAAA,wBACsBC,kBAAMC,QAAN,CAAe,EAAf,CADtB;AAAA;AAAA,MACGT,KADH;AAAA,MACUU,QADV;;AAEJ,MAAMC,QAAQ,GAAGH,kBAAMI,MAAN,CAA+B,IAA/B,CAAjB;;AACAJ,oBAAMK,SAAN,CAAgB,YAAM;AACpB,QAAI,OAAOC,QAAP,KAAoB,WAApB,IAAmCA,QAAQ,CAACC,aAAhD,EAA+D;AAC7DJ,MAAAA,QAAQ,CAACK,OAAT,GAAmBF,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAnB;AACD;;AACD,WAAO,YAAM;AACX,UAAIJ,QAAQ,CAACK,OAAb,EAAsB;AACpBL,QAAAA,QAAQ,CAACK,OAAT,CAAiBC,MAAjB;AACAN,QAAAA,QAAQ,CAACK,OAAT,GAAmB,IAAnB;AACD;AACF,KALD;AAMD,GAVD,EAUG,EAVH;;AAYA,MAAME,SAAS,GAAG,SAAZA,SAAY,CAAClB,KAAD,EAAsB;AACtC,QACEW,QAAQ,CAACK,OAAT,IACAL,QAAQ,CAACK,OAAT,CAAiBG,WAAjB,CAA6B,WAA7B,MAA8C,EAD9C,IAEAC,eAAOpB,KAAP,CAHF,EAIE;AACA,UAAI,CAACW,QAAQ,CAACK,OAAT,CAAiBK,MAAtB,EAA8B;AAC5BV,QAAAA,QAAQ,CAACK,OAAT,CAAiBM,KAAjB;AACD;;AACDX,MAAAA,QAAQ,CAACK,OAAT,CAAiBO,GAAjB,GAAuBH,eAAOpB,KAAP,CAAvB;AACAW,MAAAA,QAAQ,CAACK,OAAT,CAAiBQ,WAAjB,GAA+B,CAA/B;AACAb,MAAAA,QAAQ,CAACK,OAAT,CAAiBS,IAAjB;AACD;AACF,GAbD;;AAeA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAoB;AACzCjB,IAAAA,QAAQ,CAACV,KAAK,GAAG2B,GAAT,CAAR;AACAvB,IAAAA,QAAQ,CAACuB,GAAD,CAAR;AACD,GAHD;;AAKA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAqB;AACxC,QAAIA,IAAI,KAAK,EAAb,EAAiB;AACf;AACD;;AACDzB,IAAAA,QAAQ,CAACyB,IAAD,CAAR;AACAA,IAAAA,IAAI,CAACC,KAAL,CAAW,EAAX,EAAeC,OAAf,CAAuB,UAACJ,GAAD,EAAMK,KAAN,EAAgB;AACrCC,MAAAA,UAAU,CAAC,YAAM;AACff,QAAAA,SAAS,CAACS,GAAD,CAAT;AACD,OAFS,EAEP,MAAMK,KAFC,CAAV;AAGD,KAJD;AAKD,GAVD;;AAYA,MAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,CAAD,EAAO;AAC3B,QAAMnC,KAAK,GAAGD,MAAM,CAACoC,CAAC,CAACC,aAAF,CAAgBpC,KAAjB,CAApB;AACAU,IAAAA,QAAQ,CAACV,KAAD,CAAR;AACD,GAHD;;AAKA,MAAMqC,SAAS,GAAG,SAAZA,SAAY,CAACF,CAAD,EAAY;AAC5B,QAAMnC,KAAK,GAAGD,MAAM,CAACoC,CAAC,CAACR,GAAH,CAApB;AACAC,IAAAA,YAAY,CAAC5B,KAAD,CAAZ;AACD,GAHD;;AAKA,MAAMsC,OAAO,GAAG,SAAVA,OAAU,CAACH,CAAD,EAAY;AAC1B,QAAMI,IAAI,GAAGJ,CAAC,CAACK,aAAF,CAAgBC,KAAhB,CAAsB,CAAtB,CAAb;AACAF,IAAAA,IAAI,CAACG,WAAL,CAAiB,UAACC,IAAD,EAAU;AACzB,UAAMC,aAAa,GAAG7C,MAAM,CAAC4C,IAAI,CAAC1C,OAAL,CAAa,UAAb,EAAyB,EAAzB,CAAD,CAA5B,CADyB,CACmC;;AAC5D,UAAI4B,IAAI,GAAGe,aAAX;;AACA,UAAIA,aAAa,CAACC,MAAd,GAAuB3C,gBAA3B,EAA6C;AAC3C2B,QAAAA,IAAI,GAAGe,aAAa,CAACE,KAAd,CAAoB,CAApB,EAAuB5C,gBAAvB,CAAP;AACD;;AACD0B,MAAAA,YAAY,CAACC,IAAD,CAAZ;;AACA,UAAIe,aAAa,CAACC,MAAd,GAAuB3C,gBAA3B,EAA6C;AAC3CQ,QAAAA,QAAQ,CAACV,KAAK,CAACC,OAAN,CAAc2C,aAAd,EAA6Bf,IAA7B,CAAD,CAAR;AACD;AACF,KAVD;AAWD,GAbD;;AAcA,sBACE;AACE,iBAAU,gBADZ;AAEE,IAAA,SAAS,EAAE,6BAAWkB,mBAAOC,IAAlB,EAAwB1C,SAAxB,sBACRyC,mBAAOE,OADC,EACS,CAAC1C,MADV;AAFb,kBAME;AAAK,IAAA,SAAS,EAAEwC,mBAAOG,QAAvB;AAAiC,IAAA,OAAO,EAAE7C;AAA1C,kBACE,gCAAC,wBAAD,OADF,CANF,eASE;AACE,IAAA,SAAS,EAAE,6BAAW0C,mBAAOI,SAAlB,sBAAgCJ,mBAAOE,OAAvC,EAAiD,CAAC1C,MAAlD;AADb,kBAGE;AACE,iBAAU,OADZ;AAEE,IAAA,SAAS,EAAEwC,mBAAOK,KAFpB;AAGE,IAAA,KAAK,EAAEpD,KAHT;AAIE,IAAA,QAAQ,EAAEkC,aAJZ;AAKE,IAAA,SAAS,EAAEG,SALb;AAME,IAAA,OAAO,EAAEC,OANX;AAOE,IAAA,SAAS,MAPX,CAOY;;AAPZ,IAHF,CATF,eAsBE;AACE,IAAA,SAAS,EAAE,6BAAWS,mBAAOM,eAAlB,sBACRN,mBAAOE,OADC,EACS,CAAC1C,MADV;AADb,kBAKE,gCAAC,mBAAD;AACE,IAAA,QAAQ,EAAC,QADX;AAEE,IAAA,SAAS,EAAEwC,mBAAOO,OAFpB;AAGE,IAAA,cAAc,EAAE5B;AAHlB,IALF,CAtBF,CADF;AAoCD,CAhHD","sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport classnames from 'classnames';\n\nimport CloseDialpadIcon from '../../../assets/images/CloseDialpad.svg';\nimport { audios } from '../../DialButton/audios';\nimport DialPad from '../../DialPad';\nimport { CallLogDialpadProps, DtmfValue } from './CallLogDialpad.interface';\nimport styles from './styles.scss';\n\nconst cleanRegex = /[^\\d*#]/g;\nconst filter = (value) => value.replace(cleanRegex, '');\n\nconst MAX_PASTE_LENGTH = 15;\n\nconst CallLogDialpad: FunctionComponent<CallLogDialpadProps> = ({\n  onChange,\n  onClose,\n  className,\n  isWide,\n}) => {\n  const [value, setValue] = React.useState('');\n  const audioRef = React.useRef<HTMLAudioElement>(null);\n  React.useEffect(() => {\n    if (typeof document !== 'undefined' && document.createElement) {\n      audioRef.current = document.createElement('audio');\n    }\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.remove();\n        audioRef.current = null;\n      }\n    };\n  }, []);\n\n  const playAudio = (value: DtmfValue) => {\n    if (\n      audioRef.current &&\n      audioRef.current.canPlayType('audio/ogg') !== '' &&\n      audios[value]\n    ) {\n      if (!audioRef.current.paused) {\n        audioRef.current.pause();\n      }\n      audioRef.current.src = audios[value];\n      audioRef.current.currentTime = 0;\n      audioRef.current.play();\n    }\n  };\n\n  const onButtonOutput = (key: DtmfValue) => {\n    setValue(value + key);\n    onChange(key);\n  };\n\n  const sendDTMFKeys = (keys: DtmfValue) => {\n    if (keys === '') {\n      return;\n    }\n    onChange(keys);\n    keys.split('').forEach((key, index) => {\n      setTimeout(() => {\n        playAudio(key);\n      }, 100 * index);\n    });\n  };\n\n  const onInputChange = (e) => {\n    const value = filter(e.currentTarget.value);\n    setValue(value);\n  };\n\n  const onKeyDown = (e: any) => {\n    const value = filter(e.key);\n    sendDTMFKeys(value);\n  };\n\n  const onPaste = (e: any) => {\n    const item = e.clipboardData.items[0];\n    item.getAsString((data) => {\n      const filteredValue = filter(data.replace(/<[^>]*>/g, '')); // remove HTML tag in firefox\n      let keys = filteredValue;\n      if (filteredValue.length > MAX_PASTE_LENGTH) {\n        keys = filteredValue.slice(0, MAX_PASTE_LENGTH);\n      }\n      sendDTMFKeys(keys);\n      if (filteredValue.length > MAX_PASTE_LENGTH) {\n        setValue(value.replace(filteredValue, keys));\n      }\n    });\n  };\n  return (\n    <div\n      data-sign=\"callLogDialPad\"\n      className={classnames(styles.root, className, {\n        [styles.classic]: !isWide,\n      })}\n    >\n      <div className={styles.closeBtn} onClick={onClose}>\n        <CloseDialpadIcon />\n      </div>\n      <div\n        className={classnames(styles.dialInput, { [styles.classic]: !isWide })}\n      >\n        <input\n          data-sign=\"input\"\n          className={styles.input}\n          value={value}\n          onChange={onInputChange}\n          onKeyDown={onKeyDown}\n          onPaste={onPaste}\n          autoFocus // eslint-disable-line\n        />\n      </div>\n      <div\n        className={classnames(styles.keypadContainer, {\n          [styles.classic]: !isWide,\n        })}\n      >\n        <DialPad\n          dataSign=\"keypad\"\n          className={styles.dialPad}\n          onButtonOutput={onButtonOutput}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { CallLogDialpad };\n"],"file":"CallLogDialpad.js"}