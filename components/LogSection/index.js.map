{"version":3,"file":"index.js","names":["_callLogHelpers","require","_juno","_react","_interopRequireWildcard","_rxjs","_LogBasicInfo","_interopRequireDefault","_SpinnerOverlay","_SaveButton","_i18n","_styles","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_arrayLikeToArray","toString","slice","constructor","name","Array","from","test","length","l","Symbol","iterator","f","o","next","done","push","value","isArray","LogSection","_ref","isInnerMask","_ref$currentLog","currentLog","_ref$onLogBasicInfoCl","onLogBasicInfoClick","noop","_ref$renderSmallCallC","renderSmallCallContrl","_ref$showSaveLogBtn","showSaveLogBtn","renderSaveLogButton","currentLocale","formatPhone","onSaveCallLog","_ref$showSmallCallCon","showSmallCallControl","renderEditLogSection","onUpdateCallLog","additionalInfo","onCallLogSaved","scrollRef","useRef","showSpinner","_useState","useState","_useState2","mainCtrlOverlapped","setMainCtrlOverlapped","checkOverlap","_ref2","target","scrollHeight","clientHeight","scrollTop","overlappedHeight","beOverlapped","useEventListener","window","getEditLogSection","genSaveLogButton","currentLogCall","overlapped","createElement","SaveButton","isSaving","onClick","i18n","getString","renderLogBasicInfo","currentSessionId","telephonyStatus","result","status","isActive","clickable","isRingingInboundCall","extraButton","dataSign","className","styles","root","SpinnerOverlay","spinner","ref","editSection","innerMask","_default","exports"],"sources":["components/LogSection/index.tsx"],"sourcesContent":["import { isRingingInboundCall } from '@ringcentral-integration/commons/lib/callLogHelpers';\nimport { useEventListener } from '@ringcentral/juno';\nimport React, { useRef, useState } from 'react';\nimport { noop } from 'rxjs';\n\nimport LogBasicInfo from '../LogBasicInfo';\nimport { SpinnerOverlay } from '../SpinnerOverlay';\n\nimport { SaveButton } from './SaveButton';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\ntype LogSectionProps = {\n  currentLog?: any;\n  additionalInfo?: object;\n  currentLocale: string;\n  formatPhone?: (...args: any[]) => any;\n  onUpdateCallLog?: (...args: any[]) => any;\n  onSaveCallLog?: (...args: any[]) => any;\n  renderEditLogSection?: (...args: any[]) => any;\n  renderSaveLogButton?: (...args: any[]) => any;\n  isInnerMask?: boolean;\n  onLogBasicInfoClick?: (...args: any[]) => any;\n  showSaveLogBtn?: boolean;\n  showSmallCallControl?: boolean;\n  renderSmallCallContrl?: (...args: any[]) => any;\n  onCallLogSaved?: (...args: any[]) => any;\n};\n\nconst LogSection: React.FC<LogSectionProps> = ({\n  isInnerMask,\n  currentLog = {},\n  onLogBasicInfoClick = noop,\n  renderSmallCallContrl = noop,\n  showSaveLogBtn = true,\n  renderSaveLogButton,\n  currentLocale,\n  formatPhone,\n  onSaveCallLog,\n  showSmallCallControl = true,\n  renderEditLogSection,\n  onUpdateCallLog,\n  additionalInfo,\n  onCallLogSaved,\n}) => {\n  const scrollRef = useRef(null);\n\n  const { showSpinner } = currentLog;\n  const [mainCtrlOverlapped, setMainCtrlOverlapped] = useState(false);\n\n  const checkOverlap = (e: Event): void => {\n    const { scrollHeight, clientHeight, scrollTop } =\n      e.target as HTMLDivElement;\n    const overlappedHeight = scrollHeight - clientHeight - scrollTop;\n    const beOverlapped = overlappedHeight > 1;\n\n    if (beOverlapped !== mainCtrlOverlapped) {\n      setMainCtrlOverlapped(beOverlapped);\n    }\n  };\n\n  useEventListener(window, 'resize', checkOverlap);\n  useEventListener(scrollRef, 'scroll', checkOverlap);\n\n  const getEditLogSection = () => {\n    return renderEditLogSection?.({\n      currentLocale,\n      onSaveCallLog,\n      onUpdateCallLog,\n      currentLog,\n      additionalInfo,\n      onCallLogSaved,\n    });\n  };\n\n  const genSaveLogButton = () => {\n    const { call, currentLogCall } = currentLog;\n    if (!showSaveLogBtn) {\n      return null;\n    }\n    if (renderSaveLogButton) {\n      return renderSaveLogButton({\n        currentLocale,\n        onSaveCallLog,\n        currentLog,\n        overlapped: mainCtrlOverlapped,\n      });\n    }\n\n    return (\n      <SaveButton\n        isSaving={currentLogCall.isSaving}\n        onClick={() => onSaveCallLog?.(call)}\n        overlapped={mainCtrlOverlapped}\n      >\n        {i18n.getString('saveLog', currentLocale)}\n      </SaveButton>\n    );\n  };\n\n  const renderLogBasicInfo = () => {\n    const { currentSessionId, call } = currentLog;\n    const { telephonyStatus, result } = call;\n    const status = telephonyStatus || result;\n    const isActive = !result;\n    const clickable = isActive && !isRingingInboundCall(call);\n    let extraButton;\n    if (showSmallCallControl && isActive) {\n      extraButton = renderSmallCallContrl(status, currentSessionId);\n    }\n    return (\n      <LogBasicInfo\n        dataSign=\"leftSectionInfo\"\n        currentLog={currentLog}\n        currentLocale={currentLocale}\n        formatPhone={formatPhone}\n        extraButton={extraButton}\n        clickable={clickable}\n        onClick={\n          clickable\n            ? onLogBasicInfoClick\n            : () => {\n                //\n              }\n        }\n      />\n    );\n  };\n\n  return (\n    <div className={styles.root}>\n      {showSpinner ? <SpinnerOverlay className={styles.spinner} /> : null}\n      {renderLogBasicInfo()}\n      <div ref={scrollRef} className={styles.editSection}>\n        {getEditLogSection()}\n      </div>\n      {genSaveLogButton()}\n      {isInnerMask ? <div className={styles.innerMask} /> : null}\n    </div>\n  );\n};\n\nexport default LogSection;\n"],"mappings":"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","ignoreList":[]}