{"version":3,"sources":["components/FormattedMessage/index.ts"],"names":["FormattedMessage","props","message","values","tagName","uid","Math","floor","random","toString","hashedParams","elements","tokenDelimeter","Object","keys","forEach","key","nodes","split","filter","token","map","createElement","Component","propTypes","PropTypes","string","isRequired","object","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,gB;;;;;;;;;;;;;6BACV;AAAA,wBAC8B,KAAKC,KADnC;AAAA,UACCC,OADD,eACCA,OADD;AAAA,UACUC,MADV,eACUA,MADV;AAAA,UACkBC,OADlB,eACkBA,OADlB;AAGP,UAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,aAA3B,EAA0CC,QAA1C,CAAmD,EAAnD,CAAZ;AACA,UAAMC,YAAY,GAAG,EAArB;AACA,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAMC,cAAc,gBAASP,GAAT,QAApB;AAEAQ,MAAAA,MAAM,CAACC,IAAP,CAAYX,MAAZ,EAAoBY,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnC,0BAAI,2BAAeb,MAAM,CAACa,GAAD,CAArB,CAAJ,EAAiC;AAC/BN,UAAAA,YAAY,CAACM,GAAD,CAAZ,aAAuBJ,cAAvB,SAAwCI,GAAxC,SAA8CJ,cAA9C;AACAD,UAAAA,QAAQ,CAACK,GAAD,CAAR,GAAgBb,MAAM,CAACa,GAAD,CAAtB;AACD,SAHD,MAGO;AACLN,UAAAA,YAAY,CAACM,GAAD,CAAZ,GAAoBb,MAAM,CAACa,GAAD,CAA1B;AACD;AACF,OAPD;AASA,UAAMC,KAAK,GAAG,+BAAOf,OAAP,EAAgBQ,YAAhB,EACXQ,KADW,CACLN,cADK,EAEXO,MAFW,CAEJ,UAACC,KAAD;AAAA,eAAW,CAAC,CAACA,KAAb;AAAA,OAFI,EAGXC,GAHW,CAGP,UAACD,KAAD;AAAA,eAAWT,QAAQ,CAACS,KAAD,CAAR,IAAmBA,KAA9B;AAAA,OAHO,CAAd;AAIA,0BAAOE,oCAAclB,OAAd,EAAuB,IAAvB,4BAAgCa,KAAhC,GAAP;AACD;;;;EAvB2CM,gB;;;AA0B9CvB,gBAAgB,CAACwB,SAAjB,GAA6B;AAC3BtB,EAAAA,OAAO,EAAEuB,sBAAUC,MAAV,CAAiBC,UADC;AAE3BxB,EAAAA,MAAM,EAAEsB,sBAAUG,MAFS;AAG3BxB,EAAAA,OAAO,EAAEqB,sBAAUC;AAHQ,CAA7B;AAKA1B,gBAAgB,CAAC6B,YAAjB,GAAgC;AAC9B1B,EAAAA,MAAM,EAAE,EADsB;AAE9BC,EAAAA,OAAO,EAAE;AAFqB,CAAhC","sourcesContent":["import { Component, createElement, isValidElement } from 'react';\n\nimport format from 'format-message';\nimport PropTypes from 'prop-types';\n\nexport default class FormattedMessage extends Component {\n  render() {\n    const { message, values, tagName } = this.props;\n\n    const uid = Math.floor(Math.random() * 0x10000000000).toString(16);\n    const hashedParams = {};\n    const elements = {};\n    const tokenDelimeter = `@__${uid}__@`;\n\n    Object.keys(values).forEach((key) => {\n      if (isValidElement(values[key])) {\n        hashedParams[key] = `${tokenDelimeter}${key}${tokenDelimeter}`;\n        elements[key] = values[key];\n      } else {\n        hashedParams[key] = values[key];\n      }\n    });\n\n    const nodes = format(message, hashedParams)\n      .split(tokenDelimeter)\n      .filter((token) => !!token)\n      .map((token) => elements[token] || token);\n    return createElement(tagName, null, ...nodes);\n  }\n}\n\nFormattedMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  values: PropTypes.object,\n  tagName: PropTypes.string,\n};\nFormattedMessage.defaultProps = {\n  values: {},\n  tagName: 'span',\n};\n"],"file":"index.js"}