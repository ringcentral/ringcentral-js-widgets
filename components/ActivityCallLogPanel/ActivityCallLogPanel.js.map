{"version":3,"sources":["components/ActivityCallLogPanel/ActivityCallLogPanel.tsx"],"names":["ActivityCallLogPanel","currentLocale","currentLog","basicInfo","isInbound","disposeCall","status","saveStatus","goToRequeueCallPage","goToTransferCallPage","onMute","onUnmute","onHangup","onReject","onHold","onUnHold","isOnMute","isOnHold","smallCallControlSize","isInComingCall","currentCallControlPermission","allowTransferCall","allowRequeueCall","disableDispose","disableTransfer","disableInternalTransfer","disableHold","disableHangup","disableMute","disableActive","isOnActive","onActive","isWide","showMuteButton","ivrAlertData","agentScriptData","onCopySuccess","scrollTo","referenceFieldOptions","showRecordCall","recordPauseCount","disableRecordControl","isRecording","onResumeRecord","timeStamp","onRecord","onPauseRecord","onRestartTimer","onStopRecord","disablePauseRecord","isKeypadOpen","keypadValue","setKeypadIsOpen","setKeypadValue","rest","transferRef","rootRef","transferEl","setTransferRef","isActivity","isCallEnd","isLoading","onTransfer","current","handleTransferClose","callControlRef","editLogSection","props","editSectionRef","root","styles","callLogCallControl","noneShadow","smallCallControlRoot","subject","followInfos","callInfos","panel","length","i18n","getString","Transcription","onClick","isOnTransfer","Boolean","paper","transferTypes","internal","phoneBook","manualEntry","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAGA;;AACA;;AAEA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AASO,IAAMA,oBAAkE,GAC7E,SADWA,oBACX,OAqDM;AAAA,MApDJC,aAoDI,QApDJA,aAoDI;AAAA,MAnDJC,UAmDI,QAnDJA,UAmDI;AAAA,MAlDJC,SAkDI,QAlDJA,SAkDI;AAAA,MAjDJC,SAiDI,QAjDJA,SAiDI;AAAA,MAhDJC,WAgDI,QAhDJA,WAgDI;AAAA,MA/CJC,MA+CI,QA/CJA,MA+CI;AAAA,MA9CJC,UA8CI,QA9CJA,UA8CI;AAAA,MA7CJC,mBA6CI,QA7CJA,mBA6CI;AAAA,MA5CJC,oBA4CI,QA5CJA,oBA4CI;AAAA,MA3CJC,MA2CI,QA3CJA,MA2CI;AAAA,MA1CJC,QA0CI,QA1CJA,QA0CI;AAAA,MAzCJC,QAyCI,QAzCJA,QAyCI;AAAA,MAxCJC,QAwCI,QAxCJA,QAwCI;AAAA,MAvCJC,MAuCI,QAvCJA,MAuCI;AAAA,MAtCJC,QAsCI,QAtCJA,QAsCI;AAAA,MArCJC,QAqCI,QArCJA,QAqCI;AAAA,MApCJC,QAoCI,QApCJA,QAoCI;AAAA,MAnCJC,oBAmCI,QAnCJA,oBAmCI;AAAA,MAlCJC,cAkCI,QAlCJA,cAkCI;AAAA,mCAjCJC,4BAiCI;AAAA,MAjC4BC,iBAiC5B,yBAjC4BA,iBAiC5B;AAAA,MAjC+CC,gBAiC/C,yBAjC+CA,gBAiC/C;AAAA,MAhCJC,cAgCI,QAhCJA,cAgCI;AAAA,MA/BJC,eA+BI,QA/BJA,eA+BI;AAAA,MA9BJC,uBA8BI,QA9BJA,uBA8BI;AAAA,MA7BJC,WA6BI,QA7BJA,WA6BI;AAAA,MA5BJC,aA4BI,QA5BJA,aA4BI;AAAA,MA3BJC,WA2BI,QA3BJA,WA2BI;AAAA,MA1BJC,aA0BI,QA1BJA,aA0BI;AAAA,MAzBJC,UAyBI,QAzBJA,UAyBI;AAAA,MAxBJC,QAwBI,QAxBJA,QAwBI;AAAA,MAvBJC,MAuBI,QAvBJA,MAuBI;AAAA,MAtBJC,cAsBI,QAtBJA,cAsBI;AAAA,MArBJC,YAqBI,QArBJA,YAqBI;AAAA,MApBJC,eAoBI,QApBJA,eAoBI;AAAA,MAnBJC,aAmBI,QAnBJA,aAmBI;AAAA,MAlBJC,QAkBI,QAlBJA,QAkBI;AAAA,MAjBJC,qBAiBI,QAjBJA,qBAiBI;AAAA,MAhBJC,cAgBI,QAhBJA,cAgBI;AAAA,MAfJC,gBAeI,QAfJA,gBAeI;AAAA,MAdJC,oBAcI,QAdJA,oBAcI;AAAA,MAbJC,WAaI,QAbJA,WAaI;AAAA,MAZJC,cAYI,QAZJA,cAYI;AAAA,MAXJC,SAWI,QAXJA,SAWI;AAAA,MAVJC,QAUI,QAVJA,QAUI;AAAA,MATJC,aASI,QATJA,aASI;AAAA,MARJC,cAQI,QARJA,cAQI;AAAA,MAPJC,YAOI,QAPJA,YAOI;AAAA,MANJC,kBAMI,QANJA,kBAMI;AAAA,MALJC,YAKI,QALJA,YAKI;AAAA,MAJJC,WAII,QAJJA,WAII;AAAA,MAHJC,eAGI,QAHJA,eAGI;AAAA,MAFJC,cAEI,QAFJA,cAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,WAAW,GAAG,mBAAO,IAAP,CAApB;AACA,MAAMC,OAAO,GAAG,mBAAqB,IAArB,CAAhB;;AAFI,kBAGiC,qBAAS,IAAT,CAHjC;AAAA;AAAA,MAGGC,UAHH;AAAA,MAGeC,cAHf;;AAIJ,MAAMC,UAAU,GAAGrD,MAAM,KAAK,QAA9B;AACA,MAAMsD,SAAS,GAAGtD,MAAM,KAAK,SAA7B;AACA,MAAMuD,SAAS,GAAGtD,UAAU,KAAK,QAAjC;;AAEA,MAAMuD,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBJ,IAAAA,cAAc,CAACH,WAAW,CAACQ,OAAb,CAAd;AACD,GAFD;;AAIA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChCN,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAIA,MAAMO,cAAc,GAAG,mBAAoB,IAApB,CAAvB;AAEA,MAAMC,cAAc,GAAG,wBACrB,UAACC,KAAD;AAAA;;AAAA,wBACE,gCAAC,qBAAD;AACE,MAAA,MAAM,EAAEnC;AADV,OAEMmC,KAFN;AAGE,MAAA,QAAQ,EAAE9B,QAHZ;AAIE,MAAA,OAAO,sBAAEmB,OAAO,CAACO,OAAV,qDAAE,iBAAiBK,cAJ5B;AAKE,MAAA,qBAAqB,EAAE9B;AALzB,OADF;AAAA,GADqB,EAUrB,CAACN,MAAD,EAASK,QAAT,EAAmBC,qBAAnB,CAVqB,CAAvB;AAaA,sBACE,gCAAC,wBAAD;AACE,IAAA,GAAG,EAAEkB;AADP,KAEMF,IAFN;AAGE,IAAA,UAAU,EAAEpD,UAHd;AAIE,IAAA,aAAa,EAAED,aAJjB;AAKE,IAAA,OAAO,EAAE;AACPoE,MAAAA,IAAI,EAAEC,mBAAOD,IADN;AAEPE,MAAAA,kBAAkB,EAAE,4BAClBD,mBAAOC,kBADW,EAElBX,SAAS,GAAGU,mBAAOE,UAAV,GAAuBF,mBAAOG,oBAFrB;AAFb,KALX;AAYE,IAAA,IAAI,EAAE;AACJJ,MAAAA,IAAI,EAAEb,OADF;AAEJe,MAAAA,kBAAkB,EAAEN;AAFhB,KAZR;AAgBE,IAAA,MAAM,EAAEjC,MAhBV;AAiBE,IAAA,MAAM,EAAE,KAjBV;AAkBE,IAAA,WAAW,EAAE,KAlBf;AAmBE,IAAA,gBAAgB,EAAE,KAnBpB,CAoBE;AApBF;AAqBE,IAAA,eAAe,EAAC,KArBlB;AAsBE,IAAA,oBAAoB,EAAEkC,cAtBxB;AAuBE,IAAA,eAAe,EAAE,2BAAM;AACrB,0BACE,+EACE,gCAAC,4BAAD;AACE,QAAA,MAAM,EAAE5D,MADV;AAEE,QAAA,aAAa,EAAEL,aAFjB;AAGE,QAAA,SAAS,EAAEG,SAHb;AAIE,QAAA,SAAS,EAAEuD,UAJb;AAKE,QAAA,OAAO,EAAExD,SAAS,CAACuE,OALrB;AAME,QAAA,WAAW,EAAEvE,SAAS,CAACwE,WANzB;AAOE,QAAA,SAAS,EAAExE,SAAS,CAACyE,SAPvB;AAQE,QAAA,cAAc,EAAEX,cARlB;AASE,QAAA,aAAa,EAAE7B,aATjB;AAUE,QAAA,OAAO,EAAE;AACPyC,UAAAA,KAAK,EAAEjB,SAAS,IAAIU,mBAAOE;AADpB;AAVX,QADF,EAeG,CAAAtC,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAE4C,MAAd,IAAuB,CAAvB,iBACC,gCAAC,gBAAD;AACE,QAAA,SAAS,EAAElB,SADb;AAEE,QAAA,YAAY,EAAE1B,YAFhB;AAGE,QAAA,eAAe,EAAEC;AAHnB,QAhBJ,EAsBGA,eAAe,iBACd,gCAAC,6CAAD;AACE,QAAA,KAAK,EAAE4C,iBAAKC,SAAL,CAAe,cAAf,EAA+B/E,aAA/B,CADT;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,OAAO,EAAC,WAHV;AAIE,QAAA,KAAK,EAAC,aAJR;AAKE,QAAA,MAAM,EAAEgF,mBALV;AAME,QAAA,OAAO,EAAE9C,eAAe,CAAC+C;AAN3B,QAvBJ,CADF;AAmCD,KA3DH;AA4DE,IAAA,iBAAiB,EAAE,6BAAM;AACvB,aACE,CAACtB,SAAD,iBACE,+EACE,gCAAC,8BAAD;AACE,QAAA,YAAY,EAAEV,YADhB;AAEE,QAAA,aAAa,EAAEjD,aAFjB;AAGE,QAAA,eAAe,EAAEmD,eAHnB;AAIE,QAAA,WAAW,EAAED,WAJf;AAKE,QAAA,cAAc,EAAEE;AALlB,QADF,CAFJ;AAaD,KA1EH;AA2EE,IAAA,wBAAwB,EAAE,oCAAM;AAC9B,UAAM8B,YAAY,GAAGC,OAAO,CAAC3B,UAAD,CAA5B;AACA,aACE,CAACG,SAAD,iBACE,+EACE,gCAAC,YAAD;AACE,QAAA,OAAO,EAAE;AAAEyB,UAAAA,KAAK,EAAEf,mBAAOe;AAAhB,SADX;AAEE,QAAA,QAAQ,EAAE5B,UAFZ;AAGE,QAAA,IAAI,EAAE0B,YAHR;AAIE,QAAA,OAAO,EAAEnB,mBAJX;AAKE,qBAAU;AALZ,sBAOE,gCAAC,gBAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBAAMvD,oBAAoB,CAAC6E,qBAAcC,QAAf,CAA1B;AAAA,SADX;AAEE,QAAA,QAAQ,EAAE,CAAClE,iBAAD,IAAsBI,uBAFlC;AAGE,qBAAU;AAHZ,SAKGsD,iBAAKC,SAAL,CAAe,kBAAf,EAAmC/E,aAAnC,CALH,CAPF,eAcE,gCAAC,gBAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBACPQ,oBAAoB,CAAC6E,qBAAcE,SAAf,CADb;AAAA,SADX;AAIE,QAAA,QAAQ,EAAE,CAACnE,iBAJb;AAKE,qBAAU;AALZ,SAOG0D,iBAAKC,SAAL,CAAe,mBAAf,EAAoC/E,aAApC,CAPH,CAdF,eAuBE,gCAAC,gBAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBAAMO,mBAAmB,EAAzB;AAAA,SADX;AAEE,QAAA,QAAQ,EAAE,CAACc,gBAFb;AAGE,qBAAU;AAHZ,SAKGyD,iBAAKC,SAAL,CAAe,eAAf,EAAgC/E,aAAhC,CALH,CAvBF,eA8BE,gCAAC,gBAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBACPQ,oBAAoB,CAAC6E,qBAAcG,WAAf,CADb;AAAA,SADX;AAIE,QAAA,QAAQ,EAAE,CAACpE,iBAJb;AAKE,qBAAU;AALZ,SAOG0D,iBAAKC,SAAL,CAAe,cAAf,EAA+B/E,aAA/B,CAPH,CA9BF,CADF,eAyCE,gCAAC,sCAAD;AACE,QAAA,MAAM,EAAES,MADV;AAEE,QAAA,QAAQ,EAAEC,QAFZ;AAGE,QAAA,QAAQ,EAAEC,QAHZ;AAIE,QAAA,QAAQ,EAAEC,QAJZ;AAKE,QAAA,MAAM,EAAEC,MALV;AAME,QAAA,UAAU,EAAEgD,UANd;AAOE,QAAA,QAAQ,EAAE/C,QAPZ;AAQE,QAAA,QAAQ,EAAEgB,QARZ;AASE,QAAA,QAAQ,EAAEf,QATZ;AAUE,QAAA,aAAa,EAAEf,aAVjB;AAWE,QAAA,YAAY,EAAE6B,UAAU,IAAIqD,YAX9B;AAYE,QAAA,QAAQ,EAAElE,QAZZ;AAaE,QAAA,WAAW,EAAEsC,WAbf;AAcE,QAAA,IAAI,EAAErC,oBAdR;AAeE,QAAA,cAAc,EAAEC,cAflB;AAgBE,QAAA,eAAe,EAAEK,eAhBnB;AAiBE,QAAA,WAAW,EAAEE,WAjBf;AAkBE,QAAA,aAAa,EAAEC,aAlBjB;AAmBE,QAAA,WAAW,EAAEC,WAnBf;AAoBE,QAAA,aAAa,EAAEC,aApBjB;AAqBE,QAAA,UAAU,EAAEC,UArBd;AAsBE,QAAA,cAAc,EAAEG,cAtBlB;AAuBE,QAAA,cAAc,EAAEM,cAvBlB;AAwBE,QAAA,gBAAgB,EAAEC,gBAxBpB;AAyBE,QAAA,oBAAoB,EAAEC,oBAzBxB;AA0BE,QAAA,kBAAkB,EAAEQ,kBA1BtB;AA2BE,QAAA,WAAW,EAAEP,WA3Bf;AA4BE,QAAA,cAAc,EAAEC,cA5BlB;AA6BE,QAAA,QAAQ,EAAEE,QA7BZ;AA8BE,QAAA,aAAa,EAAEC,aA9BjB;AA+BE,QAAA,cAAc,EAAEC,cA/BlB;AAgCE,QAAA,YAAY,EAAEC,YAhChB;AAiCE,QAAA,SAAS,EAAEJ;AAjCb,QAzCF,CAFJ;AAiFD;AA9JH,MAgKGgB,SAAS,iBACR,gCAAC,2CAAD,qBACE,gCAAC,cAAD;AACE,iBAAU,QADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,QAAQ,EAAErC,cAJZ;AAKE,IAAA,OAAO,EAAEsC,SALX;AAME,IAAA,OAAO,EAAE;AAAA,aAAMxD,WAAW,EAAjB;AAAA;AANX,KAQG,0BAAcE,UAAd,EAA0BN,aAA1B,CARH,CADF,CAjKJ,CADF;AAiLD,CAtQI;;;AAwQPD,oBAAoB,CAAC0F,YAArB,GAAoC;AAClCvF,EAAAA,SAAS,EAAE;AADuB,CAApC","sourcesContent":["import React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport classNames from 'classnames';\n\nimport { BasicCallInfo } from '@ringcentral-integration/widgets/components/BasicCallInfo';\nimport CallLogPanel, {\n  CallLogPanelProps,\n} from '@ringcentral-integration/widgets/components/CallLogPanel';\nimport { RcButton, RcIconButton, RcMenu, RcMenuItem } from '@ringcentral/juno';\nimport { Transcription } from '@ringcentral/juno/icon';\n\nimport { transferTypes } from '../../enums';\nimport {\n  EvActivityCallUIFunctions,\n  EvActivityCallUIProps,\n} from '../../interfaces/EvActivityCallUI.interface';\nimport { EvSmallCallControl } from '../EvSmallCallControl';\nimport i18n from './i18n';\nimport { IvrInfo } from './IvrInfo';\nimport { KeypadCollapse } from './KeypadCollapse';\nimport styles from './styles.scss';\nimport { EditLogSection, getButtonText } from './utils';\nimport {\n  StyledAgentScriptIcon,\n  SubmitButtonWrapper,\n} from './ActivityCallLogWrapper';\n\nexport type ActivityCallLogPanelProps = EvActivityCallUIProps &\n  EvActivityCallUIFunctions &\n  Pick<CallLogPanelProps, 'startAdornmentRender'>;\n\nexport const ActivityCallLogPanel: FunctionComponent<ActivityCallLogPanelProps> =\n  ({\n    currentLocale,\n    currentLog,\n    basicInfo,\n    isInbound,\n    disposeCall,\n    status,\n    saveStatus,\n    goToRequeueCallPage,\n    goToTransferCallPage,\n    onMute,\n    onUnmute,\n    onHangup,\n    onReject,\n    onHold,\n    onUnHold,\n    isOnMute,\n    isOnHold,\n    smallCallControlSize,\n    isInComingCall,\n    currentCallControlPermission: { allowTransferCall, allowRequeueCall },\n    disableDispose,\n    disableTransfer,\n    disableInternalTransfer,\n    disableHold,\n    disableHangup,\n    disableMute,\n    disableActive,\n    isOnActive,\n    onActive,\n    isWide,\n    showMuteButton,\n    ivrAlertData,\n    agentScriptData,\n    onCopySuccess,\n    scrollTo,\n    referenceFieldOptions,\n    showRecordCall,\n    recordPauseCount,\n    disableRecordControl,\n    isRecording,\n    onResumeRecord,\n    timeStamp,\n    onRecord,\n    onPauseRecord,\n    onRestartTimer,\n    onStopRecord,\n    disablePauseRecord,\n    isKeypadOpen,\n    keypadValue,\n    setKeypadIsOpen,\n    setKeypadValue,\n    ...rest\n  }) => {\n    const transferRef = useRef(null);\n    const rootRef = useRef<CallLogPanel>(null);\n    const [transferEl, setTransferRef] = useState(null);\n    const isActivity = status === 'active';\n    const isCallEnd = status === 'callEnd';\n    const isLoading = saveStatus === 'saving';\n\n    const onTransfer = () => {\n      setTransferRef(transferRef.current);\n    };\n\n    const handleTransferClose = () => {\n      setTransferRef(null);\n    };\n\n    const callControlRef = useRef<HTMLElement>(null);\n\n    const editLogSection = useCallback(\n      (props) => (\n        <EditLogSection\n          isWide={isWide}\n          {...props}\n          scrollTo={scrollTo}\n          rootRef={rootRef.current?.editSectionRef}\n          referenceFieldOptions={referenceFieldOptions}\n        />\n      ),\n      [isWide, scrollTo, referenceFieldOptions],\n    );\n\n    return (\n      <CallLogPanel\n        ref={rootRef}\n        {...rest}\n        currentLog={currentLog}\n        currentLocale={currentLocale}\n        classes={{\n          root: styles.root,\n          callLogCallControl: classNames(\n            styles.callLogCallControl,\n            isCallEnd ? styles.noneShadow : styles.smallCallControlRoot,\n          ),\n        }}\n        refs={{\n          root: rootRef,\n          callLogCallControl: callControlRef,\n        }}\n        isWide={isWide}\n        header={false}\n        showSpinner={false}\n        isInTransferPage={false}\n        // TODO: that need refactor CallLogPanel and then can remove that\n        currentIdentify=\"123\"\n        renderEditLogSection={editLogSection}\n        renderBasicInfo={() => {\n          return (\n            <>\n              <BasicCallInfo\n                status={status}\n                currentLocale={currentLocale}\n                isInbound={isInbound}\n                isRinging={isActivity}\n                subject={basicInfo.subject}\n                followInfos={basicInfo.followInfos}\n                callInfos={basicInfo.callInfos}\n                callControlRef={callControlRef}\n                onCopySuccess={onCopySuccess}\n                classes={{\n                  panel: isCallEnd && styles.noneShadow,\n                }}\n              />\n              {ivrAlertData?.length > 0 && (\n                <IvrInfo\n                  isCallEnd={isCallEnd}\n                  ivrAlertData={ivrAlertData}\n                  agentScriptData={agentScriptData}\n                />\n              )}\n              {agentScriptData && (\n                <StyledAgentScriptIcon\n                  title={i18n.getString('engageScript', currentLocale)}\n                  size=\"medium\"\n                  variant=\"contained\"\n                  color=\"neutral.f01\"\n                  symbol={Transcription}\n                  onClick={agentScriptData.onClick}\n                />\n              )}\n            </>\n          );\n        }}\n        renderKeypadPanel={() => {\n          return (\n            !isCallEnd && (\n              <>\n                <KeypadCollapse\n                  isKeypadOpen={isKeypadOpen}\n                  currentLocale={currentLocale}\n                  setKeypadIsOpen={setKeypadIsOpen}\n                  keypadValue={keypadValue}\n                  setKeypadValue={setKeypadValue}\n                />\n              </>\n            )\n          );\n        }}\n        renderCallLogCallControl={() => {\n          const isOnTransfer = Boolean(transferEl);\n          return (\n            !isCallEnd && (\n              <>\n                <RcMenu\n                  classes={{ paper: styles.paper }}\n                  anchorEl={transferEl}\n                  open={isOnTransfer}\n                  onClose={handleTransferClose}\n                  data-sign=\"transferMenu\"\n                >\n                  <RcMenuItem\n                    onClick={() => goToTransferCallPage(transferTypes.internal)}\n                    disabled={!allowTransferCall || disableInternalTransfer}\n                    data-sign=\"transferItem-internalTransfer\"\n                  >\n                    {i18n.getString('internalTransfer', currentLocale)}\n                  </RcMenuItem>\n                  <RcMenuItem\n                    onClick={() =>\n                      goToTransferCallPage(transferTypes.phoneBook)\n                    }\n                    disabled={!allowTransferCall}\n                    data-sign=\"transferItem-phoneBookTransfer\"\n                  >\n                    {i18n.getString('phoneBookTransfer', currentLocale)}\n                  </RcMenuItem>\n                  <RcMenuItem\n                    onClick={() => goToRequeueCallPage()}\n                    disabled={!allowRequeueCall}\n                    data-sign=\"transferItem-queueTransfer\"\n                  >\n                    {i18n.getString('queueTransfer', currentLocale)}\n                  </RcMenuItem>\n                  <RcMenuItem\n                    onClick={() =>\n                      goToTransferCallPage(transferTypes.manualEntry)\n                    }\n                    disabled={!allowTransferCall}\n                    data-sign=\"transferItem-enterANumber\"\n                  >\n                    {i18n.getString('enterANumber', currentLocale)}\n                  </RcMenuItem>\n                </RcMenu>\n                <EvSmallCallControl\n                  onMute={onMute}\n                  onUnmute={onUnmute}\n                  onHangup={onHangup}\n                  onReject={onReject}\n                  onHold={onHold}\n                  onTransfer={onTransfer}\n                  onUnHold={onUnHold}\n                  onActive={onActive}\n                  isOnMute={isOnMute}\n                  currentLocale={currentLocale}\n                  isOnTransfer={isOnActive || isOnTransfer}\n                  isOnHold={isOnHold}\n                  transferRef={transferRef}\n                  size={smallCallControlSize}\n                  isInComingCall={isInComingCall}\n                  disableTransfer={disableTransfer}\n                  disableHold={disableHold}\n                  disableHangup={disableHangup}\n                  disableMute={disableMute}\n                  disableActive={disableActive}\n                  isOnActive={isOnActive}\n                  showMuteButton={showMuteButton}\n                  showRecordCall={showRecordCall}\n                  recordPauseCount={recordPauseCount}\n                  disableRecordControl={disableRecordControl}\n                  disablePauseRecord={disablePauseRecord}\n                  isRecording={isRecording}\n                  onResumeRecord={onResumeRecord}\n                  onRecord={onRecord}\n                  onPauseRecord={onPauseRecord}\n                  onRestartTimer={onRestartTimer}\n                  onStopRecord={onStopRecord}\n                  timeStamp={timeStamp}\n                />\n              </>\n            )\n          );\n        }}\n      >\n        {isCallEnd && (\n          <SubmitButtonWrapper>\n            <RcButton\n              data-sign=\"submit\"\n              size=\"large\"\n              fullWidth\n              disabled={disableDispose}\n              loading={isLoading}\n              onClick={() => disposeCall()}\n            >\n              {getButtonText(saveStatus, currentLocale)}\n            </RcButton>\n          </SubmitButtonWrapper>\n        )}\n      </CallLogPanel>\n    );\n  };\n\nActivityCallLogPanel.defaultProps = {\n  basicInfo: {},\n};\n"],"file":"ActivityCallLogPanel.js"}