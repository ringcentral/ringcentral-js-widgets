{"version":3,"sources":["components/InnerTopic/index.tsx"],"names":["InnerTopic","ref","name","currentLocale","defaultTopic","updateMeetingTopic","topic","setTopic","isTopicChange","setIsTopicChange","inputRef","value","i18n","getString","maxLength","e","target","root","styles","input","Topic","React","memo","prevProps","nextProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAUA;;AACA;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,UAAU,gBAAG,uBACjB,gBAA4DC,GAA5D,EAAoE;AAAA,MAAjEC,IAAiE,QAAjEA,IAAiE;AAAA,MAA3DC,aAA2D,QAA3DA,aAA2D;AAAA,MAA5CC,YAA4C,QAA5CA,YAA4C;AAAA,MAA9BC,kBAA8B,QAA9BA,kBAA8B;;AAAA,kBACxC,qBAASH,IAAI,IAAIE,YAAjB,CADwC;AAAA;AAAA,MAC3DE,KAD2D;AAAA,MACpDC,QADoD;;AAAA,mBAExB,qBAAS,KAAT,CAFwB;AAAA;AAAA,MAE3DC,aAF2D;AAAA,MAE5CC,gBAF4C;;AAGlE,MAAMC,QAAQ,GAAG,oBAAjB,CAHkE,CAKlE;AACA;;AACA,wBAAU,YAAM;AACd,QAAI,CAACF,aAAL,EAAoB;AAClBD,MAAAA,QAAQ,CAACH,YAAD,CAAR;AACD;AACF,GAJD,EAIG,CAACA,YAAD,EAAeI,aAAf,CAJH;AAMA,kCACEP,GADF,EAEE;AAAA,WAAO;AACLU,MAAAA,KAAK,EAAEL;AADF,KAAP;AAAA,GAFF,EAKE,CAACA,KAAD,CALF;AAQA,sBACE,gCAAC,sBAAD;AACE,IAAA,GAAG,EAAEI,QADP;AAEE,IAAA,KAAK,EAAEE,iBAAKC,SAAL,CAAe,OAAf,EAAwBV,aAAxB,CAFT;AAGE,iBAAU,OAHZ;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,QAAQ,EAAE,KALZ;AAME,IAAA,KAAK,EAAEG,KANT;AAOE,IAAA,UAAU,EAAE;AACVQ,MAAAA,SAAS,EAAE;AADD,KAPd;AAUE,IAAA,QAAQ,EAAE,kBAACC,CAAD,EAAO;AACfN,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAF,MAAAA,QAAQ,CAACQ,CAAC,CAACC,MAAF,CAASL,KAAV,CAAR;AACD,KAbH;AAcE,IAAA,MAAM,EAAE,kBAAM;AACZN,MAAAA,kBAAkB,CAACC,KAAD,CAAlB;AACD,KAhBH;AAiBE,IAAA,OAAO,EAAE;AACPW,MAAAA,IAAI,EAAEC,mBAAOC;AADN,KAjBX;AAoBE,IAAA,YAAY;AApBd,IADF;AAwBD,CA9CgB,CAAnB;;AAiDO,IAAMC,KAAK,gBAAGC,kBAAMC,IAAN,CACnBtB,UADmB,EAEnB,UAACuB,SAAD,EAAYC,SAAZ;AAAA,SACED,SAAS,CAACrB,IAAV,KAAmBsB,SAAS,CAACtB,IAA7B,IACAqB,SAAS,CAACpB,aAAV,KAA4BqB,SAAS,CAACrB,aAFxC;AAAA,CAFmB,CAAd","sourcesContent":["import React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\n\nimport { RcTextField } from '@ringcentral/juno';\n\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\ntype TopicProps = {\n  name: string;\n  currentLocale: string;\n  defaultTopic: string;\n  updateMeetingTopic: (name: string) => void;\n};\n\nexport type TopicRef = {\n  value: string;\n};\n\nconst InnerTopic = forwardRef<TopicRef, TopicProps>(\n  ({ name, currentLocale, defaultTopic, updateMeetingTopic }, ref) => {\n    const [topic, setTopic] = useState(name || defaultTopic);\n    const [isTopicChange, setIsTopicChange] = useState(false);\n    const inputRef = useRef();\n\n    // DefaultTopic has translation, If user change browser language, defaultTopic need to be switch to corresponding language.\n    // If user has input the topic custom. we don't need to update default topic anymore.\n    useEffect(() => {\n      if (!isTopicChange) {\n        setTopic(defaultTopic);\n      }\n    }, [defaultTopic, isTopicChange]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        value: topic,\n      }),\n      [topic],\n    );\n\n    return (\n      <RcTextField\n        ref={inputRef}\n        label={i18n.getString('topic', currentLocale)}\n        data-sign=\"topic\"\n        fullWidth\n        clearBtn={false}\n        value={topic}\n        inputProps={{\n          maxLength: 255,\n        }}\n        onChange={(e) => {\n          setIsTopicChange(true);\n          setTopic(e.target.value);\n        }}\n        onBlur={() => {\n          updateMeetingTopic(topic);\n        }}\n        classes={{\n          root: styles.input,\n        }}\n        gutterBottom\n      />\n    );\n  },\n);\n\nexport const Topic = React.memo(\n  InnerTopic,\n  (prevProps, nextProps) =>\n    prevProps.name === nextProps.name &&\n    prevProps.currentLocale === nextProps.currentLocale,\n);\n"],"file":"index.js"}