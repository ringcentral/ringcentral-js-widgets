{"version":3,"sources":["components/LogNotificationV2/index.tsx"],"names":["viewport","document","querySelector","CallIcon","title","iconClassName","styles","iconSize","propTypes","PropTypes","string","isRequired","defaultProps","callIconMap","callDirections","inbound","dynamicsFont","outbound","LogNotification","formatPhone","currentLog","currentLocale","showLogButton","isExpand","onDiscard","onSave","onExpand","currentSession","onReject","onHangup","showEndButton","shrinkNotification","anchorEl","React","useRef","renderEndButton","callStatus","direction","isInComingCall","telephonyStatuses","ringing","endTitle","i18n","getString","endAction","isRinging","callControlI18n","endBtn","actionItem","renderLogButton","logBtn","current","vertical","horizontal","modalAnimation","menuItem","call","logName","to","from","number","phoneNumber","extensionNumber","formatNumber","container","callInfo","callIcon","contactInfo","contactName","callActions","bool","object","func","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport callDirections from '@ringcentral-integration/commons/enums/callDirections';\nimport telephonyStatuses from '@ringcentral-integration/commons/enums/telephonyStatus';\nimport { RcMenuItem, RcMenuList, RcPopover } from '@ringcentral/juno';\n\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport EndIcon from '../../assets/images/Hangup.svg';\nimport LogClickIcon from '../../assets/images/LogClick.svg';\nimport LogUnclickIcon from '../../assets/images/LogUnclick.svg';\nimport VoicemailRed from '../../assets/images/VoicemailRed.svg';\nimport { Button } from '../Button';\nimport callControlI18n from '../SmCallControl/i18n';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\nconst viewport = document.querySelector('div#viewport');\nconst CallIcon = ({ title, iconClassName }) => (\n  <span className={classnames(iconClassName, styles.iconSize)} title={title} />\n);\n\nCallIcon.propTypes = {\n  title: PropTypes.string,\n  iconClassName: PropTypes.string.isRequired,\n};\n\nCallIcon.defaultProps = {\n  title: '',\n};\n\nconst callIconMap = {\n  [callDirections.inbound]: dynamicsFont.inbound,\n  [callDirections.outbound]: dynamicsFont.outbound,\n};\nfunction LogNotification({\n  formatPhone,\n  currentLog,\n  currentLocale,\n  showLogButton,\n  isExpand,\n  onDiscard,\n  onSave,\n  onExpand,\n  currentSession,\n  onReject,\n  onHangup,\n  showEndButton = true,\n  shrinkNotification,\n}) {\n  const anchorEl = React.useRef(null);\n  const renderEndButton =\n    showEndButton && currentSession\n      ? () => {\n          const { callStatus, direction } = currentSession;\n          const isInComingCall =\n            callDirections.inbound === direction &&\n            telephonyStatuses.ringing === callStatus;\n          const endTitle = isInComingCall\n            ? i18n.getString('reject', currentLocale)\n            : i18n.getString('hangup', currentLocale);\n          const endAction = isInComingCall ? onReject : onHangup;\n          const isRinging = telephonyStatuses.ringing === callStatus;\n          return (\n            <Button\n              tooltip={callControlI18n.getString(endTitle, currentLocale)}\n              onClick={endAction}\n              className={classnames(styles.endBtn, styles.actionItem)}\n            >\n              {isRinging ? <VoicemailRed /> : <EndIcon />}\n            </Button>\n          );\n        }\n      : null;\n  const renderLogButton = showLogButton\n    ? () => {\n        return (\n          <>\n            <div ref={anchorEl}>\n              <Button\n                tooltip={i18n.getString('log', currentLocale)}\n                disabled={isExpand}\n                onClick={() => onExpand()}\n                className={classnames(styles.logBtn, styles.actionItem)}\n              >\n                {!isExpand ? <LogUnclickIcon /> : <LogClickIcon />}\n              </Button>\n            </div>\n            <RcPopover\n              open={!!anchorEl.current && isExpand}\n              anchorEl={anchorEl.current}\n              onClose={() => shrinkNotification()}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              closeAfterTransition\n              container={viewport}\n              className={styles.modalAnimation}\n            >\n              <RcMenuList>\n                <RcMenuItem\n                  onClick={() => onSave()}\n                  className={styles.menuItem}\n                >\n                  {i18n.getString('save', currentLocale)}\n                </RcMenuItem>\n                <RcMenuItem\n                  onClick={() => onDiscard()}\n                  className={styles.menuItem}\n                >\n                  {i18n.getString('discard', currentLocale)}\n                </RcMenuItem>\n              </RcMenuList>\n            </RcPopover>\n          </>\n        );\n      }\n    : null;\n\n  const { call, logName } = currentLog;\n  const { direction, to, from } = call;\n  const number =\n    direction === callDirections.outbound\n      ? to && (to.phoneNumber || to.extensionNumber)\n      : from && (from.phoneNumber || from.extensionNumber);\n  const formatNumber = formatPhone(number);\n  return (\n    <div className={styles.container}>\n      <div className={styles.callInfo}>\n        <div className={styles.callIcon}>\n          <CallIcon title={direction} iconClassName={callIconMap[direction]} />\n        </div>\n        <div className={styles.contactInfo}>\n          <p className={styles.contactName}>{logName}</p>\n          <p className={styles.phoneNumber}>{formatNumber}</p>\n        </div>\n        <div className={styles.callActions}>\n          {renderLogButton && renderLogButton()}\n          {renderEndButton && renderEndButton()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nLogNotification.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  showLogButton: PropTypes.bool,\n  currentLog: PropTypes.object,\n  formatPhone: PropTypes.func,\n  isExpand: PropTypes.bool,\n  onDiscard: PropTypes.func,\n  onSave: PropTypes.func,\n  onExpand: PropTypes.func,\n  currentSession: PropTypes.object,\n  onReject: PropTypes.func,\n  onHangup: PropTypes.func,\n  showEndButton: PropTypes.bool,\n  shrinkNotification: PropTypes.func,\n};\n\nLogNotification.defaultProps = {\n  showLogButton: true,\n  currentLog: {},\n  formatPhone: undefined,\n  isExpand: undefined,\n  onDiscard: undefined,\n  onSave: undefined,\n  onExpand: undefined,\n  currentSession: undefined,\n  onReject: () => null,\n  onHangup: () => null,\n  showEndButton: false,\n  shrinkNotification: undefined,\n};\n\nexport default LogNotification;\n"],"file":"index.js"}