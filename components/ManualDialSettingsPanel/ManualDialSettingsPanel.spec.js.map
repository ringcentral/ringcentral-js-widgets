{"version":3,"sources":["components/ManualDialSettingsPanel/ManualDialSettingsPanel.spec.tsx"],"names":["wrapper","currentLocale","pickListItems","key","label","name","wholeName","defaultSettingFields","dataSign","onChange","value","undefined","select","required","options","input","type","placeholder","setup","goBack","settingFields","afterEach","unmount","describe","it","jest","fn","expect","find","text","toBe","i18n","getString","at","simulate","toBeCalled","customInput","onBlur","min","max","rcTextField","toContain","not","prop","changeValue","target","toBeCalledWith"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { mount } from 'enzyme';\n\nimport { RcThemeProvider } from '@ringcentral/juno';\n\nimport i18n from '../../modules/EvManualDialSettingsUI/i18n';\nimport {\n  ManualDialSettingsPanel,\n  ManualDialSettingsPanelProps,\n} from './ManualDialSettingsPanel';\n\nlet wrapper;\nconst currentLocale = 'en-US';\nconst pickListItems = [\n  {\n    key: '101',\n    label: 'work',\n    name: 'work name',\n    wholeName: 'work name whole',\n  },\n  {\n    key: '102',\n    label: 'study',\n    name: 'studyname',\n    wholeName: 'studyname  whole',\n  },\n];\n\nconst defaultSettingFields = [\n  {\n    dataSign: 'callerId',\n    onChange: () => null,\n    value: undefined,\n    select: {\n      label: 'Call ID',\n      required: true,\n      options: pickListItems,\n    },\n  },\n  {\n    dataSign: 'ringTime',\n    onChange: () => null,\n    value: undefined,\n    input: {\n      required: true,\n      label: 'Ring time (seconds)',\n      type: 'text',\n      placeholder: 'input holder',\n    },\n  },\n];\n\nfunction setup({\n  goBack = () => {},\n  settingFields = defaultSettingFields,\n}: Partial<ManualDialSettingsPanelProps>) {\n  return mount(\n    <RcThemeProvider>\n      <ManualDialSettingsPanel\n        currentLocale={currentLocale}\n        goBack={goBack}\n        settingFields={settingFields}\n        init={() => {}}\n        save={() => {}}\n      />\n    </RcThemeProvider>,\n  );\n}\n\nafterEach(async () => {\n  wrapper.unmount();\n});\n\ndescribe('<ManualDialSettingsPanel />', () => {\n  it('Display Back Button and when user click it, function goBack will be called', () => {\n    const goBack = jest.fn();\n    wrapper = setup({ goBack });\n    expect(wrapper.find('.title').text()).toBe(\n      i18n.getString('manualDialSettings', currentLocale),\n    );\n\n    wrapper\n      .find('[data-sign=\"backButton\"]')\n      .at(0)\n      .find('button')\n      .simulate('click');\n    expect(goBack).toBeCalled();\n  });\n\n  // Declan: I thinks that is not need, that is too detail about render, just using snapshot is ok\n\n  // it('Can render select, input list respectively', () => {\n  //   wrapper = setup({});\n  //   defaultSettingFields.forEach((field) => {\n  //     if (field.select) {\n  //       const pickList = wrapper.find(\n  //         `PickList[data-sign=\"${field.dataSign}\"]`,\n  //       );\n  //       expect(pickList).toHaveLength(1);\n  //       expect(pickList.find('label').text()).toContain(field.select.label);\n  //       expect(pickList.find('label').text()).toContain('*');\n  //       expect(pickList.find('input').prop('value')).toBe('');\n  //     }\n  //     if (field.input) {\n  //       const rcTextField = wrapper.find(\n  //         `RcTextField[data-sign=\"${field.dataSign}\"]`,\n  //       );\n  //       expect(rcTextField).toHaveLength(1);\n  //       expect(rcTextField.find('label').text()).toContain(field.input.label);\n  //       expect(rcTextField.find('label').text()).toContain('*');\n  //       expect(rcTextField.find('input').prop('value')).toBe('');\n  //     }\n  //   });\n  // });\n\n  // it('Check PickList from settingFields can render correctly', () => {\n  //   const customSelect = {\n  //     dataSign: 'callerId',\n  //     value: '101',\n  //     onChange: jest.fn(),\n  //     select: {\n  //       options: pickListItems,\n  //       label: 'Color Dropdown',\n  //       required: false,\n  //       optionValueKey: 'key',\n  //       optionKey: 'name',\n  //       renderValue: jest.fn(\n  //         (n) => pickListItems.find((item) => item.key === n).name,\n  //       ),\n  //       renderItem: jest.fn((item) => item.wholeName),\n  //     },\n  //   };\n\n  //   wrapper = setup({\n  //     settingFields: [customSelect],\n  //   });\n  //   const pickList = wrapper.find(\n  //     `PickList[data-sign=\"${customSelect.dataSign}\"]`,\n  //   );\n  //   expect(pickList.find('label').text()).toContain(customSelect.select.label);\n  //   expect(pickList.find('label').text()).not.toContain('*');\n  //   expect(pickList.find('input').prop('value')).toBe(customSelect.value);\n  //   const baseButton = wrapper.find('[role=\"button\"]');\n  //   expect(baseButton.text()).toBe(\n  //     customSelect.select.renderValue(customSelect.value),\n  //   );\n  //   baseButton.simulate('click');\n  //   const menuItems = document.body.querySelectorAll<HTMLInputElement>(\n  //     '[role=\"presentation\"] li[role=\"option\"]',\n  //   );\n  //   expect(customSelect.select.renderItem).toBeCalledTimes(\n  //     pickListItems.length,\n  //   );\n  //   expect(menuItems).toHaveLength(pickListItems.length);\n  //   menuItems.forEach((el, index) => {\n  //     expect(el.textContent).toBe(\n  //       customSelect.select.renderItem(pickListItems[index]),\n  //     );\n  //     expect(el.dataset.value).toBe(\n  //       pickListItems[index][customSelect.select.optionValueKey],\n  //     );\n  //   });\n  //   const selectIndex = 1;\n  //   menuItems[selectIndex].click();\n  //   expect(customSelect.onChange).toBeCalledWith(\n  //     pickListItems[selectIndex][customSelect.select.optionValueKey],\n  //   );\n  // });\n\n  it('Check input can render correctly', () => {\n    const customInput = {\n      dataSign: 'ringTime',\n      value: '30',\n      onChange: jest.fn(),\n      onBlur: jest.fn(),\n      input: {\n        type: 'number',\n        label: 'Ring time (seconds)',\n        required: false,\n        placeholder: 'Ring time (seconds)',\n        min: 20,\n        max: 120,\n      },\n    };\n\n    wrapper = setup({\n      settingFields: [customInput],\n    });\n    const rcTextField = wrapper.find(\n      `RcTextField[data-sign=\"${customInput.dataSign}\"]`,\n    );\n    const input = rcTextField.find('input');\n    expect(rcTextField.find('label').text()).toContain(customInput.input.label);\n    expect(rcTextField.find('label').text()).not.toContain('*');\n    expect(input.prop('required')).toBe(customInput.input.required);\n    expect(input.prop('value')).toBe(customInput.value);\n    expect(input.prop('placeholder')).toBe(customInput.input.placeholder);\n    expect(input.prop('type')).toBe(customInput.input.type);\n    expect(input.prop('min')).toBe(customInput.input.min);\n    expect(input.prop('max')).toBe(customInput.input.max);\n\n    input.simulate('blur');\n    expect(customInput.onBlur).toBeCalled();\n\n    const changeValue = 35;\n    input.simulate('change', { target: { value: changeValue } });\n    expect(customInput.onChange).toBeCalledWith(changeValue);\n  });\n});\n"],"file":"ManualDialSettingsPanel.spec.js"}