{"version":3,"sources":["components/AlertRenderer/RateExceededAlert/index.tsx"],"names":["calculateState","duration","timestamp","ttl","Math","max","floor","Date","now","RequestRateExceededAlert","props","state","timer","setInterval","setState","nextProps","clearInterval","i18n","getString","currentLocale","Component","handleMessage","message","errorMessages","rateLimitReached"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,cAAT,CAAwBC,QAAxB,EAAkCC,SAAlC,EAA6C;AAC3C,SAAO;AACLC,IAAAA,GAAG,EAAEC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAW,CAACL,QAAQ,IAAIM,IAAI,CAACC,GAAL,KAAaN,SAAjB,CAAT,IAAwC,IAAnD,CAAT,EAAmE,CAAnE;AADA,GAAP;AAGD;;IASKO,wB;;;;;AAIJ,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAaX,cAAc,CAACU,KAAK,CAACT,QAAP,EAAiBS,KAAK,CAACR,SAAvB,CAA3B;AAFiB;AAGlB;;;;wCACmB;AAAA;;AAClB,WAAKU,KAAL,GAAaC,WAAW,CAAC,YAAM;AAC7B,QAAA,MAAI,CAACC,QAAL,CAAcd,cAAc,CAAC,MAAI,CAACU,KAAL,CAAWT,QAAZ,EAAsB,MAAI,CAACS,KAAL,CAAWR,SAAjC,CAA5B;AACD,OAFuB,EAErB,IAFqB,CAAxB;AAGD;;;8CACyBa,S,EAAW;AACnC,WAAKD,QAAL,CAAcd,cAAc,CAACe,SAAS,CAACd,QAAX,EAAqBc,SAAS,CAACb,SAA/B,CAA5B;AACD;;;2CACsB;AACrBc,MAAAA,aAAa,CAAC,KAAKJ,KAAN,CAAb;AACD;;;6BACQ;AACP,0BACE,gCAAC,4BAAD;AACE,QAAA,OAAO,EAAEK,iBAAKC,SAAL,CAAe,cAAf,EAA+B,KAAKR,KAAL,CAAWS,aAA1C,CADX;AAEE,QAAA,MAAM,EAAE;AAAEhB,UAAAA,GAAG,EAAE,KAAKQ,KAAL,CAAWR;AAAlB;AAFV,QADF;AAMD;;;;EA1BoCiB,gB;;AA4BvCX,wBAAwB,CAACY,aAAzB,GAAyC;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SACvCA,OAAO,KAAKC,0BAAcC,gBADa;AAAA,CAAzC;;eAEef,wB","sourcesContent":["import React, { Component } from 'react';\n\nimport errorMessages from '@ringcentral-integration/commons/modules/RateLimiter/errorMessages';\n\nimport FormattedMessage from '../../FormattedMessage';\nimport i18n from './i18n';\n\nfunction calculateState(duration, timestamp) {\n  return {\n    ttl: Math.max(Math.floor((duration - (Date.now() - timestamp)) / 1000), 0),\n  };\n}\ntype RequestRateExceededAlertProps = {\n  timestamp: number;\n  duration: number;\n  currentLocale: string;\n};\ntype RequestRateExceededAlertState = {\n  ttl: number;\n};\nclass RequestRateExceededAlert extends Component<\n  RequestRateExceededAlertProps,\n  RequestRateExceededAlertState\n> {\n  constructor(props) {\n    super(props);\n    this.state = calculateState(props.duration, props.timestamp);\n  }\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState(calculateState(this.props.duration, this.props.timestamp));\n    }, 1000);\n  }\n  componentWillReceiveProps(nextProps) {\n    this.setState(calculateState(nextProps.duration, nextProps.timestamp));\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n  render() {\n    return (\n      <FormattedMessage\n        message={i18n.getString('rateExceeded', this.props.currentLocale)}\n        values={{ ttl: this.state.ttl }}\n      />\n    );\n  }\n}\nRequestRateExceededAlert.handleMessage = ({ message }) =>\n  message === errorMessages.rateLimitReached;\nexport default RequestRateExceededAlert;\n"],"file":"index.js"}