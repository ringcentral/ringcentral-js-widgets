{"version":3,"sources":["components/AlertRenderer/WebphoneAlert/index.tsx"],"names":["webphoneMessageList","webphoneErrors","connectFailed","toVoiceMailError","connected","muteError","holdError","flipError","recordError","pauseRecordError","recordDisabled","transferError","noOutboundCallWithoutDL","checkDLError","browserNotSupported","sipProvisionError","webphoneCountOverLimit","webphoneForbidden","requestTimeout","serverTimeout","internalServerError","unknownError","provisionUpdate","serverConnecting","webphoneMessages","parked","WebphoneAlert","props","message","view","i18n","getString","currentLocale","payload","errorCode","statusCode","isConnecting","brandName","brand","name","parkedNumber","handleMessage","filter","err","length"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport webphoneErrors from '@ringcentral-integration/commons/modules/Webphone/webphoneErrors';\nimport webphoneMessages from '@ringcentral-integration/commons/modules/Webphone/webphoneMessages';\n\nimport FormattedMessage from '../../FormattedMessage';\nimport i18n from './i18n';\n\nconst webphoneMessageList = [\n  webphoneErrors.connectFailed,\n  webphoneErrors.toVoiceMailError,\n  webphoneErrors.connected,\n  webphoneErrors.muteError,\n  webphoneErrors.holdError,\n  webphoneErrors.flipError,\n  webphoneErrors.recordError,\n  webphoneErrors.pauseRecordError,\n  webphoneErrors.recordDisabled,\n  webphoneErrors.transferError,\n  webphoneErrors.noOutboundCallWithoutDL,\n  webphoneErrors.checkDLError,\n  webphoneErrors.browserNotSupported,\n  webphoneErrors.sipProvisionError,\n  webphoneErrors.webphoneCountOverLimit,\n  webphoneErrors.webphoneForbidden,\n  webphoneErrors.requestTimeout,\n  webphoneErrors.serverTimeout,\n  webphoneErrors.internalServerError,\n  webphoneErrors.unknownError,\n  webphoneErrors.provisionUpdate,\n  webphoneErrors.serverConnecting,\n  webphoneMessages.parked,\n];\ntype WebphoneAlertProps = {\n  currentLocale: string;\n  brand: object;\n  message: {\n    message: string;\n  };\n};\nconst WebphoneAlert: React.SFC<WebphoneAlertProps> = (props) => {\n  const { message } = props.message;\n  let view = <span>{i18n.getString(message, props.currentLocale)}</span>;\n  // Handle call record error\n  if (message === webphoneErrors.recordError) {\n    const { payload: { errorCode } = {} } = props.message;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ errorCode }}\n      />\n    );\n  } else if (\n    message === webphoneErrors.sipProvisionError ||\n    message === webphoneErrors.webphoneForbidden ||\n    message === webphoneErrors.requestTimeout ||\n    message === webphoneErrors.serverTimeout ||\n    message === webphoneErrors.internalServerError ||\n    message === webphoneErrors.unknownError\n  ) {\n    const { payload: { statusCode, isConnecting = false } = {} } =\n      props.message;\n    // sipProvisionError does not have statusCode\n    if (statusCode && isConnecting) {\n      view = (\n        <FormattedMessage\n          message={i18n.getString(\n            'registeringWithStatusCode',\n            props.currentLocale,\n          )}\n          values={{ errorCode: statusCode, brandName: props.brand.name }}\n        />\n      );\n    } else if (statusCode) {\n      view = (\n        <FormattedMessage\n          message={i18n.getString('failWithStatusCode', props.currentLocale)}\n          values={{ errorCode: statusCode, brandName: props.brand.name }}\n        />\n      );\n    } else if (isConnecting) {\n      view = (\n        <FormattedMessage\n          message={i18n.getString(\n            'registeringWithoutStatusCode',\n            props.currentLocale,\n          )}\n          values={{ brandName: props.brand.name }}\n        />\n      );\n    } else {\n      view = (\n        <FormattedMessage\n          message={i18n.getString('failWithoutStatusCode', props.currentLocale)}\n          values={{ brandName: props.brand.name }}\n        />\n      );\n    }\n  } else if (message === webphoneErrors.checkDLError) {\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ brandName: props.brand.name }}\n      />\n    );\n  } else if (message === webphoneMessages.parked) {\n    const { payload: { parkedNumber } = {} } = props.message;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ parkedNumber }}\n      />\n    );\n  }\n  return view;\n};\nWebphoneAlert.handleMessage = ({ message }) =>\n  webphoneMessageList.filter((err) => err === message).length > 0;\nexport default WebphoneAlert;\n"],"file":"index.js"}