{"version":3,"file":"index.js","names":["_react","_interopRequireDefault","require","_propTypes","_classnames","_default_avatar","_styles","obj","__esModule","GroupAvatar","_ref","persons","className","unread","image","length","personsWithoutMe","filter","p","isMe","person","createElement","styles","big","src","avatar","defaultAvatar","alt","id","images","slice","map","key","small","unreadEl","classnames","root","propTypes","PropTypes","string","array","number","defaultProps","undefined","_default","exports"],"sources":["components/GlipGroupAvatar/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport defaultAvatar from '../../assets/images/default_avatar.png';\nimport styles from './styles.scss';\n\nfunction GroupAvatar({ persons, className, unread }) {\n  let image;\n  if (persons.length <= 2) {\n    const personsWithoutMe = persons.filter((p) => !p.isMe);\n    const person = personsWithoutMe && personsWithoutMe[0];\n    image = (\n      <img\n        className={styles.big}\n        src={(person && person.avatar) || defaultAvatar}\n        alt={person && person.id}\n      />\n    );\n  } else {\n    image = (\n      <div className={styles.images}>\n        {persons.slice(0, 9).map((person) => (\n          <img\n            key={person.id}\n            className={styles.small}\n            src={(person && person.avatar) || defaultAvatar}\n            alt={person && person.id}\n          />\n        ))}\n      </div>\n    );\n  }\n  let unreadEl;\n  if (unread > 0) {\n    unreadEl = (\n      <span className={styles.unread}>{unread > 99 ? '99+' : unread}</span>\n    );\n  }\n  return (\n    <div className={classnames(styles.root, className)}>\n      {image}\n      {unreadEl}\n    </div>\n  );\n}\n\nGroupAvatar.propTypes = {\n  className: PropTypes.string,\n  persons: PropTypes.array,\n  unread: PropTypes.number,\n};\n\nGroupAvatar.defaultProps = {\n  className: undefined,\n  unread: 0,\n  persons: [],\n};\n\nexport default GroupAvatar;\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,WAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,eAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,OAAA,GAAAL,sBAAA,CAAAC,OAAA;AAAmC,SAAAD,uBAAAM,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAEnC,SAASE,WAAWA,CAAAC,IAAA,EAAiC;EAAA,IAA9BC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAEC,SAAS,GAAAF,IAAA,CAATE,SAAS;IAAEC,MAAM,GAAAH,IAAA,CAANG,MAAM;EAC/C,IAAIC,KAAK;EACT,IAAIH,OAAO,CAACI,MAAM,IAAI,CAAC,EAAE;IACvB,IAAMC,gBAAgB,GAAGL,OAAO,CAACM,MAAM,CAAC,UAACC,CAAC;MAAA,OAAK,CAACA,CAAC,CAACC,IAAI;IAAA,EAAC;IACvD,IAAMC,MAAM,GAAGJ,gBAAgB,IAAIA,gBAAgB,CAAC,CAAC,CAAC;IACtDF,KAAK,gBACHd,MAAA,YAAAqB,aAAA;MACET,SAAS,EAAEU,kBAAM,CAACC,GAAI;MACtBC,GAAG,EAAGJ,MAAM,IAAIA,MAAM,CAACK,MAAM,IAAKC,0BAAc;MAChDC,GAAG,EAAEP,MAAM,IAAIA,MAAM,CAACQ;IAAG,CAC1B,CACF;EACH,CAAC,MAAM;IACLd,KAAK,gBACHd,MAAA,YAAAqB,aAAA;MAAKT,SAAS,EAAEU,kBAAM,CAACO;IAAO,GAC3BlB,OAAO,CAACmB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAC,UAACX,MAAM;MAAA,oBAC9BpB,MAAA,YAAAqB,aAAA;QACEW,GAAG,EAAEZ,MAAM,CAACQ,EAAG;QACfhB,SAAS,EAAEU,kBAAM,CAACW,KAAM;QACxBT,GAAG,EAAGJ,MAAM,IAAIA,MAAM,CAACK,MAAM,IAAKC,0BAAc;QAChDC,GAAG,EAAEP,MAAM,IAAIA,MAAM,CAACQ;MAAG,CAC1B,CAAC;IAAA,CACH,CACE,CACN;EACH;EACA,IAAIM,QAAQ;EACZ,IAAIrB,MAAM,GAAG,CAAC,EAAE;IACdqB,QAAQ,gBACNlC,MAAA,YAAAqB,aAAA;MAAMT,SAAS,EAAEU,kBAAM,CAACT;IAAO,GAAEA,MAAM,GAAG,EAAE,GAAG,KAAK,GAAGA,MAAa,CACrE;EACH;EACA,oBACEb,MAAA,YAAAqB,aAAA;IAAKT,SAAS,EAAE,IAAAuB,sBAAU,EAACb,kBAAM,CAACc,IAAI,EAAExB,SAAS;EAAE,GAChDE,KAAK,EACLoB,QACE,CAAC;AAEV;AAEAzB,WAAW,CAAC4B,SAAS,GAAG;EACtBzB,SAAS,EAAE0B,qBAAS,CAACC,MAAM;EAC3B5B,OAAO,EAAE2B,qBAAS,CAACE,KAAK;EACxB3B,MAAM,EAAEyB,qBAAS,CAACG;AACpB,CAAC;AAEDhC,WAAW,CAACiC,YAAY,GAAG;EACzB9B,SAAS,EAAE+B,SAAS;EACpB9B,MAAM,EAAE,CAAC;EACTF,OAAO,EAAE;AACX,CAAC;AAAC,IAAAiC,QAAA,GAEanC,WAAW;AAAAoC,OAAA,cAAAD,QAAA"}