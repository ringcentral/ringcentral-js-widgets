{"version":3,"sources":["components/InboundQueuesPanel/InboundQueuesPanel.ut.tsx"],"names":["renderFunction","option","gateName","searchOption","text","toLowerCase","includes","currentLocale","setInboundQueues","console","log","getAssignedInboundQueues","inboundQueues","filter","checked","isAllAssign","assignedInboundQueues","length","isSeveralAssign","checkBoxOnChange","gateId","inboundQueuesState","setInboundQueuesState","index","findIndex","allCheckBoxOnChange","severalAssign","map","goBack","setup","wrapper","inboundQueuesPanelCases","title","assignment","indeterminate","bulkClick","list","findElement","dataSign","find","at","CheckInboundQueuesPanel","simulate","expect","toBe","bulkChangeCheckBox","prop"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { mount } from 'enzyme';\n\nimport { StepFunction } from '@ringcentral-integration/test-utils';\nimport { RcThemeProvider } from '@ringcentral/juno';\n\nimport { InboundQueuesPanel } from './index';\n\nfunction renderFunction(option) {\n  return option.gateName;\n}\n\nfunction searchOption(option, text) {\n  return option?.gateName?.toLowerCase().includes(text.toLowerCase());\n}\n\nconst currentLocale = 'en-US';\n\nfunction setInboundQueues() {\n  console.log('====setInboundQueues');\n}\n\nfunction getAssignedInboundQueues(inboundQueues) {\n  return inboundQueues.filter(({ checked }) => checked);\n}\n\nfunction isAllAssign(assignedInboundQueues, inboundQueues) {\n  return (\n    !!assignedInboundQueues.length &&\n    assignedInboundQueues.length === inboundQueues.length\n  );\n}\n\nfunction isSeveralAssign(assignedInboundQueues, inboundQueues) {\n  return (\n    !!assignedInboundQueues.length &&\n    assignedInboundQueues.length !== inboundQueues.length\n  );\n}\n\nfunction checkBoxOnChange(gateId, inboundQueuesState, setInboundQueuesState) {\n  const inboundQueues = [...inboundQueuesState];\n  const index = inboundQueues.findIndex((option) => option.gateId === gateId);\n  inboundQueues[index].checked = !inboundQueues[index].checked;\n  setInboundQueuesState(inboundQueues);\n}\n\nfunction allCheckBoxOnChange(\n  severalAssign,\n  inboundQueuesState,\n  setInboundQueuesState,\n) {\n  const inboundQueues = inboundQueuesState.map((option) => {\n    option.checked = severalAssign || !option.checked;\n    return option;\n  });\n  setInboundQueuesState(inboundQueues);\n}\nconst goBack = () => {};\n\nfunction setup(inboundQueues) {\n  const wrapper = mount(\n    <RcThemeProvider>\n      <InboundQueuesPanel\n        renderFunction={renderFunction}\n        searchOption={searchOption}\n        currentLocale={currentLocale}\n        inboundQueues={inboundQueues}\n        submitInboundQueues={setInboundQueues}\n        getAssignedInboundQueues={getAssignedInboundQueues}\n        isAllAssign={isAllAssign}\n        isSeveralAssign={isSeveralAssign}\n        checkBoxOnChange={checkBoxOnChange}\n        allCheckBoxOnChange={allCheckBoxOnChange}\n        goBack={goBack}\n      />\n    </RcThemeProvider>,\n  );\n  return wrapper;\n}\n\nexport const inboundQueuesPanelCases = [\n  {\n    title: 'Assignment checkbox: indeterminate',\n    assignment: 1,\n    indeterminate: true,\n    checked: false,\n    bulkClick: false,\n    list: [\n      {\n        checked: false,\n        gateId: '001',\n        gateName: 'gateName1',\n      },\n      {\n        checked: false,\n        gateId: '002',\n        gateName: 'gateName2',\n      },\n      {\n        checked: true,\n        gateId: '003',\n        gateName: 'gateName3',\n      },\n    ],\n  },\n  {\n    title: 'Assignment checkbox: indeterminate -> all select',\n    assignment: 3,\n    indeterminate: false,\n    checked: true,\n    bulkClick: true,\n    list: [\n      {\n        checked: false,\n        gateId: '001',\n        gateName: 'gateName1',\n      },\n      {\n        checked: false,\n        gateId: '002',\n        gateName: 'gateName2',\n      },\n      {\n        checked: true,\n        gateId: '003',\n        gateName: 'gateName3',\n      },\n    ],\n  },\n  {\n    title: 'click Assignment checkbox: all select -> all unselect',\n    assignment: 0,\n    indeterminate: false,\n    checked: false,\n    bulkClick: true,\n    list: [\n      {\n        checked: true,\n        gateId: '001',\n        gateName: 'gateName1',\n      },\n      {\n        checked: true,\n        gateId: '002',\n        gateName: 'gateName2',\n      },\n      {\n        checked: true,\n        gateId: '003',\n        gateName: 'gateName3',\n      },\n    ],\n  },\n  {\n    title: 'click Assignment checkbox: all unselect -> all select',\n    assignment: 3,\n    indeterminate: false,\n    checked: true,\n    bulkClick: true,\n    list: [\n      {\n        checked: false,\n        gateId: '001',\n        gateName: 'gateName1',\n      },\n      {\n        checked: false,\n        gateId: '002',\n        gateName: 'gateName2',\n      },\n      {\n        checked: false,\n        gateId: '003',\n        gateName: 'gateName3',\n      },\n    ],\n  },\n];\n\nfunction findElement(wrapper, dataSign) {\n  return wrapper.find(`[data-sign=\"${dataSign}\"]`).at(0);\n}\n\nexport const CheckInboundQueuesPanel: StepFunction<any> = ({\n  list,\n  assignment,\n  indeterminate,\n  checked,\n  bulkClick,\n}) => {\n  const wrapper = setup(list);\n  if (bulkClick) {\n    findElement(wrapper, 'bulkChangeCheckBox').find('input').simulate('click');\n  }\n  expect(findElement(wrapper, 'selectedTips').text()).toBe(\n    `${assignment} of ${list.length} Selected`,\n  );\n  const bulkChangeCheckBox = findElement(wrapper, 'bulkChangeCheckBox');\n  expect(bulkChangeCheckBox.prop('indeterminate')).toBe(indeterminate);\n  expect(bulkChangeCheckBox.prop('checked')).toBe(checked);\n};\n"],"file":"InboundQueuesPanel.ut.js"}