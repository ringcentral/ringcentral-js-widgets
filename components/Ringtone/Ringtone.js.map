{"version":3,"sources":["components/Ringtone/Ringtone.tsx"],"names":["AudioFileReader","currentLocale","defaultFileName","defaultDataUrl","fileName","dataUrl","onChange","onReset","isMountedRef","audioElRef","inputElRef","playState","setPlayState","current","pause","currentTime","resetButton","i18n","getString","click","play","console","log","styles","hidden","currentTarget","files","length","file","reader","FileReader","onload","name","result","value","readAsDataURL","RingTone","incomingAudio","incomingAudioFile","outgoingAudio","outgoingAudioFile","defaultIncomingAudio","defaultIncomingAudioFile","defaultOutgoingAudio","defaultOutgoingAudioFile","showRingToneSettings","setIncomingAudio","setOutgoingAudio","resetIncomingAudio","resetOutgoingAudio"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAwD,GAAG,SAA3DA,eAA2D,OAQ3D;AAAA,MAPJC,aAOI,QAPJA,aAOI;AAAA,MANJC,eAMI,QANJA,eAMI;AAAA,MALJC,cAKI,QALJA,cAKI;AAAA,2BAJJC,QAII;AAAA,MAJJA,QAII,8BAJO,IAIP;AAAA,0BAHJC,OAGI;AAAA,MAHJA,OAGI,6BAHM,IAGN;AAAA,MAFJC,SAEI,QAFJA,QAEI;AAAA,MADJC,OACI,QADJA,OACI;AACJ,MAAMC,YAAY,GAAG,iCAArB;AACA,MAAMC,UAAU,GAAG,mBAAO,IAAP,CAAnB;AACA,MAAMC,UAAU,GAAG,mBAAO,IAAP,CAAnB;;AAHI,kBAI8B,qBAAS,KAAT,CAJ9B;AAAA;AAAA,MAIGC,SAJH;AAAA,MAIcC,YAJd;;AAMJ,wBAAU,YAAM;AACdH,IAAAA,UAAU,CAACI,OAAX,CAAmBC,KAAnB;AACAL,IAAAA,UAAU,CAACI,OAAX,CAAmBE,WAAnB,GAAiC,CAAjC;AACAH,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAJD,EAIG,CAACP,OAAD,CAJH;AAMA,MAAMW,WAAW,GACfZ,QAAQ,KAAKF,eAAb,IAAgCG,OAAO,KAAKF,cAA5C,gBACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEI;AAA/B,KACGU,iBAAKC,SAAL,CAAe,OAAf,EAAwBjB,aAAxB,CADH,CADF,GAII,IALN;AAOA,sBACE,0DACE,uDAAYG,QAAZ,CADF,eAEE,0DACE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAE,mBAAM;AACb,UAAIM,UAAU,CAACG,OAAf,EAAwB;AACtBH,QAAAA,UAAU,CAACG,OAAX,CAAmBM,KAAnB;AACD;AACF;AANH,KAQGF,iBAAKC,SAAL,CAAe,QAAf,EAAyBjB,aAAzB,CARH,CADF,EAWGe,WAXH,eAYE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,uEAAE;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHP,UAAU,CAACI,OADR;AAAA;AAAA;AAAA;;AAAA,mBAEDF,SAFC;AAAA;AAAA;AAAA;;AAGHF,cAAAA,UAAU,CAACI,OAAX,CAAmBC,KAAnB;AAHG;AAAA;;AAAA;AAAA;AAMDL,cAAAA,UAAU,CAACI,OAAX,CAAmBE,WAAnB,GAAiC,CAAjC;AANC;AAAA,qBAOKN,UAAU,CAACI,OAAX,CAAmBO,IAAnB,EAPL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AASD,kBAAIZ,YAAY,CAACK,OAAjB,EAA0B;AACxBQ,gBAAAA,OAAO,CAACC,GAAR;AACAD,gBAAAA,OAAO,CAACC,GAAR,CACE,sDADF;AAGD;;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;AAFT,KAsBGX,SAAS,GACNM,iBAAKC,SAAL,CAAe,MAAf,EAAuBjB,aAAvB,CADM,GAENgB,iBAAKC,SAAL,CAAe,MAAf,EAAuBjB,aAAvB,CAxBN,CAZF,CAFF,eAyCE;AACE,IAAA,GAAG,EAAES,UADP;AAEE,IAAA,SAAS,EAAEa,mBAAOC,MAFpB;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,QAAQ,EAAE,yBAAuB;AAAA,UAApBC,aAAoB,SAApBA,aAAoB;;AAC/B,UAAIA,aAAa,CAACC,KAAd,CAAoBC,MAAxB,EAAgC;AAC9B,YAAMC,IAAI,GAAGH,aAAa,CAACC,KAAd,CAAoB,CAApB,CAAb,CAD8B,CAE9B;AACA;;AACA,YAAMG,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,QAAAA,MAAM,CAACE,MAAP,GAAgB,YAAM;AACpB,cAAIvB,YAAY,CAACK,OAAjB,EAA0B;AACxBP,YAAAA,SAAQ,CAAC;AACPF,cAAAA,QAAQ,EAAEwB,IAAI,CAACI,IADR;AAEP3B,cAAAA,OAAO,EAAEwB,MAAM,CAACI;AAFT,aAAD,CAAR,CADwB,CAKxB;;;AACAR,YAAAA,aAAa,CAACS,KAAd,GAAsB,IAAtB;AACD;AACF,SATD;;AAUAL,QAAAA,MAAM,CAACM,aAAP,CAAqBP,IAArB;AACD;AACF;AAtBH,IAzCF,eAiEE;AACE,IAAA,GAAG,EAAEnB,UADP;AAEE,IAAA,SAAS,EAAEc,mBAAOC,MAFpB;AAGE,IAAA,GAAG,EAAEnB,OAHP;AAIE,IAAA,MAAM,EAAE,kBAAM;AACZO,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KANH;AAOE,IAAA,OAAO,EAAE,mBAAM;AACbA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AATH,IAjEF,CADF;AA+ED,CA1GD;;AA4GO,IAAMwB,QAA0C,GAAG,SAA7CA,QAA6C,QAepD;AAAA,MAdJnC,aAcI,SAdJA,aAcI;AAAA,MAbJoC,aAaI,SAbJA,aAaI;AAAA,MAZJC,iBAYI,SAZJA,iBAYI;AAAA,MAXJC,aAWI,SAXJA,aAWI;AAAA,MAVJC,iBAUI,SAVJA,iBAUI;AAAA,MATJC,oBASI,SATJA,oBASI;AAAA,MARJC,wBAQI,SARJA,wBAQI;AAAA,MAPJC,oBAOI,SAPJA,oBAOI;AAAA,MANJC,wBAMI,SANJA,wBAMI;AAAA,MALJC,oBAKI,SALJA,oBAKI;AAAA,MAJJC,gBAII,SAJJA,gBAII;AAAA,MAHJC,gBAGI,SAHJA,gBAGI;AAAA,MAFJC,kBAEI,SAFJA,kBAEI;AAAA,MADJC,kBACI,SADJA,kBACI;;AACJ,MAAIJ,oBAAJ,EAA0B;AACxB;AAAA;AACE;AACA,gEACE,uDACM5B,iBAAKC,SAAL,CAAe,WAAf,EAA4BjB,aAA5B,CADN,0BADF,eAIE,6CAAMgB,iBAAKC,SAAL,CAAe,kBAAf,EAAmCjB,aAAnC,CAAN,CAJF,eAKE,gCAAC,eAAD,EACM;AACFA,QAAAA,aAAa,EAAbA,aADE;AAEFG,QAAAA,QAAQ,EAAEkC,iBAFR;AAGFjC,QAAAA,OAAO,EAAEgC,aAHP;AAIFnC,QAAAA,eAAe,EAAEwC,wBAJf;AAKFvC,QAAAA,cAAc,EAAEsC,oBALd;AAMFnC,QAAAA,QAAQ,EAAE,yBAA2B;AAAA,cAAxBF,QAAwB,SAAxBA,QAAwB;AAAA,cAAdC,OAAc,SAAdA,OAAc;AACnCyC,UAAAA,gBAAgB,CAAC;AAAE1C,YAAAA,QAAQ,EAARA,QAAF;AAAYC,YAAAA,OAAO,EAAPA;AAAZ,WAAD,CAAhB;AACD,SARC;AASFE,QAAAA,OAAO,EAAEyC;AATP,OADN,CALF,eAkBE,6CAAM/B,iBAAKC,SAAL,CAAe,kBAAf,EAAmCjB,aAAnC,CAAN,CAlBF,eAmBE,gCAAC,eAAD,EACM;AACFA,QAAAA,aAAa,EAAbA,aADE;AAEFG,QAAAA,QAAQ,EAAEoC,iBAFR;AAGFnC,QAAAA,OAAO,EAAEkC,aAHP;AAIFrC,QAAAA,eAAe,EAAE0C,wBAJf;AAKFzC,QAAAA,cAAc,EAAEwC,oBALd;AAMFrC,QAAAA,QAAQ,EAAE,yBAA2B;AAAA,cAAxBF,QAAwB,SAAxBA,QAAwB;AAAA,cAAdC,OAAc,SAAdA,OAAc;AACnC0C,UAAAA,gBAAgB,CAAC;AAAE3C,YAAAA,QAAQ,EAARA,QAAF;AAAYC,YAAAA,OAAO,EAAPA;AAAZ,WAAD,CAAhB;AACD,SARC;AASFE,QAAAA,OAAO,EAAE0C;AATP,OADN,CAnBF;AAFF;AAoCD;;AACD,SAAO,IAAP;AACD,CAvDM","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from 'react';\n\nimport { useIsMounted } from '../../react-hooks/useIsMounted';\nimport i18n from './i18n';\nimport { AudioFileReaderProps, RingtoneProps } from './Ringtone.interface';\nimport styles from './styles.scss';\n\nconst AudioFileReader: FunctionComponent<AudioFileReaderProps> = ({\n  currentLocale,\n  defaultFileName,\n  defaultDataUrl,\n  fileName = null,\n  dataUrl = null,\n  onChange,\n  onReset,\n}) => {\n  const isMountedRef = useIsMounted();\n  const audioElRef = useRef(null);\n  const inputElRef = useRef(null);\n  const [playState, setPlayState] = useState(false);\n\n  useEffect(() => {\n    audioElRef.current.pause();\n    audioElRef.current.currentTime = 0;\n    setPlayState(false);\n  }, [dataUrl]);\n\n  const resetButton =\n    fileName !== defaultFileName || dataUrl !== defaultDataUrl ? (\n      <button type=\"button\" onClick={onReset}>\n        {i18n.getString('reset', currentLocale)}\n      </button>\n    ) : null;\n\n  return (\n    <div>\n      <div>File: {fileName}</div>\n      <div>\n        <button\n          type=\"button\"\n          onClick={() => {\n            if (inputElRef.current) {\n              inputElRef.current.click();\n            }\n          }}\n        >\n          {i18n.getString('upload', currentLocale)}\n        </button>\n        {resetButton}\n        <button\n          type=\"button\"\n          onClick={async () => {\n            if (audioElRef.current) {\n              if (playState) {\n                audioElRef.current.pause();\n              } else {\n                try {\n                  audioElRef.current.currentTime = 0;\n                  await audioElRef.current.play();\n                } catch (err) {\n                  if (isMountedRef.current) {\n                    console.log(err);\n                    console.log(\n                      'Failed to play audio, please select a different file',\n                    );\n                  }\n                }\n              }\n            }\n          }}\n        >\n          {playState\n            ? i18n.getString('stop', currentLocale)\n            : i18n.getString('play', currentLocale)}\n        </button>\n      </div>\n      <input\n        ref={inputElRef}\n        className={styles.hidden}\n        type=\"file\"\n        onChange={({ currentTarget }) => {\n          if (currentTarget.files.length) {\n            const file = currentTarget.files[0];\n            // const canPlayType = audioElRef.current?.canPlayType(file.type);\n            // if (canPlayType !== '') {}\n            const reader = new FileReader();\n            reader.onload = () => {\n              if (isMountedRef.current) {\n                onChange({\n                  fileName: file.name,\n                  dataUrl: reader.result as string,\n                });\n                // reset input\n                currentTarget.value = null;\n              }\n            };\n            reader.readAsDataURL(file);\n          }\n        }}\n      />\n      <audio\n        ref={audioElRef}\n        className={styles.hidden}\n        src={dataUrl}\n        onPlay={() => {\n          setPlayState(true);\n        }}\n        onPause={() => {\n          setPlayState(false);\n        }}\n      />\n    </div>\n  );\n};\n\nexport const RingTone: FunctionComponent<RingtoneProps> = ({\n  currentLocale,\n  incomingAudio,\n  incomingAudioFile,\n  outgoingAudio,\n  outgoingAudioFile,\n  defaultIncomingAudio,\n  defaultIncomingAudioFile,\n  defaultOutgoingAudio,\n  defaultOutgoingAudioFile,\n  showRingToneSettings,\n  setIncomingAudio,\n  setOutgoingAudio,\n  resetIncomingAudio,\n  resetOutgoingAudio,\n}) => {\n  if (showRingToneSettings) {\n    return (\n      // newline\n      <div>\n        <div>\n          {`${i18n.getString('ringtones', currentLocale)} (Technical Preview)`}\n        </div>\n        <div>{i18n.getString('incomingRingtone', currentLocale)}</div>\n        <AudioFileReader\n          {...{\n            currentLocale,\n            fileName: incomingAudioFile,\n            dataUrl: incomingAudio,\n            defaultFileName: defaultIncomingAudioFile,\n            defaultDataUrl: defaultIncomingAudio,\n            onChange: ({ fileName, dataUrl }) => {\n              setIncomingAudio({ fileName, dataUrl });\n            },\n            onReset: resetIncomingAudio,\n          }}\n        />\n        <div>{i18n.getString('outgoingRingtone', currentLocale)}</div>\n        <AudioFileReader\n          {...{\n            currentLocale,\n            fileName: outgoingAudioFile,\n            dataUrl: outgoingAudio,\n            defaultFileName: defaultOutgoingAudioFile,\n            defaultDataUrl: defaultOutgoingAudio,\n            onChange: ({ fileName, dataUrl }) => {\n              setOutgoingAudio({ fileName, dataUrl });\n            },\n            onReset: resetOutgoingAudio,\n          }}\n        />\n      </div>\n    );\n  }\n  return null;\n};\n"],"file":"Ringtone.js"}